{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - August", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i1ikj5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 33, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 33, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596269158.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i1ikj5", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i1ikj5/whos_hiring_typescript_developers_august/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/i1ikj5/whos_hiring_typescript_developers_august/", "subreddit_subscribers": 46183, "created_utc": 1596240358.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_g9cnt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I created a video to share 3 typing basics to improve your TypeScript code", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 105, "top_awarded_type": null, "hide_score": false, "name": "t3_i98t3e", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.85, "author_flair_background_color": null, "subreddit_type": "public", "ups": 23, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/UuBJrAZsp4Y?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "3 tips you probably didn't know about TypeScript", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/UuBJrAZsp4Y?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Justin Brooks", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/UuBJrAZsp4Y/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCro4e-xxAYrgwt5cOccnE0A"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/UuBJrAZsp4Y?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/i98t3e", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 23, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/dFduJl5FcY-q51us0DDpfeZfHD7Osg--8jr47eHe-00.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "rich:video", "content_categories": null, "is_self": false, "mod_note": null, "created": 1597383217.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=UuBJrAZsp4Y", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/iSAszzYXI460S3ERXio8OvwxdWy65RgPQD9jOq-lxfg.jpg?auto=webp&amp;s=3c25ccfae69a771baca1807bee5e01fe84c6775b", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/iSAszzYXI460S3ERXio8OvwxdWy65RgPQD9jOq-lxfg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=a53faafc24a4316643520c6b79f0bfa6d74d2cfc", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/iSAszzYXI460S3ERXio8OvwxdWy65RgPQD9jOq-lxfg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=204156a79c9390e6905f4e7f31c6f81428a30bdf", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/iSAszzYXI460S3ERXio8OvwxdWy65RgPQD9jOq-lxfg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7be3ef1754c529c2a9b39e3bf2c63f1af220fa1e", "width": 320, "height": 240}], "variants": {}, "id": "nm2Dhi80NBbs6AvM3djujMsN5TqES92VVplp8fKbBA0"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i98t3e", "is_robot_indexable": true, "report_reasons": null, "author": "InfoPaste", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i98t3e/i_created_a_video_to_share_3_typing_basics_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=UuBJrAZsp4Y", "subreddit_subscribers": 46183, "created_utc": 1597354417.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "3 tips you probably didn't know about TypeScript", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/UuBJrAZsp4Y?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Justin Brooks", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/UuBJrAZsp4Y/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCro4e-xxAYrgwt5cOccnE0A"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Proof of concept and API proposal for Typescript-focused, schema-based React form library:\n\n[https://codesandbox.io/s/formts-poc-3ryqv?file=/examples/example\\_1.tsx](https://codesandbox.io/s/formts-poc-3ryqv?file=/examples/example_1.tsx)\n\nThe sandbox contains README with more info and 5 examples of usage. The API is just a prototype but everything should be feasible to implement at this point.\n\nI'd like to know if there is any interest in such lib being implemented?\n\nEDIT: please see README in the sandbox for explanation why I though another form lib might be needed :)", "author_fullname": "t2_q2rs2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Working on TS focused React form lib - feedback needed", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i9a5s2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1597401950.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1597387722.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Proof of concept and API proposal for Typescript-focused, schema-based React form library:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://codesandbox.io/s/formts-poc-3ryqv?file=/examples/example_1.tsx\"&gt;https://codesandbox.io/s/formts-poc-3ryqv?file=/examples/example_1.tsx&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The sandbox contains README with more info and 5 examples of usage. The API is just a prototype but everything should be feasible to implement at this point.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d like to know if there is any interest in such lib being implemented?&lt;/p&gt;\n\n&lt;p&gt;EDIT: please see README in the sandbox for explanation why I though another form lib might be needed :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/lJQlBHN6nqL--Cp-Bd7uyjjLO-c_6Iura9SyszmQwY4.jpg?auto=webp&amp;s=fa7f18cd19caf9e6ab1b4696738f72e860562324", "width": 1200, "height": 630}, "resolutions": [{"url": "https://external-preview.redd.it/lJQlBHN6nqL--Cp-Bd7uyjjLO-c_6Iura9SyszmQwY4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=512d3319630044c1cd8618262108b2327a820081", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/lJQlBHN6nqL--Cp-Bd7uyjjLO-c_6Iura9SyszmQwY4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=430ef7bb4c26fd6fe7c2d67693442e9f9a06cb95", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/lJQlBHN6nqL--Cp-Bd7uyjjLO-c_6Iura9SyszmQwY4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=f5c73f6d00d51e5b3973cd368f638ac0b9fc2651", "width": 320, "height": 168}, {"url": "https://external-preview.redd.it/lJQlBHN6nqL--Cp-Bd7uyjjLO-c_6Iura9SyszmQwY4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3eb91fd0ca25f1469e63b5b69390c3d7f5fdef8e", "width": 640, "height": 336}, {"url": "https://external-preview.redd.it/lJQlBHN6nqL--Cp-Bd7uyjjLO-c_6Iura9SyszmQwY4.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=1847c8aeba79edcb65cabdcccf81cd0e21a3550e", "width": 960, "height": 504}, {"url": "https://external-preview.redd.it/lJQlBHN6nqL--Cp-Bd7uyjjLO-c_6Iura9SyszmQwY4.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=324e4318a3c3ce3d29b006c5cb267d39a689ca7c", "width": 1080, "height": 567}], "variants": {}, "id": "x3_dnImhSB9h1plpTVrzlCz8DjdNNI80fbDuIR3cAC0"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i9a5s2", "is_robot_indexable": true, "report_reasons": null, "author": "mixvar", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i9a5s2/working_on_ts_focused_react_form_lib_feedback/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i9a5s2/working_on_ts_focused_react_form_lib_feedback/", "subreddit_subscribers": 46183, "created_utc": 1597358922.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Eg. I have the following object:\n\n    type User = {\n        id: string\n        email: string\n        password: string\n    }\n\n    type UserProfile = User &amp; { name: string, dob: string }\n\n    function insert(user: User) {\n        UserDB.insert(user)\n    }\n\nSo I have a User, a UserProfile, and an insert function that inserts Users into the DB.\n\nNow my problem is that the insert function connects to a NoSQL DB. So I can technically pass in a UserProfile, and it will end up inserting the extra attributes into my NoSQL DB. Over time my NoSQL DB might end up with a lot of extra unnecessary attributes.\n\nI was wondering if there was an Exact&lt;T&gt; type that ensures you only have User.id, email &amp; password added in and nothing more.", "author_fullname": "t2_qenggvc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is there an 'Exact&lt;T&gt;' advanced type? Something that gurantees you can only put in the exact attributes required and no more?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i8vxz2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 30, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 30, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597334874.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Eg. I have the following object:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type User = {\n    id: string\n    email: string\n    password: string\n}\n\ntype UserProfile = User &amp;amp; { name: string, dob: string }\n\nfunction insert(user: User) {\n    UserDB.insert(user)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So I have a User, a UserProfile, and an insert function that inserts Users into the DB.&lt;/p&gt;\n\n&lt;p&gt;Now my problem is that the insert function connects to a NoSQL DB. So I can technically pass in a UserProfile, and it will end up inserting the extra attributes into my NoSQL DB. Over time my NoSQL DB might end up with a lot of extra unnecessary attributes.&lt;/p&gt;\n\n&lt;p&gt;I was wondering if there was an Exact&amp;lt;T&amp;gt; type that ensures you only have User.id, email &amp;amp; password added in and nothing more.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i8vxz2", "is_robot_indexable": true, "report_reasons": null, "author": "aelesia-", "discussion_type": null, "num_comments": 35, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i8vxz2/is_there_an_exactt_advanced_type_something_that/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i8vxz2/is_there_an_exactt_advanced_type_something_that/", "subreddit_subscribers": 46183, "created_utc": 1597306074.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hey guys, i'm working on a project that will be a monorepo using yarn workspace, with micro-front-end using react-typescript.  To create the frontend structure i used  Create-React-App and everything was working fine.  Then i decided to create a priveta-route module using just  a basic index.tsx and package.json when i use this module i get this error:\n\n    C:/Users/johnvidal/Documents/quero-docura/quero-docuras/packages/web-private-route/src/index.tsx 10:0\n    Module parse failed: The keyword 'interface' is reserved (10:0)\n    You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n    | \n    | //@ts-ignore\n    &gt; interface PrivateRouteProps extends RouteProps {\n    |   component: React.ComponentType&lt;RouteComponentProps&lt;any&gt;&gt;\n    | } \n\nHow do i fix this?", "author_fullname": "t2_1qg03vj7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Error on creating module using monorepo react structure", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i9bkdz", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597392784.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys, i&amp;#39;m working on a project that will be a monorepo using yarn workspace, with micro-front-end using react-typescript.  To create the frontend structure i used  Create-React-App and everything was working fine.  Then i decided to create a priveta-route module using just  a basic index.tsx and package.json when i use this module i get this error:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;C:/Users/johnvidal/Documents/quero-docura/quero-docuras/packages/web-private-route/src/index.tsx 10:0\nModule parse failed: The keyword &amp;#39;interface&amp;#39; is reserved (10:0)\nYou may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders\n| \n| //@ts-ignore\n&amp;gt; interface PrivateRouteProps extends RouteProps {\n|   component: React.ComponentType&amp;lt;RouteComponentProps&amp;lt;any&amp;gt;&amp;gt;\n| } \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How do i fix this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i9bkdz", "is_robot_indexable": true, "report_reasons": null, "author": "johnvidal77", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i9bkdz/error_on_creating_module_using_monorepo_react/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i9bkdz/error_on_creating_module_using_monorepo_react/", "subreddit_subscribers": 46183, "created_utc": 1597363984.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have this piece of code: \n\n    router.route('/signup').post(validateRegister);\n\nBut I get an error message saying that `validateRegister` is not assignable to type `RequestHandler&lt;ParamsDictionary, any, any, ParsedQs&gt;` The code for validate register is this: \n\n    import { findUserByUsername } from '../helpers';\n    import { NextFunction } from 'express';\n    import { UserRegisterRequest } from '../interfaces';\n    import { Response } from 'express';\n    \n    export default async function validateRegister(\n      req: UserRegisterRequest,\n      res: Response,\n      next: NextFunction\n    ): Promise&lt;void&gt; {\n      const { fullname, username, email, password, password2 } = req.body;\n      // bunch of if statments ....\n    }\n\n\nAny help with this issue would be appreciated.", "author_fullname": "t2_xvkyj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Problem with request handlers in node.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i96454", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597374517.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have this piece of code: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;router.route(&amp;#39;/signup&amp;#39;).post(validateRegister);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But I get an error message saying that &lt;code&gt;validateRegister&lt;/code&gt; is not assignable to type &lt;code&gt;RequestHandler&amp;lt;ParamsDictionary, any, any, ParsedQs&amp;gt;&lt;/code&gt; The code for validate register is this: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import { findUserByUsername } from &amp;#39;../helpers&amp;#39;;\nimport { NextFunction } from &amp;#39;express&amp;#39;;\nimport { UserRegisterRequest } from &amp;#39;../interfaces&amp;#39;;\nimport { Response } from &amp;#39;express&amp;#39;;\n\nexport default async function validateRegister(\n  req: UserRegisterRequest,\n  res: Response,\n  next: NextFunction\n): Promise&amp;lt;void&amp;gt; {\n  const { fullname, username, email, password, password2 } = req.body;\n  // bunch of if statments ....\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any help with this issue would be appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i96454", "is_robot_indexable": true, "report_reasons": null, "author": "Sweeterman3", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i96454/problem_with_request_handlers_in_node/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i96454/problem_with_request_handlers_in_node/", "subreddit_subscribers": 46183, "created_utc": 1597345717.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm currently trying to refactor a function's signature to remove the need for loads of overloads. I've done this by creating a conditional generic type to handle the same cases that the overloads did.\n\nThe function works fine but for some reason adding annotations to constrain the return type from `unknown` to something else is giving me errors that didn't exist, as if the function is incorrectly inferring `T` from the annotation and I just can't figure out why. There are some times in my project where I need to declare a variable before assigning it and it just breaks.\n\nThis is the function's signature:\n\n    const createMatrix = &lt;D extends number, T&gt;(\n        dimensions: D,\n        initialValues: T = null\n    ): Matrix&lt;D, T&gt;\n    \n    type Matrix&lt;D extends number, T&gt; = D extends 1\n        ? T[]\n        : D extends 2\n        ? T[][]\n        // ...\n\nAnd a TS playground link with the full code, tests and old version [is here](https://www.staging-typescript.org/play?#code/PTAEBUE8AcFNQIYDskHsAuD0EtVNAO4BOeA5gDaSioBusRR2AJrAM6imxL3YDGh2dAAtQ9EkVYAoSSFABRAB5xe6WE1AAjWEIQ1cRAFwywAQSZNsSUqHQx4yNJhx526VKBoJGCDeTahWIVQAV3J1LVBeVABbaCxsX3gCQRFheAAzYKQVXCR2Ilh0YKIkYwDsUiQsYtgAGkiEYNZLazQbO1EGVAlpWRMVYIRyTW1dfSM+1mbKlsR8BwwsNQ8vbB8-G3c00AKikpXyYPhUdJshDKycvAam-2RO8QA6MvBzji4efnBQbHZiMkoPyQ6TEyzcIzmVBOoAA5F4iAgqARzgVQCxoMJQAAeUAAERhhBR8EEASCoSYZQilhBDDB7jwgO2GgQrHgtjg1FO224rFU6nhiMeoAASrBorRZtsFk5cgFUOQ6FJZNtoCREtFNMF0DsxbR-Oz4KwECDbISuCtvIlEFMKkholxtTpoHA8oh0qoiJECvE8M9egAqf2SUD+kWFYquhCgaJYRgKUAACmioRwAFoLPa8rkhogGIiAJQCTGQEKeljNArqDNcZouObqTyHNjPEPB0MAATiCI11azddToAABrjBwYIG9y9hK2jsJna67odsY+g423QJ2vAgNZZBGtyAA1IZHdgD17wRtHM5YUQIXgiaCoSzayxneDLuNA3dDX761BC3GwOkjTkOgrjuIOSChOQg4th2uwRuwJjRrG2DxtCw6DjOc65Kw9TJJisC3vej5IM+SBfuQP7qOC2yDjuOBDIeTasJhXZboU9CwcAkhRHk2q8N6qgALIofGAC82K4qICiqEgTDsJB0RaEQ9TgAAfAmwagNpvbzqwY64rUWnafRe5MceY7fAAPqAkHkMMEl2eQkj5mOIkrqhWKGRAamgGJvkAN7GZELj8cUBSkbis41rkAAyXCkJiEm6ThADcwW8byOoxjuVhRdhdbJdFfaugOACM6XadpmXatwaisKKvDFPOfnZQguWkPlMV1r5AAM6UZaFkThQ67kfhJJh5pACZNbSkXFfO8VWMI+aPOk2D2QmpmMUebD5gNVUhXxoDrVU5BjahrV1fJjXNbkwWHQA-MNc3oBdCiPDG0AJgmhb+Q9h2AwJhHCaJCYFDl5F5QtOH1NtB67aw+YA4dyOA1VY6zRFb2iQdVXwfsp1DO91qgO9XmqWp6UAL4DbIZ6gKqqDqgEsBimBELCNeCbIua0pLEwhbbAaPzsNSoLUe4ETbFksonGUhF3u0HKqrAvBqJKby8RYzhnVe2oE66K5HM8Ivk1JsAyVw8m2cESn0JTrUW1bcnsGVwXPeAADaAC6wUGdJsk2wATB7EC+77-t4oH1vsAAzGH3s+xHfuHQHltB+wAAsicpynUfIJAefJyXA01TYbDoGVY6KcpvutcDSzvQmZX7aAshYgOBDdAA1ie7zcIwXyi6z2rghBdvKYOPFDaovLBzXk-0CnDeCbAzfB23HcDkwqBsEgMLat3RA96AA6cIPfAQCPrJj+Btf0KANkP0QvuYQOgQhGEEKDlkPdoAQJAg56hpHwDVBElg6S23tkQGex057oDjovGBxdV4g3XmDOOW8wCdzRHvVgB8j69zPgPT419fij02EOF+T9oF1x9rQl+Kd36ki-uEeAv8kD-1QIA4Br4wGhQgdwSWdD6DSHLggrOaCm5g03qlduOCBwFFIKELwQIaRcHVoQXu-cL5kO+BQzh3DeH1ENsrYk7A-4AKQPnCRlcACsyD6H1wko3UGHkFAJmDvUXq2DsRdx0WafAdFyIMQRsxTCFDb4kL0UPch7AJ4wL4WYkWFCmElzgVlBBAA2McVieE2JLtI9xcYvF+NwcfPuJ1IH1BZOY+JoB8mAL9L0MAAAhWA5AeEj22PKJgeFe4tHqJkbIushQAEkYQahXJASU7gIZ6moHQIgXSEA23SN0RAIx0AejxAADXqOcbIbI3jcAICdS4utEw+D1MjSQIyrhgLXu9AA8mELE6kEwpRcGOMqcNQlmURo9Syrlw4+wGg8q5biMEeLeUwD5GlgrfLyGObxwV4bmTYMCiALlLIpwhZc2U0LXnvM+UimGPzQBxyModDFQLLK4rBfi6QkKiXPNEnChFmlDrIv0qALONKqp0uYti8AjKk7FwJaMtl6CSXwrJTyilKLREqXRQCnaIqGWgrlQiqVjyvSyo5aSxFiqCrKpfoKky6rwkWWvs-KCV0oKMp1epUAQVDrlyxg6LqJUlqJREEVM1rBKpVXLhDdqUNOpKvYIG7qpVQAVUGsda6DU1Z3WuBJcNHUfV6VAH1PG1UhpetIiTCaU0ZojXmmav1K01obXIFta1mKkYFqOllIm51RJXTZjdNNEh7ro20s9YtOMPGfQQN9X6fk1Io0HcSo1TBwZigjS0HNsNPxhObWjQd2lt3o0xpW0dcZW1mI7e9Gm0gzYLoRa1CVJcV42RdWpX2A1Mlj0rnC6uKqXEGpkbCsILc-GVPYKdWAb6K68jhQvb9RTXHsv-YuuRCjtEnxA5A8DCC4VIJgyvODhqEMJiwfI2QwHqncHEbPD9YQpF4b-XGOFZTiNgFI6BjDVGmCOJwww2jJTUIMe8aAXxTGUNVNY3YyDYRcmNK4dY3Dv7eMKH40BwJoGgA).\n\nDoes anyone have any ideas for what the problem might be?", "author_fullname": "t2_9c33k", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Type annotation erroneously overrides generic", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i8zupk", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1597337320.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597353906.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m currently trying to refactor a function&amp;#39;s signature to remove the need for loads of overloads. I&amp;#39;ve done this by creating a conditional generic type to handle the same cases that the overloads did.&lt;/p&gt;\n\n&lt;p&gt;The function works fine but for some reason adding annotations to constrain the return type from &lt;code&gt;unknown&lt;/code&gt; to something else is giving me errors that didn&amp;#39;t exist, as if the function is incorrectly inferring &lt;code&gt;T&lt;/code&gt; from the annotation and I just can&amp;#39;t figure out why. There are some times in my project where I need to declare a variable before assigning it and it just breaks.&lt;/p&gt;\n\n&lt;p&gt;This is the function&amp;#39;s signature:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const createMatrix = &amp;lt;D extends number, T&amp;gt;(\n    dimensions: D,\n    initialValues: T = null\n): Matrix&amp;lt;D, T&amp;gt;\n\ntype Matrix&amp;lt;D extends number, T&amp;gt; = D extends 1\n    ? T[]\n    : D extends 2\n    ? T[][]\n    // ...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And a TS playground link with the full code, tests and old version &lt;a href=\"https://www.staging-typescript.org/play?#code/PTAEBUE8AcFNQIYDskHsAuD0EtVNAO4BOeA5gDaSioBusRR2AJrAM6imxL3YDGh2dAAtQ9EkVYAoSSFABRAB5xe6WE1AAjWEIQ1cRAFwywAQSZNsSUqHQx4yNJhx526VKBoJGCDeTahWIVQAV3J1LVBeVABbaCxsX3gCQRFheAAzYKQVXCR2Ilh0YKIkYwDsUiQsYtgAGkiEYNZLazQbO1EGVAlpWRMVYIRyTW1dfSM+1mbKlsR8BwwsNQ8vbB8-G3c00AKikpXyYPhUdJshDKycvAam-2RO8QA6MvBzji4efnBQbHZiMkoPyQ6TEyzcIzmVBOoAA5F4iAgqARzgVQCxoMJQAAeUAAERhhBR8EEASCoSYZQilhBDDB7jwgO2GgQrHgtjg1FO224rFU6nhiMeoAASrBorRZtsFk5cgFUOQ6FJZNtoCREtFNMF0DsxbR-Oz4KwECDbISuCtvIlEFMKkholxtTpoHA8oh0qoiJECvE8M9egAqf2SUD+kWFYquhCgaJYRgKUAACmioRwAFoLPa8rkhogGIiAJQCTGQEKeljNArqDNcZouObqTyHNjPEPB0MAATiCI11azddToAABrjBwYIG9y9hK2jsJna67odsY+g423QJ2vAgNZZBGtyAA1IZHdgD17wRtHM5YUQIXgiaCoSzayxneDLuNA3dDX761BC3GwOkjTkOgrjuIOSChOQg4th2uwRuwJjRrG2DxtCw6DjOc65Kw9TJJisC3vej5IM+SBfuQP7qOC2yDjuOBDIeTasJhXZboU9CwcAkhRHk2q8N6qgALIofGAC82K4qICiqEgTDsJB0RaEQ9TgAAfAmwagNpvbzqwY64rUWnafRe5MceY7fAAPqAkHkMMEl2eQkj5mOIkrqhWKGRAamgGJvkAN7GZELj8cUBSkbis41rkAAyXCkJiEm6ThADcwW8byOoxjuVhRdhdbJdFfaugOACM6XadpmXatwaisKKvDFPOfnZQguWkPlMV1r5AAM6UZaFkThQ67kfhJJh5pACZNbSkXFfO8VWMI+aPOk2D2QmpmMUebD5gNVUhXxoDrVU5BjahrV1fJjXNbkwWHQA-MNc3oBdCiPDG0AJgmhb+Q9h2AwJhHCaJCYFDl5F5QtOH1NtB67aw+YA4dyOA1VY6zRFb2iQdVXwfsp1DO91qgO9XmqWp6UAL4DbIZ6gKqqDqgEsBimBELCNeCbIua0pLEwhbbAaPzsNSoLUe4ETbFksonGUhF3u0HKqrAvBqJKby8RYzhnVe2oE66K5HM8Ivk1JsAyVw8m2cESn0JTrUW1bcnsGVwXPeAADaAC6wUGdJsk2wATB7EC+77-t4oH1vsAAzGH3s+xHfuHQHltB+wAAsicpynUfIJAefJyXA01TYbDoGVY6KcpvutcDSzvQmZX7aAshYgOBDdAA1ie7zcIwXyi6z2rghBdvKYOPFDaovLBzXk-0CnDeCbAzfB23HcDkwqBsEgMLat3RA96AA6cIPfAQCPrJj+Btf0KANkP0QvuYQOgQhGEEKDlkPdoAQJAg56hpHwDVBElg6S23tkQGex057oDjovGBxdV4g3XmDOOW8wCdzRHvVgB8j69zPgPT419fij02EOF+T9oF1x9rQl+Kd36ki-uEeAv8kD-1QIA4Br4wGhQgdwSWdD6DSHLggrOaCm5g03qlduOCBwFFIKELwQIaRcHVoQXu-cL5kO+BQzh3DeH1ENsrYk7A-4AKQPnCRlcACsyD6H1wko3UGHkFAJmDvUXq2DsRdx0WafAdFyIMQRsxTCFDb4kL0UPch7AJ4wL4WYkWFCmElzgVlBBAA2McVieE2JLtI9xcYvF+NwcfPuJ1IH1BZOY+JoB8mAL9L0MAAAhWA5AeEj22PKJgeFe4tHqJkbIushQAEkYQahXJASU7gIZ6moHQIgXSEA23SN0RAIx0AejxAADXqOcbIbI3jcAICdS4utEw+D1MjSQIyrhgLXu9AA8mELE6kEwpRcGOMqcNQlmURo9Syrlw4+wGg8q5biMEeLeUwD5GlgrfLyGObxwV4bmTYMCiALlLIpwhZc2U0LXnvM+UimGPzQBxyModDFQLLK4rBfi6QkKiXPNEnChFmlDrIv0qALONKqp0uYti8AjKk7FwJaMtl6CSXwrJTyilKLREqXRQCnaIqGWgrlQiqVjyvSyo5aSxFiqCrKpfoKky6rwkWWvs-KCV0oKMp1epUAQVDrlyxg6LqJUlqJREEVM1rBKpVXLhDdqUNOpKvYIG7qpVQAVUGsda6DU1Z3WuBJcNHUfV6VAH1PG1UhpetIiTCaU0ZojXmmav1K01obXIFta1mKkYFqOllIm51RJXTZjdNNEh7ro20s9YtOMPGfQQN9X6fk1Io0HcSo1TBwZigjS0HNsNPxhObWjQd2lt3o0xpW0dcZW1mI7e9Gm0gzYLoRa1CVJcV42RdWpX2A1Mlj0rnC6uKqXEGpkbCsILc-GVPYKdWAb6K68jhQvb9RTXHsv-YuuRCjtEnxA5A8DCC4VIJgyvODhqEMJiwfI2QwHqncHEbPD9YQpF4b-XGOFZTiNgFI6BjDVGmCOJwww2jJTUIMe8aAXxTGUNVNY3YyDYRcmNK4dY3Dv7eMKH40BwJoGgA\"&gt;is here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Does anyone have any ideas for what the problem might be?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i8zupk", "is_robot_indexable": true, "report_reasons": null, "author": "NeefRehman", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i8zupk/type_annotation_erroneously_overrides_generic/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i8zupk/type_annotation_erroneously_overrides_generic/", "subreddit_subscribers": 46183, "created_utc": 1597325106.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hello, I was looking for a snippet extension to vscode to help me speed my writing but all I found was this [one](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets) but it doesn't include Typescript. Any suggestions?", "author_fullname": "t2_3pcqb2l4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "VSCode Snippets", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i9160u", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1597358707.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I was looking for a snippet extension to vscode to help me speed my writing but all I found was this &lt;a href=\"https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets\"&gt;one&lt;/a&gt; but it doesn&amp;#39;t include Typescript. Any suggestions?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/0Z4Bmfy6rIZByTKVmPXJz6tW997CkUoCFUt7-zrmROA.jpg?auto=webp&amp;s=47c63efc9c3ca2d782410f7131129942203f5583", "width": 1280, "height": 905}, "resolutions": [{"url": "https://external-preview.redd.it/0Z4Bmfy6rIZByTKVmPXJz6tW997CkUoCFUt7-zrmROA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=510f334d26cb4ee0727e2b22edeba1d9bd71e010", "width": 108, "height": 76}, {"url": "https://external-preview.redd.it/0Z4Bmfy6rIZByTKVmPXJz6tW997CkUoCFUt7-zrmROA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=59c92936fb4c53e971ba4add7780ba25ae26cadb", "width": 216, "height": 152}, {"url": "https://external-preview.redd.it/0Z4Bmfy6rIZByTKVmPXJz6tW997CkUoCFUt7-zrmROA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=629308923419a66607d90077f2c1b69f43e16c8f", "width": 320, "height": 226}, {"url": "https://external-preview.redd.it/0Z4Bmfy6rIZByTKVmPXJz6tW997CkUoCFUt7-zrmROA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=02a15fc1892b0fd7d762e7707ac9ae2bea374521", "width": 640, "height": 452}, {"url": "https://external-preview.redd.it/0Z4Bmfy6rIZByTKVmPXJz6tW997CkUoCFUt7-zrmROA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=0f65dd44280a99b64debf1788f5115178d598d0c", "width": 960, "height": 678}, {"url": "https://external-preview.redd.it/0Z4Bmfy6rIZByTKVmPXJz6tW997CkUoCFUt7-zrmROA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=47b7f819ddacf5cf1e5be77a4e23de965777a68e", "width": 1080, "height": 763}], "variants": {}, "id": "WshQaZvzBkSNBDFAfzA6uN3aQj2fagd3T9AqTDraeHM"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i9160u", "is_robot_indexable": true, "report_reasons": null, "author": "ExpensiveWaltz", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i9160u/vscode_snippets/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i9160u/vscode_snippets/", "subreddit_subscribers": 46183, "created_utc": 1597329907.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "For a project I am currently working on, an SDK for consuming a backend API (written in Go), I would like to implement runtime type checking. As I've worked intensively with Typescript over the last couple of years, I know type safety is not guaranteed at runtime, as all type annotations will get lost during the compilation stage.\n\nI have some projects using Typescript as a production dependency, to for example generate custom JSON decoders to allow code generation to take place based on Typescript interfaces: https://github.com/PicnicSupermarket/aegis. \n\nA thought that came to mind, was using Typescript as a dependency and use it to check against an interface, but as I'm not really familiar with the structure of the Typescript compiler, I don't know what's possible.\n\nSo my question is: **is it possible to take a Javascript object, together with a Typescript interface, and validate whether the Javascript object satisfies the Typescript interface**? And if that can be done by calling the Typescript compiler as a production dependency somehow.\n\nTo give some further context, this is the function where results pass through in the SDK I am working on:\n\n```\nconst throwOrReturn = &lt;T&gt;(result: APIResult&lt;T&gt;): T =&gt; {\n    if (result.error) {\n        throw new Error(result.error);\n    }\n    // We can assume that data is valid (type T) if no error was found\n    return result.data as T;\n};\n\ninterface APIResultSuccess&lt;T&gt; { data: T; error?: undefined; }\ninterface APIResultFailure { data?: undefined; error: string; }\ntype APIResult&lt;T&gt; = APIResultSuccess&lt;T&gt; | APIResultFailure;\n```\n\nBefore `return result.data as T;` I would like to check whether `result.data` is valid if assigned type `T` at runtime. So currently I am using generics, but taking the checking one layer up, where I have access to the actual interface, instead of a generic, would not be an issue.\n\nAn example of how the `throwOrReturn` is implemented:\n\n```\ninterface ReturnValues {\n    // Some interface code\n}\n\nconst exampleCall = async (config: Config): Promise&lt;interface&gt; =&gt; {\n    const res = await get&lt;interface&gt;(config, GetEndpoints.EndpointWeNeed); // Wrapper for making API calls and 4xx/5xx error handling \n    return throwOrReturn(res);\n};\n\nexport default exampleCall;\n```", "author_fullname": "t2_s37is", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Validating object's type at runtime?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i8yk6i", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1597348576.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For a project I am currently working on, an SDK for consuming a backend API (written in Go), I would like to implement runtime type checking. As I&amp;#39;ve worked intensively with Typescript over the last couple of years, I know type safety is not guaranteed at runtime, as all type annotations will get lost during the compilation stage.&lt;/p&gt;\n\n&lt;p&gt;I have some projects using Typescript as a production dependency, to for example generate custom JSON decoders to allow code generation to take place based on Typescript interfaces: &lt;a href=\"https://github.com/PicnicSupermarket/aegis\"&gt;https://github.com/PicnicSupermarket/aegis&lt;/a&gt;. &lt;/p&gt;\n\n&lt;p&gt;A thought that came to mind, was using Typescript as a dependency and use it to check against an interface, but as I&amp;#39;m not really familiar with the structure of the Typescript compiler, I don&amp;#39;t know what&amp;#39;s possible.&lt;/p&gt;\n\n&lt;p&gt;So my question is: &lt;strong&gt;is it possible to take a Javascript object, together with a Typescript interface, and validate whether the Javascript object satisfies the Typescript interface&lt;/strong&gt;? And if that can be done by calling the Typescript compiler as a production dependency somehow.&lt;/p&gt;\n\n&lt;p&gt;To give some further context, this is the function where results pass through in the SDK I am working on:&lt;/p&gt;\n\n&lt;p&gt;```\nconst throwOrReturn = &amp;lt;T&amp;gt;(result: APIResult&amp;lt;T&amp;gt;): T =&amp;gt; {\n    if (result.error) {\n        throw new Error(result.error);\n    }\n    // We can assume that data is valid (type T) if no error was found\n    return result.data as T;\n};&lt;/p&gt;\n\n&lt;p&gt;interface APIResultSuccess&amp;lt;T&amp;gt; { data: T; error?: undefined; }\ninterface APIResultFailure { data?: undefined; error: string; }\ntype APIResult&amp;lt;T&amp;gt; = APIResultSuccess&amp;lt;T&amp;gt; | APIResultFailure;\n```&lt;/p&gt;\n\n&lt;p&gt;Before &lt;code&gt;return result.data as T;&lt;/code&gt; I would like to check whether &lt;code&gt;result.data&lt;/code&gt; is valid if assigned type &lt;code&gt;T&lt;/code&gt; at runtime. So currently I am using generics, but taking the checking one layer up, where I have access to the actual interface, instead of a generic, would not be an issue.&lt;/p&gt;\n\n&lt;p&gt;An example of how the &lt;code&gt;throwOrReturn&lt;/code&gt; is implemented:&lt;/p&gt;\n\n&lt;p&gt;```\ninterface ReturnValues {\n    // Some interface code\n}&lt;/p&gt;\n\n&lt;p&gt;const exampleCall = async (config: Config): Promise&amp;lt;interface&amp;gt; =&amp;gt; {\n    const res = await get&amp;lt;interface&amp;gt;(config, GetEndpoints.EndpointWeNeed); // Wrapper for making API calls and 4xx/5xx error handling \n    return throwOrReturn(res);\n};&lt;/p&gt;\n\n&lt;p&gt;export default exampleCall;\n```&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/RzFqhbxIN1oGr56z2dOkX94e75sgDA0LlXeOj_CEmWk.jpg?auto=webp&amp;s=fdbba2b01c9186b63b53d0cb2b9c772ba1f8bee3", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/RzFqhbxIN1oGr56z2dOkX94e75sgDA0LlXeOj_CEmWk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e56e56cf33243b9e428f8d91822d1eccafa1f8d0", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/RzFqhbxIN1oGr56z2dOkX94e75sgDA0LlXeOj_CEmWk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=fc22ce139b628664093845743e1a3a448e759f06", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/RzFqhbxIN1oGr56z2dOkX94e75sgDA0LlXeOj_CEmWk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a8a22f819df205dc75eb8b6174296e40aad85e95", "width": 320, "height": 320}], "variants": {}, "id": "Fj8XRHvo6qgjrti9CS8QDq7ynu7BSzmqeXIwxl-T4cQ"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i8yk6i", "is_robot_indexable": true, "report_reasons": null, "author": "lucianonooijen", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i8yk6i/validating_objects_type_at_runtime/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i8yk6i/validating_objects_type_at_runtime/", "subreddit_subscribers": 46183, "created_utc": 1597319776.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I am trying to define types for my little pub/sub service. The service has a  `subscribe` function that is giving me troubles.\n\nThis function subscribes callbacks to messages. Each message has the following shape:\n\n```\n{\n  action: string;\n  payload: one_of_the_predefined_payloads\n}\n```\n\nSo what the subscribe function does is it takes two arguments \u2014\u00a0action and callback \u2014 and puts the callback in the set of callbacks that respond to this action. When it the pub/sub service receives a message with a given `action`, it will call the callbacks interested in this action passing to them the payload from the message.\n\nThe type of the callback function is currently defined as `type Callback =  (...args: any[]) =&gt; void`; but I am trying to find a way to properly define its argument, because, goddamit, I know the full list of actions and I know which payloads are expected for those actions:\n\n```\ntype FooPayload = {\n    foo: number;\n}\n\ntype BarPayload = {\n    bar: string;\n}\n\ninterface ActionToPayloadMap {\n    foo: FooPayload;\n    bar: BarPayload\n}\n\ntype Callback = &lt;A extends Action&gt;(payload: ActionToPayloadMap[A]) =&gt; void;\n```\n\nBut somewhere along the way my reasoning falls apart as can be seen in [this typescript playground](https://www.typescriptlang.org/play?#code/C4TwDgpgBAYg9nACgQxAGzsgJlAvFAbwCgpSoAzBALigDsBXAWwCMIAnAbiIF8ijRIUAELI2KdJhz5iZKM1E0AzsDYBLWgHMuvfuGjw4AWQiLFyDdGkkyyAMbBVcWjQDklOC66ywqDNhoG4n5YPFy6giJsxqbmloTWpHYOTq7ybJ4JUD4S-sKiQZKhfOrA7OR20ACC9o60ACpIvpKGyGDxsu4BCAXYXmRpNJE9IToCVTVOeFAA1hAgcORQ1cn1jTlYLWBhY1DDU4FN2FAAPnlih1jbelAAyvTMirZqrGyKUwBKELZwbFgAPMtagAaW4QYB-ADCyDQaHktmmAD4EXwdlCYXDplMAVAIAAPUq0LBvQFOBEACmywRoJNWw02AG1KgBdACUeARUAAbnBVJcUdc7g8nqpWFjKjj8RBCcSJrRyUlatSQbZobC7NMaGi1fCAQi2bgOdzeVdBIh7mhVIoABZiiUEolLWXy2VKrIXamyhp01qM1nsrk8vlEb60ZRQRT3R7PdhvaTcKDIN6CqMimNhENhiNC6M0ZPC0X4MkKpzK1UY-UcmRkDPAcNgqZZlMvRT04u0JknU60CAAd1B4K1GPJLL6pEUYIAdNgsGSVej1SPMo38zHW7KO-hx8BtHwa1lzZarTQzcwLdapkXZSDKZIK+1q04w3PtdNY+HIyvXmuVkzR1BnxiigTpQbAAKJ2Fas7MP6tjMBSFwsiyRTBo+tbuHUJi1oWN65Ac6x3hmcBoBAE4YBo8HrMBCCLkQy7Rn8bgIC45KMR4ILoZhI5AA), where I've captured my attempt at defining these relationships. Could anyone help me out?\n\n\n**P.S.:** Also, I really don't like the `ActionToPayloadMap` interface from the snippet above. What I would much prefer would be to define the actual message types:\n\n```\ntype FooMessage = {\n    action: 'foo';\n    payload: FooPayload\n};\n\ntype BarMessage = {\n    action: 'bar';\n    payload: BarPayload\n};\n\ntype Message = FooMessage | BarMessage\n```\nand then to somehow tell typescript to lookup the payload type based on the received action. Is typescript capable of this?", "author_fullname": "t2_dkk2r", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Trying to get rid of the any; need help", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i93a9s", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1597336953.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597365550.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am trying to define types for my little pub/sub service. The service has a  &lt;code&gt;subscribe&lt;/code&gt; function that is giving me troubles.&lt;/p&gt;\n\n&lt;p&gt;This function subscribes callbacks to messages. Each message has the following shape:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n{\n  action: string;\n  payload: one_of_the_predefined_payloads\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;So what the subscribe function does is it takes two arguments \u2014\u00a0action and callback \u2014 and puts the callback in the set of callbacks that respond to this action. When it the pub/sub service receives a message with a given &lt;code&gt;action&lt;/code&gt;, it will call the callbacks interested in this action passing to them the payload from the message.&lt;/p&gt;\n\n&lt;p&gt;The type of the callback function is currently defined as &lt;code&gt;type Callback =  (...args: any[]) =&amp;gt; void&lt;/code&gt;; but I am trying to find a way to properly define its argument, because, goddamit, I know the full list of actions and I know which payloads are expected for those actions:&lt;/p&gt;\n\n&lt;p&gt;```\ntype FooPayload = {\n    foo: number;\n}&lt;/p&gt;\n\n&lt;p&gt;type BarPayload = {\n    bar: string;\n}&lt;/p&gt;\n\n&lt;p&gt;interface ActionToPayloadMap {\n    foo: FooPayload;\n    bar: BarPayload\n}&lt;/p&gt;\n\n&lt;p&gt;type Callback = &amp;lt;A extends Action&amp;gt;(payload: ActionToPayloadMap[A]) =&amp;gt; void;\n```&lt;/p&gt;\n\n&lt;p&gt;But somewhere along the way my reasoning falls apart as can be seen in &lt;a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAYg9nACgQxAGzsgJlAvFAbwCgpSoAzBALigDsBXAWwCMIAnAbiIF8ijRIUAELI2KdJhz5iZKM1E0AzsDYBLWgHMuvfuGjw4AWQiLFyDdGkkyyAMbBVcWjQDklOC66ywqDNhoG4n5YPFy6giJsxqbmloTWpHYOTq7ybJ4JUD4S-sKiQZKhfOrA7OR20ACC9o60ACpIvpKGyGDxsu4BCAXYXmRpNJE9IToCVTVOeFAA1hAgcORQ1cn1jTlYLWBhY1DDU4FN2FAAPnlih1jbelAAyvTMirZqrGyKUwBKELZwbFgAPMtagAaW4QYB-ADCyDQaHktmmAD4EXwdlCYXDplMAVAIAAPUq0LBvQFOBEACmywRoJNWw02AG1KgBdACUeARUAAbnBVJcUdc7g8nqpWFjKjj8RBCcSJrRyUlatSQbZobC7NMaGi1fCAQi2bgOdzeVdBIh7mhVIoABZiiUEolLWXy2VKrIXamyhp01qM1nsrk8vlEb60ZRQRT3R7PdhvaTcKDIN6CqMimNhENhiNC6M0ZPC0X4MkKpzK1UY-UcmRkDPAcNgqZZlMvRT04u0JknU60CAAd1B4K1GPJLL6pEUYIAdNgsGSVej1SPMo38zHW7KO-hx8BtHwa1lzZarTQzcwLdapkXZSDKZIK+1q04w3PtdNY+HIyvXmuVkzR1BnxiigTpQbAAKJ2Fas7MP6tjMBSFwsiyRTBo+tbuHUJi1oWN65Ac6x3hmcBoBAE4YBo8HrMBCCLkQy7Rn8bgIC45KMR4ILoZhI5AA\"&gt;this typescript playground&lt;/a&gt;, where I&amp;#39;ve captured my attempt at defining these relationships. Could anyone help me out?&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;P.S.:&lt;/strong&gt; Also, I really don&amp;#39;t like the &lt;code&gt;ActionToPayloadMap&lt;/code&gt; interface from the snippet above. What I would much prefer would be to define the actual message types:&lt;/p&gt;\n\n&lt;p&gt;```\ntype FooMessage = {\n    action: &amp;#39;foo&amp;#39;;\n    payload: FooPayload\n};&lt;/p&gt;\n\n&lt;p&gt;type BarMessage = {\n    action: &amp;#39;bar&amp;#39;;\n    payload: BarPayload\n};&lt;/p&gt;\n\n&lt;p&gt;type Message = FooMessage | BarMessage\n```\nand then to somehow tell typescript to lookup the payload type based on the received action. Is typescript capable of this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i93a9s", "is_robot_indexable": true, "report_reasons": null, "author": "azangru", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i93a9s/trying_to_get_rid_of_the_any_need_help/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i93a9s/trying_to_get_rid_of_the_any_need_help/", "subreddit_subscribers": 46183, "created_utc": 1597336750.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi there! Just starting with typescript and I was guessing if this is possible to achieve. Any help or alternative solutions will be appreciated, thanks in advance!\n\nSo I have this method:\n\n    triggerInteraction({\n        parent,\n        action,\n        custom = false,\n      }: {\n        parent: HTMLElement;\n        action: string;\n        custom?: boolean;\n      }) {\n        // Search for trigger and click it if found\n        const trigger = custom\n          ? (document.querySelector(`[data-logic=\"${action}\"]`) as HTMLElement)\n          : (parent.querySelector(`[data-logic=\"${action}\"]`) as HTMLElement);\n    \n        if (trigger) {\n          trigger.click();\n          return true;\n        } else return false;\n      }\n\nWhere the ***parent*** argument is only needed if the ***custom*** argument is true. Otherwise, it won't be used by the method.\n\nSo my goal is to be able to make this a valid call:\n\n`triggerInteraction({\u00a0action,\u00a0custom: true\u00a0});`\n\nBut not this (***parent*** should be required here, because ***custom*** is false and therefore will be needed in the method):\n\n`triggerInteraction({\u00a0action,\u00a0custom: false});`\n\nIs there any way to set this conditionally optional parameter? Or is there a better approach for this kind of solution?\n\n&amp;#x200B;\n\nThanks!", "author_fullname": "t2_391au4ng", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is it possible to make one function argument optional depending on another argument's value?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i8wona", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.8, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597339051.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi there! Just starting with typescript and I was guessing if this is possible to achieve. Any help or alternative solutions will be appreciated, thanks in advance!&lt;/p&gt;\n\n&lt;p&gt;So I have this method:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;triggerInteraction({\n    parent,\n    action,\n    custom = false,\n  }: {\n    parent: HTMLElement;\n    action: string;\n    custom?: boolean;\n  }) {\n    // Search for trigger and click it if found\n    const trigger = custom\n      ? (document.querySelector(`[data-logic=&amp;quot;${action}&amp;quot;]`) as HTMLElement)\n      : (parent.querySelector(`[data-logic=&amp;quot;${action}&amp;quot;]`) as HTMLElement);\n\n    if (trigger) {\n      trigger.click();\n      return true;\n    } else return false;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where the &lt;strong&gt;&lt;em&gt;parent&lt;/em&gt;&lt;/strong&gt; argument is only needed if the &lt;strong&gt;&lt;em&gt;custom&lt;/em&gt;&lt;/strong&gt; argument is true. Otherwise, it won&amp;#39;t be used by the method.&lt;/p&gt;\n\n&lt;p&gt;So my goal is to be able to make this a valid call:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;triggerInteraction({\u00a0action,\u00a0custom: true\u00a0});&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;But not this (&lt;strong&gt;&lt;em&gt;parent&lt;/em&gt;&lt;/strong&gt; should be required here, because &lt;strong&gt;&lt;em&gt;custom&lt;/em&gt;&lt;/strong&gt; is false and therefore will be needed in the method):&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;triggerInteraction({\u00a0action,\u00a0custom: false});&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Is there any way to set this conditionally optional parameter? Or is there a better approach for this kind of solution?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i8wona", "is_robot_indexable": true, "report_reasons": null, "author": "alexismix6", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i8wona/is_it_possible_to_make_one_function_argument/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i8wona/is_it_possible_to_make_one_function_argument/", "subreddit_subscribers": 46183, "created_utc": 1597310251.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_i8wona", "before": null}}