{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_zmb2u", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Building an Asynchronous Scheduler for Ruby", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 105, "hide_score": false, "name": "t3_en4pyh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/OlmySf03GUo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Building an Asynchronous Scheduler for Ruby", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/OlmySf03GUo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Samuel Williams", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/OlmySf03GUo/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/swilliamsnz"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/OlmySf03GUo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/en4pyh", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/46gQJ0V-yKacySgHslXUVmuBrCd79Uz8kMno1pK4LV0.jpg", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "rich:video", "content_categories": null, "is_self": false, "mod_note": null, "created": 1578758207.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/9_6UsSTloKjRjDd4-gP3cQFpPKk7i1N4aZ_gsOavkYM.jpg?auto=webp&amp;s=4f46361987e0244db1005bf15260afd9da32273e", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/9_6UsSTloKjRjDd4-gP3cQFpPKk7i1N4aZ_gsOavkYM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d6a91f70744f5f996ba89438221238934acfe59d", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/9_6UsSTloKjRjDd4-gP3cQFpPKk7i1N4aZ_gsOavkYM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f31b4433188dd4f60010e65fcba0debbc121dad9", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/9_6UsSTloKjRjDd4-gP3cQFpPKk7i1N4aZ_gsOavkYM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=6e3b5a74280e655a0c3406317329bef1f4e909cf", "width": 320, "height": 240}], "variants": {}, "id": "KJAyitbr3Yn41B0Wh4PafTUxPRjLgH0N4y9Wb4eyxnw"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "en4pyh", "is_robot_indexable": true, "report_reasons": null, "author": "geospeck", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/en4pyh/building_an_asynchronous_scheduler_for_ruby/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=OlmySf03GUo&amp;feature=youtu.be", "subreddit_subscribers": 61893, "created_utc": 1578729407.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Building an Asynchronous Scheduler for Ruby", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/OlmySf03GUo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Samuel Williams", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/OlmySf03GUo/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/swilliamsnz"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Hi, if I don't want to worry about my code being thread-safe, i can just set the max thread count to 1, and crank up the worker count to like 10. Is this the general way to configure puma to be multi-processing only without multi-threading?", "author_fullname": "t2_5awmdy5d", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "puma disable multi-threading", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_en2jls", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578744412.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, if I don&amp;#39;t want to worry about my code being thread-safe, i can just set the max thread count to 1, and crank up the worker count to like 10. Is this the general way to configure puma to be multi-processing only without multi-threading?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "en2jls", "is_robot_indexable": true, "report_reasons": null, "author": "usedocker", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/en2jls/puma_disable_multithreading/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/en2jls/puma_disable_multithreading/", "subreddit_subscribers": 61893, "created_utc": 1578715612.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Hi,   \nI've seen a tutorial or two, read a few blogpost/random sources, but I have two questions I couldn't find an answer for.   \n1. If I have a variable outcome  \nshowing errors or showing success messages  \ncan I do it as   \n\n\n&gt;when \\[fail\\]  \nthen \\[show error\\]  \nbut if \\[pass\\]  \nthen \\[show pass\\]\n\n  \n2. In Feature, Background, and Scenario (btw, it's Scenario, or Scenario outline, or both?) I'm supposed to use extremely short sentences, or it can be normal writing?", "author_fullname": "t2_gleht", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A few questions about Gherkin syntax", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emwqrn", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578717246.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;br/&gt;\nI&amp;#39;ve seen a tutorial or two, read a few blogpost/random sources, but I have two questions I couldn&amp;#39;t find an answer for.&lt;br/&gt;\n1. If I have a variable outcome&lt;br/&gt;\nshowing errors or showing success messages&lt;br/&gt;\ncan I do it as   &lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;when [fail]&lt;br/&gt;\nthen [show error]&lt;br/&gt;\nbut if [pass]&lt;br/&gt;\nthen [show pass]&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;ol&gt;\n&lt;li&gt;In Feature, Background, and Scenario (btw, it&amp;#39;s Scenario, or Scenario outline, or both?) I&amp;#39;m supposed to use extremely short sentences, or it can be normal writing?&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emwqrn", "is_robot_indexable": true, "report_reasons": null, "author": "shejesa", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/emwqrn/a_few_questions_about_gherkin_syntax/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/emwqrn/a_few_questions_about_gherkin_syntax/", "subreddit_subscribers": 61893, "created_utc": 1578688446.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I have two methods as shown below, one tries to make a connection, if it fails\n\nit raises an exception. That exception should then be rescued by another method,\n\nwho has been called by the method who raised the exception.\n\n&amp;#x200B;\n\nCurrently the `conn` method raises the error, breaks the application and it's\n\nnever rescued. How do I rescue the exception, and is it possible to send the\n\nexception as the response parameter?\n\n&amp;#x200B;\n\n    def conn\n      begin \n        reponse = parse_response(\n          conn.post(\n            ..\n          ).tap do |res|\n            unless res.status == 200\n              raise Error::AuthenticationError.new\n            end\n          end\n        )\n        ..\n      end\n    end\n    \n    def parse_response(response)\n      body = \n        begin\n          JSON.parse(response.body)\n        rescue JSON::ParseError\n        end\n      rescue Error::AuthenticationError =&gt; e\n        LOGGER.error e\n      end\n    end", "author_fullname": "t2_11kq4x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to raise exception, send it as a parameter to another method, and rescue the exception in the other method?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emr4l0", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578692838.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have two methods as shown below, one tries to make a connection, if it fails&lt;/p&gt;\n\n&lt;p&gt;it raises an exception. That exception should then be rescued by another method,&lt;/p&gt;\n\n&lt;p&gt;who has been called by the method who raised the exception.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Currently the &lt;code&gt;conn&lt;/code&gt; method raises the error, breaks the application and it&amp;#39;s&lt;/p&gt;\n\n&lt;p&gt;never rescued. How do I rescue the exception, and is it possible to send the&lt;/p&gt;\n\n&lt;p&gt;exception as the response parameter?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def conn\n  begin \n    reponse = parse_response(\n      conn.post(\n        ..\n      ).tap do |res|\n        unless res.status == 200\n          raise Error::AuthenticationError.new\n        end\n      end\n    )\n    ..\n  end\nend\n\ndef parse_response(response)\n  body = \n    begin\n      JSON.parse(response.body)\n    rescue JSON::ParseError\n    end\n  rescue Error::AuthenticationError =&amp;gt; e\n    LOGGER.error e\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emr4l0", "is_robot_indexable": true, "report_reasons": null, "author": "Rentapart", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/emr4l0/how_to_raise_exception_send_it_as_a_parameter_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/emr4l0/how_to_raise_exception_send_it_as_a_parameter_to/", "subreddit_subscribers": 61893, "created_utc": 1578664038.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_6qsys", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rubygem release heat maps on the Ruby Toolbox", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_emh8tr", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 37, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 37, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/Qq4UDpKnddy1LrciRu62FM_2VZBdPnjiVsPlxbTARPw.jpg", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1578638002.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "ruby-toolbox.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/i-0qNYnY42mlZU-HeMHjnhjrYoHZ4TmlLfKSBWkjaHw.jpg?auto=webp&amp;s=945b3c9ed2be46e7e32629d42d99c6051793c55e", "width": 1772, "height": 1772}, "resolutions": [{"url": "https://external-preview.redd.it/i-0qNYnY42mlZU-HeMHjnhjrYoHZ4TmlLfKSBWkjaHw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=b24a568071428fa1336600d1ac8c5c1dafa0894e", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/i-0qNYnY42mlZU-HeMHjnhjrYoHZ4TmlLfKSBWkjaHw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2753a3184911eef21a8fd7ea4e6a3229dfd05468", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/i-0qNYnY42mlZU-HeMHjnhjrYoHZ4TmlLfKSBWkjaHw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=19389b99f2ad8c42c6b315c562c9a3d6f72e8f28", "width": 320, "height": 320}, {"url": "https://external-preview.redd.it/i-0qNYnY42mlZU-HeMHjnhjrYoHZ4TmlLfKSBWkjaHw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3e54606e976df9f47b4522f0fecf5bb99237a780", "width": 640, "height": 640}, {"url": "https://external-preview.redd.it/i-0qNYnY42mlZU-HeMHjnhjrYoHZ4TmlLfKSBWkjaHw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=e9cfa8f2ce8fca8ddcfc60bcc463840edc78f4c0", "width": 960, "height": 960}, {"url": "https://external-preview.redd.it/i-0qNYnY42mlZU-HeMHjnhjrYoHZ4TmlLfKSBWkjaHw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=4dc340ef1aff492e816e2ab47f4ff28a279b2f26", "width": 1080, "height": 1080}], "variants": {}, "id": "Q5uFHBJGX3os-EykdGnMWZ-KacjBK9dLbJmi7Bxpba0"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emh8tr", "is_robot_indexable": true, "report_reasons": null, "author": "TheDeadSerious", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/emh8tr/rubygem_release_heat_maps_on_the_ruby_toolbox/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.ruby-toolbox.com/blog/2020-01-09/rubygem-release-heatmaps", "subreddit_subscribers": 61893, "created_utc": 1578609202.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "How does using the --skip-javascript and --skip-webpack-install to create a new app affect anything?", "author_fullname": "t2_5awmdy5d", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "new app with no javascript and webpack", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emfip7", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578630973.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;How does using the --skip-javascript and --skip-webpack-install to create a new app affect anything?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emfip7", "is_robot_indexable": true, "report_reasons": null, "author": "usedocker", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/emfip7/new_app_with_no_javascript_and_webpack/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/emfip7/new_app_with_no_javascript_and_webpack/", "subreddit_subscribers": 61893, "created_utc": 1578602173.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I want to start a container in detached mode, then I can exec -it into it in my own pace. I'm currently able to do that via docker-compose with **tty: true** in the yml.\n\nIs there a version without docker-compose, that is, I can run with the **docker run** command? And without a running service in the container. (I'm able to do that without a running service with the docker-compose method)", "author_fullname": "t2_5awmdy5d", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "is there a tty: true equivalent for docker run?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emo2o2", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578673105.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I want to start a container in detached mode, then I can exec -it into it in my own pace. I&amp;#39;m currently able to do that via docker-compose with &lt;strong&gt;tty: true&lt;/strong&gt; in the yml.&lt;/p&gt;\n\n&lt;p&gt;Is there a version without docker-compose, that is, I can run with the &lt;strong&gt;docker run&lt;/strong&gt; command? And without a running service in the container. (I&amp;#39;m able to do that without a running service with the docker-compose method)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emo2o2", "is_robot_indexable": true, "report_reasons": null, "author": "usedocker", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/emo2o2/is_there_a_tty_true_equivalent_for_docker_run/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/emo2o2/is_there_a_tty_true_equivalent_for_docker_run/", "subreddit_subscribers": 61893, "created_utc": 1578644305.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_8ksdr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Deep dive into Did You Mean", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 70, "hide_score": false, "name": "t3_em9fdc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/Wi_XWCK4y-GlUqmSZf-dZBBh-XmTEp350R93KpQzjdU.jpg", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1578604247.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "shime.sh", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/MiuAmkU8KC2i-Z8pFRRU-PgggGtVBqFC_erFLp-dsoI.jpg?auto=webp&amp;s=9f57c81c099e0fa1b4927051155e0c84d848fcdb", "width": 1066, "height": 533}, "resolutions": [{"url": "https://external-preview.redd.it/MiuAmkU8KC2i-Z8pFRRU-PgggGtVBqFC_erFLp-dsoI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=8d10b3cca0efb569c65a21bacf29ed4170fea87b", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/MiuAmkU8KC2i-Z8pFRRU-PgggGtVBqFC_erFLp-dsoI.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=faf7c96baae32bdec616c9b92e3c52f950ff0c1c", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/MiuAmkU8KC2i-Z8pFRRU-PgggGtVBqFC_erFLp-dsoI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=d1ca9567751bff99c855647c40b06e2f4691bfe3", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/MiuAmkU8KC2i-Z8pFRRU-PgggGtVBqFC_erFLp-dsoI.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=4afe1acbed4896aa7f4469adc58a5b2a5c40ee7c", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/MiuAmkU8KC2i-Z8pFRRU-PgggGtVBqFC_erFLp-dsoI.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=9acac88f91ee4824ef6bb1a9accfc7b4111bcc6d", "width": 960, "height": 480}], "variants": {}, "id": "OM9zhsPY88DEuJgmHM9dR686mCyhud5vfEjlfsBpfs4"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "em9fdc", "is_robot_indexable": true, "report_reasons": null, "author": "shime_rb", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/em9fdc/deep_dive_into_did_you_mean/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://shime.sh/deep-dive-into-did-you-mean", "subreddit_subscribers": 61893, "created_utc": 1578575447.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I'm uploading pdf files to the cloud storage using fog-backblaze gem. I dig little in to the source code. And now I'm thinking of, Instead of ruby handle IO objects is there any better way to totally delegate this on to a better library like curl, by just passing file path. So MRI threads get little weight. Do you know any libraries to do that?", "author_fullname": "t2_oo4vy", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ruby low memory and cpu on file upload", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_eme8e4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578625483.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m uploading pdf files to the cloud storage using fog-backblaze gem. I dig little in to the source code. And now I&amp;#39;m thinking of, Instead of ruby handle IO objects is there any better way to totally delegate this on to a better library like curl, by just passing file path. So MRI threads get little weight. Do you know any libraries to do that?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eme8e4", "is_robot_indexable": true, "report_reasons": null, "author": "oshanz", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/eme8e4/ruby_low_memory_and_cpu_on_file_upload/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/eme8e4/ruby_low_memory_and_cpu_on_file_upload/", "subreddit_subscribers": 61893, "created_utc": 1578596683.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "There is Rails code for example (from the github page) which is used to find information\n\n    ActsAsTaggableOn::Tag.most_used\n    User.tagged_with(\"awesome\").by_join_date\n    @tom.find_related_skills # =&gt; [&lt;User name=\"Bobby\"&gt;, &lt;User name=\"Frankie\"&gt;]\n\nBut I cannot for the life of me try and get them into JSONAPI data using the JSONAPI::Resources gem.\n\nShould I be coding in reactJS to find similar information? I could simply just display the raw data of the tags. It is doable (through tags and taggings), but I don't want to repeat myself if any methods are available.\n\nIs there a way to run rails code from a react app?", "author_fullname": "t2_ek541", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Acts_as_taggable_on and JSONAPI::Resources for react-rails app, how should I collect information to read for my front-end?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emcls0", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Question", "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578618648.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;There is Rails code for example (from the github page) which is used to find information&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ActsAsTaggableOn::Tag.most_used\nUser.tagged_with(&amp;quot;awesome&amp;quot;).by_join_date\n@tom.find_related_skills # =&amp;gt; [&amp;lt;User name=&amp;quot;Bobby&amp;quot;&amp;gt;, &amp;lt;User name=&amp;quot;Frankie&amp;quot;&amp;gt;]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But I cannot for the life of me try and get them into JSONAPI data using the JSONAPI::Resources gem.&lt;/p&gt;\n\n&lt;p&gt;Should I be coding in reactJS to find similar information? I could simply just display the raw data of the tags. It is doable (through tags and taggings), but I don&amp;#39;t want to repeat myself if any methods are available.&lt;/p&gt;\n\n&lt;p&gt;Is there a way to run rails code from a react app?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "d3392e70-873c-11e9-af37-0eea3fce36a6", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emcls0", "is_robot_indexable": true, "report_reasons": null, "author": "RocketFlame", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/emcls0/acts_as_taggable_on_and_jsonapiresources_for/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/emcls0/acts_as_taggable_on_and_jsonapiresources_for/", "subreddit_subscribers": 61893, "created_utc": 1578589848.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_emcls0", "before": null}}