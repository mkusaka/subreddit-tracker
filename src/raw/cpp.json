{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Rules For Individuals\n---------------------\n\n* **Don't** create top-level comments - those are for employers.\n* Feel free to reply to top-level comments with **on-topic** questions.\n* I will create one top-level comment for **meta** discussion.\n* I will create another top-level comment for **individuals looking for work** and **community groups looking for sponsors**.\n\nRules For Employers\n---------------------\n\n* You must be hiring **directly**. No third-party recruiters.\n* **One** top-level comment per employer. If you have multiple job openings, that's great, but please consolidate their descriptions or mention them in replies to your own top-level comment.\n* **Don't** use URL shorteners. [reddiquette](https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette) forbids them because they're opaque to the spam filter.\n* Templates are awesome. Please **use** the following template. As the \"formatting help\" says, use \\*\\*two stars\\*\\* to **bold text**. Use empty lines to separate sections.\n* **Proofread** your comment after posting it, and edit any formatting mistakes.\n\n---\n\n\\*\\*Company:\\*\\* [Company name; also, use the \"formatting help\" to make it a link to your company's website, or a specific careers page if you have one.]\n\n&amp;nbsp;\n\n\\*\\*Type:\\*\\* [Full time, part time, internship, contract, etc.]\n\n&amp;nbsp;\n\n\\*\\*Description:\\*\\* [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]\n\n&amp;nbsp;\n\n\\*\\*Location:\\*\\* [Where's your office - or if you're hiring at multiple offices, list them. If your workplace language isn't English, please specify it.]\n\n&amp;nbsp;\n\n\\*\\*Remote:\\*\\* [Do you offer the option of working remotely? If so, do you require employees to live in certain areas or time zones?]\n\n&amp;nbsp;\n\n\\*\\*Visa Sponsorship:\\*\\* [Does your company sponsor visas?]\n\n&amp;nbsp;\n\n\\*\\*Technologies:\\*\\* [Required: do you mainly use C++98/03, C++11, C++14, C++17, or the C++20 working draft? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]\n\n&amp;nbsp;\n\n\\*\\*Contact:\\*\\* [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]\n\n---\n\nPrevious Post\n--------------\n\n* [C++ Jobs - Q4 2019](https://www.reddit.com/r/cpp/comments/dbqgbw/c_jobs_q4_2019/)", "author_fullname": "t2_21c1y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++ Jobs - Q1 2020", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eiila4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 204, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 204, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": 1579038018.0, "author_flair_css_class": "", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1577915953.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;Rules For Individuals&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; create top-level comments - those are for employers.&lt;/li&gt;\n&lt;li&gt;Feel free to reply to top-level comments with &lt;strong&gt;on-topic&lt;/strong&gt; questions.&lt;/li&gt;\n&lt;li&gt;I will create one top-level comment for &lt;strong&gt;meta&lt;/strong&gt; discussion.&lt;/li&gt;\n&lt;li&gt;I will create another top-level comment for &lt;strong&gt;individuals looking for work&lt;/strong&gt; and &lt;strong&gt;community groups looking for sponsors&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Rules For Employers&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You must be hiring &lt;strong&gt;directly&lt;/strong&gt;. No third-party recruiters.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;One&lt;/strong&gt; top-level comment per employer. If you have multiple job openings, that&amp;#39;s great, but please consolidate their descriptions or mention them in replies to your own top-level comment.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; use URL shorteners. &lt;a href=\"https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette\"&gt;reddiquette&lt;/a&gt; forbids them because they&amp;#39;re opaque to the spam filter.&lt;/li&gt;\n&lt;li&gt;Templates are awesome. Please &lt;strong&gt;use&lt;/strong&gt; the following template. As the &amp;quot;formatting help&amp;quot; says, use **two stars** to &lt;strong&gt;bold text&lt;/strong&gt;. Use empty lines to separate sections.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Proofread&lt;/strong&gt; your comment after posting it, and edit any formatting mistakes.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;**Company:** [Company name; also, use the &amp;quot;formatting help&amp;quot; to make it a link to your company&amp;#39;s website, or a specific careers page if you have one.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Type:** [Full time, part time, internship, contract, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Description:** [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Location:** [Where&amp;#39;s your office - or if you&amp;#39;re hiring at multiple offices, list them. If your workplace language isn&amp;#39;t English, please specify it.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Remote:** [Do you offer the option of working remotely? If so, do you require employees to live in certain areas or time zones?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Visa Sponsorship:** [Does your company sponsor visas?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Technologies:** [Required: do you mainly use C++98/03, C++11, C++14, C++17, or the C++20 working draft? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Contact:** [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Previous Post&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.reddit.com/r/cpp/comments/dbqgbw/c_jobs_q4_2019/\"&gt;C++ Jobs - Q4 2019&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "MSVC STL Dev", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eiila4", "is_robot_indexable": true, "report_reasons": null, "author": "STL", "discussion_type": null, "num_comments": 83, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/eiila4/c_jobs_q1_2020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/cpp/comments/eiila4/c_jobs_q1_2020/", "subreddit_subscribers": 123793, "created_utc": 1577887153.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_13jsdxox", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Klein: A SIMD-optimized C++17 Geometry Library", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fb8y1n", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 54, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": "7bf857c8-4dcc-11e6-b84d-0e5fbba92363", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 54, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "gamedev", "selftext": "[**Project Page**](https://www.jeremyong.com/klein/)\n\n[**Github**](https://github.com/jeremyong/klein)\n\nHey /r/gamedev \n\nI wanted to share a passion project of mine that I've been putting together in evenings and weekends the past few months. For background, I've been a graphics and game engine developer for about a decade now. About a year ago, I encountered Geometric Algebra at SIGGRAPH 2019 and was intrigued by the ideas presented. I had always heard about GA as just an equivalent but possibly easier to understand formulation of the quaternionic algebra. I was surprised to learn that GA is, in fact, far richer! More than just handling rotations and screw motions (rigid body motion), it handles projections, intersections, joins, and a fair bit more. Furthermore, it unifies the implementation such that all those actions (rotations, projections, intersections, etc) work equally well on points, lines, and planes.\n\nOne persistent challenge historically with GA was making it performant. After a bit of work, I now have an implementation I believe is significantly faster than libraries like GLM because the entire codebase is organized around SIMD from the start. SSE3 (the default if you include Klein headers) has 100% market penetration at this point on the Steam hardware survey, and I have additional optimizations for SSE4.1 as well. I don't have complete feature parity with GLM yet, but already, Klein supports a number of operations I've found useful in my game engine that is unsupported by GLM, RTM, MathFu, DirectXMath, etc.\n\nSo with that, I hope you'll consider giving Klein a try :) It's *MIT* licensed, and I really just want others to benefit from the formulation in the same way I did. You *don't* need to understand Geometric Algebra to use the library, but perhaps the library can help you learn GA! If you want to learn more about GA in general, the project site has some information, and also a few really handy [references](https://www.jeremyong.com/klein/references/) I refer to all the time.\n\nIf you have questions, or feedback, or requests, I'd love to hear them and answer to the best of my ability. I'm generally happy to answer PMs or offer [advice](https://twitter.com/m_ninepoints/status/1215429886715629569) to people interested in graphics engineering in general.\n\nThanks for checking out Klein!", "author_fullname": "t2_13jsdxox", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Klein: A SIMD-optimized C++17 Geometry Library", "link_flair_richtext": [], "subreddit_name_prefixed": "r/gamedev", "hidden": false, "pwls": 6, "link_flair_css_class": "source cat-event", "downs": 0, "hide_score": false, "name": "t3_fb8wbq", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 61, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Source Code", "can_mod_post": false, "score": 61, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582988473.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.gamedev", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.jeremyong.com/klein/\"&gt;&lt;strong&gt;Project Page&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/jeremyong/klein\"&gt;&lt;strong&gt;Github&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Hey &lt;a href=\"/r/gamedev\"&gt;/r/gamedev&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;I wanted to share a passion project of mine that I&amp;#39;ve been putting together in evenings and weekends the past few months. For background, I&amp;#39;ve been a graphics and game engine developer for about a decade now. About a year ago, I encountered Geometric Algebra at SIGGRAPH 2019 and was intrigued by the ideas presented. I had always heard about GA as just an equivalent but possibly easier to understand formulation of the quaternionic algebra. I was surprised to learn that GA is, in fact, far richer! More than just handling rotations and screw motions (rigid body motion), it handles projections, intersections, joins, and a fair bit more. Furthermore, it unifies the implementation such that all those actions (rotations, projections, intersections, etc) work equally well on points, lines, and planes.&lt;/p&gt;\n\n&lt;p&gt;One persistent challenge historically with GA was making it performant. After a bit of work, I now have an implementation I believe is significantly faster than libraries like GLM because the entire codebase is organized around SIMD from the start. SSE3 (the default if you include Klein headers) has 100% market penetration at this point on the Steam hardware survey, and I have additional optimizations for SSE4.1 as well. I don&amp;#39;t have complete feature parity with GLM yet, but already, Klein supports a number of operations I&amp;#39;ve found useful in my game engine that is unsupported by GLM, RTM, MathFu, DirectXMath, etc.&lt;/p&gt;\n\n&lt;p&gt;So with that, I hope you&amp;#39;ll consider giving Klein a try :) It&amp;#39;s &lt;em&gt;MIT&lt;/em&gt; licensed, and I really just want others to benefit from the formulation in the same way I did. You &lt;em&gt;don&amp;#39;t&lt;/em&gt; need to understand Geometric Algebra to use the library, but perhaps the library can help you learn GA! If you want to learn more about GA in general, the project site has some information, and also a few really handy &lt;a href=\"https://www.jeremyong.com/klein/references/\"&gt;references&lt;/a&gt; I refer to all the time.&lt;/p&gt;\n\n&lt;p&gt;If you have questions, or feedback, or requests, I&amp;#39;d love to hear them and answer to the best of my ability. I&amp;#39;m generally happy to answer PMs or offer &lt;a href=\"https://twitter.com/m_ninepoints/status/1215429886715629569\"&gt;advice&lt;/a&gt; to people interested in graphics engineering in general.&lt;/p&gt;\n\n&lt;p&gt;Thanks for checking out Klein!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"count": 1, "is_enabled": true, "subreddit_id": null, "description": "When you come across a feel-good thing.", "end_date": null, "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png", "days_of_premium": 0, "coin_price": 150, "is_new": false, "icon_format": null, "award_sub_type": "GLOBAL", "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=16&amp;height=16&amp;auto=webp&amp;s=92932f465d58e4c16b12b6eac4ca07d27e3d11c0", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=32&amp;height=32&amp;auto=webp&amp;s=d11484a208d68a318bf9d4fcf371171a1cb6a7ef", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=48&amp;height=48&amp;auto=webp&amp;s=febdf28b6f39f7da7eb1365325b85e0bb49a9f63", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=64&amp;height=64&amp;auto=webp&amp;s=b4406a2d88bf86fa3dc8a45aacf7e0c7bdccc4fb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=128&amp;height=128&amp;auto=webp&amp;s=19555b13e3e196b62eeb9160d1ac1d1b372dcb0b", "width": 128, "height": 128}], "icon_height": 2048, "award_type": "global", "start_date": null, "days_of_drip_extension": 0, "id": "award_5f123e3d-4f48-42f4-9c11-e98b566d5897", "icon_width": 2048, "subreddit_coin_reward": 0, "name": "Wholesome"}], "awarders": [], "media_only": false, "link_flair_template_id": "6902a368-d44a-11e5-b5f5-0e319b796727", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi0a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fb8wbq", "is_robot_indexable": true, "report_reasons": null, "author": "m_ninepoints", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/gamedev/comments/fb8wbq/klein_a_simdoptimized_c17_geometry_library/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/gamedev/comments/fb8wbq/klein_a_simdoptimized_c17_geometry_library/", "subreddit_subscribers": 406883, "created_utc": 1582959673.0, "num_crossposts": 1, "media": null, "is_video": false}], "created": 1582988775.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.gamedev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "rendering/gfx, game engines", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fb8y1n", "is_robot_indexable": true, "report_reasons": null, "author": "m_ninepoints", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_fb8wbq", "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/fb8y1n/klein_a_simdoptimized_c17_geometry_library/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "/r/gamedev/comments/fb8wbq/klein_a_simdoptimized_c17_geometry_library/", "subreddit_subscribers": 123793, "created_utc": 1582959975.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_4h42t", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Should there be a standard C++ pattern for this? transform_to | The Old New Thing", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fawq17", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 71, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 71, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582934005.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "devblogs.microsoft.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fawq17", "is_robot_indexable": true, "report_reasons": null, "author": "mskfisher", "discussion_type": null, "num_comments": 27, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fawq17/should_there_be_a_standard_c_pattern_for_this/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://devblogs.microsoft.com/oldnewthing/20200228-00/?p=103498", "subreddit_subscribers": 123793, "created_utc": 1582905205.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "I've seen several `template &lt;typename T&gt; class Ref` implementations in various code bases (For instance [this one](https://dawn.googlesource.com/dawn/+/refs/heads/master/src/dawn_native/RefCounted.h) used e.g. [here](https://dawn.googlesource.com/dawn/+/refs/heads/master/src/dawn_native/ComputePipeline.h)) and I always wondered what's the reasoning behind this? Why not simply declare `ShaderModuleBase &amp;mModule` as a private class member if the author wants to enforce that it references  _something_ as soon as the class is instantiated?", "author_fullname": "t2_5pns8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Meaning of Ref implementations", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_fbcajx", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1583010604.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve seen several &lt;code&gt;template &amp;lt;typename T&amp;gt; class Ref&lt;/code&gt; implementations in various code bases (For instance &lt;a href=\"https://dawn.googlesource.com/dawn/+/refs/heads/master/src/dawn_native/RefCounted.h\"&gt;this one&lt;/a&gt; used e.g. &lt;a href=\"https://dawn.googlesource.com/dawn/+/refs/heads/master/src/dawn_native/ComputePipeline.h\"&gt;here&lt;/a&gt;) and I always wondered what&amp;#39;s the reasoning behind this? Why not simply declare &lt;code&gt;ShaderModuleBase &amp;amp;mModule&lt;/code&gt; as a private class member if the author wants to enforce that it references  &lt;em&gt;something&lt;/em&gt; as soon as the class is instantiated?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fbcajx", "is_robot_indexable": true, "report_reasons": null, "author": "kw0lf", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fbcajx/meaning_of_ref_implementations/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/fbcajx/meaning_of_ref_implementations/", "subreddit_subscribers": 123793, "created_utc": 1582981804.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_ojp0w", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A quick primer on type traits in modern C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fauhzf", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 45, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 45, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582924330.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "internalpointers.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fauhzf", "is_robot_indexable": true, "report_reasons": null, "author": "liquidprocess", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fauhzf/a_quick_primer_on_type_traits_in_modern_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.internalpointers.com/post/quick-primer-type-traits-modern-cpp", "subreddit_subscribers": 123793, "created_utc": 1582895530.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_enhni", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "The C++ rvalue lifetime disaster, by Arno Sch\u00f6dl, CoreHard Autumn 2019", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fbag4p", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/s9vBk5CxFyY?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"oembed": {"provider_url": "https://www.youtube.com/", "title": "The C++ rvalue lifetime disaster. Arno Scho\u0308dl \u27a0 CoreHard Autumn 2019", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/s9vBk5CxFyY?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "height": 338, "width": 600, "version": "1.0", "author_name": "corehard", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/s9vBk5CxFyY/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCifgOu6ARWbZ_dV29gss8xw"}, "type": "youtube.com"}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/s9vBk5CxFyY?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/fbag4p", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582999046.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fbag4p", "is_robot_indexable": true, "report_reasons": null, "author": "dgellow", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fbag4p/the_c_rvalue_lifetime_disaster_by_arno_sch\u00f6dl/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=s9vBk5CxFyY", "subreddit_subscribers": 123793, "created_utc": 1582970246.0, "num_crossposts": 0, "media": {"oembed": {"provider_url": "https://www.youtube.com/", "title": "The C++ rvalue lifetime disaster. Arno Scho\u0308dl \u27a0 CoreHard Autumn 2019", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/s9vBk5CxFyY?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "height": 338, "width": 600, "version": "1.0", "author_name": "corehard", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/s9vBk5CxFyY/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCifgOu6ARWbZ_dV29gss8xw"}, "type": "youtube.com"}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_h7sh9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How I use references", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_faszel", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 66, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 66, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582915865.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "cor3ntin.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "faszel", "is_robot_indexable": true, "report_reasons": null, "author": "c0r3ntin", "discussion_type": null, "num_comments": 68, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/faszel/how_i_use_references/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://cor3ntin.github.io/posts/reference/", "subreddit_subscribers": 123793, "created_utc": 1582887065.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_hoaut", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++20 designated initializers", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_faudmh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 31, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 31, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582923717.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "mariusbancila.ro", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "faudmh", "is_robot_indexable": true, "report_reasons": null, "author": "drodri", "discussion_type": null, "num_comments": 56, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/faudmh/c20_designated_initializers/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://mariusbancila.ro/blog/2020/02/27/c20-designated-initializers/", "subreddit_subscribers": 123793, "created_utc": 1582894917.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "I have a relatively small project that makes use of some templated libraries like Cereal. MinGW linker times are really slow for me, especially in debug. It takes over 20 seconds to link the program. Release is bearable (4-5 seconds), but the whole project links in under a second with msvc.  I tried a bunch of linker options, but nothing seems to really help (besides reducing the debug info level with -g flag, but that kinda defeats the point of the debug build). Is MinGW just that slow?  How does clang comapre on Windows?", "author_fullname": "t2_sv6d9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is MinGW linker way too slow?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fb3ylq", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582963077.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a relatively small project that makes use of some templated libraries like Cereal. MinGW linker times are really slow for me, especially in debug. It takes over 20 seconds to link the program. Release is bearable (4-5 seconds), but the whole project links in under a second with msvc.  I tried a bunch of linker options, but nothing seems to really help (besides reducing the debug info level with -g flag, but that kinda defeats the point of the debug build). Is MinGW just that slow?  How does clang comapre on Windows?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fb3ylq", "is_robot_indexable": true, "report_reasons": null, "author": "kitanovkamen", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fb3ylq/is_mingw_linker_way_too_slow/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/fb3ylq/is_mingw_linker_way_too_slow/", "subreddit_subscribers": 123793, "created_utc": 1582934277.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Managed to distill this down from some deep deep template muck today trying to chain things in weird ways with a promises library. With some help from creduce I got it down from over a million lines preprocessed to maybe 2000 and then just started deleting random things and making sure it still segfaulted each time. GCC handles this correctly; I haven't looked through what's listed in the stack trace but my guess is that I tricked it into doing a dependent name lookup on `b` to see if it has a `c`, but `b` was never declared in the first place so it's a null pointer or something.\n\nWho says C++ can't be concise?\n\nGodbolt for proof: [https://godbolt.org/z/ZrFCcY](https://godbolt.org/z/ZrFCcY)\n\nEdit: ugh just realized it can be 51 if I used `class` instead of `struct`...", "author_fullname": "t2_38e0920r", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Crashing clang in 52 bytes: template&lt;class&gt;struct a;a&lt;typename b::template c&lt;&gt;&gt;", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fan0c5", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 143, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 143, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1582855088.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582883246.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Managed to distill this down from some deep deep template muck today trying to chain things in weird ways with a promises library. With some help from creduce I got it down from over a million lines preprocessed to maybe 2000 and then just started deleting random things and making sure it still segfaulted each time. GCC handles this correctly; I haven&amp;#39;t looked through what&amp;#39;s listed in the stack trace but my guess is that I tricked it into doing a dependent name lookup on &lt;code&gt;b&lt;/code&gt; to see if it has a &lt;code&gt;c&lt;/code&gt;, but &lt;code&gt;b&lt;/code&gt; was never declared in the first place so it&amp;#39;s a null pointer or something.&lt;/p&gt;\n\n&lt;p&gt;Who says C++ can&amp;#39;t be concise?&lt;/p&gt;\n\n&lt;p&gt;Godbolt for proof: &lt;a href=\"https://godbolt.org/z/ZrFCcY\"&gt;https://godbolt.org/z/ZrFCcY&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Edit: ugh just realized it can be 51 if I used &lt;code&gt;class&lt;/code&gt; instead of &lt;code&gt;struct&lt;/code&gt;...&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fan0c5", "is_robot_indexable": true, "report_reasons": null, "author": "schottm", "discussion_type": null, "num_comments": 59, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fan0c5/crashing_clang_in_52_bytes_templateclassstruct/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/fan0c5/crashing_clang_in_52_bytes_templateclassstruct/", "subreddit_subscribers": 123793, "created_utc": 1582854446.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "(by LLVM I mean LLVM, LLDB, Clang, etc, everything)\n\nsure C++ could be useful or even nessicary for some parts, but the entire thing does not need to be written in C++, and in my opinion it shouldn't be.\n\ncompiling takes 200 times longer (I compiled my 50,000 SLOC project vs a 1 character change to libFormat to get this timing, and this was a rebuild, not from scratch; my project took 2 seconds, Clang took 400.)\n\nI assume that's because of the extensive use of templates.\n\nAlso, there's all the issues with readability, the libFormat change was near a function called `parseBlock` which has hidden default bool values that are only visible in the UnwrappedLineParser header.\n\nand then there's all the other hidden complexity, operator overloading, function overloading, and probably a bunch more I'm not even thinking of.\n\nDon't get me wrong, I'm not saying Templates shouldn't exist, or operator overloading, or function overloading, or even default variables.\n\nall of those features can be useful.\n\nI'm just saying they should be used sparingly.\n\nso, as the title says, why is/should LLVM be written entirely in C++, instead of a healthy mix of C and C++?", "author_fullname": "t2_xghqb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why is LLVM written entirely in C++?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fbaqos", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": "7bf857c8-4dcc-11e6-b84d-0e5fbba92363", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1583001014.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;(by LLVM I mean LLVM, LLDB, Clang, etc, everything)&lt;/p&gt;\n\n&lt;p&gt;sure C++ could be useful or even nessicary for some parts, but the entire thing does not need to be written in C++, and in my opinion it shouldn&amp;#39;t be.&lt;/p&gt;\n\n&lt;p&gt;compiling takes 200 times longer (I compiled my 50,000 SLOC project vs a 1 character change to libFormat to get this timing, and this was a rebuild, not from scratch; my project took 2 seconds, Clang took 400.)&lt;/p&gt;\n\n&lt;p&gt;I assume that&amp;#39;s because of the extensive use of templates.&lt;/p&gt;\n\n&lt;p&gt;Also, there&amp;#39;s all the issues with readability, the libFormat change was near a function called &lt;code&gt;parseBlock&lt;/code&gt; which has hidden default bool values that are only visible in the UnwrappedLineParser header.&lt;/p&gt;\n\n&lt;p&gt;and then there&amp;#39;s all the other hidden complexity, operator overloading, function overloading, and probably a bunch more I&amp;#39;m not even thinking of.&lt;/p&gt;\n\n&lt;p&gt;Don&amp;#39;t get me wrong, I&amp;#39;m not saying Templates shouldn&amp;#39;t exist, or operator overloading, or function overloading, or even default variables.&lt;/p&gt;\n\n&lt;p&gt;all of those features can be useful.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m just saying they should be used sparingly.&lt;/p&gt;\n\n&lt;p&gt;so, as the title says, why is/should LLVM be written entirely in C++, instead of a healthy mix of C and C++?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "FoundationIO &amp; OVIA", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fbaqos", "is_robot_indexable": true, "report_reasons": null, "author": "bumblebritches57", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/fbaqos/why_is_llvm_written_entirely_in_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/fbaqos/why_is_llvm_written_entirely_in_c/", "subreddit_subscribers": 123793, "created_utc": 1582972214.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_fbaqos", "before": null}}