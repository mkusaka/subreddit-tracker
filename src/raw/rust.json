{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once. If you want your code reviewed or review other's code, there's a [codereview stackexchange](https://codereview.stackexchange.com/questions/tagged/rust), too. If you need to test your code, maybe [the Rust playground](https://play.rust-lang.org) is for you.\n\nHere are some other venues where help may be found:\n\n[/r/learnrust](https://www.reddit.com/r/learnrust) is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/).\n\nThe official Rust Programming Language Discord: [https://discord.gg/rust-lang](https://discord.gg/rust-lang)\n\nThe unofficial Rust community Discord: [https://bit.ly/rust-community](https://bit.ly/rust-community)\n\nThe Rust-related IRC channels on irc.mozilla.org (click the links to open a web-based IRC client):\n\n - [#rust](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust) (general questions)\n - [#rust-beginners](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-beginners) (beginner questions)\n - [#cargo](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23cargo) (the package manager)\n - [#rust-gamedev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-gamedev) (graphics and video games, and see also [/r/rust_gamedev](https://www.reddit.com/r/rust_gamedev))\n - [#rust-osdev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-osdev) (operating systems and embedded systems)\n - [#rust-webdev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-webdev) (web development)\n - [#rust-networking](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-networking) (computer networking, and see also [/r/rust_networking](https://www.reddit.com/r/rust_networking))\n\nAlso check out [last week's thread](https://reddit.com/r/rust/comments/f5413m/hey_rustaceans_got_an_easy_question_ask_here/) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nAlso if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hey Rustaceans! Got an easy question? Ask here (9/2020)!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f8ney8", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 25, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 25, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582556076.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven&amp;#39;t been written yet.&lt;/p&gt;\n\n&lt;p&gt;If you have a &lt;a href=\"http://stackoverflow.com/\"&gt;StackOverflow&lt;/a&gt; account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it &lt;a href=\"http://stackoverflow.com/questions/tagged/rust\"&gt;the &amp;quot;Rust&amp;quot; tag&lt;/a&gt; for maximum visibility). Note that this site is very interested in question quality. I&amp;#39;ve been asked to read a RFC I authored once. If you want your code reviewed or review other&amp;#39;s code, there&amp;#39;s a &lt;a href=\"https://codereview.stackexchange.com/questions/tagged/rust\"&gt;codereview stackexchange&lt;/a&gt;, too. If you need to test your code, maybe &lt;a href=\"https://play.rust-lang.org\"&gt;the Rust playground&lt;/a&gt; is for you.&lt;/p&gt;\n\n&lt;p&gt;Here are some other venues where help may be found:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/learnrust\"&gt;/r/learnrust&lt;/a&gt; is a subreddit to share your questions and epiphanies learning Rust programming.&lt;/p&gt;\n\n&lt;p&gt;The official Rust user forums: &lt;a href=\"https://users.rust-lang.org/\"&gt;https://users.rust-lang.org/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The official Rust Programming Language Discord: &lt;a href=\"https://discord.gg/rust-lang\"&gt;https://discord.gg/rust-lang&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The unofficial Rust community Discord: &lt;a href=\"https://bit.ly/rust-community\"&gt;https://bit.ly/rust-community&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The Rust-related IRC channels on irc.mozilla.org (click the links to open a web-based IRC client):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust\"&gt;#rust&lt;/a&gt; (general questions)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-beginners\"&gt;#rust-beginners&lt;/a&gt; (beginner questions)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23cargo\"&gt;#cargo&lt;/a&gt; (the package manager)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-gamedev\"&gt;#rust-gamedev&lt;/a&gt; (graphics and video games, and see also &lt;a href=\"https://www.reddit.com/r/rust_gamedev\"&gt;/r/rust_gamedev&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-osdev\"&gt;#rust-osdev&lt;/a&gt; (operating systems and embedded systems)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-webdev\"&gt;#rust-webdev&lt;/a&gt; (web development)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-networking\"&gt;#rust-networking&lt;/a&gt; (computer networking, and see also &lt;a href=\"https://www.reddit.com/r/rust_networking\"&gt;/r/rust_networking&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Also check out &lt;a href=\"https://reddit.com/r/rust/comments/f5413m/hey_rustaceans_got_an_easy_question_ask_here/\"&gt;last week&amp;#39;s thread&lt;/a&gt; with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.&lt;/p&gt;\n\n&lt;p&gt;Also if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f8ney8", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 78, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/f8ney8/hey_rustaceans_got_an_easy_question_ask_here_92020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/f8ney8/hey_rustaceans_got_an_easy_question_ask_here_92020/", "subreddit_subscribers": 91989, "created_utc": 1582527276.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "New week, new Rust! What are you folks up to? Answer here or over at [rust-users](https://users.rust-lang.org/t/whats-everyone-working-on-this-week-9-2020/38638?u=llogiq)!", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What's everyone working on this week (9/2020)?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f8ng5w", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 25, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 25, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582556271.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;New week, new Rust! What are you folks up to? Answer here or over at &lt;a href=\"https://users.rust-lang.org/t/whats-everyone-working-on-this-week-9-2020/38638?u=llogiq\"&gt;rust-users&lt;/a&gt;!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f8ng5w", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 27, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/f8ng5w/whats_everyone_working_on_this_week_92020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/f8ng5w/whats_everyone_working_on_this_week_92020/", "subreddit_subscribers": 91989, "created_utc": 1582527471.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I'm excited to announce that two of the symmetric encryption crates from the [RustCrypto/AEADs](https://github.com/RustCrypto/AEADs) project just received their first security audit \ud83c\udf89\n\n(NOTE: \"RustCrypto\" in this context means the Pascal Case GitHub organization, not the unmaintained kebab case `rust-crypto` crate)\n\nIn December 2019, [MobileCoin](https://www.mobilecoin.com/) engaged [NCC Group](https://www.nccgroup.trust/) to conduct a review of the following crates which provide pure Rust implementations of these authenticated encryption algorithms, along with their cryptographic dependencies:\n\n- [`aes-gcm`](https://github.com/RustCrypto/AEADs/tree/master/aes-gcm): AEAD cipher implementation\n  - [`aes`](https://crates.io/crates/aes): raw AES block cipher with [`aesni`](https://crates.io/crates/aesni) and [`aes-soft`](https://crates.io/crates/aes-soft) backends\n  - [`polyval`](https://crates.io/crates/polyval): used to implement GHASH in AES-GCM\n- [`chacha20poly1305`](https://github.com/RustCrypto/AEADs/tree/master/chacha20poly1305): AEAD cipher implementation\n  - [`chacha20`](https://crates.io/crates/chacha20): raw ChaCha20 stream cipher\n  - [`poly1305`](https://crates.io/crates/poly1305): authenticator providing message integrity\n\nThe scope of the audit was assessing cryptographic security including constant-time operation of these crates and their cryptographic dependencies, including implementations that leverage x86-64 CPU intrinsics as well as portable implementations based on integer arithmetic. Two consultants provided five person-days of efforts.\n\nResult: there were only minor findings (mostly related to performance).\n\nYou can read the full report at:\n\nhttps://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/\n\nSee also:\n\n- [`aes-gcm` crate on crates.io](https://crates.io/crates/aes-gcm) | [docs](https://docs.rs/aes-gcm)\n- [`chacha20poly1305` crate on crates.io](https://crates.io/crates/chacha20poly1305) | [docs](https://docs.rs/chacha20poly1305)", "author_fullname": "t2_1vtu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Audit of the RustCrypto `aes-gcm` and `chacha20poly1305` crates by NCC group", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fa8a96", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 155, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 155, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1582787546.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582815953.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m excited to announce that two of the symmetric encryption crates from the &lt;a href=\"https://github.com/RustCrypto/AEADs\"&gt;RustCrypto/AEADs&lt;/a&gt; project just received their first security audit \ud83c\udf89&lt;/p&gt;\n\n&lt;p&gt;(NOTE: &amp;quot;RustCrypto&amp;quot; in this context means the Pascal Case GitHub organization, not the unmaintained kebab case &lt;code&gt;rust-crypto&lt;/code&gt; crate)&lt;/p&gt;\n\n&lt;p&gt;In December 2019, &lt;a href=\"https://www.mobilecoin.com/\"&gt;MobileCoin&lt;/a&gt; engaged &lt;a href=\"https://www.nccgroup.trust/\"&gt;NCC Group&lt;/a&gt; to conduct a review of the following crates which provide pure Rust implementations of these authenticated encryption algorithms, along with their cryptographic dependencies:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/RustCrypto/AEADs/tree/master/aes-gcm\"&gt;&lt;code&gt;aes-gcm&lt;/code&gt;&lt;/a&gt;: AEAD cipher implementation\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://crates.io/crates/aes\"&gt;&lt;code&gt;aes&lt;/code&gt;&lt;/a&gt;: raw AES block cipher with &lt;a href=\"https://crates.io/crates/aesni\"&gt;&lt;code&gt;aesni&lt;/code&gt;&lt;/a&gt; and &lt;a href=\"https://crates.io/crates/aes-soft\"&gt;&lt;code&gt;aes-soft&lt;/code&gt;&lt;/a&gt; backends&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://crates.io/crates/polyval\"&gt;&lt;code&gt;polyval&lt;/code&gt;&lt;/a&gt;: used to implement GHASH in AES-GCM&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/RustCrypto/AEADs/tree/master/chacha20poly1305\"&gt;&lt;code&gt;chacha20poly1305&lt;/code&gt;&lt;/a&gt;: AEAD cipher implementation\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://crates.io/crates/chacha20\"&gt;&lt;code&gt;chacha20&lt;/code&gt;&lt;/a&gt;: raw ChaCha20 stream cipher&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://crates.io/crates/poly1305\"&gt;&lt;code&gt;poly1305&lt;/code&gt;&lt;/a&gt;: authenticator providing message integrity&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The scope of the audit was assessing cryptographic security including constant-time operation of these crates and their cryptographic dependencies, including implementations that leverage x86-64 CPU intrinsics as well as portable implementations based on integer arithmetic. Two consultants provided five person-days of efforts.&lt;/p&gt;\n\n&lt;p&gt;Result: there were only minor findings (mostly related to performance).&lt;/p&gt;\n\n&lt;p&gt;You can read the full report at:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/\"&gt;https://research.nccgroup.com/2020/02/26/public-report-rustcrypto-aes-gcm-and-chacha20poly1305-implementation-review/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;See also:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://crates.io/crates/aes-gcm\"&gt;&lt;code&gt;aes-gcm&lt;/code&gt; crate on crates.io&lt;/a&gt; | &lt;a href=\"https://docs.rs/aes-gcm\"&gt;docs&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://crates.io/crates/chacha20poly1305\"&gt;&lt;code&gt;chacha20poly1305&lt;/code&gt; crate on crates.io&lt;/a&gt; | &lt;a href=\"https://docs.rs/chacha20poly1305\"&gt;docs&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"count": 1, "is_enabled": true, "subreddit_id": null, "description": "Thank you stranger. Shows the award.", "end_date": null, "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png", "days_of_premium": 0, "coin_price": 150, "is_new": false, "icon_format": null, "award_sub_type": "GLOBAL", "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_height": 2048, "award_type": "global", "start_date": null, "days_of_drip_extension": 0, "id": "award_f44611f1-b89e-46dc-97fe-892280b13b82", "icon_width": 2048, "subreddit_coin_reward": 0, "name": "Helpful"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fa8a96", "is_robot_indexable": true, "report_reasons": null, "author": "bascule", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fa8a96/audit_of_the_rustcrypto_aesgcm_and/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fa8a96/audit_of_the_rustcrypto_aesgcm_and/", "subreddit_subscribers": 91989, "created_utc": 1582787153.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hi! Currently learning Rust. As a fun exercise, I made an example of a Clojure program that calls a Rust library via Java JNI, which is then compiled to an executable with GraalVM.\n\n[https://github.com/borkdude/clojure-rust-graalvm](https://github.com/borkdude/clojure-rust-graalvm-native)", "author_fullname": "t2_340kq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Example of calling a Rust library from Clojure, all combined into one executable using GraalVM", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_faaqyc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1582803288.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582831847.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi! Currently learning Rust. As a fun exercise, I made an example of a Clojure program that calls a Rust library via Java JNI, which is then compiled to an executable with GraalVM.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/borkdude/clojure-rust-graalvm-native\"&gt;https://github.com/borkdude/clojure-rust-graalvm&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "faaqyc", "is_robot_indexable": true, "report_reasons": null, "author": "Borkdude", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/faaqyc/example_of_calling_a_rust_library_from_clojure/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/faaqyc/example_of_calling_a_rust_library_from_clojure/", "subreddit_subscribers": 91989, "created_utc": 1582803047.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_15ilig", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Bentley's coding challenge: k most frequent words", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fa5sbr", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 40, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 40, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582802809.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "codegolf.stackexchange.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fa5sbr", "is_robot_indexable": true, "report_reasons": null, "author": "test9753", "discussion_type": null, "num_comments": 15, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fa5sbr/bentleys_coding_challenge_k_most_frequent_words/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://codegolf.stackexchange.com/questions/188133/bentleys-coding-challenge-k-most-frequent-words", "subreddit_subscribers": 91989, "created_utc": 1582774009.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_12r2gd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Better Plotting with Plotly in Rust Notebooks", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_faayaf", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582833020.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "shahinrostami.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "faayaf", "is_robot_indexable": true, "report_reasons": null, "author": "shahinrostami", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/faayaf/better_plotting_with_plotly_in_rust_notebooks/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://shahinrostami.com/posts/programming/rust-notebooks/better-plotting-with-plotly/", "subreddit_subscribers": 91989, "created_utc": 1582804220.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_az7do", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Crosspost: Rust on RG300 consoles (and similar MIPS devices)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_fabgxm", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582835801.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "reddit.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fabgxm", "is_robot_indexable": true, "report_reasons": null, "author": "koalillo", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fabgxm/crosspost_rust_on_rg300_consoles_and_similar_mips/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust_gamedev/comments/fabgof/wrote_a_rust_program_that_demonstrates_graphics/", "subreddit_subscribers": 91989, "created_utc": 1582807001.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_pmcr0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "This Week in Rust 327", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_fabtwg", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582837677.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "this-week-in-rust.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "twir", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fabtwg", "is_robot_indexable": true, "report_reasons": null, "author": "nasa42", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/fabtwg/this_week_in_rust_327/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://this-week-in-rust.org/blog/2020/02/25/this-week-in-rust-327/", "subreddit_subscribers": 91989, "created_utc": 1582808877.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_i8i0b", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "crates.io incident report for 2020-02-20 | Inside Rust Blog", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f9tr55", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 212, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": "4c3a495a-89df-11e3-a482-12313d27e9a3", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 212, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582754968.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.rust-lang.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "rust", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f9tr55", "is_robot_indexable": true, "report_reasons": null, "author": "pietroalbini", "discussion_type": null, "num_comments": 20, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/f9tr55/cratesio_incident_report_for_20200220_inside_rust/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://blog.rust-lang.org/inside-rust/2020/02/26/crates-io-incident-report.html", "subreddit_subscribers": 91989, "created_utc": 1582726168.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I tried searching but couldn't find any place where I can get detailed info on how to write async methods.", "author_fullname": "t2_yxcrm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Can we write async methods? If we can,How?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fa9q7q", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582825346.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I tried searching but couldn&amp;#39;t find any place where I can get detailed info on how to write async methods.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fa9q7q", "is_robot_indexable": true, "report_reasons": null, "author": "VJ012", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fa9q7q/can_we_write_async_methods_if_we_canhow/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fa9q7q/can_we_write_async_methods_if_we_canhow/", "subreddit_subscribers": 91989, "created_utc": 1582796546.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "About a year ago, I've released my first project with [LV2](https://lv2plug.in/), a plugin framework called [lv2rs](https://www.reddit.com/r/rust/comments/bawmbs/lv2rs_creating_lv2_plugins_in_rust/). I've received some great feedback and then joined forces with [Prokopyl](https://github.com/prokopyl) and the [RustAudio discourse](https://rust-audio.discourse.group/) to create [rust-lv2](https://crates.io/crates/lv2), the safe, fast, and ergonomic framework to create LV2 plugins, written in Rust, which now received its first release!\n\nUsing rust-lv2, you can create LV2 audio processing plugins with much less boilerplate code and worries about pointer and data handling, compared to plugins that use the raw C API directly. Thanks to Rust's incredible type system, several errors a programmer can make with the original utilities simply aren't possible.\n\nLet's have an example. This is a basic plugin that amplifies the audio from an input port and writes it to an output port:\n\n    // Include the prelude of the core crate. Every specification is implemented by\n    // exactly one crate and their preludes always contain most of the types needed\n    // to use them in a plugin.\n    use lv2_core::prelude::*;\n\n    // Most useful plugins will have ports for input and output data. In code, these\n    // ports are represented by a struct implementing the `PortContainer` trait.\n    #[derive(PortCollection)]\n    struct Ports {\n        gain: InputPort&lt;Control&gt;,\n        input: InputPort&lt;Audio&gt;,\n        output: OutputPort&lt;Audio&gt;,\n    }\n\n    // Every plugin defines a struct for the plugin instance. All persistent data\n    // associated with a plugin instance is stored here, and is available to every\n    // instance method. In this simple plugin, there is no additional instance data and\n    // therefore, this struct is empty.\n    struct Amp;\n\n    // The URI is the identifier for a plugin, and how the host associates this \n    // implementation in code with its description in data. If this URI does not match\n    // that used in the data files, the host will fail to load the plugin. Since many \n    // other things are also identified by URIs, there is a separate trait for them:\n    // The `UriBound`. It stores the URI as a constant null-terminated byte slice and\n    // provides a method to easily retrieve the URI. If the null-terminator is omitted,\n    // some other parts of the system may cause undefined behaviour. Since this can not\n    // checked by Rust's type system, this trait has to be unsafe. However, this is the\n    // only time a user has to use the `unsafe` keyword.\n    unsafe impl UriBound for Amp {\n        const URI: &amp;'static [u8] = b\"urn:rust-lv2-book:eg-amp-rs\\0\";\n    }\n\n    // Every plugin struct implements the `Plugin` trait.\n    impl Plugin for Amp {\n        // Set the ports type.\n        type Ports = Ports;\n\n        // This plugin does not use additional host features and therefore, we set the\n        // features collection type to `()`. Other plugins may define a separate struct\n        // with their required and optional features and set it here.\n        type Features = ();\n\n        // The `new` method is called by the plugin backend when it creates a new \n        // plugin instance. The host passes the plugin URI, sample rate, and bundle \n        // path for plugins that need to load additional resources (e.g. waveforms).\n        // The features parameter contains host-provided features defined in LV2 \n        // extensions, but this simple plugin does not use any. This method is in the\n        // \u201cinstantiation\u201d threading class, so no other methods on this instance will \n        // be called concurrently with it.\n        fn new(_plugin_info: &amp;PluginInfo, _features: ()) -&gt; Option&lt;Self&gt; {\n            Some(Self)\n        }\n\n        // The `run()` method is the main process function of the plugin. It processes\n        // a block of audio in the audio context.\n        fn run(&amp;mut self, ports: &amp;mut Ports) {\n            let coef = if *(ports.gain) &gt; -90.0 {\n                10.0_f32.powf(*(ports.gain) * 0.05)\n            } else {\n                0.0\n            };\n\n            for (in_frame, out_frame) in Iterator::zip(ports.input.iter(), ports.output.iter_mut()) {\n                *out_frame = in_frame * coef;\n            }\n        }\n    }\n\n    // The `lv2_descriptors` macro creates the entry point to the plugin library. It\n    // takes structs that implement `Plugin` and exposes them. The host will load the\n    // library and call a generated function to find all the plugins defined in the\n    // library.\n    lv2_descriptors!(Amp);\n\n\nIf you want to learn more about rust-lv2, make sure to check out the [rust-LV2 book](https://janonard.github.io/rust-lv2-book/). It's an effort to translate the [original LV2 book](https://lv2plug.in/book/) and explains how to properly use the framework. Both examples were taken from their respective books.\n\nIf you have a question, have a little inconvenience or even encounter a bug, please create an issue in [the Github repository](https://github.com/RustAudio/rust-lv2/). We are striving to improve the usability of the framework and are going to implement more specifications soon.\n\nEDIT: I've replaced every indentation with four spaces, I hope it works now!\nEDIT 2: I've understood the comment now and fixed it. Sorry!", "author_fullname": "t2_2sqbztav", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "rust-lv2: A safe, fast, and ergonomic framework to create LV2 plugins, written in Rust", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f9wzbx", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 59, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 59, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1582752923.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582767791.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;About a year ago, I&amp;#39;ve released my first project with &lt;a href=\"https://lv2plug.in/\"&gt;LV2&lt;/a&gt;, a plugin framework called &lt;a href=\"https://www.reddit.com/r/rust/comments/bawmbs/lv2rs_creating_lv2_plugins_in_rust/\"&gt;lv2rs&lt;/a&gt;. I&amp;#39;ve received some great feedback and then joined forces with &lt;a href=\"https://github.com/prokopyl\"&gt;Prokopyl&lt;/a&gt; and the &lt;a href=\"https://rust-audio.discourse.group/\"&gt;RustAudio discourse&lt;/a&gt; to create &lt;a href=\"https://crates.io/crates/lv2\"&gt;rust-lv2&lt;/a&gt;, the safe, fast, and ergonomic framework to create LV2 plugins, written in Rust, which now received its first release!&lt;/p&gt;\n\n&lt;p&gt;Using rust-lv2, you can create LV2 audio processing plugins with much less boilerplate code and worries about pointer and data handling, compared to plugins that use the raw C API directly. Thanks to Rust&amp;#39;s incredible type system, several errors a programmer can make with the original utilities simply aren&amp;#39;t possible.&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s have an example. This is a basic plugin that amplifies the audio from an input port and writes it to an output port:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Include the prelude of the core crate. Every specification is implemented by\n// exactly one crate and their preludes always contain most of the types needed\n// to use them in a plugin.\nuse lv2_core::prelude::*;\n\n// Most useful plugins will have ports for input and output data. In code, these\n// ports are represented by a struct implementing the `PortContainer` trait.\n#[derive(PortCollection)]\nstruct Ports {\n    gain: InputPort&amp;lt;Control&amp;gt;,\n    input: InputPort&amp;lt;Audio&amp;gt;,\n    output: OutputPort&amp;lt;Audio&amp;gt;,\n}\n\n// Every plugin defines a struct for the plugin instance. All persistent data\n// associated with a plugin instance is stored here, and is available to every\n// instance method. In this simple plugin, there is no additional instance data and\n// therefore, this struct is empty.\nstruct Amp;\n\n// The URI is the identifier for a plugin, and how the host associates this \n// implementation in code with its description in data. If this URI does not match\n// that used in the data files, the host will fail to load the plugin. Since many \n// other things are also identified by URIs, there is a separate trait for them:\n// The `UriBound`. It stores the URI as a constant null-terminated byte slice and\n// provides a method to easily retrieve the URI. If the null-terminator is omitted,\n// some other parts of the system may cause undefined behaviour. Since this can not\n// checked by Rust&amp;#39;s type system, this trait has to be unsafe. However, this is the\n// only time a user has to use the `unsafe` keyword.\nunsafe impl UriBound for Amp {\n    const URI: &amp;amp;&amp;#39;static [u8] = b&amp;quot;urn:rust-lv2-book:eg-amp-rs\\0&amp;quot;;\n}\n\n// Every plugin struct implements the `Plugin` trait.\nimpl Plugin for Amp {\n    // Set the ports type.\n    type Ports = Ports;\n\n    // This plugin does not use additional host features and therefore, we set the\n    // features collection type to `()`. Other plugins may define a separate struct\n    // with their required and optional features and set it here.\n    type Features = ();\n\n    // The `new` method is called by the plugin backend when it creates a new \n    // plugin instance. The host passes the plugin URI, sample rate, and bundle \n    // path for plugins that need to load additional resources (e.g. waveforms).\n    // The features parameter contains host-provided features defined in LV2 \n    // extensions, but this simple plugin does not use any. This method is in the\n    // \u201cinstantiation\u201d threading class, so no other methods on this instance will \n    // be called concurrently with it.\n    fn new(_plugin_info: &amp;amp;PluginInfo, _features: ()) -&amp;gt; Option&amp;lt;Self&amp;gt; {\n        Some(Self)\n    }\n\n    // The `run()` method is the main process function of the plugin. It processes\n    // a block of audio in the audio context.\n    fn run(&amp;amp;mut self, ports: &amp;amp;mut Ports) {\n        let coef = if *(ports.gain) &amp;gt; -90.0 {\n            10.0_f32.powf(*(ports.gain) * 0.05)\n        } else {\n            0.0\n        };\n\n        for (in_frame, out_frame) in Iterator::zip(ports.input.iter(), ports.output.iter_mut()) {\n            *out_frame = in_frame * coef;\n        }\n    }\n}\n\n// The `lv2_descriptors` macro creates the entry point to the plugin library. It\n// takes structs that implement `Plugin` and exposes them. The host will load the\n// library and call a generated function to find all the plugins defined in the\n// library.\nlv2_descriptors!(Amp);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If you want to learn more about rust-lv2, make sure to check out the &lt;a href=\"https://janonard.github.io/rust-lv2-book/\"&gt;rust-LV2 book&lt;/a&gt;. It&amp;#39;s an effort to translate the &lt;a href=\"https://lv2plug.in/book/\"&gt;original LV2 book&lt;/a&gt; and explains how to properly use the framework. Both examples were taken from their respective books.&lt;/p&gt;\n\n&lt;p&gt;If you have a question, have a little inconvenience or even encounter a bug, please create an issue in &lt;a href=\"https://github.com/RustAudio/rust-lv2/\"&gt;the Github repository&lt;/a&gt;. We are striving to improve the usability of the framework and are going to implement more specifications soon.&lt;/p&gt;\n\n&lt;p&gt;EDIT: I&amp;#39;ve replaced every indentation with four spaces, I hope it works now!\nEDIT 2: I&amp;#39;ve understood the comment now and fixed it. Sorry!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f9wzbx", "is_robot_indexable": true, "report_reasons": null, "author": "Janonard", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f9wzbx/rustlv2_a_safe_fast_and_ergonomic_framework_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f9wzbx/rustlv2_a_safe_fast_and_ergonomic_framework_to/", "subreddit_subscribers": 91989, "created_utc": 1582738991.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I would imagine const ref could have been the default semantic, but I would like to understand why rust chose move instead. I\u2019m sure there is an excellent reason but it\u2019s something I can\u2019t think of now.", "author_fullname": "t2_488i2qgu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What is the motivation behind default move semantics?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fa9pkp", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582825234.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I would imagine const ref could have been the default semantic, but I would like to understand why rust chose move instead. I\u2019m sure there is an excellent reason but it\u2019s something I can\u2019t think of now.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fa9pkp", "is_robot_indexable": true, "report_reasons": null, "author": "Caxpy", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fa9pkp/what_is_the_motivation_behind_default_move/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fa9pkp/what_is_the_motivation_behind_default_move/", "subreddit_subscribers": 91989, "created_utc": 1582796434.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_fa9pkp", "before": null}}