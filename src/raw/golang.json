{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_3saur1fy", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "10 part series to build web app with Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gobfe7", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 82, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 82, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1590145838.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "gophersumit.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gobfe7", "is_robot_indexable": true, "report_reasons": null, "author": "gophersumit", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gobfe7/10_part_series_to_build_web_app_with_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.gophersumit.com/series/web/", "subreddit_subscribers": 113456, "created_utc": 1590117038.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I feel like it's a dummy question, but I want to ask it anyway since I do not have much experience with concurrent programming.\n\nIn the app I am currently working on, someone wrote a code that should do something (in this case, printing \"TICK!\") every, let's say 5 minutes:\n\n    go func() {\n        for {\n            fmt.Println(\"TICK!\")\n            time.Sleep(5 * time.Minute)\n        }\n    }()\n\nHowever, from what I have read, the recommended approach is:\n\n    func CallTickerInBackground(done &lt;-chan bool) {\n        ticker := time.NewTicker(5 * time.Minute)\n        go func() {\n            for {\n            \tselect {\n            \tcase &lt;-done:\n            \t\tlogrus.Info(\"Stopping ticker\")\n            \t\tticker.Stop()\n            \t\treturn\n            \tcase &lt;-ticker.C:\n            \t\tfmt.Println(\"TICK!\")\n            \t}\n            }\n        }()\n    }\n\nThe advantages of the latter are that we have more stable time intervals (instead of processing time + waiting time) and we have control over stopping the background processing. On the other hand, right now a separate channel to stop it needs to be created, so it's slightly more complex.\n\nSo which approach is better, and why (or under what circumstances)?", "author_fullname": "t2_5gq2frtk", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to do something every 5 minutes in Go?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gododv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590155731.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I feel like it&amp;#39;s a dummy question, but I want to ask it anyway since I do not have much experience with concurrent programming.&lt;/p&gt;\n\n&lt;p&gt;In the app I am currently working on, someone wrote a code that should do something (in this case, printing &amp;quot;TICK!&amp;quot;) every, let&amp;#39;s say 5 minutes:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;go func() {\n    for {\n        fmt.Println(&amp;quot;TICK!&amp;quot;)\n        time.Sleep(5 * time.Minute)\n    }\n}()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, from what I have read, the recommended approach is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func CallTickerInBackground(done &amp;lt;-chan bool) {\n    ticker := time.NewTicker(5 * time.Minute)\n    go func() {\n        for {\n            select {\n            case &amp;lt;-done:\n                logrus.Info(&amp;quot;Stopping ticker&amp;quot;)\n                ticker.Stop()\n                return\n            case &amp;lt;-ticker.C:\n                fmt.Println(&amp;quot;TICK!&amp;quot;)\n            }\n        }\n    }()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The advantages of the latter are that we have more stable time intervals (instead of processing time + waiting time) and we have control over stopping the background processing. On the other hand, right now a separate channel to stop it needs to be created, so it&amp;#39;s slightly more complex.&lt;/p&gt;\n\n&lt;p&gt;So which approach is better, and why (or under what circumstances)?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gododv", "is_robot_indexable": true, "report_reasons": null, "author": "mknycha", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gododv/how_to_do_something_every_5_minutes_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gododv/how_to_do_something_every_5_minutes_in_go/", "subreddit_subscribers": 113456, "created_utc": 1590126931.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I have been solving various technical interview problems and coding challenges in Go. The problems vary from simple \u201cReverse a String\u201d to more involving ones like \u201cImplement the A* Algorithm\u201d\n\nIf you have any feedback and/or some suggestions for new problems to solve, I would appreciate it as my goal is to grow this collection and help anyone interested in learning and/or practicing before their interview \n\nhttps://github.com/shomali11/go-interview", "author_fullname": "t2_wynon", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "50+ Technical Interview Problems Solved in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gnxfby", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 136, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 136, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590098654.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have been solving various technical interview problems and coding challenges in Go. The problems vary from simple \u201cReverse a String\u201d to more involving ones like \u201cImplement the A* Algorithm\u201d&lt;/p&gt;\n\n&lt;p&gt;If you have any feedback and/or some suggestions for new problems to solve, I would appreciate it as my goal is to grow this collection and help anyone interested in learning and/or practicing before their interview &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/shomali11/go-interview\"&gt;https://github.com/shomali11/go-interview&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gnxfby", "is_robot_indexable": true, "report_reasons": null, "author": "shomali11", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gnxfby/50_technical_interview_problems_solved_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gnxfby/50_technical_interview_problems_solved_in_go/", "subreddit_subscribers": 113456, "created_utc": 1590069854.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_3zooina6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GUI packages for Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_gojais", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1590182685.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "golangr.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gojais", "is_robot_indexable": true, "report_reasons": null, "author": "btcrozert", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gojais/gui_packages_for_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://golangr.com/gui/", "subreddit_subscribers": 113456, "created_utc": 1590153885.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": " [https://github.com/ali2210/WizDwarf/blob/master/js/webrtc-video.js](https://github.com/ali2210/WizDwarf/blob/master/js/webrtc-video.js) \n\nThis is the code which i find out at youtube", "author_fullname": "t2_1a2zye3u", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I want to use video streaming in my website , however I got this error \"media Stream Error \"", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_goj6jr", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590182252.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/ali2210/WizDwarf/blob/master/js/webrtc-video.js\"&gt;https://github.com/ali2210/WizDwarf/blob/master/js/webrtc-video.js&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;This is the code which i find out at youtube&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "goj6jr", "is_robot_indexable": true, "report_reasons": null, "author": "Nicklous95", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/goj6jr/i_want_to_use_video_streaming_in_my_website/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/goj6jr/i_want_to_use_video_streaming_in_my_website/", "subreddit_subscribers": 113456, "created_utc": 1590153452.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "DNS caching has been discussed multiple times in the past. The consensus seems to be that Go won't go there: [github.com/golang/go/issues/24796](https://github.com/golang/go/issues/24796#issuecomment-383716244)\n\nI've seen a few DNS caching solutions for Go ([one](https://github.com/rs/dnscache), [two](https://github.com/mercari/go-dnscache)), however, I haven't seen any implementations that allow replacing the `net.DefaultResolver`?\n\nPackage [github.com/artyom/dot](https://github.com/artyom/dot) got me thinking if I could do the same for DNS caching, and also DNS over HTTPS.\n\nSo [github.com/ncruces/go-dns](https://godoc.org/github.com/ncruces/go-dns) is my attempt.\nReplacing `net.DefaultResolver` with a caching DNS over HTTPS resolver using 1.1.1.1 as the name server should be this simple:\n\n    net.DefaultResolver = dns.NewCachingResolver(dns.NewHTTPSResolver(\n    \t\"1.1.1.1\", \"2606:4700:4700::1111\",\n    \t\"1.0.0.1\", \"2606:4700:4700::1001\"))\n\nWhat do you guys thing? Do you know of any other implementations that allow replacing `net.DefaultResolver`?", "author_fullname": "t2_5ewqmlxj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Replacing net.DefaultResolver with a caching DNS over TLS/HTTPS resolver", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gofxbv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1590148944.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590167309.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;DNS caching has been discussed multiple times in the past. The consensus seems to be that Go won&amp;#39;t go there: &lt;a href=\"https://github.com/golang/go/issues/24796#issuecomment-383716244\"&gt;github.com/golang/go/issues/24796&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve seen a few DNS caching solutions for Go (&lt;a href=\"https://github.com/rs/dnscache\"&gt;one&lt;/a&gt;, &lt;a href=\"https://github.com/mercari/go-dnscache\"&gt;two&lt;/a&gt;), however, I haven&amp;#39;t seen any implementations that allow replacing the &lt;code&gt;net.DefaultResolver&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;Package &lt;a href=\"https://github.com/artyom/dot\"&gt;github.com/artyom/dot&lt;/a&gt; got me thinking if I could do the same for DNS caching, and also DNS over HTTPS.&lt;/p&gt;\n\n&lt;p&gt;So &lt;a href=\"https://godoc.org/github.com/ncruces/go-dns\"&gt;github.com/ncruces/go-dns&lt;/a&gt; is my attempt.\nReplacing &lt;code&gt;net.DefaultResolver&lt;/code&gt; with a caching DNS over HTTPS resolver using 1.1.1.1 as the name server should be this simple:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;net.DefaultResolver = dns.NewCachingResolver(dns.NewHTTPSResolver(\n    &amp;quot;1.1.1.1&amp;quot;, &amp;quot;2606:4700:4700::1111&amp;quot;,\n    &amp;quot;1.0.0.1&amp;quot;, &amp;quot;2606:4700:4700::1001&amp;quot;))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What do you guys thing? Do you know of any other implementations that allow replacing &lt;code&gt;net.DefaultResolver&lt;/code&gt;?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gofxbv", "is_robot_indexable": true, "report_reasons": null, "author": "ncruces", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gofxbv/replacing_netdefaultresolver_with_a_caching_dns/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gofxbv/replacing_netdefaultresolver_with_a_caching_dns/", "subreddit_subscribers": 113456, "created_utc": 1590138509.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_1re6u9gd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to convert Map to Slice [3 gotchas]", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gofaoa", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.63, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1590164006.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "web3.coach", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gofaoa", "is_robot_indexable": true, "report_reasons": null, "author": "EnchanterIOSvk", "discussion_type": null, "num_comments": 15, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gofaoa/how_to_convert_map_to_slice_3_gotchas/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://web3.coach/golang-how-to-convert-map-to-slice-three-gotchas", "subreddit_subscribers": 113456, "created_utc": 1590135206.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi. I've been golang enthusiast for a few months. Lately I wanted to consolidate my knowledge of golang concurrency. The following excerpt is from the book \"Concurrency in Go\" (by O\u2019Reilly):\n\n [https://pastebin.com/L24Z8nd1](https://pastebin.com/L24Z8nd1) \n\nIt works as it should (I suppose).   \nHowever if I add a few fmt.Println or another function - it deadlocks. :\n\n [https://pastebin.com/cAPbMgGv](https://pastebin.com/cAPbMgGv) \n\nThe use of the \"useless\" function causes deadlock 1/\\~10k application runs. On the other hand, if I comment out the useless function and uncomment fmt.Println - deadlock occurs much more often. \n\nCan somebody explain why is it happening?", "author_fullname": "t2_680hc0mi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Strange code behaviour", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gof5w3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590163344.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi. I&amp;#39;ve been golang enthusiast for a few months. Lately I wanted to consolidate my knowledge of golang concurrency. The following excerpt is from the book &amp;quot;Concurrency in Go&amp;quot; (by O\u2019Reilly):&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pastebin.com/L24Z8nd1\"&gt;https://pastebin.com/L24Z8nd1&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;It works as it should (I suppose).&lt;br/&gt;\nHowever if I add a few fmt.Println or another function - it deadlocks. :&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pastebin.com/cAPbMgGv\"&gt;https://pastebin.com/cAPbMgGv&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;The use of the &amp;quot;useless&amp;quot; function causes deadlock 1/~10k application runs. On the other hand, if I comment out the useless function and uncomment fmt.Println - deadlock occurs much more often. &lt;/p&gt;\n\n&lt;p&gt;Can somebody explain why is it happening?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gof5w3", "is_robot_indexable": true, "report_reasons": null, "author": "Geras_Nyx", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gof5w3/strange_code_behaviour/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gof5w3/strange_code_behaviour/", "subreddit_subscribers": 113456, "created_utc": 1590134544.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_2dxxibzv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "An open-source chatbot powered by an artificial neural network", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gnxyk9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "public", "ups": 21, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 21, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1590100506.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gnxyk9", "is_robot_indexable": true, "report_reasons": null, "author": "ananagame", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gnxyk9/an_opensource_chatbot_powered_by_an_artificial/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/olivia-ai/olivia", "subreddit_subscribers": 113456, "created_utc": 1590071706.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_9suyp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Three bugs in the Go MySQL Driver", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gnm94y", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 219, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 219, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1590048462.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.blog", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gnm94y", "is_robot_indexable": true, "report_reasons": null, "author": "farslan", "discussion_type": null, "num_comments": 20, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gnm94y/three_bugs_in_the_go_mysql_driver/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.blog/2020-05-20-three-bugs-in-the-go-mysql-driver/", "subreddit_subscribers": 113456, "created_utc": 1590019662.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_gnm94y", "before": null}}