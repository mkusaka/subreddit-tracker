{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - May", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_gb7km3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "public", "ups": 45, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 45, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1588320346.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gb7km3", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gb7km3/whos_hiring_typescript_developers_may/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/gb7km3/whos_hiring_typescript_developers_may/", "subreddit_subscribers": 39145, "created_utc": 1588291546.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Does a library exist that automatically generates code to validate your Typescript types. I'm pretty sure the answer is no, but just wanna confirm before I build a babel-macro that does this.\n\nWould people find such a tool useful?\n\nExample:\n\n`interface Foo {`\n\n`bar: string`\n\n`}`\n\n`const validator = createValidator(\"Foo\") // compile time babel macro`\n\n`// validator is now a function that can be called at runtime to check whether an object matches the Foo interface`", "author_fullname": "t2_5yhybc1l", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Auto generate type-checker from Typescript types?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ges5r9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "public", "ups": 19, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 19, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588826644.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Does a library exist that automatically generates code to validate your Typescript types. I&amp;#39;m pretty sure the answer is no, but just wanna confirm before I build a babel-macro that does this.&lt;/p&gt;\n\n&lt;p&gt;Would people find such a tool useful?&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;interface Foo {&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;bar: string&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const validator = createValidator(&amp;quot;Foo&amp;quot;) // compile time babel macro&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;// validator is now a function that can be called at runtime to check whether an object matches the Foo interface&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ges5r9", "is_robot_indexable": true, "report_reasons": null, "author": "vanilla-acc", "discussion_type": null, "num_comments": 20, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ges5r9/auto_generate_typechecker_from_typescript_types/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ges5r9/auto_generate_typechecker_from_typescript_types/", "subreddit_subscribers": 39145, "created_utc": 1588797844.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Curious how other people handle API responses. The apps I develop the front end for are built with mostly API integrations. \n\nSometimes I think it's easier to just do \n\n```\n{ [key: string]: any; }\n```\n\nI have built out the response types for the convenience of intellicense.", "author_fullname": "t2_7klul", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Documenting API responses", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_gewoym", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588842008.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Curious how other people handle API responses. The apps I develop the front end for are built with mostly API integrations. &lt;/p&gt;\n\n&lt;p&gt;Sometimes I think it&amp;#39;s easier to just do &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n{ [key: string]: any; }\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I have built out the response types for the convenience of intellicense.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gewoym", "is_robot_indexable": true, "report_reasons": null, "author": "NotMyRealNameAgain", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gewoym/documenting_api_responses/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/gewoym/documenting_api_responses/", "subreddit_subscribers": 39145, "created_utc": 1588813208.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have a case where request comes in trigger some processing, but the processing is async, and I do want to response return the result(success or not) from the processing. How can I handle this case?\n\n  \nHere I cannot simply use await to stop for processing, because the piece of code in the req &amp; res level is just sending a message to message queue and actually it needs to wait the consumer to fully process it.  \n\n\nMy thought is to add eventemitter and listen on event in the req &amp; res level, and emit the event after the consumer processed it. (My service and consumer are in same node process). But How can I handle different requests? There could be racing problems, any better ideas?\n\nThanks", "author_fullname": "t2_39a8ltwl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to handle async restful response return ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_gf0jnr", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588857963.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a case where request comes in trigger some processing, but the processing is async, and I do want to response return the result(success or not) from the processing. How can I handle this case?&lt;/p&gt;\n\n&lt;p&gt;Here I cannot simply use await to stop for processing, because the piece of code in the req &amp;amp; res level is just sending a message to message queue and actually it needs to wait the consumer to fully process it.  &lt;/p&gt;\n\n&lt;p&gt;My thought is to add eventemitter and listen on event in the req &amp;amp; res level, and emit the event after the consumer processed it. (My service and consumer are in same node process). But How can I handle different requests? There could be racing problems, any better ideas?&lt;/p&gt;\n\n&lt;p&gt;Thanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gf0jnr", "is_robot_indexable": true, "report_reasons": null, "author": "GreatFireWallSucks", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gf0jnr/how_to_handle_async_restful_response_return/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/gf0jnr/how_to_handle_async_restful_response_return/", "subreddit_subscribers": 39145, "created_utc": 1588829163.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm trying to find a best practice here. What's best?\nImporting like this:  \n`import { collectionRef} from '@mycoolpackage/prelude/control/function/collection';`  \nWhen I run the `tsc` transpiler and importing like above, it doesn't find the import.\n\nor like this:  \n`import { collectionRef } from '../../prelude/control/function/collection';`  \nThis works when I run the `tsc` transpiler.\n\nAre there any advantages?", "author_fullname": "t2_ayyfo", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "importing with \"@\"", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_gef6u2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "public", "ups": 24, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 24, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588777710.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to find a best practice here. What&amp;#39;s best?\nImporting like this:&lt;br/&gt;\n&lt;code&gt;import { collectionRef} from &amp;#39;@mycoolpackage/prelude/control/function/collection&amp;#39;;&lt;/code&gt;&lt;br/&gt;\nWhen I run the &lt;code&gt;tsc&lt;/code&gt; transpiler and importing like above, it doesn&amp;#39;t find the import.&lt;/p&gt;\n\n&lt;p&gt;or like this:&lt;br/&gt;\n&lt;code&gt;import { collectionRef } from &amp;#39;../../prelude/control/function/collection&amp;#39;;&lt;/code&gt;&lt;br/&gt;\nThis works when I run the &lt;code&gt;tsc&lt;/code&gt; transpiler.&lt;/p&gt;\n\n&lt;p&gt;Are there any advantages?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gef6u2", "is_robot_indexable": true, "report_reasons": null, "author": "heartchoke", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gef6u2/importing_with/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/gef6u2/importing_with/", "subreddit_subscribers": 39145, "created_utc": 1588748910.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The TypeScript docs present functions in the style\n\n    const add: (x: number, y: number) =&gt; number = function (\n      x: number,\n      y: number\n    ): number {\n      return x + y;\n    };\n\nor as an arrow function\n\n    const add: (x: number, y: number) =&gt; number = (x: number, y: number): number =&gt;\n      x + y;\n\n`add` is declared with a type signature (if that's the correct term, I'm new to this), then a function is assigned with its own type signature.\n\nBut this doesn't seem to add any information over the much more readable options of either letting `add`'s type be inferred from a function literal that's already got fully specified types\n\n    const add = (x: number, y: number): number =&gt; x + y;\n\nOr declaring a type on `add` and then giving it a function literal without specified types\n\n    const add: (x: number, y: number) =&gt; number = (x, y) =&gt; x + y;\n\nMy questions:\n\n- Is there any reason to use the more verbose example #1 over my preference #3?\n- Is there any way I can have the TypeScript compiler guarantee that my function is pure and doesn't refer to or modify any outside data? I couldn't see this in the docs but I also don't fully understand everything I can see, so I thought I might be missing features or not understanding the power of it.\n\nThanks to anyone who can offer advice!", "author_fullname": "t2_6ee045j9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Which is the preferred way to write a function? And can I mark one as pure somehow?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_gekwdq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588803681.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The TypeScript docs present functions in the style&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const add: (x: number, y: number) =&amp;gt; number = function (\n  x: number,\n  y: number\n): number {\n  return x + y;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or as an arrow function&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const add: (x: number, y: number) =&amp;gt; number = (x: number, y: number): number =&amp;gt;\n  x + y;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;code&gt;add&lt;/code&gt; is declared with a type signature (if that&amp;#39;s the correct term, I&amp;#39;m new to this), then a function is assigned with its own type signature.&lt;/p&gt;\n\n&lt;p&gt;But this doesn&amp;#39;t seem to add any information over the much more readable options of either letting &lt;code&gt;add&lt;/code&gt;&amp;#39;s type be inferred from a function literal that&amp;#39;s already got fully specified types&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const add = (x: number, y: number): number =&amp;gt; x + y;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or declaring a type on &lt;code&gt;add&lt;/code&gt; and then giving it a function literal without specified types&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const add: (x: number, y: number) =&amp;gt; number = (x, y) =&amp;gt; x + y;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My questions:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Is there any reason to use the more verbose example #1 over my preference #3?&lt;/li&gt;\n&lt;li&gt;Is there any way I can have the TypeScript compiler guarantee that my function is pure and doesn&amp;#39;t refer to or modify any outside data? I couldn&amp;#39;t see this in the docs but I also don&amp;#39;t fully understand everything I can see, so I thought I might be missing features or not understanding the power of it.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Thanks to anyone who can offer advice!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gekwdq", "is_robot_indexable": true, "report_reasons": null, "author": "OppositeAside4", "discussion_type": null, "num_comments": 24, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gekwdq/which_is_the_preferred_way_to_write_a_function/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/gekwdq/which_is_the_preferred_way_to_write_a_function/", "subreddit_subscribers": 39145, "created_utc": 1588774881.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Foal TS framework version 1.8 is officially released!\n\n[Foal TS - May release \\(version 1.8\\)](https://preview.redd.it/xm3t9m4ev3x41.png?width=1606&amp;format=png&amp;auto=webp&amp;s=d9e0d848c980f799c5e0d25ffa1370a6c4b79a9b)\n\nThis version brings mainly **three new features**.\n\n1. **Interfaces and generic classes** (such as TypeORM repositories) **can** now **be injected** into services and controllers using FoalTS dependency injection system.\n\n[Example of service](https://preview.redd.it/umiskrw6w3x41.png?width=746&amp;format=png&amp;auto=webp&amp;s=b1d61cab00658afdfcf41891acaf9725358edd0b)\n\n[Injection of the concrete instances.](https://preview.redd.it/jevwe7q8w3x41.png?width=747&amp;format=png&amp;auto=webp&amp;s=0f01dbc77d59ab54155884e308d9d90bdbf5a2ce)\n\nDocumentation : [https://foalts.gitbook.io/docs/topic-guides/architecture/services-and-dependency-injection#usage-with-interfaces-and-generic-classes](https://foalts.gitbook.io/docs/topic-guides/architecture/services-and-dependency-injection#usage-with-interfaces-and-generic-classes)\n\n2. **Services** accept an optional `boot` **method for initialization**\n\n[Example of \\\\\"boot\\\\\" method](https://preview.redd.it/68sm4vmqw3x41.png?width=745&amp;format=png&amp;auto=webp&amp;s=c0fa86820f28abe83d37158d3adcc203f515137e)\n\nDocumentation: [https://foalts.gitbook.io/docs/topic-guides/architecture/initialization#the-services-boot-method](https://foalts.gitbook.io/docs/topic-guides/architecture/initialization#the-services-boot-method)\n\n3. `Group`, `Permission` and `UserWithPermissions` extend `BaseEntity` (TypeORM) so as to add new methods (find, save, etc) and `UserWithPermissions` has a new method `withPerm` which allows to retrieve all users with a given permission.\n\n[Permission extends BaseEntity](https://preview.redd.it/8uzmpoq9x3x41.png?width=745&amp;format=png&amp;auto=webp&amp;s=5bf024e17155b16aeb4a6162b27d19787650a54c)\n\n[Retrieve all users with the permission \\\\\"perm1\\\\\"](https://preview.redd.it/u9kqau8bx3x41.png?width=748&amp;format=png&amp;auto=webp&amp;s=6e8b612834a836fdf3e86d71d71d18587ad17955)\n\nDocumentation: [https://foalts.gitbook.io/docs/topic-guides/authentication-and-access-control/groups-and-permissions#baseentity-inheritance](https://foalts.gitbook.io/docs/topic-guides/authentication-and-access-control/groups-and-permissions#baseentity-inheritance)\n\n&amp;#x200B;\n\nFoal, in a few words, it's a Node.js framework:\n\n* written in TypeScript\n* provided with batteries included (Auth, OpenAPI, GraphQL, ORM, CLI, scripts, file storage)\n* and with a simple and intuitive architecture (no magic, no over-engineering).\n\nAnd the must: it has more than 11,000 lines of documentation.\n\n[https://foalts.org](https://foalts.org/)\n\n[https://github.com/FoalTS/foal](https://github.com/FoalTS/foal)\n\n[https://foalts.gitbook.io/docs/](https://foalts.gitbook.io/docs/)\n\n\\#TypeScript #JavaScript #NodeJS #FoalTS #DI #JWT #permissions", "author_fullname": "t2_2bvst1jn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Foal TS - May release (version 1.8) - Dependency injection with interfaces, permission management, service initialization", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 73, "hide_score": false, "media_metadata": {"jevwe7q8w3x41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 20, "x": 108, "u": "https://preview.redd.it/jevwe7q8w3x41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=7782741a2fd05bd2319bb23d54ab436902cf43a2"}, {"y": 41, "x": 216, "u": "https://preview.redd.it/jevwe7q8w3x41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=9f7ff205fe7bbe4e3c6b83c900a4a56d36aee068"}, {"y": 61, "x": 320, "u": "https://preview.redd.it/jevwe7q8w3x41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=667d43675104fa21009f5fd4c9a2e4cece479a09"}, {"y": 123, "x": 640, "u": "https://preview.redd.it/jevwe7q8w3x41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=5a0a6d4ede49b218efb6ea202eb5785894c3f220"}], "s": {"y": 144, "x": 747, "u": "https://preview.redd.it/jevwe7q8w3x41.png?width=747&amp;format=png&amp;auto=webp&amp;s=0f01dbc77d59ab54155884e308d9d90bdbf5a2ce"}, "id": "jevwe7q8w3x41"}, "8uzmpoq9x3x41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 14, "x": 108, "u": "https://preview.redd.it/8uzmpoq9x3x41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=ec0fdcde3a7bc643c61bc1f4dcb4e9272029f4f1"}, {"y": 29, "x": 216, "u": "https://preview.redd.it/8uzmpoq9x3x41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=183e89e668453980fe2e96c93828480bbfcccf52"}, {"y": 43, "x": 320, "u": "https://preview.redd.it/8uzmpoq9x3x41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=37471f329832dd81da558bb723e9839bad7da43e"}, {"y": 86, "x": 640, "u": "https://preview.redd.it/8uzmpoq9x3x41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=d53fde90719cefe65c80dbf8f5b01c8e017e9285"}], "s": {"y": 101, "x": 745, "u": "https://preview.redd.it/8uzmpoq9x3x41.png?width=745&amp;format=png&amp;auto=webp&amp;s=5bf024e17155b16aeb4a6162b27d19787650a54c"}, "id": "8uzmpoq9x3x41"}, "xm3t9m4ev3x41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 38, "x": 108, "u": "https://preview.redd.it/xm3t9m4ev3x41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=456e66debe9c366d63768c7108a05ee7c444dff9"}, {"y": 76, "x": 216, "u": "https://preview.redd.it/xm3t9m4ev3x41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=7cc58f46f07e40b68bd8034b119d4c07320a6a78"}, {"y": 113, "x": 320, "u": "https://preview.redd.it/xm3t9m4ev3x41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=74ea325033cbdce68ba6cc2bf62dd48ecc862def"}, {"y": 227, "x": 640, "u": "https://preview.redd.it/xm3t9m4ev3x41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=0fdecf2dc8d2821aea4bfee93e6b4e7c30bcf447"}, {"y": 340, "x": 960, "u": "https://preview.redd.it/xm3t9m4ev3x41.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=00bbabafa1ab03df767e79b3ae626712fc1a16b7"}, {"y": 383, "x": 1080, "u": "https://preview.redd.it/xm3t9m4ev3x41.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=918cf4ec3de06983991c250684c2ea802c14a640"}], "s": {"y": 570, "x": 1606, "u": "https://preview.redd.it/xm3t9m4ev3x41.png?width=1606&amp;format=png&amp;auto=webp&amp;s=d9e0d848c980f799c5e0d25ffa1370a6c4b79a9b"}, "id": "xm3t9m4ev3x41"}, "umiskrw6w3x41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 66, "x": 108, "u": "https://preview.redd.it/umiskrw6w3x41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=ee402df1ed19be5ca35fb118fffd70c0d5f4bfb6"}, {"y": 133, "x": 216, "u": "https://preview.redd.it/umiskrw6w3x41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=dcbe0a360eaed0b7b82f5b99f8a5d84953fd58c6"}, {"y": 198, "x": 320, "u": "https://preview.redd.it/umiskrw6w3x41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=728b327bd994a711c12213979f38ee3713859163"}, {"y": 396, "x": 640, "u": "https://preview.redd.it/umiskrw6w3x41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=5c9d1500124bfcc4fe8172a87c6d4367cd49a6f5"}], "s": {"y": 462, "x": 746, "u": "https://preview.redd.it/umiskrw6w3x41.png?width=746&amp;format=png&amp;auto=webp&amp;s=b1d61cab00658afdfcf41891acaf9725358edd0b"}, "id": "umiskrw6w3x41"}, "68sm4vmqw3x41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 25, "x": 108, "u": "https://preview.redd.it/68sm4vmqw3x41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=6fee0554e0a3df4a6e34bfd658ce1b81207a9881"}, {"y": 51, "x": 216, "u": "https://preview.redd.it/68sm4vmqw3x41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=20c8d5392c96f26409563c5ca6489079c2d7a9fc"}, {"y": 75, "x": 320, "u": "https://preview.redd.it/68sm4vmqw3x41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=7a2aebf3db8b09fa92b42446dc333bfa9cf3eebe"}, {"y": 151, "x": 640, "u": "https://preview.redd.it/68sm4vmqw3x41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=273554bad2e73a099575764513980c9e8fb3db0c"}], "s": {"y": 176, "x": 745, "u": "https://preview.redd.it/68sm4vmqw3x41.png?width=745&amp;format=png&amp;auto=webp&amp;s=c0fa86820f28abe83d37158d3adcc203f515137e"}, "id": "68sm4vmqw3x41"}, "u9kqau8bx3x41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 17, "x": 108, "u": "https://preview.redd.it/u9kqau8bx3x41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=19adaa4852effe0abcb8a2897420a67995e9da52"}, {"y": 35, "x": 216, "u": "https://preview.redd.it/u9kqau8bx3x41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=14dde8601180e78d32a05c402ff7024eecfa08e2"}, {"y": 52, "x": 320, "u": "https://preview.redd.it/u9kqau8bx3x41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=ad04ed1bf165c35bce6ae79d1e14fc723268a6e0"}, {"y": 104, "x": 640, "u": "https://preview.redd.it/u9kqau8bx3x41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=44152f368e200120a49f4f6027adc12dbce43fc9"}], "s": {"y": 122, "x": 748, "u": "https://preview.redd.it/u9kqau8bx3x41.png?width=748&amp;format=png&amp;auto=webp&amp;s=6e8b612834a836fdf3e86d71d71d18587ad17955"}, "id": "u9kqau8bx3x41"}}, "name": "t3_geg8up", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/szHt6AVL146Bpr56TbU7kiMC2syrEaQC8A1WFJoY_jI.jpg", "edited": 1588754937.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1588783404.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Foal TS framework version 1.8 is officially released!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/xm3t9m4ev3x41.png?width=1606&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=d9e0d848c980f799c5e0d25ffa1370a6c4b79a9b\"&gt;Foal TS - May release (version 1.8)&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This version brings mainly &lt;strong&gt;three new features&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Interfaces and generic classes&lt;/strong&gt; (such as TypeORM repositories) &lt;strong&gt;can&lt;/strong&gt; now &lt;strong&gt;be injected&lt;/strong&gt; into services and controllers using FoalTS dependency injection system.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/umiskrw6w3x41.png?width=746&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=b1d61cab00658afdfcf41891acaf9725358edd0b\"&gt;Example of service&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/jevwe7q8w3x41.png?width=747&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=0f01dbc77d59ab54155884e308d9d90bdbf5a2ce\"&gt;Injection of the concrete instances.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Documentation : &lt;a href=\"https://foalts.gitbook.io/docs/topic-guides/architecture/services-and-dependency-injection#usage-with-interfaces-and-generic-classes\"&gt;https://foalts.gitbook.io/docs/topic-guides/architecture/services-and-dependency-injection#usage-with-interfaces-and-generic-classes&lt;/a&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Services&lt;/strong&gt; accept an optional &lt;code&gt;boot&lt;/code&gt; &lt;strong&gt;method for initialization&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/68sm4vmqw3x41.png?width=745&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=c0fa86820f28abe83d37158d3adcc203f515137e\"&gt;Example of \\&amp;quot;boot\\&amp;quot; method&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Documentation: &lt;a href=\"https://foalts.gitbook.io/docs/topic-guides/architecture/initialization#the-services-boot-method\"&gt;https://foalts.gitbook.io/docs/topic-guides/architecture/initialization#the-services-boot-method&lt;/a&gt;&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;code&gt;Group&lt;/code&gt;, &lt;code&gt;Permission&lt;/code&gt; and &lt;code&gt;UserWithPermissions&lt;/code&gt; extend &lt;code&gt;BaseEntity&lt;/code&gt; (TypeORM) so as to add new methods (find, save, etc) and &lt;code&gt;UserWithPermissions&lt;/code&gt; has a new method &lt;code&gt;withPerm&lt;/code&gt; which allows to retrieve all users with a given permission.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/8uzmpoq9x3x41.png?width=745&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=5bf024e17155b16aeb4a6162b27d19787650a54c\"&gt;Permission extends BaseEntity&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/u9kqau8bx3x41.png?width=748&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=6e8b612834a836fdf3e86d71d71d18587ad17955\"&gt;Retrieve all users with the permission \\&amp;quot;perm1\\&amp;quot;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Documentation: &lt;a href=\"https://foalts.gitbook.io/docs/topic-guides/authentication-and-access-control/groups-and-permissions#baseentity-inheritance\"&gt;https://foalts.gitbook.io/docs/topic-guides/authentication-and-access-control/groups-and-permissions#baseentity-inheritance&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Foal, in a few words, it&amp;#39;s a Node.js framework:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;written in TypeScript&lt;/li&gt;\n&lt;li&gt;provided with batteries included (Auth, OpenAPI, GraphQL, ORM, CLI, scripts, file storage)&lt;/li&gt;\n&lt;li&gt;and with a simple and intuitive architecture (no magic, no over-engineering).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;And the must: it has more than 11,000 lines of documentation.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://foalts.org/\"&gt;https://foalts.org&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/FoalTS/foal\"&gt;https://github.com/FoalTS/foal&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://foalts.gitbook.io/docs/\"&gt;https://foalts.gitbook.io/docs/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;#TypeScript #JavaScript #NodeJS #FoalTS #DI #JWT #permissions&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/bgDQMp0ZDW3-G8bcKgluN6EFy1prWJWyph_24n6-p70.jpg?auto=webp&amp;s=f8c1f999cc0e0e955f40a01b6e01473b5faa64cc", "width": 1200, "height": 630}, "resolutions": [{"url": "https://external-preview.redd.it/bgDQMp0ZDW3-G8bcKgluN6EFy1prWJWyph_24n6-p70.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d9712ade15f0e4c54aeff09da396c851b70265a7", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/bgDQMp0ZDW3-G8bcKgluN6EFy1prWJWyph_24n6-p70.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d9d704f94a1e1c9c50c9241009df0bd3b7fc0ae8", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/bgDQMp0ZDW3-G8bcKgluN6EFy1prWJWyph_24n6-p70.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=309e5708c93bdbbe28e56ff1e7e0c24ac01e1e04", "width": 320, "height": 168}, {"url": "https://external-preview.redd.it/bgDQMp0ZDW3-G8bcKgluN6EFy1prWJWyph_24n6-p70.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=d2199c5e3c4b83fa47e45702b2be6408472c0efe", "width": 640, "height": 336}, {"url": "https://external-preview.redd.it/bgDQMp0ZDW3-G8bcKgluN6EFy1prWJWyph_24n6-p70.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=22335d0d8c66d19f6401b28ee65de40338ffd8bf", "width": 960, "height": 504}, {"url": "https://external-preview.redd.it/bgDQMp0ZDW3-G8bcKgluN6EFy1prWJWyph_24n6-p70.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=be5b22f5a12ee20adf1796d2a3bf7fa27785dd92", "width": 1080, "height": 567}], "variants": {}, "id": "KesvDeCiMQROF3n5xSH4CkvRvd3gXI_WE0qSKWlCYak"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "geg8up", "is_robot_indexable": true, "report_reasons": null, "author": "Loic_Poullain", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/geg8up/foal_ts_may_release_version_18_dependency/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/geg8up/foal_ts_may_release_version_18_dependency/", "subreddit_subscribers": 39145, "created_utc": 1588754604.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "In my database, I have a string saved like this: `\"[Value 1, Value 2, Value 3]\"`    \n\nIn my frontend I have an enum that looks like this:    \n\n    export enum Values {\n        Value1 = 'Value 1',\n        Value2 = 'Value 2',\n        Value3 = 'Value 3'\n    }\n\nMy question is when I get this string from my backend, how can I convert it into my enum? Is this possible?", "author_fullname": "t2_vdw4y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Convert string to enum values", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_gekbfj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588801649.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In my database, I have a string saved like this: &lt;code&gt;&amp;quot;[Value 1, Value 2, Value 3]&amp;quot;&lt;/code&gt;    &lt;/p&gt;\n\n&lt;p&gt;In my frontend I have an enum that looks like this:    &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export enum Values {\n    Value1 = &amp;#39;Value 1&amp;#39;,\n    Value2 = &amp;#39;Value 2&amp;#39;,\n    Value3 = &amp;#39;Value 3&amp;#39;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My question is when I get this string from my backend, how can I convert it into my enum? Is this possible?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gekbfj", "is_robot_indexable": true, "report_reasons": null, "author": "ContinumFM", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gekbfj/convert_string_to_enum_values/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/gekbfj/convert_string_to_enum_values/", "subreddit_subscribers": 39145, "created_utc": 1588772849.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "This has been a big point of frustration for me. Typescript has all of the parameters, types &amp; 95% of what you need to automatically generate documentation. But... I can't find a tool that actually reads the types &amp; generates documentation from them.\n\nDoes something like this exist?", "author_fullname": "t2_3xv3nkwb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Has anyone written a Typescript to Documentation generator?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_geo0ih", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588813691.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This has been a big point of frustration for me. Typescript has all of the parameters, types &amp;amp; 95% of what you need to automatically generate documentation. But... I can&amp;#39;t find a tool that actually reads the types &amp;amp; generates documentation from them.&lt;/p&gt;\n\n&lt;p&gt;Does something like this exist?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "geo0ih", "is_robot_indexable": true, "report_reasons": null, "author": "YouDantKnowMe", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/geo0ih/has_anyone_written_a_typescript_to_documentation/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/geo0ih/has_anyone_written_a_typescript_to_documentation/", "subreddit_subscribers": 39145, "created_utc": 1588784891.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_jchs5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "ts-transformer-properties-rename - a custom transfomer for TypeScript which renames all private and internal properties, so you can mangle them with uglify-js/terser and reduce size of your bundles", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_ge56dn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/spbJa_iWWvzV06mDfeCShCBhhuTFcXtjOTWSt9FMN30.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1588738570.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/zF_2-4b6206PIZbaqI5qJ_BRLt8ge5dzHziLLisldRw.jpg?auto=webp&amp;s=e98cbbce5cdf01f8ab3480021c8ab0f430ec1495", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/zF_2-4b6206PIZbaqI5qJ_BRLt8ge5dzHziLLisldRw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f9a77e6e50c0a7ed7ddbcd00c70274bb49ad777e", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/zF_2-4b6206PIZbaqI5qJ_BRLt8ge5dzHziLLisldRw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=96f19ee0d066d25765572eaa6850ab5ff38f2d1e", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/zF_2-4b6206PIZbaqI5qJ_BRLt8ge5dzHziLLisldRw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=45d07992182e3a6a435b4afaf6cff94df268c7b0", "width": 320, "height": 320}], "variants": {}, "id": "IIgNWBUG7Frenflf_66xxf93jFPcVZvVzfo4_6pTb-g"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ge56dn", "is_robot_indexable": true, "report_reasons": null, "author": "timocov", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ge56dn/tstransformerpropertiesrename_a_custom_transfomer/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/timocov/ts-transformer-properties-rename", "subreddit_subscribers": 39145, "created_utc": 1588709770.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "e.g. I want to declare some record `foo`, where the values are all of a certain type `Bar`, so `foo` must extend `Record&lt;string, Bar&gt;` (`{ [ key: string ]: Bar}`).\n\nI can simply write `const foo: Record&lt;string, Bar&gt; = { fooKeyA: bar1, fooKeyB: bar2 };` but now all that I can extract from the declared `foo` is that it is of type `Record&lt;string, Bar&gt;`, which means I only know that its keys are `string`, i.e. I have lost the key names `fooKeyA` and `fooKeyB`.\n\nHere is a workaround:\n\n&gt;Declare a function that does nothing other than return its argument, and ensure that its argument extends a certain type. Anytime we declare something like foo, wrap the actual value we want to use in this function. i.e   \n`function iAmTotallyUselessAtRuntime&lt;T extends Record&lt;string, Bar&gt;&gt;(foo: Foo): Foo { return foo; }`  \n`const foo = iamTotallyUselessAtRuntime({ fooKeyA: bar1, fooKeyB: bar2 });`  \nNow foo has maintained its original type with its unique keys, and also we can be sure that it also extends the type it needs to extend.  \nHowever, (as I made clear in the function name) we are declaring a totally useless function that does nothing meaningful at run time. \n\nI feel that there must be a better way.\n\nThis seems like it should be so simple, but I can't really think of an efficient way to do it.", "author_fullname": "t2_jaybj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How do you declare a variable of type T that extends type U without \"losing\" type T?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ge96nf", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.76, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588751818.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;e.g. I want to declare some record &lt;code&gt;foo&lt;/code&gt;, where the values are all of a certain type &lt;code&gt;Bar&lt;/code&gt;, so &lt;code&gt;foo&lt;/code&gt; must extend &lt;code&gt;Record&amp;lt;string, Bar&amp;gt;&lt;/code&gt; (&lt;code&gt;{ [ key: string ]: Bar}&lt;/code&gt;).&lt;/p&gt;\n\n&lt;p&gt;I can simply write &lt;code&gt;const foo: Record&amp;lt;string, Bar&amp;gt; = { fooKeyA: bar1, fooKeyB: bar2 };&lt;/code&gt; but now all that I can extract from the declared &lt;code&gt;foo&lt;/code&gt; is that it is of type &lt;code&gt;Record&amp;lt;string, Bar&amp;gt;&lt;/code&gt;, which means I only know that its keys are &lt;code&gt;string&lt;/code&gt;, i.e. I have lost the key names &lt;code&gt;fooKeyA&lt;/code&gt; and &lt;code&gt;fooKeyB&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Here is a workaround:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Declare a function that does nothing other than return its argument, and ensure that its argument extends a certain type. Anytime we declare something like foo, wrap the actual value we want to use in this function. i.e&lt;br/&gt;\n&lt;code&gt;function iAmTotallyUselessAtRuntime&amp;lt;T extends Record&amp;lt;string, Bar&amp;gt;&amp;gt;(foo: Foo): Foo { return foo; }&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;const foo = iamTotallyUselessAtRuntime({ fooKeyA: bar1, fooKeyB: bar2 });&lt;/code&gt;&lt;br/&gt;\nNow foo has maintained its original type with its unique keys, and also we can be sure that it also extends the type it needs to extend.&lt;br/&gt;\nHowever, (as I made clear in the function name) we are declaring a totally useless function that does nothing meaningful at run time. &lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;I feel that there must be a better way.&lt;/p&gt;\n\n&lt;p&gt;This seems like it should be so simple, but I can&amp;#39;t really think of an efficient way to do it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ge96nf", "is_robot_indexable": true, "report_reasons": null, "author": "KamiShikkaku", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ge96nf/how_do_you_declare_a_variable_of_type_t_that/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ge96nf/how_do_you_declare_a_variable_of_type_t_that/", "subreddit_subscribers": 39145, "created_utc": 1588723018.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_ge96nf", "before": null}}