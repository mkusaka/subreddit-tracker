{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Rules For Individuals\n---------------------\n\n* **Don't** create top-level comments - those are for employers.\n* Feel free to reply to top-level comments with **on-topic** questions.\n* I will create top-level comments for **meta** discussion and **individuals looking for work**.\n\nRules For Employers\n---------------------\n\n* You must be hiring **directly**. No third-party recruiters.\n* **One** top-level comment per employer. If you have multiple job openings, that's great, but please consolidate their descriptions or mention them in replies to your own top-level comment.\n* **Don't** use URL shorteners. [reddiquette](https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette) forbids them because they're opaque to the spam filter.\n* Templates are awesome. Please **use** the following template. As the \"formatting help\" says, use \\*\\*two stars\\*\\* to **bold text**. Use empty lines to separate sections.\n* **Proofread** your comment after posting it, and edit any formatting mistakes.\n\n---\n\n\\*\\*Company:\\*\\* [Company name; also, use the \"formatting help\" to make it a link to your company's website, or a specific careers page if you have one.]\n\n&amp;nbsp;\n\n\\*\\*Type:\\*\\* [Full time, part time, internship, contract, etc.]\n\n&amp;nbsp;\n\n\\*\\*Description:\\*\\* [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]\n\n&amp;nbsp;\n\n\\*\\*Location:\\*\\* [Where's your office - or if you're hiring at multiple offices, list them. If your workplace language isn't English, please specify it.]\n\n&amp;nbsp;\n\n\\*\\*Remote:\\*\\* [Do you offer the option of working remotely (permanently, or for the duration of the pandemic)? If so, do you require employees to live in certain areas or time zones?]\n\n&amp;nbsp;\n\n\\*\\*Visa Sponsorship:\\*\\* [Does your company sponsor visas?]\n\n&amp;nbsp;\n\n\\*\\*Technologies:\\*\\* [Required: do you mainly use C++98/03, C++11, C++14, C++17, or C++20? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]\n\n&amp;nbsp;\n\n\\*\\*Contact:\\*\\* [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]\n\n---\n\nPrevious Post\n--------------\n\n* [C++ Jobs - Q2 2020](https://www.reddit.com/r/cpp/comments/ft77lv/c_jobs_q2_2020/)", "author_fullname": "t2_21c1y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++ Jobs - Q3 2020", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hjnaf2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": "", "subreddit_type": "public", "ups": 73, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 73, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": "", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593680441.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;Rules For Individuals&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; create top-level comments - those are for employers.&lt;/li&gt;\n&lt;li&gt;Feel free to reply to top-level comments with &lt;strong&gt;on-topic&lt;/strong&gt; questions.&lt;/li&gt;\n&lt;li&gt;I will create top-level comments for &lt;strong&gt;meta&lt;/strong&gt; discussion and &lt;strong&gt;individuals looking for work&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Rules For Employers&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You must be hiring &lt;strong&gt;directly&lt;/strong&gt;. No third-party recruiters.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;One&lt;/strong&gt; top-level comment per employer. If you have multiple job openings, that&amp;#39;s great, but please consolidate their descriptions or mention them in replies to your own top-level comment.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; use URL shorteners. &lt;a href=\"https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette\"&gt;reddiquette&lt;/a&gt; forbids them because they&amp;#39;re opaque to the spam filter.&lt;/li&gt;\n&lt;li&gt;Templates are awesome. Please &lt;strong&gt;use&lt;/strong&gt; the following template. As the &amp;quot;formatting help&amp;quot; says, use **two stars** to &lt;strong&gt;bold text&lt;/strong&gt;. Use empty lines to separate sections.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Proofread&lt;/strong&gt; your comment after posting it, and edit any formatting mistakes.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;**Company:** [Company name; also, use the &amp;quot;formatting help&amp;quot; to make it a link to your company&amp;#39;s website, or a specific careers page if you have one.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Type:** [Full time, part time, internship, contract, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Description:** [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Location:** [Where&amp;#39;s your office - or if you&amp;#39;re hiring at multiple offices, list them. If your workplace language isn&amp;#39;t English, please specify it.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Remote:** [Do you offer the option of working remotely (permanently, or for the duration of the pandemic)? If so, do you require employees to live in certain areas or time zones?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Visa Sponsorship:** [Does your company sponsor visas?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Technologies:** [Required: do you mainly use C++98/03, C++11, C++14, C++17, or C++20? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Contact:** [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Previous Post&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.reddit.com/r/cpp/comments/ft77lv/c_jobs_q2_2020/\"&gt;C++ Jobs - Q2 2020&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "MSVC STL Dev", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hjnaf2", "is_robot_indexable": true, "report_reasons": null, "author": "STL", "discussion_type": null, "num_comments": 53, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/hjnaf2/c_jobs_q3_2020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/cpp/comments/hjnaf2/c_jobs_q3_2020/", "subreddit_subscribers": 152617, "created_utc": 1593651641.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_e8dv1b", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++20 has been approved", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imzkl4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": null, "subreddit_type": "public", "ups": 84, "total_awards_received": 0, "media_embed": {"content": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;C++20 has been approved!&lt;/p&gt;&amp;mdash; Patrice Roy (@PatriceRoy1) &lt;a href=\"https://twitter.com/PatriceRoy1/status/1302055575140945921?ref_src=twsrc%5Etfw\"&gt;September 5, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "width": 350, "scrolling": false, "height": 173}, "author_flair_template_id": "7bf857c8-4dcc-11e6-b84d-0e5fbba92363", "is_original_content": false, "user_reports": [], "secure_media": {"type": "twitter.com", "oembed": {"provider_url": "https://twitter.com", "version": "1.0", "url": "https://twitter.com/PatriceRoy1/status/1302055575140945921", "author_name": "Patrice Roy", "height": 173, "width": 350, "html": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;C++20 has been approved!&lt;/p&gt;&amp;mdash; Patrice Roy (@PatriceRoy1) &lt;a href=\"https://twitter.com/PatriceRoy1/status/1302055575140945921?ref_src=twsrc%5Etfw\"&gt;September 5, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "author_url": "https://twitter.com/PatriceRoy1", "provider_name": "Twitter", "cache_age": 3153600000, "type": "rich"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;C++20 has been approved!&lt;/p&gt;&amp;mdash; Patrice Roy (@PatriceRoy1) &lt;a href=\"https://twitter.com/PatriceRoy1/status/1302055575140945921?ref_src=twsrc%5Etfw\"&gt;September 5, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "width": 350, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/imzkl4", "height": 173}, "link_flair_text": null, "can_mod_post": false, "score": 84, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1599334129.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "twitter.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://twitter.com/patriceroy1/status/1302055575140945921?s=21", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "C++ Dev", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imzkl4", "is_robot_indexable": true, "report_reasons": null, "author": "zowersap", "discussion_type": null, "num_comments": 18, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/imzkl4/c20_has_been_approved/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://twitter.com/patriceroy1/status/1302055575140945921?s=21", "subreddit_subscribers": 152617, "created_utc": 1599305329.0, "num_crossposts": 0, "media": {"type": "twitter.com", "oembed": {"provider_url": "https://twitter.com", "version": "1.0", "url": "https://twitter.com/PatriceRoy1/status/1302055575140945921", "author_name": "Patrice Roy", "height": 173, "width": 350, "html": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;C++20 has been approved!&lt;/p&gt;&amp;mdash; Patrice Roy (@PatriceRoy1) &lt;a href=\"https://twitter.com/PatriceRoy1/status/1302055575140945921?ref_src=twsrc%5Etfw\"&gt;September 5, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "author_url": "https://twitter.com/PatriceRoy1", "provider_name": "Twitter", "cache_age": 3153600000, "type": "rich"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_c1i0d7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "New safety rules in C++ Core Check | C++ Team Blog", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imvucd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "public", "ups": 63, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 63, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1599313256.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "devblogs.microsoft.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://devblogs.microsoft.com/cppblog/new-safety-rules-in-c-core-check/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imvucd", "is_robot_indexable": true, "report_reasons": null, "author": "ThisCleverName", "discussion_type": null, "num_comments": 32, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/imvucd/new_safety_rules_in_c_core_check_c_team_blog/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://devblogs.microsoft.com/cppblog/new-safety-rules-in-c-core-check/", "subreddit_subscribers": 152617, "created_utc": 1599284456.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_r752i", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "juCi++ v1.6.1 just out: the lightweight, open source C++ IDE written in C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imya0g", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1599326943.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "gitlab.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://gitlab.com/cppit/jucipp/-/releases/v1.6.1", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imya0g", "is_robot_indexable": true, "report_reasons": null, "author": "eidheim", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/imya0g/juci_v161_just_out_the_lightweight_open_source_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://gitlab.com/cppit/jucipp/-/releases/v1.6.1", "subreddit_subscribers": 152617, "created_utc": 1599298143.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_1rtmfjhe", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I made this Boids simulation of fish and birds in C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imodpi", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 106, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/mev2cgRN9Zo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 459, "scrolling": false, "height": 344}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Boids | Simulation of the Movement of Fish and Birds", "type": "video", "thumbnail_width": 480, "height": 344, "width": 459, "html": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/mev2cgRN9Zo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Dino1729", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/mev2cgRN9Zo/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCrihNVe3bbMBM-0sWAlAHLw"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/mev2cgRN9Zo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 459, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/imodpi", "height": 344}, "link_flair_text": null, "can_mod_post": false, "score": 106, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1599282550.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtu.be", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://youtu.be/mev2cgRN9Zo", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imodpi", "is_robot_indexable": true, "report_reasons": null, "author": "Yuveno", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/imodpi/i_made_this_boids_simulation_of_fish_and_birds_in/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://youtu.be/mev2cgRN9Zo", "subreddit_subscribers": 152617, "created_utc": 1599253750.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Boids | Simulation of the Movement of Fish and Birds", "type": "video", "thumbnail_width": 480, "height": 344, "width": 459, "html": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/mev2cgRN9Zo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Dino1729", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/mev2cgRN9Zo/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCrihNVe3bbMBM-0sWAlAHLw"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "The formal review for Boost.JSON is scheduled for September 14th-September 24th.\nHelp us help the community by participating in the formal review of Boost.JSON!\n\n* Requires only C++11.\n* Great support for allocators via pmr::memory_resource\n* High parsing and serialization performance\n* Strict parser and serializer which work incrementally.\n* Security-aware treatment of untrusted inputs.\n* Fast compilation performance.\n* Works without Boost! Define `BOOST_JSON_STANDALONE`\n\nParticipate in the Boost formal review of Boost.JSON by joining\nthe Boost Developers mailing list:\n\nhttps://lists.boost.org/mailman/listinfo.cgi/boost\n\nhttps://www.boost.org/community/reviews.html\n\nRepository\n  \nhttps://github.com/CPPAlliance/json\n\nDocumentation\n  \nhttp://master.json.cpp.al  \n\nAuthors: Vinnie Falco (yes that Vinnie), Krystian Stasiowski", "author_fullname": "t2_7z5flray", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "New JSON Library Needs Your Review!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imtpn9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.79, "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1599303245.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The formal review for Boost.JSON is scheduled for September 14th-September 24th.\nHelp us help the community by participating in the formal review of Boost.JSON!&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Requires only C++11.&lt;/li&gt;\n&lt;li&gt;Great support for allocators via pmr::memory_resource&lt;/li&gt;\n&lt;li&gt;High parsing and serialization performance&lt;/li&gt;\n&lt;li&gt;Strict parser and serializer which work incrementally.&lt;/li&gt;\n&lt;li&gt;Security-aware treatment of untrusted inputs.&lt;/li&gt;\n&lt;li&gt;Fast compilation performance.&lt;/li&gt;\n&lt;li&gt;Works without Boost! Define &lt;code&gt;BOOST_JSON_STANDALONE&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Participate in the Boost formal review of Boost.JSON by joining\nthe Boost Developers mailing list:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://lists.boost.org/mailman/listinfo.cgi/boost\"&gt;https://lists.boost.org/mailman/listinfo.cgi/boost&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.boost.org/community/reviews.html\"&gt;https://www.boost.org/community/reviews.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Repository&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/CPPAlliance/json\"&gt;https://github.com/CPPAlliance/json&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Documentation&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"http://master.json.cpp.al\"&gt;http://master.json.cpp.al&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;Authors: Vinnie Falco (yes that Vinnie), Krystian Stasiowski&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imtpn9", "is_robot_indexable": true, "report_reasons": null, "author": "cppalliance", "discussion_type": null, "num_comments": 15, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/imtpn9/new_json_library_needs_your_review/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/imtpn9/new_json_library_needs_your_review/", "subreddit_subscribers": 152617, "created_utc": 1599274445.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_rvxk0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What Every C Programmer Should Know About Undefined Behavior #2/3", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imyu52", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.8, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1599330092.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.llvm.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://blog.llvm.org/posts/2011-05-14-what-every-c-programmer-should-know_14/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imyu52", "is_robot_indexable": true, "report_reasons": null, "author": "Alexander_Selkirk", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/imyu52/what_every_c_programmer_should_know_about/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://blog.llvm.org/posts/2011-05-14-what-every-c-programmer-should-know_14/", "subreddit_subscribers": 152617, "created_utc": 1599301292.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Basically, the title is self-descriptive. You can try out the [code on godbolt](https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAM1QDsCBlZAQwBtMQBGAFlICsupVs1qhkAUgBMAISnTSAZ0ztkBPHUqZa6AMKpWAVwC2tQVvQAZPLUwA5YwCNMxLgDZSAB1QLC62nsMTQS8fNTorG3sjJxdOdyUVMNoGAmZiAgDjU05FZUxVPxS0ggi7R2c3RVT0zKCchWqS6zLoiriASkVUA2JkDgByKQBma2RDLABqcSGdAgBPD0wAfQJiZkIFaexxAAYAQWHR8cwpmeQG9CwqLd2D/YJMIw9hB9OdHwAvZYIJ2i2JhrEAyqCZoAz0ZzTWT3R7PZivabvPBfFYTAAqpAm80WtGYRhOAHlMditHiTtMACITABuqDw6H%2BgOBPzwCiWaCe7Ae7O6EOIExAAII6BAICobCUKwW5IA7LIZRSobcHpz4eSZp9vujidLcfiJgTGatmRNWTzOZhuWC%2BYiMQbMVgxiSILT6RBNagqBBrQ9iLatu1A/9BRdRcbvtKpnLxAqlftlbCXphESS9Sc7dYfg1iqcqQBaHITByofS5ibi1hKI1AkFUazoJbggxKBv1zAADzjexVcIeKd1ZO1pvoQuK1ZNde0jdozcwre0HdtmOz6UxFarQ2wAqm%2B0nDabLaWbc7MztK4IckLYDAZo5z0tyx9kI1jUvmLRW1F1LYBmTm6j0IHLGQyAT2Sb9jig4ZiO57jrW9bTrO85YCeOhno0xJAn%2BW4xoBEz4QR%2BFoLQDQdh4/LEQ0o5qMgALIlqxCYAoBisD8lKjukXYxoqIEJqqfYzKmUH/JRDztuRoJ0FRzAGEQEzAJaR4Lu2ZZ7ohh7Hv6m6ioxzGsVx%2BxMiCewAdxBndomaqInBPxPn6MwKQQSkoYimY3JuuFmbxML8X%2BOg2ZJ4K%2BoijnOYuGr0Ss7nbNGwGgZZAn%2Bf%2BRm2bywUOYpmkzAcHkebFPGAbctyZhMRjrLQEDtJ5%2ByEYRtIvHg7ATDJcl1sQVHsaFWU6Dl2zeSZtX4fV8KNScLWoAC%2BR0OgZZdcprn0O5eGDTS%2BgjU141YggeDEDNnWZfNEUoheuXLYNw1qBtskTTQPQEAgs0HS5Myugyp23Ctq0NVdrV4FQ92PU53XIAgaRLR9K2MQQPS0BMOxcbG%2Bz9J0rAgP0ACs/SkKY/Q7FjqBo/5MhyAC3S9OSkhDJwWMEGjeOBqQADWIBDAAHAAdOj6NDK4nAytwrM8DKkiSO4qP9NwWM43jpAE/0WMKCAOykLTuPI6QcCwDAiAoKgTyjWQFDenrHgGyAwAKLiHgKAgqAEKQdasc4isQA4dNYw41hpHMaPU6QHL4vQBK0KwPtq6QWBlaI7DuxHO35Go1JMbHHb5LJAx%2B5myix6weAOGsxBzHoWC%2BzTxB4EYpedDQ9BMGwHCcJI/CCMIogoHIchCHniuQJ0qAeEkiv9HmFyUhIxMyDwEx5gSQwK3kBQaBA5i1NkpDmKUUQxME3i%2BHQq876Efib%2BUsS5IkhSNAf9QL0kRTpCfrRn%2Be19VMUj/b5wnQKGTfRcCjaNMbY1jnLdsrNXB5lcNweSyBaIQGNLQRm7QJgQFwIQEgUxKaFj0Prdg/JhhfwmETWQMgabuwZszTgOxlbi0lqQSu6Mdjs1cAATlcDsbgAt0ZQKGDsSQvBpb4zRgrJWKtyEa21hAJA3QCAeFkuQSgd4zY5DnOgs%2BNdGAsBjlQ0gAB3NYHgq5CEAVLEBaMCETF0YQB6YCIFQJgXAhBSCyFqwZggTAzAsAuEqsYiWWNK6SHZpwKmfDWbcCGNwSmHD%2BYCLMfLRQojVb0wkfAKRutcHOAUcbDJLgxgiGACsIEiCHaNV9C7N24dPa4kLqXf2etA4EGDqHWOkd8kx3DvgRiBQk5DxlqnZA6dalZ3FjLXO%2BdvbFwzmXCuRiNF120U3AQQwhD5PbhPeQYye4%2BP7oPNGI9hRjw7pPaBM857nwTn4TQ2hX4b2aFvNonhd5JFfiEPetAP4PISBcug98Mj6CyIIL5i9kiNA%2Bc/K%2B/y6hvwfnc0%2B/8ug9D/l/XxQDBGyzRrYyB0C8miBQU45BqD8BEHwVgzEODTZ4MwUMIYyDiFyBcfTTo7jPEVB8ZQ6hvi6GV24EwyQOwZRUIiejFh6MZQ7FZiK4B4c5YiOVkk9WmsdYyLkfbI2Si8Es3XkSkggg5laIbsrfRzBDH9GpgAjGpjpXmMpkMSx1iJiYvsTi4AeKinOLEa481XKQCuHZmw9GrNKb8JYTKVwYSdjuDRTKhJcryGdGZlTdm4DeEhqgazfmnBwG%2BLOVG4RHrkmKsLUgdVmS1UmzNtSZAHgPBLGpJwFhSx%2BFLHbFAkpTt2qUAqTLKp3takBy0I0kOYcZatOjgMEd8dunJ3Dv0wZpqsbDJznnAuRcMBTJVuXSu87q50E0fXLgvABC8FbmII5Gzu7wD7gPPwQ8AD0oZx4kOkFPU588L5LxXpCtetzIhwpyK855X7D5vLBYC2%2Bl9iivyBXfUFsKn6AohYENe55QPIp/oihu5rUVxJbdAowChK00nrezfhKC0HEqpdg8tlLhjcFpWehlyN40syGOzal7GOOcc5f4kAjC/Ui24Y3FhYSZRDGE1KmW0bFaxtcSk2A0jZIqqySWlwvBVHEt1bu%2BZBq9EGKMeLbDVrBiU2gVYgGuHSoEdonWlhJG6HyrcR4rxlAvU8c4CR6lrMI1c0bmE3m1KJNCPidJ/NCrJHFuo6WxRkWXB4FgfWnIjsymdtjj2mp866lGAaU04dWNR3AHaROrpidp19PbGnB4QyIQjKxmMldkzamrBmduh2Wn9VcEWSAJuJ61lPq7g4LZV7dnD1HkMCkj7LwnNnm%2B75phl7XKAyo7QqHHlH33ot1bIG4Of3OcC35UHwM/Ng7%2B%2BD9REMArO%2B/bbbRv6/0wyiy1kmMXgKxaaWBExiNMM4GR7VJKqZkpi1SyQ9H1mMccyy7xrn6EgE4Umzg8Odjw5lOmlhLD%2BGBfRcFxJ4ii0gGVfIstOSutarUZp2u7WdFGpNWah7GO5bDEkHa8zL37Fxdop9oJYOoeV1YzsIYkhuY7BDTwSJwT0Z07zSFhzzHJC2YDfzsJ4CQ2swDazbNj2gtc98ZIDXmOtdJ3apc7gQA) .\n\n    template &lt;size_t n&gt; struct counter;\n    \n    template &lt;size_t T, typename O, typename = void&gt; \n    struct is_complete_counter : std::false_type {};\n    template &lt;size_t T, typename O&gt;\n    struct is_complete_counter&lt;T, O, decltype(void(sizeof(counter&lt;T&gt;)))&gt; \n      : std::true_type {};\n    \n    template&lt;typename T, int start = -1, bool = false&gt;\n    struct find_unused_index;\n    template&lt;typename T, int start&gt;\n    struct find_unused_index&lt;T, start, false&gt;\n     : find_unused_index&lt;T, start+1, !is_complete_counter&lt;start+1, T&gt;::value&gt; {};\n    template&lt;typename T, int start&gt;\n    struct find_unused_index&lt;T, start, true&gt; {\n            constexpr const static size_t result = start;\n    };\n    \n    template&lt;typename T&gt; \n    constexpr const auto get_index = find_unused_index&lt;T&gt;::result;\n\nExample of usage:\n\n    struct A {};\n    \n    template&lt;&gt; struct counter&lt;get_index&lt;int&gt;&gt;{};\n    template&lt;&gt; struct counter&lt;get_index&lt;size_t&gt;&gt;{};\n    template&lt;&gt; struct counter&lt;get_index&lt;A&gt;&gt;{};\n    \n    \n    int main(){\n            volatile auto first = get_index&lt;A&gt;;\n            volatile auto second = get_index&lt;int&gt;;\n            volatile auto third = get_index&lt;size_t&gt;;\n            volatile auto fourth = get_index&lt;void&gt;;\n            volatile auto fifth = get_index&lt;char&gt;;\n    \n            static_assert(get_index&lt;A&gt; == 2, \"\");\n            static_assert(get_index&lt;int&gt; == 0, \"\");\n            static_assert(get_index&lt;size_t&gt; == 1, \"\");\n            static_assert(get_index&lt;void&gt; == 3, \"\");\n            static_assert(get_index&lt;char&gt; == 3, \"\");\n            return 0;\n    }\n\nWhat do you think about this? Can this be improved?  \n\n\nEdit: added \\`static\\_assert\\`s to \"Example of usage\"", "author_fullname": "t2_3smiac57", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Compile time type counter without macro tricks", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imrur7", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.79, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1599271687.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1599295331.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Basically, the title is self-descriptive. You can try out the &lt;a href=\"https://godbolt.org/#z:OYLghAFBqd5QCxAYwPYBMCmBRdBLAF1QCcAaPECAM1QDsCBlZAQwBtMQBGAFlICsupVs1qhkAUgBMAISnTSAZ0ztkBPHUqZa6AMKpWAVwC2tQVvQAZPLUwA5YwCNMxLgDZSAB1QLC62nsMTQS8fNTorG3sjJxdOdyUVMNoGAmZiAgDjU05FZUxVPxS0ggi7R2c3RVT0zKCchWqS6zLoiriASkVUA2JkDgByKQBma2RDLABqcSGdAgBPD0wAfQJiZkIFaexxAAYAQWHR8cwpmeQG9CwqLd2D/YJMIw9hB9OdHwAvZYIJ2i2JhrEAyqCZoAz0ZzTWT3R7PZivabvPBfFYTAAqpAm80WtGYRhOAHlMditHiTtMACITABuqDw6H%2BgOBPzwCiWaCe7Ae7O6EOIExAAII6BAICobCUKwW5IA7LIZRSobcHpz4eSZp9vujidLcfiJgTGatmRNWTzOZhuWC%2BYiMQbMVgxiSILT6RBNagqBBrQ9iLatu1A/9BRdRcbvtKpnLxAqlftlbCXphESS9Sc7dYfg1iqcqQBaHITByofS5ibi1hKI1AkFUazoJbggxKBv1zAADzjexVcIeKd1ZO1pvoQuK1ZNde0jdozcwre0HdtmOz6UxFarQ2wAqm%2B0nDabLaWbc7MztK4IckLYDAZo5z0tyx9kI1jUvmLRW1F1LYBmTm6j0IHLGQyAT2Sb9jig4ZiO57jrW9bTrO85YCeOhno0xJAn%2BW4xoBEz4QR%2BFoLQDQdh4/LEQ0o5qMgALIlqxCYAoBisD8lKjukXYxoqIEJqqfYzKmUH/JRDztuRoJ0FRzAGEQEzAJaR4Lu2ZZ7ohh7Hv6m6ioxzGsVx%2BxMiCewAdxBndomaqInBPxPn6MwKQQSkoYimY3JuuFmbxML8X%2BOg2ZJ4K%2BoijnOYuGr0Ss7nbNGwGgZZAn%2Bf%2BRm2bywUOYpmkzAcHkebFPGAbctyZhMRjrLQEDtJ5%2ByEYRtIvHg7ATDJcl1sQVHsaFWU6Dl2zeSZtX4fV8KNScLWoAC%2BR0OgZZdcprn0O5eGDTS%2BgjU141YggeDEDNnWZfNEUoheuXLYNw1qBtskTTQPQEAgs0HS5Myugyp23Ctq0NVdrV4FQ92PU53XIAgaRLR9K2MQQPS0BMOxcbG%2Bz9J0rAgP0ACs/SkKY/Q7FjqBo/5MhyAC3S9OSkhDJwWMEGjeOBqQADWIBDAAHAAdOj6NDK4nAytwrM8DKkiSO4qP9NwWM43jpAE/0WMKCAOykLTuPI6QcCwDAiAoKgTyjWQFDenrHgGyAwAKLiHgKAgqAEKQdasc4isQA4dNYw41hpHMaPU6QHL4vQBK0KwPtq6QWBlaI7DuxHO35Go1JMbHHb5LJAx%2B5myix6weAOGsxBzHoWC%2BzTxB4EYpedDQ9BMGwHCcJI/CCMIogoHIchCHniuQJ0qAeEkiv9HmFyUhIxMyDwEx5gSQwK3kBQaBA5i1NkpDmKUUQxME3i%2BHQq876Efib%2BUsS5IkhSNAf9QL0kRTpCfrRn%2Be19VMUj/b5wnQKGTfRcCjaNMbY1jnLdsrNXB5lcNweSyBaIQGNLQRm7QJgQFwIQEgUxKaFj0Prdg/JhhfwmETWQMgabuwZszTgOxlbi0lqQSu6Mdjs1cAATlcDsbgAt0ZQKGDsSQvBpb4zRgrJWKtyEa21hAJA3QCAeFkuQSgd4zY5DnOgs%2BNdGAsBjlQ0gAB3NYHgq5CEAVLEBaMCETF0YQB6YCIFQJgXAhBSCyFqwZggTAzAsAuEqsYiWWNK6SHZpwKmfDWbcCGNwSmHD%2BYCLMfLRQojVb0wkfAKRutcHOAUcbDJLgxgiGACsIEiCHaNV9C7N24dPa4kLqXf2etA4EGDqHWOkd8kx3DvgRiBQk5DxlqnZA6dalZ3FjLXO%2BdvbFwzmXCuRiNF120U3AQQwhD5PbhPeQYye4%2BP7oPNGI9hRjw7pPaBM857nwTn4TQ2hX4b2aFvNonhd5JFfiEPetAP4PISBcug98Mj6CyIIL5i9kiNA%2Bc/K%2B/y6hvwfnc0%2B/8ug9D/l/XxQDBGyzRrYyB0C8miBQU45BqD8BEHwVgzEODTZ4MwUMIYyDiFyBcfTTo7jPEVB8ZQ6hvi6GV24EwyQOwZRUIiejFh6MZQ7FZiK4B4c5YiOVkk9WmsdYyLkfbI2Si8Es3XkSkggg5laIbsrfRzBDH9GpgAjGpjpXmMpkMSx1iJiYvsTi4AeKinOLEa481XKQCuHZmw9GrNKb8JYTKVwYSdjuDRTKhJcryGdGZlTdm4DeEhqgazfmnBwG%2BLOVG4RHrkmKsLUgdVmS1UmzNtSZAHgPBLGpJwFhSx%2BFLHbFAkpTt2qUAqTLKp3takBy0I0kOYcZatOjgMEd8dunJ3Dv0wZpqsbDJznnAuRcMBTJVuXSu87q50E0fXLgvABC8FbmII5Gzu7wD7gPPwQ8AD0oZx4kOkFPU588L5LxXpCtetzIhwpyK855X7D5vLBYC2%2Bl9iivyBXfUFsKn6AohYENe55QPIp/oihu5rUVxJbdAowChK00nrezfhKC0HEqpdg8tlLhjcFpWehlyN40syGOzal7GOOcc5f4kAjC/Ui24Y3FhYSZRDGE1KmW0bFaxtcSk2A0jZIqqySWlwvBVHEt1bu%2BZBq9EGKMeLbDVrBiU2gVYgGuHSoEdonWlhJG6HyrcR4rxlAvU8c4CR6lrMI1c0bmE3m1KJNCPidJ/NCrJHFuo6WxRkWXB4FgfWnIjsymdtjj2mp866lGAaU04dWNR3AHaROrpidp19PbGnB4QyIQjKxmMldkzamrBmduh2Wn9VcEWSAJuJ61lPq7g4LZV7dnD1HkMCkj7LwnNnm%2B75phl7XKAyo7QqHHlH33ot1bIG4Of3OcC35UHwM/Ng7%2B%2BD9REMArO%2B/bbbRv6/0wyiy1kmMXgKxaaWBExiNMM4GR7VJKqZkpi1SyQ9H1mMccyy7xrn6EgE4Umzg8Odjw5lOmlhLD%2BGBfRcFxJ4ii0gGVfIstOSutarUZp2u7WdFGpNWah7GO5bDEkHa8zL37Fxdop9oJYOoeV1YzsIYkhuY7BDTwSJwT0Z07zSFhzzHJC2YDfzsJ4CQ2swDazbNj2gtc98ZIDXmOtdJ3apc7gQA\"&gt;code on godbolt&lt;/a&gt; .&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;template &amp;lt;size_t n&amp;gt; struct counter;\n\ntemplate &amp;lt;size_t T, typename O, typename = void&amp;gt; \nstruct is_complete_counter : std::false_type {};\ntemplate &amp;lt;size_t T, typename O&amp;gt;\nstruct is_complete_counter&amp;lt;T, O, decltype(void(sizeof(counter&amp;lt;T&amp;gt;)))&amp;gt; \n  : std::true_type {};\n\ntemplate&amp;lt;typename T, int start = -1, bool = false&amp;gt;\nstruct find_unused_index;\ntemplate&amp;lt;typename T, int start&amp;gt;\nstruct find_unused_index&amp;lt;T, start, false&amp;gt;\n : find_unused_index&amp;lt;T, start+1, !is_complete_counter&amp;lt;start+1, T&amp;gt;::value&amp;gt; {};\ntemplate&amp;lt;typename T, int start&amp;gt;\nstruct find_unused_index&amp;lt;T, start, true&amp;gt; {\n        constexpr const static size_t result = start;\n};\n\ntemplate&amp;lt;typename T&amp;gt; \nconstexpr const auto get_index = find_unused_index&amp;lt;T&amp;gt;::result;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Example of usage:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;struct A {};\n\ntemplate&amp;lt;&amp;gt; struct counter&amp;lt;get_index&amp;lt;int&amp;gt;&amp;gt;{};\ntemplate&amp;lt;&amp;gt; struct counter&amp;lt;get_index&amp;lt;size_t&amp;gt;&amp;gt;{};\ntemplate&amp;lt;&amp;gt; struct counter&amp;lt;get_index&amp;lt;A&amp;gt;&amp;gt;{};\n\n\nint main(){\n        volatile auto first = get_index&amp;lt;A&amp;gt;;\n        volatile auto second = get_index&amp;lt;int&amp;gt;;\n        volatile auto third = get_index&amp;lt;size_t&amp;gt;;\n        volatile auto fourth = get_index&amp;lt;void&amp;gt;;\n        volatile auto fifth = get_index&amp;lt;char&amp;gt;;\n\n        static_assert(get_index&amp;lt;A&amp;gt; == 2, &amp;quot;&amp;quot;);\n        static_assert(get_index&amp;lt;int&amp;gt; == 0, &amp;quot;&amp;quot;);\n        static_assert(get_index&amp;lt;size_t&amp;gt; == 1, &amp;quot;&amp;quot;);\n        static_assert(get_index&amp;lt;void&amp;gt; == 3, &amp;quot;&amp;quot;);\n        static_assert(get_index&amp;lt;char&amp;gt; == 3, &amp;quot;&amp;quot;);\n        return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What do you think about this? Can this be improved?  &lt;/p&gt;\n\n&lt;p&gt;Edit: added `static_assert`s to &amp;quot;Example of usage&amp;quot;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imrur7", "is_robot_indexable": true, "report_reasons": null, "author": "Lenvidor", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/imrur7/compile_time_type_counter_without_macro_tricks/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/imrur7/compile_time_type_counter_without_macro_tricks/", "subreddit_subscribers": 152617, "created_utc": 1599266531.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_auae5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Meeting C++ online: Ivan \u010cuki\u0107 - Move-only types can save the API", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": "meetingcpp", "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imcw6n", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": "", "subreddit_type": "public", "ups": 56, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/ojTsSGlhVLo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Meeting C++ online - Ivan \u010cuki\u0107", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/ojTsSGlhVLo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Meeting Cpp", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/ojTsSGlhVLo/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/MeetingCPP"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/ojTsSGlhVLo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/imcw6n", "height": 338}, "link_flair_text": "Meeting C++", "can_mod_post": false, "score": 56, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1599240586.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=ojTsSGlhVLo", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "Meeting C++ | C++ Evangelist", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imcw6n", "is_robot_indexable": true, "report_reasons": null, "author": "meetingcpp", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/imcw6n/meeting_c_online_ivan_\u010duki\u0107_moveonly_types_can/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=ojTsSGlhVLo", "subreddit_subscribers": 152617, "created_utc": 1599211786.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Meeting C++ online - Ivan \u010cuki\u0107", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/ojTsSGlhVLo?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Meeting Cpp", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/ojTsSGlhVLo/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/MeetingCPP"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_4x3td", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Using std::variant to mimic R data frames", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imwiwn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.6, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "programming", "selftext": "", "author_fullname": "t2_4x3td", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A heterogeneous data frame in C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/programming", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imqkq1", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1599290248.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "libfbp.blogspot.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "http://libfbp.blogspot.com/2020/09/a-heterogeneous-data-frame-in-c.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2fwo", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imqkq1", "is_robot_indexable": true, "report_reasons": null, "author": "ifknot", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/programming/comments/imqkq1/a_heterogeneous_data_frame_in_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://libfbp.blogspot.com/2020/09/a-heterogeneous-data-frame-in-c.html", "subreddit_subscribers": 2839181, "created_utc": 1599261448.0, "num_crossposts": 1, "media": null, "is_video": false}], "created": 1599316887.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "libfbp.blogspot.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "http://libfbp.blogspot.com/2020/09/a-heterogeneous-data-frame-in-c.html", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imwiwn", "is_robot_indexable": true, "report_reasons": null, "author": "ifknot", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_imqkq1", "author_flair_text_color": null, "permalink": "/r/cpp/comments/imwiwn/using_stdvariant_to_mimic_r_data_frames/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://libfbp.blogspot.com/2020/09/a-heterogeneous-data-frame-in-c.html", "subreddit_subscribers": 152617, "created_utc": 1599288087.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_2umpls5q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Through this code I m trying to find the last digit of Fibonacci sum from 'm' to 'n' for all types of input. But my code fails for some test cases. Can you please help me find the error in my c++ code.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_in0oim", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.17, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "learnprogramming", "selftext": "    #include &lt;iostream&gt;\n    #include &lt;algorithm&gt;\n    \n    using namespace std;\n    \n    typedef long long int ll;\n    ll fibo_sum_last_digit( ll n) {\n        n=(n+2)%60;\n        ll f[60]={0};\n        f[0]=0;\n        f[1]=1;\n        for(ll i=2;i&lt;=n;i++)\n        {\n            f[i]=(f[i-1] + f[i-2])%10;\n        }\n        return (f[n]%10-1) ;\n    }\n    \n      int main() {\n        ll m; ll n; //from m to n\n        cin &gt;&gt; m &gt;&gt; n;\n        ll c = (fibo_sum_last_digit(n)+10)%10;\n        ll d = (fibo_sum_last_digit(m-1)+10)%10;\n        cout &lt;&lt; abs(c-d) &lt;&lt; '\\n';\n        return 0;\n        }\n    \n\n&amp;#x200B;", "author_fullname": "t2_2umpls5q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Through this code I m trying to find the last digit of Fibonacci sum from 'm' to 'n' for all types of input. But my code fails for some test cases. Can you please help me find the error in my c++ code.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/learnprogramming", "hidden": false, "pwls": 6, "link_flair_css_class": "debugging-help", "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_imzsuv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Debugging", "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1599306885.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1599335321.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.learnprogramming", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;#include &amp;lt;iostream&amp;gt;\n#include &amp;lt;algorithm&amp;gt;\n\nusing namespace std;\n\ntypedef long long int ll;\nll fibo_sum_last_digit( ll n) {\n    n=(n+2)%60;\n    ll f[60]={0};\n    f[0]=0;\n    f[1]=1;\n    for(ll i=2;i&amp;lt;=n;i++)\n    {\n        f[i]=(f[i-1] + f[i-2])%10;\n    }\n    return (f[n]%10-1) ;\n}\n\n  int main() {\n    ll m; ll n; //from m to n\n    cin &amp;gt;&amp;gt; m &amp;gt;&amp;gt; n;\n    ll c = (fibo_sum_last_digit(n)+10)%10;\n    ll d = (fibo_sum_last_digit(m-1)+10)%10;\n    cout &amp;lt;&amp;lt; abs(c-d) &amp;lt;&amp;lt; &amp;#39;\\n&amp;#39;;\n    return 0;\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "ac78c008-b669-11e1-b5d9-12313d28619b", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2r7yd", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "imzsuv", "is_robot_indexable": true, "report_reasons": null, "author": "lordkushagra", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/learnprogramming/comments/imzsuv/through_this_code_i_m_trying_to_find_the_last/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/learnprogramming/comments/imzsuv/through_this_code_i_m_trying_to_find_the_last/", "subreddit_subscribers": 1680922, "created_utc": 1599306521.0, "num_crossposts": 1, "media": null, "is_video": false}], "created": 1599339488.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.learnprogramming", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "/r/learnprogramming/comments/imzsuv/through_this_code_i_m_trying_to_find_the_last/", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "in0oim", "is_robot_indexable": true, "report_reasons": null, "author": "lordkushagra", "discussion_type": null, "num_comments": 0, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_imzsuv", "author_flair_text_color": null, "permalink": "/r/cpp/comments/in0oim/through_this_code_i_m_trying_to_find_the_last/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "/r/learnprogramming/comments/imzsuv/through_this_code_i_m_trying_to_find_the_last/", "subreddit_subscribers": 152617, "created_utc": 1599310688.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_in0oim", "before": null}}