{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once. If you want your code reviewed or review other's code, there's a [codereview stackexchange](https://codereview.stackexchange.com/questions/tagged/rust), too. If you need to test your code, maybe [the Rust playground](https://play.rust-lang.org) is for you.\n\nHere are some other venues where help may be found:\n\n[/r/learnrust](https://www.reddit.com/r/learnrust) is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/).\n\nThe official Rust Programming Language Discord: [https://discord.gg/rust-lang](https://discord.gg/rust-lang)\n\nThe unofficial Rust community Discord: [https://bit.ly/rust-community](https://bit.ly/rust-community)\n\nThe Rust-related IRC channels on irc.mozilla.org (click the links to open a web-based IRC client):\n\n - [#rust](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust) (general questions)\n - [#rust-beginners](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-beginners) (beginner questions)\n - [#cargo](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23cargo) (the package manager)\n - [#rust-gamedev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-gamedev) (graphics and video games, and see also [/r/rust_gamedev](https://www.reddit.com/r/rust_gamedev))\n - [#rust-osdev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-osdev) (operating systems and embedded systems)\n - [#rust-webdev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-webdev) (web development)\n - [#rust-networking](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-networking) (computer networking, and see also [/r/rust_networking](https://www.reddit.com/r/rust_networking))\n\nAlso check out [last week's thread](https://reddit.com/r/rust/comments/f1ucwh/hey_rustaceans_got_an_easy_question_ask_here/) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nAlso if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hey Rustaceans! Got an easy question? Ask here (8/2020)!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f5413m", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581946962.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven&amp;#39;t been written yet.&lt;/p&gt;\n\n&lt;p&gt;If you have a &lt;a href=\"http://stackoverflow.com/\"&gt;StackOverflow&lt;/a&gt; account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it &lt;a href=\"http://stackoverflow.com/questions/tagged/rust\"&gt;the &amp;quot;Rust&amp;quot; tag&lt;/a&gt; for maximum visibility). Note that this site is very interested in question quality. I&amp;#39;ve been asked to read a RFC I authored once. If you want your code reviewed or review other&amp;#39;s code, there&amp;#39;s a &lt;a href=\"https://codereview.stackexchange.com/questions/tagged/rust\"&gt;codereview stackexchange&lt;/a&gt;, too. If you need to test your code, maybe &lt;a href=\"https://play.rust-lang.org\"&gt;the Rust playground&lt;/a&gt; is for you.&lt;/p&gt;\n\n&lt;p&gt;Here are some other venues where help may be found:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/learnrust\"&gt;/r/learnrust&lt;/a&gt; is a subreddit to share your questions and epiphanies learning Rust programming.&lt;/p&gt;\n\n&lt;p&gt;The official Rust user forums: &lt;a href=\"https://users.rust-lang.org/\"&gt;https://users.rust-lang.org/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The official Rust Programming Language Discord: &lt;a href=\"https://discord.gg/rust-lang\"&gt;https://discord.gg/rust-lang&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The unofficial Rust community Discord: &lt;a href=\"https://bit.ly/rust-community\"&gt;https://bit.ly/rust-community&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The Rust-related IRC channels on irc.mozilla.org (click the links to open a web-based IRC client):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust\"&gt;#rust&lt;/a&gt; (general questions)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-beginners\"&gt;#rust-beginners&lt;/a&gt; (beginner questions)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23cargo\"&gt;#cargo&lt;/a&gt; (the package manager)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-gamedev\"&gt;#rust-gamedev&lt;/a&gt; (graphics and video games, and see also &lt;a href=\"https://www.reddit.com/r/rust_gamedev\"&gt;/r/rust_gamedev&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-osdev\"&gt;#rust-osdev&lt;/a&gt; (operating systems and embedded systems)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-webdev\"&gt;#rust-webdev&lt;/a&gt; (web development)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-networking\"&gt;#rust-networking&lt;/a&gt; (computer networking, and see also &lt;a href=\"https://www.reddit.com/r/rust_networking\"&gt;/r/rust_networking&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Also check out &lt;a href=\"https://reddit.com/r/rust/comments/f1ucwh/hey_rustaceans_got_an_easy_question_ask_here/\"&gt;last week&amp;#39;s thread&lt;/a&gt; with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.&lt;/p&gt;\n\n&lt;p&gt;Also if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5413m", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 50, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/f5413m/hey_rustaceans_got_an_easy_question_ask_here_82020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/f5413m/hey_rustaceans_got_an_easy_question_ask_here_82020/", "subreddit_subscribers": 91179, "created_utc": 1581918162.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "New week, new Rust! What are you folks up to? Answer here or over at [rust-users](https://users.rust-lang.org/t/whats-everyone-working-on-this-week-8-2020/38329?u=llogiq)!", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What's everyone working on this week (8/2020)?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f541u0", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581947073.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;New week, new Rust! What are you folks up to? Answer here or over at &lt;a href=\"https://users.rust-lang.org/t/whats-everyone-working-on-this-week-8-2020/38329?u=llogiq\"&gt;rust-users&lt;/a&gt;!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f541u0", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/f541u0/whats_everyone_working_on_this_week_82020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/f541u0/whats_everyone_working_on_this_week_82020/", "subreddit_subscribers": 91179, "created_utc": 1581918273.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "     #![feature(type_name_of_val)]\n    \n    fn foo&lt;T: Default&gt;() -&gt; Result&lt;T, String&gt; {\n        Ok(Default::default())\n    }\n    \n    fn bar() -&gt; Result&lt;String, String&gt; {\n        let baz = foo()?; // WTF is type of baz?\n        println!(\"baz: {:?}\", std::any::type_name_of_val(&amp;baz));\n        Ok(String::default())\n    }\n    \n    fn main() {\n      let _ = bar();\n    }\n\n[https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fee0ee95cba86cc77ba001f7a16fcf7f](https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=fee0ee95cba86cc77ba001f7a16fcf7f)\n\nI would expect the above to cause compile error but surprisingly, it compiles and the type of baz is `()`. Is there any rule that allows the compiler to do so or it is a bug?", "author_fullname": "t2_nt892", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why does Rust infer `()` when the generic type cannot be really inferred?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f5nw1o", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 31, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 31, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582038541.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt; #![feature(type_name_of_val)]\n\nfn foo&amp;lt;T: Default&amp;gt;() -&amp;gt; Result&amp;lt;T, String&amp;gt; {\n    Ok(Default::default())\n}\n\nfn bar() -&amp;gt; Result&amp;lt;String, String&amp;gt; {\n    let baz = foo()?; // WTF is type of baz?\n    println!(&amp;quot;baz: {:?}&amp;quot;, std::any::type_name_of_val(&amp;amp;baz));\n    Ok(String::default())\n}\n\nfn main() {\n  let _ = bar();\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;a href=\"https://play.rust-lang.org/?version=nightly&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=fee0ee95cba86cc77ba001f7a16fcf7f\"&gt;https://play.rust-lang.org/?version=nightly&amp;amp;mode=debug&amp;amp;edition=2018&amp;amp;gist=fee0ee95cba86cc77ba001f7a16fcf7f&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I would expect the above to cause compile error but surprisingly, it compiles and the type of baz is &lt;code&gt;()&lt;/code&gt;. Is there any rule that allows the compiler to do so or it is a bug?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5nw1o", "is_robot_indexable": true, "report_reasons": null, "author": "sasik520", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f5nw1o/why_does_rust_infer_when_the_generic_type_cannot/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f5nw1o/why_does_rust_infer_when_the_generic_type_cannot/", "subreddit_subscribers": 91179, "created_utc": 1582009741.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_4majh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Source code for all examples from Rust in Action, book published by Manning", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f5g7gq", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 153, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 153, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582004358.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "rust in action", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5g7gq", "is_robot_indexable": true, "report_reasons": null, "author": "timClicks", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/f5g7gq/source_code_for_all_examples_from_rust_in_action/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/rust-in-action/code/", "subreddit_subscribers": 91179, "created_utc": 1581975558.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hey guys, \nAs I continue to learn rust here I keep wanting to see what\u2019s in the eco system of like packages I\u2019ve been able to use in languages like go. \n\nWas wonder what\u2019s in rust that support openapi/swagger 3.0? Be great if there is a contract drive approach where the spec is defined first and some level of codegen then happens. Anyway love to know the best way to get swagger support for a future public api\u2019s I\u2019m sure to build. \nThanks", "author_fullname": "t2_4rvfmb7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust support for openapi/swagger", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f5m80w", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 41, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 41, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582029804.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys, \nAs I continue to learn rust here I keep wanting to see what\u2019s in the eco system of like packages I\u2019ve been able to use in languages like go. &lt;/p&gt;\n\n&lt;p&gt;Was wonder what\u2019s in rust that support openapi/swagger 3.0? Be great if there is a contract drive approach where the spec is defined first and some level of codegen then happens. Anyway love to know the best way to get swagger support for a future public api\u2019s I\u2019m sure to build. \nThanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5m80w", "is_robot_indexable": true, "report_reasons": null, "author": "lukekhamilton", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f5m80w/rust_support_for_openapiswagger/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f5m80w/rust_support_for_openapiswagger/", "subreddit_subscribers": 91179, "created_utc": 1582001004.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_11a6aw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "UniverCity open source release (university management sim in Rust)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f5fiii", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 94, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 94, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582001783.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5fiii", "is_robot_indexable": true, "report_reasons": null, "author": "Cldfire", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f5fiii/univercity_open_source_release_university/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/Thinkofname/UniverCity", "subreddit_subscribers": 91179, "created_utc": 1581972983.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_1mnc1", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "rust-analyzer Changelog #12", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f5a0ku", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 242, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 242, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1581980910.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "rust-analyzer.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5a0ku", "is_robot_indexable": true, "report_reasons": null, "author": "deltaphc", "discussion_type": null, "num_comments": 25, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f5a0ku/rustanalyzer_changelog_12/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://rust-analyzer.github.io/thisweek/2020/02/17/changelog-12.html", "subreddit_subscribers": 91179, "created_utc": 1581952110.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_5pcq60dn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Create a SVG donut chart in Rust WebAssembly (rustwasm)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f5ibv4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 23, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 23, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1582012701.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "webassemblyman.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5ibv4", "is_robot_indexable": true, "report_reasons": null, "author": "WebAssemblyMan", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f5ibv4/create_a_svg_donut_chart_in_rust_webassembly/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.webassemblyman.com/rustwasm/rustwasm_svg_donut_chart_webcomponent.html", "subreddit_subscribers": 91179, "created_utc": 1581983901.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I've got this simple program:\n\n    fn main() {\n        std::env::args().enumerate().for_each(|(num, arg)| {\n            println!(\"arg {} is `{}`\", num, arg);\n        });\n    }\n\nWhen I run it (**not** via `cmd.exe`) with the args `'See one coronation' \"and you've seen them all\"` (confirmed with ProcessExplorer that the double quotes are indeed passed to the program), it will print\n\n    arg 0 is `&lt;skipped&gt;.exe`\n    arg 1 is `'See`\n    arg 2 is `one`\n    arg 3 is `coronation'`\n    arg 4 is `and you've seen them all`\n\nIs it Rust removing the double quotes and treating the contents as a single arg, or is that Windows runtime?\n\nI really just need to pass and interpret all and any symbols in CLI args as is.\n\nPS. Somebody told me it's possible to get the as-is CLI args in Windows via `GetCommandLineW`, so I guess it must be Rust's stdlib? Would it be possible without too much pain to access the same info from Rust?", "author_fullname": "t2_2qdyv0o0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust's runtime removes CLI quotes?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_f5r7ld", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1582030407.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1582058502.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve got this simple program:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fn main() {\n    std::env::args().enumerate().for_each(|(num, arg)| {\n        println!(&amp;quot;arg {} is `{}`&amp;quot;, num, arg);\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When I run it (&lt;strong&gt;not&lt;/strong&gt; via &lt;code&gt;cmd.exe&lt;/code&gt;) with the args &lt;code&gt;&amp;#39;See one coronation&amp;#39; &amp;quot;and you&amp;#39;ve seen them all&amp;quot;&lt;/code&gt; (confirmed with ProcessExplorer that the double quotes are indeed passed to the program), it will print&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;arg 0 is `&amp;lt;skipped&amp;gt;.exe`\narg 1 is `&amp;#39;See`\narg 2 is `one`\narg 3 is `coronation&amp;#39;`\narg 4 is `and you&amp;#39;ve seen them all`\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is it Rust removing the double quotes and treating the contents as a single arg, or is that Windows runtime?&lt;/p&gt;\n\n&lt;p&gt;I really just need to pass and interpret all and any symbols in CLI args as is.&lt;/p&gt;\n\n&lt;p&gt;PS. Somebody told me it&amp;#39;s possible to get the as-is CLI args in Windows via &lt;code&gt;GetCommandLineW&lt;/code&gt;, so I guess it must be Rust&amp;#39;s stdlib? Would it be possible without too much pain to access the same info from Rust?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5r7ld", "is_robot_indexable": true, "report_reasons": null, "author": "YuriGeinishBC", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f5r7ld/rusts_runtime_removes_cli_quotes/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f5r7ld/rusts_runtime_removes_cli_quotes/", "subreddit_subscribers": 91179, "created_utc": 1582029702.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_nyz1p2x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A Pragmatic Approach To Global State", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f5a2ld", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 35, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 35, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "programming", "selftext": "", "author_fullname": "t2_nyz1p2x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A Pragmatic Approach To Global State", "link_flair_richtext": [], "subreddit_name_prefixed": "r/programming", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f5a2dl", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1581981122.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "adventures.michaelfbryan.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2fwo", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5a2dl", "is_robot_indexable": true, "report_reasons": null, "author": "Michael-F-Bryan", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/programming/comments/f5a2dl/a_pragmatic_approach_to_global_state/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://adventures.michaelfbryan.com/posts/pragmatic-global-state/?utm_source=reddit&amp;utm_medium=social&amp;utm_campaign=pragmatic-global-state", "subreddit_subscribers": 2455255, "created_utc": 1581952322.0, "num_crossposts": 1, "media": null, "is_video": false}], "created": 1581981144.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "adventures.michaelfbryan.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5a2ld", "is_robot_indexable": true, "report_reasons": null, "author": "Michael-F-Bryan", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_f5a2dl", "author_flair_text_color": null, "permalink": "/r/rust/comments/f5a2ld/a_pragmatic_approach_to_global_state/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://adventures.michaelfbryan.com/posts/pragmatic-global-state/?utm_source=reddit&amp;utm_medium=social&amp;utm_campaign=pragmatic-global-state", "subreddit_subscribers": 91179, "created_utc": 1581952344.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Recently, I updated Rust to the latest stable version (1.41.0) on my macOS system and noticed that the tests of my [pet project](https://github.com/dfyz/osm-renderer) started crashing with `capacity overflow` errors coming from `alloc::raw_vec::capacity_overflow()`. My gut reaction was that I must have been bitten by UB in my unsafe code, but surprisingly this doesn't seem to be the case here.\n\nI managed to reproduce the problem with [a tiny program](https://github.com/dfyz/rust-segfault) without any unsafe code at all (and no external crates). When I run it with `cargo run --release` on either Ubuntu 19.10 or macOS 10.15, I get something like this:\n\n```\n$ cargo run --release\n[...]\n0 0 3 18446744073709551615\n[1]    19196 segmentation fault  cargo run --release\n```\n\nBasically, a slice obtained from an array of small length somehow has length `2**64 - 1`, which allows you to read from memory you don't have access to without bounds checking. The expected output is something like this:\n```\n[...]\n0 0 3 0\nthread 'main' panicked at 'index out of bounds: the len is 0 but the index is 16777216', src/main.rs:13:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n```\n\nThe problem goes away if I do any of the following:\n  * remove either of the two `do_test(...);` calls in `main()`;\n  * remove the `for _ in 0..1 {` loop;\n  * replace the `for y in 0..x {` loop with `for y in 0..1 {`;\n  * remove the `z.extend(std::iter::repeat(0).take(x));` line or replace it with `z.extend(std::iter::repeat(0).take(1));`;\n  * replace the `for arr_ref in arr {` loop with `let arr_ref = &amp;arr[0];`;\n  * specify `RUSTFLAGS=\"-C opt-level=2\"` (the default optimization level for release builds is 3);\n  * specify `RUSTFLAGS=\"-C codegen-units=1\"` (the default is 16).\n\nI can't reproduce the problem:\n  * in the Rust playground, presumably because it uses `codegen-units = 1` in its Cargo.toml;\n  * on a Windows 10 machine (I have no idea why).\n\n`cargo-bisect-rustc` says the regression first happened in the `2019-12-12` nightly, specifically [in this commit](https://github.com/rust-lang/rust/commit/033662dfbca088937b9cdfd3d9584015b5e375b2), which is a rollup of multiple commits. Neither of them seems related to the problem I'm seeing.\n\nMy best guess so far is `-C opt-level=3` enables a problematic optimization pass in LLVM, which results in miscompilation. This is corroborated by the fact that MIR (`--emit mir`) and LLVM IR before optimizations (`--emit llvm-ir -C no-prepopulate-passes`) is the same for both `-C opt-level=2` and `-C opt-level=3`.\n\nIf this indeed is LLVM acting up, I guess I should follow [this guide](https://github.com/rust-lang/rustc-guide/blob/master/src/codegen/debugging.md). This seems doable but time-consuming, given that the problem only appears with multiple codegen units. So, is there a chance that I stumbled upon a known issue? I searched through the GitHub issues, but failed to find anything similar.", "author_fullname": "t2_32dim", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Weird memory unsafety problem in safe Rust", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f51fem", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 348, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 348, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581934386.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Recently, I updated Rust to the latest stable version (1.41.0) on my macOS system and noticed that the tests of my &lt;a href=\"https://github.com/dfyz/osm-renderer\"&gt;pet project&lt;/a&gt; started crashing with &lt;code&gt;capacity overflow&lt;/code&gt; errors coming from &lt;code&gt;alloc::raw_vec::capacity_overflow()&lt;/code&gt;. My gut reaction was that I must have been bitten by UB in my unsafe code, but surprisingly this doesn&amp;#39;t seem to be the case here.&lt;/p&gt;\n\n&lt;p&gt;I managed to reproduce the problem with &lt;a href=\"https://github.com/dfyz/rust-segfault\"&gt;a tiny program&lt;/a&gt; without any unsafe code at all (and no external crates). When I run it with &lt;code&gt;cargo run --release&lt;/code&gt; on either Ubuntu 19.10 or macOS 10.15, I get something like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n$ cargo run --release\n[...]\n0 0 3 18446744073709551615\n[1]    19196 segmentation fault  cargo run --release\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Basically, a slice obtained from an array of small length somehow has length &lt;code&gt;2**64 - 1&lt;/code&gt;, which allows you to read from memory you don&amp;#39;t have access to without bounds checking. The expected output is something like this:\n&lt;code&gt;\n[...]\n0 0 3 0\nthread &amp;#39;main&amp;#39; panicked at &amp;#39;index out of bounds: the len is 0 but the index is 16777216&amp;#39;, src/main.rs:13:35\nnote: run with `RUST_BACKTRACE=1` environment variable to display a backtrace.\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;The problem goes away if I do any of the following:\n  * remove either of the two &lt;code&gt;do_test(...);&lt;/code&gt; calls in &lt;code&gt;main()&lt;/code&gt;;\n  * remove the &lt;code&gt;for _ in 0..1 {&lt;/code&gt; loop;\n  * replace the &lt;code&gt;for y in 0..x {&lt;/code&gt; loop with &lt;code&gt;for y in 0..1 {&lt;/code&gt;;\n  * remove the &lt;code&gt;z.extend(std::iter::repeat(0).take(x));&lt;/code&gt; line or replace it with &lt;code&gt;z.extend(std::iter::repeat(0).take(1));&lt;/code&gt;;\n  * replace the &lt;code&gt;for arr_ref in arr {&lt;/code&gt; loop with &lt;code&gt;let arr_ref = &amp;amp;arr[0];&lt;/code&gt;;\n  * specify &lt;code&gt;RUSTFLAGS=&amp;quot;-C opt-level=2&amp;quot;&lt;/code&gt; (the default optimization level for release builds is 3);\n  * specify &lt;code&gt;RUSTFLAGS=&amp;quot;-C codegen-units=1&amp;quot;&lt;/code&gt; (the default is 16).&lt;/p&gt;\n\n&lt;p&gt;I can&amp;#39;t reproduce the problem:\n  * in the Rust playground, presumably because it uses &lt;code&gt;codegen-units = 1&lt;/code&gt; in its Cargo.toml;\n  * on a Windows 10 machine (I have no idea why).&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;cargo-bisect-rustc&lt;/code&gt; says the regression first happened in the &lt;code&gt;2019-12-12&lt;/code&gt; nightly, specifically &lt;a href=\"https://github.com/rust-lang/rust/commit/033662dfbca088937b9cdfd3d9584015b5e375b2\"&gt;in this commit&lt;/a&gt;, which is a rollup of multiple commits. Neither of them seems related to the problem I&amp;#39;m seeing.&lt;/p&gt;\n\n&lt;p&gt;My best guess so far is &lt;code&gt;-C opt-level=3&lt;/code&gt; enables a problematic optimization pass in LLVM, which results in miscompilation. This is corroborated by the fact that MIR (&lt;code&gt;--emit mir&lt;/code&gt;) and LLVM IR before optimizations (&lt;code&gt;--emit llvm-ir -C no-prepopulate-passes&lt;/code&gt;) is the same for both &lt;code&gt;-C opt-level=2&lt;/code&gt; and &lt;code&gt;-C opt-level=3&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If this indeed is LLVM acting up, I guess I should follow &lt;a href=\"https://github.com/rust-lang/rustc-guide/blob/master/src/codegen/debugging.md\"&gt;this guide&lt;/a&gt;. This seems doable but time-consuming, given that the problem only appears with multiple codegen units. So, is there a chance that I stumbled upon a known issue? I searched through the GitHub issues, but failed to find anything similar.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f51fem", "is_robot_indexable": true, "report_reasons": null, "author": "dfyz", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f51fem/weird_memory_unsafety_problem_in_safe_rust/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f51fem/weird_memory_unsafety_problem_in_safe_rust/", "subreddit_subscribers": 91179, "created_utc": 1581905586.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I'm loving rust-analyser, but using its extension doesn't seem to give me auto-format with rustfmt.\n\nIs it likely I have something set up incorrectly, or is there a stand alone vscode extension folks are using to get that feature?", "author_fullname": "t2_3dd9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What rustfmt extension are you using with rust-analyser?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f5c8lc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581989559.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m loving rust-analyser, but using its extension doesn&amp;#39;t seem to give me auto-format with rustfmt.&lt;/p&gt;\n\n&lt;p&gt;Is it likely I have something set up incorrectly, or is there a stand alone vscode extension folks are using to get that feature?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f5c8lc", "is_robot_indexable": true, "report_reasons": null, "author": "sindisil", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f5c8lc/what_rustfmt_extension_are_you_using_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f5c8lc/what_rustfmt_extension_are_you_using_with/", "subreddit_subscribers": 91179, "created_utc": 1581960759.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_f5c8lc", "before": null}}