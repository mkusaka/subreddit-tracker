{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_57uz3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Announcing the 2020 Go Developer Survey", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jeuosg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 225, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 225, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603245041.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.golang.org", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://blog.golang.org/survey2020", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 80, "id": "award_8352bdff-3e03-4189-8a08-82501dd8f835", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=16&amp;height=16&amp;auto=webp&amp;s=85b1aa61933f163dd2b77b1e78f4d82d9c947ec1", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=32&amp;height=32&amp;auto=webp&amp;s=67935636337b07ca5b98d945f4bcdae26e5f567e", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=48&amp;height=48&amp;auto=webp&amp;s=547d5fb33f5a4a5d6fc154cbd658638cc2b1c3a0", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=64&amp;height=64&amp;auto=webp&amp;s=e17bc331183e7ba194314a34e43b35460a835fff", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=128&amp;height=128&amp;auto=webp&amp;s=1b4e617f18af8d4e2c47c2f154d4422be43c809f", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Everything is better with a good hug", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Hugz", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=16&amp;height=16&amp;auto=webp&amp;s=85b1aa61933f163dd2b77b1e78f4d82d9c947ec1", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=32&amp;height=32&amp;auto=webp&amp;s=67935636337b07ca5b98d945f4bcdae26e5f567e", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=48&amp;height=48&amp;auto=webp&amp;s=547d5fb33f5a4a5d6fc154cbd658638cc2b1c3a0", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=64&amp;height=64&amp;auto=webp&amp;s=e17bc331183e7ba194314a34e43b35460a835fff", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=128&amp;height=128&amp;auto=webp&amp;s=1b4e617f18af8d4e2c47c2f154d4422be43c809f", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jeuosg", "is_robot_indexable": true, "report_reasons": null, "author": "spf13", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jeuosg/announcing_the_2020_go_developer_survey/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://blog.golang.org/survey2020", "subreddit_subscribers": 129810, "created_utc": 1603216241.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_341qs42b", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Static Dependency Analysis Tool for Go Files", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jpm0aj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 38, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 38, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1604759190.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://i.redd.it/h71qm0zrhrx51.gif", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jpm0aj", "is_robot_indexable": true, "report_reasons": null, "author": "resotto", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jpm0aj/static_dependency_analysis_tool_for_go_files/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://i.redd.it/h71qm0zrhrx51.gif", "subreddit_subscribers": 129810, "created_utc": 1604730390.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "In \"A Tour of Go\" on 15th of moretypes why \"append(s, 2, 3, 4) \" show \"len=5 cap=6 \\[0 1 2 3 4\\]\" instead of \"len=5 cap=5 \\[0 1 2 3 4\\]\" ? [question](https://tour.golang.org/moretypes/15):  \nCode:  \n\n\n    package main\n    \n    import \"fmt\"\n    \n    func main() {\n    \tvar s []int\n    \tprintSlice(s)\n    \n    \t// append works on nil slices.\n    \ts = append(s, 0)\n    \tprintSlice(s)\n    \n    \t// The slice grows as needed.\n    \ts = append(s, 1)\n    \tprintSlice(s)\n    \n    \t// We can add more than one element at a time.\n    \ts = append(s, 2, 3, 4)\n    \tprintSlice(s)\n    }\n    \n    func printSlice(s []int) {\n    \tfmt.Printf(\"len=%d cap=%d %v\\n\", len(s), cap(s), s)\n    }\n    \n    Output:\n    len=0 cap=0 []\n    len=1 cap=1 [0]\n    len=2 cap=2 [0 1]\n    len=5 cap=6 [0 1 2 3 4]\n\nI am new to learning go.", "author_fullname": "t2_66yux9wf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A Tour of GO moretypes 15: Why slice append extra 1 in capacity ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jppmsp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604778887.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In &amp;quot;A Tour of Go&amp;quot; on 15th of moretypes why &amp;quot;append(s, 2, 3, 4) &amp;quot; show &amp;quot;len=5 cap=6 [0 1 2 3 4]&amp;quot; instead of &amp;quot;len=5 cap=5 [0 1 2 3 4]&amp;quot; ? &lt;a href=\"https://tour.golang.org/moretypes/15\"&gt;question&lt;/a&gt;:&lt;br/&gt;\nCode:  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport &amp;quot;fmt&amp;quot;\n\nfunc main() {\n    var s []int\n    printSlice(s)\n\n    // append works on nil slices.\n    s = append(s, 0)\n    printSlice(s)\n\n    // The slice grows as needed.\n    s = append(s, 1)\n    printSlice(s)\n\n    // We can add more than one element at a time.\n    s = append(s, 2, 3, 4)\n    printSlice(s)\n}\n\nfunc printSlice(s []int) {\n    fmt.Printf(&amp;quot;len=%d cap=%d %v\\n&amp;quot;, len(s), cap(s), s)\n}\n\nOutput:\nlen=0 cap=0 []\nlen=1 cap=1 [0]\nlen=2 cap=2 [0 1]\nlen=5 cap=6 [0 1 2 3 4]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am new to learning go.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jppmsp", "is_robot_indexable": true, "report_reasons": null, "author": "sameeeeep", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jppmsp/a_tour_of_go_moretypes_15_why_slice_append_extra/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jppmsp/a_tour_of_go_moretypes_15_why_slice_append_extra/", "subreddit_subscribers": 129810, "created_utc": 1604750087.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello everyone\n\nI am trying to customize many2many table join. I have two tables from which I want to have taken the ids and want another field, which will tell me when the entry in the join table was made. The ids are coming fine, but the creation\\_at is not updating and shows Null instead of time.\n\n    // this is the table join struct which I want to make\n    \n    type UserChallenges struct {\n    \n    gorm.JoinTableHandler\n    \n    CreatedAt   time.Time\n    \n    UserID      int\n    \n    ChallengeID int\n    \n    }\n    \n    \n    \n    //hook before create\n    \n    func (UserChallenges) BeforeCreate(Db \\*gorm.DB) error {\n    \n    Db.SetJoinTableHandler(&amp;User{}, \"ChallengeId\", &amp;UserChallenges{})\n    \n    return nil\n    \n    }\n\nThis is not giving any error on the build. Please tell me what I am missing so that I can get the creation time field in this.PS - The documentation of GORM on [gorm.io](https://gorm.io) is still showing SetupJoinTable method but it is deprecated in the newer version.", "author_fullname": "t2_3jj0x8wr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GORM Customise Join table", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jpp2dz", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604775982.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everyone&lt;/p&gt;\n\n&lt;p&gt;I am trying to customize many2many table join. I have two tables from which I want to have taken the ids and want another field, which will tell me when the entry in the join table was made. The ids are coming fine, but the creation_at is not updating and shows Null instead of time.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// this is the table join struct which I want to make\n\ntype UserChallenges struct {\n\ngorm.JoinTableHandler\n\nCreatedAt   time.Time\n\nUserID      int\n\nChallengeID int\n\n}\n\n\n\n//hook before create\n\nfunc (UserChallenges) BeforeCreate(Db \\*gorm.DB) error {\n\nDb.SetJoinTableHandler(&amp;amp;User{}, &amp;quot;ChallengeId&amp;quot;, &amp;amp;UserChallenges{})\n\nreturn nil\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is not giving any error on the build. Please tell me what I am missing so that I can get the creation time field in this.PS - The documentation of GORM on &lt;a href=\"https://gorm.io\"&gt;gorm.io&lt;/a&gt; is still showing SetupJoinTable method but it is deprecated in the newer version.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jpp2dz", "is_robot_indexable": true, "report_reasons": null, "author": "shadow8856", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jpp2dz/gorm_customise_join_table/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jpp2dz/gorm_customise_join_table/", "subreddit_subscribers": 129810, "created_utc": 1604747182.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "&amp;#x200B;\n\nI am new to go and also new to building rest APIs so I am trying to crunch a lot at once.\n\nI am trying to request something, like a book by its id, and then host it locally so that if I write my local URL, like http://localhost:8080\u200b/books?books=&lt;book-id&gt;  it would show me the specific result.\n\nto try to be concrete, I need to connect the two. Get the information from that URL, so \"consume\" and also host it locally, specifically by ID. I am not sure how to do both at once.\n\nTo create the paths, I've been using gorilla mux\n\nSo separately, I've used this, which would give me all the books at once (URL is not real)\n\nAt the end I want to be able to put in my computer [http://localhost:8080/books/b5a92d0e-5fb4-43d4-ba60-c012135958e4](http://localhost:8080/species/b5a92d0e-5fb4-43d4-ba60-c012135958e4)\n\nwhich would give me the book in json in my browser\n\n&amp;#x200B;\n\npls be nice!!\n\n`func main(){response, err := http.Get(\"https://bookibook.herokuapp.com/books/\")if err != nil{fmt.Printf(\"there is no book with this ID %s\\n\", err)} else{data, _ := ioutil.ReadAll(response.Body)fmt.Println(string(data))`\n\nand then this, which would create a local path for http://localhost:8080/books/&lt;id&gt;\n\n`import (\"fmt\"\"log\"\"net/http\"\"github.com/gorilla/mux\")`\n\n`func getID(w http.ResponseWriter, r *http.Request) {vars := mux.Vars(r)fmt.Fprintf(w, \"Get id %s\\n\", vars[\"id\"])}`\n\n`func main() {// Configure routes.router := mux.NewRouter()router.HandleFunc(\"/books/{id}/\", getID).Methods(http.MethodGet)`\n\n`// Start HTTP server.if err := http.ListenAndServe(\":8080\", router); err != nil {log.Fatal(err)}}`", "author_fullname": "t2_34hsse09", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rest API consume and host", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jpp0ar", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1604747796.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604775705.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I am new to go and also new to building rest APIs so I am trying to crunch a lot at once.&lt;/p&gt;\n\n&lt;p&gt;I am trying to request something, like a book by its id, and then host it locally so that if I write my local URL, like http://localhost:8080\u200b/books?books=&amp;lt;book-id&amp;gt;  it would show me the specific result.&lt;/p&gt;\n\n&lt;p&gt;to try to be concrete, I need to connect the two. Get the information from that URL, so &amp;quot;consume&amp;quot; and also host it locally, specifically by ID. I am not sure how to do both at once.&lt;/p&gt;\n\n&lt;p&gt;To create the paths, I&amp;#39;ve been using gorilla mux&lt;/p&gt;\n\n&lt;p&gt;So separately, I&amp;#39;ve used this, which would give me all the books at once (URL is not real)&lt;/p&gt;\n\n&lt;p&gt;At the end I want to be able to put in my computer &lt;a href=\"http://localhost:8080/species/b5a92d0e-5fb4-43d4-ba60-c012135958e4\"&gt;http://localhost:8080/books/b5a92d0e-5fb4-43d4-ba60-c012135958e4&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;which would give me the book in json in my browser&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;pls be nice!!&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;func main(){response, err := http.Get(&amp;quot;https://bookibook.herokuapp.com/books/&amp;quot;)if err != nil{fmt.Printf(&amp;quot;there is no book with this ID %s\\n&amp;quot;, err)} else{data, _ := ioutil.ReadAll(response.Body)fmt.Println(string(data))&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;and then this, which would create a local path for http://localhost:8080/books/&amp;lt;id&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;import (&amp;quot;fmt&amp;quot;&amp;quot;log&amp;quot;&amp;quot;net/http&amp;quot;&amp;quot;github.com/gorilla/mux&amp;quot;)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;func getID(w http.ResponseWriter, r *http.Request) {vars := mux.Vars(r)fmt.Fprintf(w, &amp;quot;Get id %s\\n&amp;quot;, vars[&amp;quot;id&amp;quot;])}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;func main() {// Configure routes.router := mux.NewRouter()router.HandleFunc(&amp;quot;/books/{id}/&amp;quot;, getID).Methods(http.MethodGet)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;// Start HTTP server.if err := http.ListenAndServe(&amp;quot;:8080&amp;quot;, router); err != nil {log.Fatal(err)}}&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jpp0ar", "is_robot_indexable": true, "report_reasons": null, "author": "jp8638a", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jpp0ar/rest_api_consume_and_host/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jpp0ar/rest_api_consume_and_host/", "subreddit_subscribers": 129810, "created_utc": 1604746905.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ewto0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust vs Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jp4kvp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 168, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 168, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1604696123.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "bitfieldconsulting.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://bitfieldconsulting.com/golang/rust-vs-go", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jp4kvp", "is_robot_indexable": true, "report_reasons": null, "author": "bitfieldconsulting", "discussion_type": null, "num_comments": 166, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jp4kvp/rust_vs_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://bitfieldconsulting.com/golang/rust-vs-go", "subreddit_subscribers": 129810, "created_utc": 1604667323.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "i am using a public api that has a json object that can scale \n\nfor example \n\n`{`  \n`\"places\" : {`\n\n`\"london\" : 65,`\n\n`\"stockholm\" : 14,`\n\n`\"somecity\" : 3,`  \n`....`  \n`}`  \n`}`  \n\n\nand then you can have another object like this   \n`{`  \n`\"places\":{`\n\n `\"morroco\" : 30`\n\n`}`\n\n`}`\n\n&amp;#x200B;\n\nunfortunately the public api didn't put this stuff as an array because (i don't know  why )", "author_fullname": "t2_4c0rphct", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Unmarshal a json to a struct and the json object can scale ??", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jpoe3a", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604772467.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;i am using a public api that has a json object that can scale &lt;/p&gt;\n\n&lt;p&gt;for example &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;{&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;&amp;quot;places&amp;quot; : {&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;quot;london&amp;quot; : 65,&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;quot;stockholm&amp;quot; : 14,&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;quot;somecity&amp;quot; : 3,&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;....&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;}&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;}&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;and then you can have another object like this&lt;br/&gt;\n&lt;code&gt;{&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;&amp;quot;places&amp;quot;:{&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;&amp;quot;morroco&amp;quot; : 30&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;unfortunately the public api didn&amp;#39;t put this stuff as an array because (i don&amp;#39;t know  why )&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jpoe3a", "is_robot_indexable": true, "report_reasons": null, "author": "younlok", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jpoe3a/unmarshal_a_json_to_a_struct_and_the_json_object/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jpoe3a/unmarshal_a_json_to_a_struct_and_the_json_object/", "subreddit_subscribers": 129810, "created_utc": 1604743667.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi guys.\n\nI am working on a scenario where I start multiple goroutines each designed to do certain task and I want to display the progress of each goroutine using progress bar.\n\nI have tried using uiprogress , mpb but all these progress bars fail when the number of bars created are high ex.100\nhttps://github.com/gosuri/uiprogress/blob/master/example/full/full.go\n\nWhen the number of bars provided are high the output starts overlapping leading to more than one progress bar getting display for each goroutine.\n\n\nCan anybody help me with some approach for displaying progress bars only once per goroutine even when the number of goroutines are high\n\nOr is there any other way apart from progress bars which I can use to display dynamic data from goroutines", "author_fullname": "t2_6wjvt0dw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Display multiple progress bars for all the goroutines", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jpqm3f", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1604755012.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604783556.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi guys.&lt;/p&gt;\n\n&lt;p&gt;I am working on a scenario where I start multiple goroutines each designed to do certain task and I want to display the progress of each goroutine using progress bar.&lt;/p&gt;\n\n&lt;p&gt;I have tried using uiprogress , mpb but all these progress bars fail when the number of bars created are high ex.100\n&lt;a href=\"https://github.com/gosuri/uiprogress/blob/master/example/full/full.go\"&gt;https://github.com/gosuri/uiprogress/blob/master/example/full/full.go&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;When the number of bars provided are high the output starts overlapping leading to more than one progress bar getting display for each goroutine.&lt;/p&gt;\n\n&lt;p&gt;Can anybody help me with some approach for displaying progress bars only once per goroutine even when the number of goroutines are high&lt;/p&gt;\n\n&lt;p&gt;Or is there any other way apart from progress bars which I can use to display dynamic data from goroutines&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jpqm3f", "is_robot_indexable": true, "report_reasons": null, "author": "demo22394", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jpqm3f/display_multiple_progress_bars_for_all_the/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jpqm3f/display_multiple_progress_bars_for_all_the/", "subreddit_subscribers": 129810, "created_utc": 1604754756.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_68joj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Idiomatic Go Resources", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jp3om9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 46, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 46, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1604691823.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/@dgryski/idiomatic-go-resources-966535376dba", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jp3om9", "is_robot_indexable": true, "report_reasons": null, "author": "juanpabloaj", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jp3om9/idiomatic_go_resources/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@dgryski/idiomatic-go-resources-966535376dba", "subreddit_subscribers": 129810, "created_utc": 1604663023.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_kj0nv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Gron: A command line tool that makes JSON greppable", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jp7vzq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1604707998.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/tomnomnom/gron", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jp7vzq", "is_robot_indexable": true, "report_reasons": null, "author": "binaryfor", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jp7vzq/gron_a_command_line_tool_that_makes_json_greppable/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/tomnomnom/gron", "subreddit_subscribers": 129810, "created_utc": 1604679198.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "[https://golang.org/doc/devel/release.html#go1.15.minor](https://golang.org/doc/devel/release.html#go1.15.minor)\n\n&amp;#x200B;\n\n[https://github.com/golang/go/issues?q=milestone%3AGo1.15.4+label%3ACherryPickApproved](https://github.com/golang/go/issues?q=milestone%3AGo1.15.4+label%3ACherryPickApproved)", "author_fullname": "t2_xj70o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Golang 1.15.4 released", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_joznmi", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 46, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 46, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604670990.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://golang.org/doc/devel/release.html#go1.15.minor\"&gt;https://golang.org/doc/devel/release.html#go1.15.minor&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/golang/go/issues?q=milestone%3AGo1.15.4+label%3ACherryPickApproved\"&gt;https://github.com/golang/go/issues?q=milestone%3AGo1.15.4+label%3ACherryPickApproved&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "joznmi", "is_robot_indexable": true, "report_reasons": null, "author": "M1hkel", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/joznmi/golang_1154_released/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/joznmi/golang_1154_released/", "subreddit_subscribers": 129810, "created_utc": 1604642190.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_joznmi", "before": null}}