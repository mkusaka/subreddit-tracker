{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4skjb60g", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why we\u2019re writing machine learning infrastructure in Go, not Python", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_elzoma", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 108, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 108, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1578549644.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "towardsdatascience.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "elzoma", "is_robot_indexable": true, "report_reasons": null, "author": "calebkaiser", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/elzoma/why_were_writing_machine_learning_infrastructure/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://towardsdatascience.com/why-were-writing-machine-learning-infrastructure-in-go-not-python-38d6a37e2d76", "subreddit_subscribers": 99002, "created_utc": 1578520844.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_3hurj9id", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to Start with Logging in Go Projects. Part 2", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_em8uiu", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1578601038.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.maddevs.io", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "em8uiu", "is_robot_indexable": true, "report_reasons": null, "author": "darikanur", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/em8uiu/how_to_start_with_logging_in_go_projects_part_2/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://blog.maddevs.io/how-to-start-with-logging-in-go-projects-part-2-1e57cc58f329", "subreddit_subscribers": 99002, "created_utc": 1578572238.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_pmpz4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "JWT Authorization in Golang - CloudJourney IO", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_elwvxm", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 42, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 42, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1578537930.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "cloudjourney.io", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "elwvxm", "is_robot_indexable": true, "report_reasons": null, "author": "vTimD", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/elwvxm/jwt_authorization_in_golang_cloudjourney_io/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.cloudjourney.io/articles/security/jwt_in_golang-su/", "subreddit_subscribers": 99002, "created_utc": 1578509130.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4lmwp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "ditty - Terminal-based music player (beep/oto for audio)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_em1et9", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1578557316.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "git.sr.ht", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "em1et9", "is_robot_indexable": true, "report_reasons": null, "author": "tslocum", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/em1et9/ditty_terminalbased_music_player_beepoto_for_audio/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://git.sr.ht/~tslocum/ditty", "subreddit_subscribers": 99002, "created_utc": 1578528516.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_c49fz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go Get My/Vulnerabilities", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_em9iwq", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/GGQcv7fK0JY?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Go Get My/Vulnerabilities", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/GGQcv7fK0JY?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Black Hat", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/GGQcv7fK0JY/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/BlackHatOfficialYT"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/GGQcv7fK0JY?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/em9iwq", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1578604774.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "em9iwq", "is_robot_indexable": true, "report_reasons": null, "author": "patrikhl", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/em9iwq/go_get_myvulnerabilities/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=GGQcv7fK0JY", "subreddit_subscribers": 99002, "created_utc": 1578575974.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Go Get My/Vulnerabilities", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/GGQcv7fK0JY?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Black Hat", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/GGQcv7fK0JY/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/BlackHatOfficialYT"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Does such a tool like bokeh [https://docs.bokeh.org/en/latest/index.html](https://docs.bokeh.org/en/latest/index.html) exist for golang? I think go would be ideal because a single binary can host the webserver and data for visualization. At the moment, I worry about setting up python runtime, webserver, and a proxy which is tedious!", "author_fullname": "t2_3kpxl4d0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "bokeh for golang", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_em90f6", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578601944.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Does such a tool like bokeh &lt;a href=\"https://docs.bokeh.org/en/latest/index.html\"&gt;https://docs.bokeh.org/en/latest/index.html&lt;/a&gt; exist for golang? I think go would be ideal because a single binary can host the webserver and data for visualization. At the moment, I worry about setting up python runtime, webserver, and a proxy which is tedious!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "em90f6", "is_robot_indexable": true, "report_reasons": null, "author": "uragnorson", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/em90f6/bokeh_for_golang/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/em90f6/bokeh_for_golang/", "subreddit_subscribers": 99002, "created_utc": 1578573144.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "For some reason I just struggle with goroutines with Channels. In other languages like python or C I\u2019ve had breakthrough moments where I thought \u201cah ha, that\u2019s how I can use x design pattern or data structure.\u201d For some reason, concurrency/go routines/channels aren\u2019t really clicking for me.\n\nSo my question to the gophers is: What breakthrough helped you learn how to use channels and goroutines effectively? How can I get better at \u201cthinking concurrently\u201d if I come from a background of writing procedural and imperative code?", "author_fullname": "t2_eik5t", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Help me understand goroutines", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_em5r4h", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578579650.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For some reason I just struggle with goroutines with Channels. In other languages like python or C I\u2019ve had breakthrough moments where I thought \u201cah ha, that\u2019s how I can use x design pattern or data structure.\u201d For some reason, concurrency/go routines/channels aren\u2019t really clicking for me.&lt;/p&gt;\n\n&lt;p&gt;So my question to the gophers is: What breakthrough helped you learn how to use channels and goroutines effectively? How can I get better at \u201cthinking concurrently\u201d if I come from a background of writing procedural and imperative code?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "em5r4h", "is_robot_indexable": true, "report_reasons": null, "author": "stevejobrojobs", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/em5r4h/help_me_understand_goroutines/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/em5r4h/help_me_understand_goroutines/", "subreddit_subscribers": 99002, "created_utc": 1578550850.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I have a little Go script running on a 16 vCPU Google Compute Engine.  \n\n\nThis script establishes about ~1,300 web sockets to [polygon.io](https://polygon.io/sockets) to monitor stock trades for particular tickers. Behind the scenes this uses [gorilla/websocket](https://github.com/gorilla/websocket). When a trade comes in, some calculations are performed, and the result is stored in a [concurrent-map](https://github.com/orcaman/concurrent-map).\n\nAccording to Google's dashboard, my CPU utilization for this work is less than 1%. According to `iptraf`, my packet sizes are between 1 and 275 bytes.\n\nStill, I'd like to know if my calculations are operating \"fast\" enough--let's say, completing a trade calculation within 100ms. I can't shake the feeling that I have a bottleneck somewhere. I believe this is the case because when the script runs \"live,\" nothing happens; but when I reply the day's activities in a debug mode, events that I expect to occur, occur (eg. recommending when to buy a particular stock). How can I ensure CPU throughout or network latency in my Go program are not issues?\n\nTIA", "author_fullname": "t2_4l3ld9u0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to monitor if my Go program is operating optimally?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eltqmr", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1578519346.0, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578524193.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a little Go script running on a 16 vCPU Google Compute Engine.  &lt;/p&gt;\n\n&lt;p&gt;This script establishes about ~1,300 web sockets to &lt;a href=\"https://polygon.io/sockets\"&gt;polygon.io&lt;/a&gt; to monitor stock trades for particular tickers. Behind the scenes this uses &lt;a href=\"https://github.com/gorilla/websocket\"&gt;gorilla/websocket&lt;/a&gt;. When a trade comes in, some calculations are performed, and the result is stored in a &lt;a href=\"https://github.com/orcaman/concurrent-map\"&gt;concurrent-map&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;According to Google&amp;#39;s dashboard, my CPU utilization for this work is less than 1%. According to &lt;code&gt;iptraf&lt;/code&gt;, my packet sizes are between 1 and 275 bytes.&lt;/p&gt;\n\n&lt;p&gt;Still, I&amp;#39;d like to know if my calculations are operating &amp;quot;fast&amp;quot; enough--let&amp;#39;s say, completing a trade calculation within 100ms. I can&amp;#39;t shake the feeling that I have a bottleneck somewhere. I believe this is the case because when the script runs &amp;quot;live,&amp;quot; nothing happens; but when I reply the day&amp;#39;s activities in a debug mode, events that I expect to occur, occur (eg. recommending when to buy a particular stock). How can I ensure CPU throughout or network latency in my Go program are not issues?&lt;/p&gt;\n\n&lt;p&gt;TIA&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eltqmr", "is_robot_indexable": true, "report_reasons": null, "author": "veinsworking", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/eltqmr/how_to_monitor_if_my_go_program_is_operating/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/eltqmr/how_to_monitor_if_my_go_program_is_operating/", "subreddit_subscribers": 99002, "created_utc": 1578495393.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_2896k", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A Chapter in the Life of Go\u2019s Compiler", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_elyykn", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1578546651.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "elyykn", "is_robot_indexable": true, "report_reasons": null, "author": "applcmptrdood", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/elyykn/a_chapter_in_the_life_of_gos_compiler/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/samsara-engineering/a-chapter-in-the-life-of-gos-compiler-c89b9db74617", "subreddit_subscribers": 99002, "created_utc": 1578517851.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello,\n\nI've started to learn about go modules and I've started with a simple Echo web server.\n\n    // main.go\n    package main\n    \n    import (\n    \t\"net/http\"\n    \n    \t\"github.com/labstack/echo\"\n    )\n    \n    func main() {\n    \te := echo.New()\n    \te.GET(\"/\", func(c echo.Context) error {\n    \t\treturn c.String(http.StatusOK, \"Hello, World!\")\n    \t})\n    \te.Logger.Fatal(e.Start(\":1323\"))\n    }\n\nUsing `go get -u github.com/labstack/echo/...` , I can run the above code from within my GOPATH and a server starts with version 4.1.13.\n\nI have created a new folder for Go modules called /gomodules, which is outside my GOPATH. Inside /gomodules I created a folder called /echo (/gomodules/echo).\n\nInside /echo I created a go.mod file:\n\n    // go.mod\n    module testing.com/main\n    \n    go 1.13\n\nI also copied the main.go file into the /echo folder.\n\nWhen I run main.go, Go gets v3.3.10 of Echo. I had expected it to get the latest version. Here is the result.\n\n    module testing.com/main\n    \n    go 1.13\n    \n    require (\n    \tgithub.com/labstack/echo v3.3.10+incompatible // indirect\n    \tgithub.com/labstack/gommon v0.3.0 // indirect\n    \tgolang.org/x/crypto v0.0.0-20200108215511-5d647ca15757 // indirect\n    )\n\nI've tried manually setting the mod.go file.\n\n    module testing.com/main\n    \n    go 1.13\n    \n    require (\n    \tgithub.com/labstack/echo v4.1.13 // indirect\n    )\n\nAs well as:\n\n    module testing.com/main\n    \n    go 1.13\n    \n    require (\n    \tgithub.com/labstack/echo/v4 v4.1.13 // indirect\n    )\n    \n\nThe later will run but the first wont.  Even after the later runs and the go.mod file looks the same, when running main.go, I am stuck with v3.3.10.\n\nI've read the docs on modules and I feel lost as to how to get this to work. What am I missing?\n\n&amp;#x200B;\n\nThanks!", "author_fullname": "t2_3o1x6w78", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to work with Go modules?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_em0zxc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578555495.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve started to learn about go modules and I&amp;#39;ve started with a simple Echo web server.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// main.go\npackage main\n\nimport (\n    &amp;quot;net/http&amp;quot;\n\n    &amp;quot;github.com/labstack/echo&amp;quot;\n)\n\nfunc main() {\n    e := echo.New()\n    e.GET(&amp;quot;/&amp;quot;, func(c echo.Context) error {\n        return c.String(http.StatusOK, &amp;quot;Hello, World!&amp;quot;)\n    })\n    e.Logger.Fatal(e.Start(&amp;quot;:1323&amp;quot;))\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Using &lt;code&gt;go get -u github.com/labstack/echo/...&lt;/code&gt; , I can run the above code from within my GOPATH and a server starts with version 4.1.13.&lt;/p&gt;\n\n&lt;p&gt;I have created a new folder for Go modules called /gomodules, which is outside my GOPATH. Inside /gomodules I created a folder called /echo (/gomodules/echo).&lt;/p&gt;\n\n&lt;p&gt;Inside /echo I created a go.mod file:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// go.mod\nmodule testing.com/main\n\ngo 1.13\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I also copied the main.go file into the /echo folder.&lt;/p&gt;\n\n&lt;p&gt;When I run main.go, Go gets v3.3.10 of Echo. I had expected it to get the latest version. Here is the result.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module testing.com/main\n\ngo 1.13\n\nrequire (\n    github.com/labstack/echo v3.3.10+incompatible // indirect\n    github.com/labstack/gommon v0.3.0 // indirect\n    golang.org/x/crypto v0.0.0-20200108215511-5d647ca15757 // indirect\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;ve tried manually setting the mod.go file.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module testing.com/main\n\ngo 1.13\n\nrequire (\n    github.com/labstack/echo v4.1.13 // indirect\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As well as:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module testing.com/main\n\ngo 1.13\n\nrequire (\n    github.com/labstack/echo/v4 v4.1.13 // indirect\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The later will run but the first wont.  Even after the later runs and the go.mod file looks the same, when running main.go, I am stuck with v3.3.10.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve read the docs on modules and I feel lost as to how to get this to work. What am I missing?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "em0zxc", "is_robot_indexable": true, "report_reasons": null, "author": "Cazanator", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/em0zxc/how_to_work_with_go_modules/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/em0zxc/how_to_work_with_go_modules/", "subreddit_subscribers": 99002, "created_utc": 1578526695.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_em0zxc", "before": null}}