{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - September", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ik9rft", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1598947533.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ik9rft", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 3, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ik9rft/whos_hiring_typescript_developers_september/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/ik9rft/whos_hiring_typescript_developers_september/", "subreddit_subscribers": 49509, "created_utc": 1598918733.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_5xjp4q3g", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I tried to write clean architecture based back-end application in TypeScript", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_j27rqe", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 42, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 42, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/oE8Yjx4NShw_w1on-Ev4ftZYZkA9klmUko6LbTbL2KE.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1601440968.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/pvarentsov/typescript-clean-architecture", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/XVgLvNmzMUdfkNdxNCRfUAPczPFZGp1cGWhMgbP1EAE.jpg?auto=webp&amp;s=4606803f3558ff417024aa27513eb205c261a9e2", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/XVgLvNmzMUdfkNdxNCRfUAPczPFZGp1cGWhMgbP1EAE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=22526d28a16292ff2faf21b4a21d9899fc2d8bb0", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/XVgLvNmzMUdfkNdxNCRfUAPczPFZGp1cGWhMgbP1EAE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d789936f5aff87a4735e64116098ee2c99d49a6c", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/XVgLvNmzMUdfkNdxNCRfUAPczPFZGp1cGWhMgbP1EAE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=aae97203c6be7c11a1117cc2f4fcd8f5028b3d17", "width": 320, "height": 320}], "variants": {}, "id": "fm7NL_vUGI4Ew6oLAKJ5phNhUDZFgblUeSPjb7MplXk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j27rqe", "is_robot_indexable": true, "report_reasons": null, "author": "pvarentsov", "discussion_type": null, "num_comments": 20, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j27rqe/i_tried_to_write_clean_architecture_based_backend/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/pvarentsov/typescript-clean-architecture", "subreddit_subscribers": 49509, "created_utc": 1601412168.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have a base type (ex: Record&lt;string, any&gt;) that I want to ensure is true for all sub-type instances. For each sub-type, I have a set of specific keys which will be valid which return a specific set of values.\n\nFor example: type MyType extends Record&lt;string, any&gt; = { a: string, b: number }\n\nI am looking for a way to get the type \"a\" | \"b\" from MyType. However, using \"keyof MyType\" == \"string | number\".\n\nWhat is the right way to extract only (\"a\" | \"b\") into a type of its own, given MyType as the input?\n\nPlayground:\nhttps://www.typescriptlang.org/play?#code/C4TwDgpgBAksEFsDOUC8UBKEDGB7ATgCYA8Sw+AlgHYDmANFAIZUgB8A3FAPRdQCyEZsCjBcUMPlwA3CoWiMoAI0ZJooSFDL4ArtmDb8EBlVzCkjEFABEzS1uo0oFFLgDWFqwChq8fADNGbGg+EDhEFAgAD3gqQhQw5CgAb25eASERMQlpWXkqKCiwABsKbAphErIoXD8oKUYSwihXCBAUZibgAAsICnxNSDK-UqhDfXx89QgkTyg5pgAuTXIHOln5xSWqbQRFCHxPAF9PTymoAGlWpABBPW0GtGbWmv5Q+GROHjR0e1ooAB8oNtdvtTuBoJc2gARaZ9CBNdA2KwA6yKKyfXhyJBwwgnPzaKh6Ci4fI0CDABLEAAqBWiEFiKEhNzuDVYAApUlAAMJdZhkkRdZxQEpUNRiJkw7GGTpiQKCiBSaBYnFKCC8mQEAB06zm5XCSxCCSQDB1TkISypAEpPAa3uEANpUgC6yVNYwM+T1yHtsid7COJzwVCqXqQtqNjySpsYSyshEYwEYVjW8yUSwArAHPEGqvUitoINdHmSKe82aGGEjLRjlpRaJqoAB1AiuBzanPCPMFgBCxfJCXL72NqKs1c5wL2+Abzfwrfr2ZJuYaBa5fdLiEH4Ur2FHNdsUAAhEemxlROJJIRdPIROCCvhJP0eoYoH4CExPVQ87JrDuniBNUAA", "author_fullname": "t2_o234y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Excluding the keys of a base type", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j2bggl", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1601453440.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a base type (ex: Record&amp;lt;string, any&amp;gt;) that I want to ensure is true for all sub-type instances. For each sub-type, I have a set of specific keys which will be valid which return a specific set of values.&lt;/p&gt;\n\n&lt;p&gt;For example: type MyType extends Record&amp;lt;string, any&amp;gt; = { a: string, b: number }&lt;/p&gt;\n\n&lt;p&gt;I am looking for a way to get the type &amp;quot;a&amp;quot; | &amp;quot;b&amp;quot; from MyType. However, using &amp;quot;keyof MyType&amp;quot; == &amp;quot;string | number&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;What is the right way to extract only (&amp;quot;a&amp;quot; | &amp;quot;b&amp;quot;) into a type of its own, given MyType as the input?&lt;/p&gt;\n\n&lt;p&gt;Playground:\n&lt;a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAksEFsDOUC8UBKEDGB7ATgCYA8Sw+AlgHYDmANFAIZUgB8A3FAPRdQCyEZsCjBcUMPlwA3CoWiMoAI0ZJooSFDL4ArtmDb8EBlVzCkjEFABEzS1uo0oFFLgDWFqwChq8fADNGbGg+EDhEFAgAD3gqQhQw5CgAb25eASERMQlpWXkqKCiwABsKbAphErIoXD8oKUYSwihXCBAUZibgAAsICnxNSDK-UqhDfXx89QgkTyg5pgAuTXIHOln5xSWqbQRFCHxPAF9PTymoAGlWpABBPW0GtGbWmv5Q+GROHjR0e1ooAB8oNtdvtTuBoJc2gARaZ9CBNdA2KwA6yKKyfXhyJBwwgnPzaKh6Ci4fI0CDABLEAAqBWiEFiKEhNzuDVYAApUlAAMJdZhkkRdZxQEpUNRiJkw7GGTpiQKCiBSaBYnFKCC8mQEAB06zm5XCSxCCSQDB1TkISypAEpPAa3uEANpUgC6yVNYwM+T1yHtsid7COJzwVCqXqQtqNjySpsYSyshEYwEYVjW8yUSwArAHPEGqvUitoINdHmSKe82aGGEjLRjlpRaJqoAB1AiuBzanPCPMFgBCxfJCXL72NqKs1c5wL2+Abzfwrfr2ZJuYaBa5fdLiEH4Ur2FHNdsUAAhEemxlROJJIRdPIROCCvhJP0eoYoH4CExPVQ87JrDuniBNUAA\"&gt;https://www.typescriptlang.org/play?#code/C4TwDgpgBAksEFsDOUC8UBKEDGB7ATgCYA8Sw+AlgHYDmANFAIZUgB8A3FAPRdQCyEZsCjBcUMPlwA3CoWiMoAI0ZJooSFDL4ArtmDb8EBlVzCkjEFABEzS1uo0oFFLgDWFqwChq8fADNGbGg+EDhEFAgAD3gqQhQw5CgAb25eASERMQlpWXkqKCiwABsKbAphErIoXD8oKUYSwihXCBAUZibgAAsICnxNSDK-UqhDfXx89QgkTyg5pgAuTXIHOln5xSWqbQRFCHxPAF9PTymoAGlWpABBPW0GtGbWmv5Q+GROHjR0e1ooAB8oNtdvtTuBoJc2gARaZ9CBNdA2KwA6yKKyfXhyJBwwgnPzaKh6Ci4fI0CDABLEAAqBWiEFiKEhNzuDVYAApUlAAMJdZhkkRdZxQEpUNRiJkw7GGTpiQKCiBSaBYnFKCC8mQEAB06zm5XCSxCCSQDB1TkISypAEpPAa3uEANpUgC6yVNYwM+T1yHtsid7COJzwVCqXqQtqNjySpsYSyshEYwEYVjW8yUSwArAHPEGqvUitoINdHmSKe82aGGEjLRjlpRaJqoAB1AiuBzanPCPMFgBCxfJCXL72NqKs1c5wL2+Abzfwrfr2ZJuYaBa5fdLiEH4Ur2FHNdsUAAhEemxlROJJIRdPIROCCvhJP0eoYoH4CExPVQ87JrDuniBNUAA&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j2bggl", "is_robot_indexable": true, "report_reasons": null, "author": "TouchyInBeddedEngr", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j2bggl/excluding_the_keys_of_a_base_type/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/j2bggl/excluding_the_keys_of_a_base_type/", "subreddit_subscribers": 49509, "created_utc": 1601424640.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "[Playground](https://www.typescriptlang.org/play?#code/C4TwDgpgBAKgjFAvFA2gcgM7AE4EsB2A5mgDRQDeAtgQPwBcU+ArpQEYTZmUCGAHvYxbtsAXwC6AbgBQoSLABMSVGm7Zs3EKVgxJUmeGgwYSKVDNQAPrDinzVmPKnSpEXmAD22YFABmTfADGwLju+FAAFtwYUAA8MAB8UAAU3Azc+CBkANYMWRAg7j6wAJRpULjR5CgA+lnlYXkFRToMMDVZYiJS5LZm2BDATNgN9VDcUABkE2MoHVAAhIjI-gAmED4EECvSXVIEwBw+3AHQAFLuBDEAysDcwQEwZABK-sGUEAkUvWMBJ2DASWADBe+DeHzIADcGDc7rgHqUoKx3O4ADYQdI7PQBUJYKBPeAMc6XLB4IhkeCJZA9cw-P4A4CQ4pfGk0-qDYbJWQQQpQCFIJZQTA4AjEJlTb4s8xJeaRDCAlBwMRkNDUfBoJkWKzABViAB0qtiyAhurRRGA4TFEwlkuSMqi8sVyp4vHVli1Ov1fCg8SNJogZot0hpXV22PwuPx8kJF3wMX8WXw7gA7vgUEqFJTmeZjnTASQIUzqTaw7iMExWFylNrFUGbWyhmEkgBBNQaXUVFvqEBJAuW62S40QCEcbtMJCJfFtMsVgwoAAMYj1OYg-yS065ZCYxWKtbMIaxOO8k6URbMQtJxGB8BI3xUrc0V-kN5EQA)\n\nI want to create a simple type validator for some data I get coming in.\n\nThis is a sub-example but it already doesn't work. What am I doing wrong?", "author_fullname": "t2_54q92", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What am I missing here?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j27k9e", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1601440308.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.typescriptlang.org/play?#code/C4TwDgpgBAKgjFAvFA2gcgM7AE4EsB2A5mgDRQDeAtgQPwBcU+ArpQEYTZmUCGAHvYxbtsAXwC6AbgBQoSLABMSVGm7Zs3EKVgxJUmeGgwYSKVDNQAPrDinzVmPKnSpEXmAD22YFABmTfADGwLju+FAAFtwYUAA8MAB8UAAU3Azc+CBkANYMWRAg7j6wAJRpULjR5CgA+lnlYXkFRToMMDVZYiJS5LZm2BDATNgN9VDcUABkE2MoHVAAhIjI-gAmED4EECvSXVIEwBw+3AHQAFLuBDEAysDcwQEwZABK-sGUEAkUvWMBJ2DASWADBe+DeHzIADcGDc7rgHqUoKx3O4ADYQdI7PQBUJYKBPeAMc6XLB4IhkeCJZA9cw-P4A4CQ4pfGk0-qDYbJWQQQpQCFIJZQTA4AjEJlTb4s8xJeaRDCAlBwMRkNDUfBoJkWKzABViAB0qtiyAhurRRGA4TFEwlkuSMqi8sVyp4vHVli1Ov1fCg8SNJogZot0hpXV22PwuPx8kJF3wMX8WXw7gA7vgUEqFJTmeZjnTASQIUzqTaw7iMExWFylNrFUGbWyhmEkgBBNQaXUVFvqEBJAuW62S40QCEcbtMJCJfFtMsVgwoAAMYj1OYg-yS065ZCYxWKtbMIaxOO8k6URbMQtJxGB8BI3xUrc0V-kN5EQA\"&gt;Playground&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I want to create a simple type validator for some data I get coming in.&lt;/p&gt;\n\n&lt;p&gt;This is a sub-example but it already doesn&amp;#39;t work. What am I doing wrong?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j27k9e", "is_robot_indexable": true, "report_reasons": null, "author": "7Geordi", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j27k9e/what_am_i_missing_here/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/j27k9e/what_am_i_missing_here/", "subreddit_subscribers": 49509, "created_utc": 1601411508.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I created a FULLY TYPED Twitter API Client for Node.js \ud83d\udd27  \nThis client is taking full advantage of modern TypeScript capabilites!\n\n\u2705 **Fully typed!** Both for query parameters and responses.  \n\u2705 Includes 90% of the **official Twitter API** endpoints.  \n\u2705 **Promise-based!** No ugly callbacks.  \n\u2705 Inbuilt in-memory **cache** for rate-limit friendly usage.\n\nCheck it out \ud83d\udc47\n\n[https://github.com/Silind/twitter-api-client](https://github.com/Silind/twitter-api-client)", "author_fullname": "t2_29d83nzh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I created a FULLY TYPED Twitter API Client for Node.js", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j1bidy", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 98, "total_awards_received": 1, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 98, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1601326745.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I created a FULLY TYPED Twitter API Client for Node.js \ud83d\udd27&lt;br/&gt;\nThis client is taking full advantage of modern TypeScript capabilites!&lt;/p&gt;\n\n&lt;p&gt;\u2705 &lt;strong&gt;Fully typed!&lt;/strong&gt; Both for query parameters and responses.&lt;br/&gt;\n\u2705 Includes 90% of the &lt;strong&gt;official Twitter API&lt;/strong&gt; endpoints.&lt;br/&gt;\n\u2705 &lt;strong&gt;Promise-based!&lt;/strong&gt; No ugly callbacks.&lt;br/&gt;\n\u2705 Inbuilt in-memory &lt;strong&gt;cache&lt;/strong&gt; for rate-limit friendly usage.&lt;/p&gt;\n\n&lt;p&gt;Check it out \ud83d\udc47&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Silind/twitter-api-client\"&gt;https://github.com/Silind/twitter-api-client&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/StjAc0nlQ1Cav-4IgBjzsPS9ucIENV9XRnQYQloKaRk.jpg?auto=webp&amp;s=ac5f2bd50cad445a2dbb4cef6bffefbe15e7143e", "width": 1280, "height": 640}, "resolutions": [{"url": "https://external-preview.redd.it/StjAc0nlQ1Cav-4IgBjzsPS9ucIENV9XRnQYQloKaRk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9f87345259dd02ed5cb86ded473bb7ff1c1d588c", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/StjAc0nlQ1Cav-4IgBjzsPS9ucIENV9XRnQYQloKaRk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=8ec2b67bf30bd350396c2b41bd55b239bd095f9f", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/StjAc0nlQ1Cav-4IgBjzsPS9ucIENV9XRnQYQloKaRk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a0fe1ef738ddc8cf566028c4f6d14b41a7be432d", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/StjAc0nlQ1Cav-4IgBjzsPS9ucIENV9XRnQYQloKaRk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=1cee9b657db60cabf1ea0e19327a8df661a741a8", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/StjAc0nlQ1Cav-4IgBjzsPS9ucIENV9XRnQYQloKaRk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=57f37b62a07a4dfc6512e0f599806a92adb3b0fe", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/StjAc0nlQ1Cav-4IgBjzsPS9ucIENV9XRnQYQloKaRk.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=bf2c7ba47986ec1ac751663f9a54d5d6e085bb32", "width": 1080, "height": 540}], "variants": {}, "id": "nAmj-t1kSQ00wHaefF74quEqScOMc77bAXNH0tiqf5U"}], "enabled": false}, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "award_74fe5152-7906-4991-9016-bc2d8e261200", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=16&amp;height=16&amp;auto=webp&amp;s=094da86916604f4fc9f7f63c827e31c976f00928", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=32&amp;height=32&amp;auto=webp&amp;s=52886a42b9871ec69a4465609472a864dbab27b1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=48&amp;height=48&amp;auto=webp&amp;s=63a8f5eff627778a221c58daffbfbbb87b7fe350", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=64&amp;height=64&amp;auto=webp&amp;s=da0d9de08517646db45b766dbb0e7b94d2e97312", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=128&amp;height=128&amp;auto=webp&amp;s=58d3501a4314be9d47349a1f7925e18f30a832e5", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "I don't know what to do with my hands!", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Excited", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=16&amp;height=16&amp;auto=webp&amp;s=094da86916604f4fc9f7f63c827e31c976f00928", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=32&amp;height=32&amp;auto=webp&amp;s=52886a42b9871ec69a4465609472a864dbab27b1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=48&amp;height=48&amp;auto=webp&amp;s=63a8f5eff627778a221c58daffbfbbb87b7fe350", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=64&amp;height=64&amp;auto=webp&amp;s=da0d9de08517646db45b766dbb0e7b94d2e97312", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=128&amp;height=128&amp;auto=webp&amp;s=58d3501a4314be9d47349a1f7925e18f30a832e5", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j1bidy", "is_robot_indexable": true, "report_reasons": null, "author": "Simon_LH", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j1bidy/i_created_a_fully_typed_twitter_api_client_for/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/j1bidy/i_created_a_fully_typed_twitter_api_client_for/", "subreddit_subscribers": 49509, "created_utc": 1601297945.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "It's by far my most common use of !. In strict mode all Env variables have an implicit type of `string | undefined`.\n\nJust curious if you guys also use ! with them. Or if you do something else such as asserting `process.env` as `any`", "author_fullname": "t2_3ob6osi0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is it standard to use the not null operator everywhere Env variables are used?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j1iuc4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.8, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1601349836.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s by far my most common use of !. In strict mode all Env variables have an implicit type of &lt;code&gt;string | undefined&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Just curious if you guys also use ! with them. Or if you do something else such as asserting &lt;code&gt;process.env&lt;/code&gt; as &lt;code&gt;any&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j1iuc4", "is_robot_indexable": true, "report_reasons": null, "author": "embar5", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j1iuc4/is_it_standard_to_use_the_not_null_operator/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/j1iuc4/is_it_standard_to_use_the_not_null_operator/", "subreddit_subscribers": 49509, "created_utc": 1601321036.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi, I've run into Typescript failing to infer something and I'm trying to understand why. This simple example works:\n\n```\ntype Group&lt;A, B&gt; = {\n    createA: () =&gt; A,\n    aToB: (a: A) =&gt; B,\n};\n\nfunction doSomething&lt;A, B&gt;(group: Group&lt;A, B&gt;) {\n    const a = group.createA();\n    const b = group.aToB(a);\n\n    return b;\n}\n\nconst example = doSomething({\n    createA: () =&gt; 123,\n    aToB: (value) =&gt; value.toString(),\n});\n```\n\nSo `example` is inferred as `Group&lt;number, string&gt;`, aToB's value parameter is number, `aToB` returns a string. All makes sense.\n\nBut if I add another function to `Group` that takes `B` as a parameter:\n\n```\ntype Group&lt;A, B&gt; = {\n    createA: () =&gt; A,\n    aToB: (a: A) =&gt; B,\n    logB: (b: B) =&gt; void\n};\n\nfunction doSomething&lt;A, B&gt;(group: Group&lt;A, B&gt;) {\n    const a = group.createA();\n    const b = group.aToB(a);\n\n    group.logB(b);\n\n    return b;\n}\n\nconst example = doSomething({\n    createA: () =&gt; 123,\n    aToB: (value) =&gt; value.toString(),\n    logB: (value) =&gt; console.log(value)\n});\n```\n\n`A` remains a number, but `B` becomes `unknown`.\n\nI'm trying to figure out why this is. I assume now that `B` is used as a parameter, that stops Typescript from being able to infer `B` as being the result of `createA`, and since there's no type on `logB: (value)`, it gives up and calls it unknown.\n\nI can get around this by `logB: (value: string) =&gt; console.log(value)`, but is there a way to tell Typescript to always infer `B` from the return type of `createA`, even if it's used as a parameter elsewhere?", "author_fullname": "t2_4if6i40c", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Trying to wrap my head around type inference failing", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j1bcj4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1601326087.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I&amp;#39;ve run into Typescript failing to infer something and I&amp;#39;m trying to understand why. This simple example works:&lt;/p&gt;\n\n&lt;p&gt;```\ntype Group&amp;lt;A, B&amp;gt; = {\n    createA: () =&amp;gt; A,\n    aToB: (a: A) =&amp;gt; B,\n};&lt;/p&gt;\n\n&lt;p&gt;function doSomething&amp;lt;A, B&amp;gt;(group: Group&amp;lt;A, B&amp;gt;) {\n    const a = group.createA();\n    const b = group.aToB(a);&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;return b;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;const example = doSomething({\n    createA: () =&amp;gt; 123,\n    aToB: (value) =&amp;gt; value.toString(),\n});\n```&lt;/p&gt;\n\n&lt;p&gt;So &lt;code&gt;example&lt;/code&gt; is inferred as &lt;code&gt;Group&amp;lt;number, string&amp;gt;&lt;/code&gt;, aToB&amp;#39;s value parameter is number, &lt;code&gt;aToB&lt;/code&gt; returns a string. All makes sense.&lt;/p&gt;\n\n&lt;p&gt;But if I add another function to &lt;code&gt;Group&lt;/code&gt; that takes &lt;code&gt;B&lt;/code&gt; as a parameter:&lt;/p&gt;\n\n&lt;p&gt;```\ntype Group&amp;lt;A, B&amp;gt; = {\n    createA: () =&amp;gt; A,\n    aToB: (a: A) =&amp;gt; B,\n    logB: (b: B) =&amp;gt; void\n};&lt;/p&gt;\n\n&lt;p&gt;function doSomething&amp;lt;A, B&amp;gt;(group: Group&amp;lt;A, B&amp;gt;) {\n    const a = group.createA();\n    const b = group.aToB(a);&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;group.logB(b);\n\nreturn b;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;const example = doSomething({\n    createA: () =&amp;gt; 123,\n    aToB: (value) =&amp;gt; value.toString(),\n    logB: (value) =&amp;gt; console.log(value)\n});\n```&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;A&lt;/code&gt; remains a number, but &lt;code&gt;B&lt;/code&gt; becomes &lt;code&gt;unknown&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m trying to figure out why this is. I assume now that &lt;code&gt;B&lt;/code&gt; is used as a parameter, that stops Typescript from being able to infer &lt;code&gt;B&lt;/code&gt; as being the result of &lt;code&gt;createA&lt;/code&gt;, and since there&amp;#39;s no type on &lt;code&gt;logB: (value)&lt;/code&gt;, it gives up and calls it unknown.&lt;/p&gt;\n\n&lt;p&gt;I can get around this by &lt;code&gt;logB: (value: string) =&amp;gt; console.log(value)&lt;/code&gt;, but is there a way to tell Typescript to always infer &lt;code&gt;B&lt;/code&gt; from the return type of &lt;code&gt;createA&lt;/code&gt;, even if it&amp;#39;s used as a parameter elsewhere?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j1bcj4", "is_robot_indexable": true, "report_reasons": null, "author": "barryhoodlum", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j1bcj4/trying_to_wrap_my_head_around_type_inference/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/j1bcj4/trying_to_wrap_my_head_around_type_inference/", "subreddit_subscribers": 49509, "created_utc": 1601297287.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi, good evening!\n\nMy name is William and I am a senior engineer based in the UK.\n\nI am looking for a couple of junior developers who would like to work with me on an open source project that aims to help photographers and other media artist with a workflow manager.\n\nIf anyone is looking for a project to work on to learn more about Vue and TypeScript, I would be very happy to mentor them.\n\u200b\nCheers!\n\n---\nEDIT\n\nThanks to everyone who expressed interested in Photion!\n\nThis is the main repo we should be working on:\nhttps://github.com/photion/web-admin\n\nFor anyone interested into joining, here is a slack invite:\nhttps://join.slack.com/t/photion/shared_invite/zt-hnqy02xy-wB0vJqZv_lhrB~7qWv6~VA", "author_fullname": "t2_5x8039yp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Looking for collaborators for open source project.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j0vzdn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 40, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 40, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1601279171.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1601259703.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, good evening!&lt;/p&gt;\n\n&lt;p&gt;My name is William and I am a senior engineer based in the UK.&lt;/p&gt;\n\n&lt;p&gt;I am looking for a couple of junior developers who would like to work with me on an open source project that aims to help photographers and other media artist with a workflow manager.&lt;/p&gt;\n\n&lt;p&gt;If anyone is looking for a project to work on to learn more about Vue and TypeScript, I would be very happy to mentor them.\n\u200b\nCheers!&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;EDIT&lt;/p&gt;\n\n&lt;p&gt;Thanks to everyone who expressed interested in Photion!&lt;/p&gt;\n\n&lt;p&gt;This is the main repo we should be working on:\n&lt;a href=\"https://github.com/photion/web-admin\"&gt;https://github.com/photion/web-admin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;For anyone interested into joining, here is a slack invite:\n&lt;a href=\"https://join.slack.com/t/photion/shared_invite/zt-hnqy02xy-wB0vJqZv_lhrB%7E7qWv6%7EVA\"&gt;https://join.slack.com/t/photion/shared_invite/zt-hnqy02xy-wB0vJqZv_lhrB~7qWv6~VA&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/JClRRhyAvuIyjJqv82qE5Qt2WJUlLtk3ORflL_SVLkw.jpg?auto=webp&amp;s=b545767c82bf4387c918f402887143c8bae1abb8", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/JClRRhyAvuIyjJqv82qE5Qt2WJUlLtk3ORflL_SVLkw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=16ffab0b27147daa105023f812148ce83dc98abc", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/JClRRhyAvuIyjJqv82qE5Qt2WJUlLtk3ORflL_SVLkw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=3813979050ae399bf530bd6f643cbe235390689a", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/JClRRhyAvuIyjJqv82qE5Qt2WJUlLtk3ORflL_SVLkw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=4a7baa6cdc1a481d2b59fe8d0615457cb7c19006", "width": 320, "height": 320}], "variants": {}, "id": "l1xw_BtdazgiokCwmqwM24siM8rsycQRusxaXCrw7jY"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j0vzdn", "is_robot_indexable": true, "report_reasons": null, "author": "dipasqualew", "discussion_type": null, "num_comments": 37, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j0vzdn/looking_for_collaborators_for_open_source_project/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/j0vzdn/looking_for_collaborators_for_open_source_project/", "subreddit_subscribers": 49509, "created_utc": 1601230903.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Is there a way to build functions with the signature of either `isSomeInterface(x:unknown):x is SomeInterface` or `assertSomeInterface(x:unknown):asserts x is SomeInterface` in a way that doesn't use `any`, and will break if I add a property to `SomeInterface` without changing the type guard?\n\nI want a series of refinements, by the end of which the compiler knows that `x is SomeInterface` and it can therefore let me know if a change happens to `SomeInterface` and that's no-longer knowable.\n\nThoughts?", "author_fullname": "t2_kt1qj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Typesafe, future proof way to get from \"unknown\" to \"SomeInterfaceType\" without \"any\"?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j17c1h", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1601305131.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is there a way to build functions with the signature of either &lt;code&gt;isSomeInterface(x:unknown):x is SomeInterface&lt;/code&gt; or &lt;code&gt;assertSomeInterface(x:unknown):asserts x is SomeInterface&lt;/code&gt; in a way that doesn&amp;#39;t use &lt;code&gt;any&lt;/code&gt;, and will break if I add a property to &lt;code&gt;SomeInterface&lt;/code&gt; without changing the type guard?&lt;/p&gt;\n\n&lt;p&gt;I want a series of refinements, by the end of which the compiler knows that &lt;code&gt;x is SomeInterface&lt;/code&gt; and it can therefore let me know if a change happens to &lt;code&gt;SomeInterface&lt;/code&gt; and that&amp;#39;s no-longer knowable.&lt;/p&gt;\n\n&lt;p&gt;Thoughts?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j17c1h", "is_robot_indexable": true, "report_reasons": null, "author": "TheRealSophistifunk", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j17c1h/typesafe_future_proof_way_to_get_from_unknown_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/j17c1h/typesafe_future_proof_way_to_get_from_unknown_to/", "subreddit_subscribers": 49509, "created_utc": 1601276331.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "In this example, is it possible to have \\`printName\\` only accept an instance of a Cat? Currently it also accepts objects matching the interface defined by Cat, which may lead to bugs down the road\n\n    class Cat {\n        constructor(public name: string) {\n            if (name.length &lt;= 1) {\n                throw new Error('Name is too short!');\n            }\n        }\n    }\n    \n    function printName(cat: Cat) {\n        console.log(cat.name);\n    }\n    \n    // printName(new Cat('')); // Good, would like to enforce this usage\n    printName({name: ''}); // No warning from TypeScript :(\n\nThis workaround enforces that usage\n\n    function printName(cat: Cat) {\n        if (cat instanceof Cat) {\n          console.log(cat.name);\n        }\n        throw new Error('Invalid cat');\n    }\n\nHowever, can this be checked at compile-time through a type instead?", "author_fullname": "t2_5xa4fzsi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Type for an instance of a class specifically?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j1405d", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1601289430.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In this example, is it possible to have `printName` only accept an instance of a Cat? Currently it also accepts objects matching the interface defined by Cat, which may lead to bugs down the road&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Cat {\n    constructor(public name: string) {\n        if (name.length &amp;lt;= 1) {\n            throw new Error(&amp;#39;Name is too short!&amp;#39;);\n        }\n    }\n}\n\nfunction printName(cat: Cat) {\n    console.log(cat.name);\n}\n\n// printName(new Cat(&amp;#39;&amp;#39;)); // Good, would like to enforce this usage\nprintName({name: &amp;#39;&amp;#39;}); // No warning from TypeScript :(\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This workaround enforces that usage&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function printName(cat: Cat) {\n    if (cat instanceof Cat) {\n      console.log(cat.name);\n    }\n    throw new Error(&amp;#39;Invalid cat&amp;#39;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, can this be checked at compile-time through a type instead?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j1405d", "is_robot_indexable": true, "report_reasons": null, "author": "kyles77", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j1405d/type_for_an_instance_of_a_class_specifically/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/j1405d/type_for_an_instance_of_a_class_specifically/", "subreddit_subscribers": 49509, "created_utc": 1601260630.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_7ogw5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "a7ul/esbuild-node-tsc Build your Typescript Node.js projects using blazing fast esbuild.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_j0myuc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.8, "author_flair_background_color": null, "subreddit_type": "public", "ups": 27, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 27, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/tuc7jD92U2GRiaEGZ94vMrbR8YzCS-iXD4lyoud72q4.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1601220394.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/a7ul/esbuild-node-tsc", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/buJG8h_7rl-KSNzTqynBbICVQBXoAP6ltEBwdMdd6Nw.jpg?auto=webp&amp;s=1a42cecaadd21223e890b64a1e7de8ae5bbcf0a6", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/buJG8h_7rl-KSNzTqynBbICVQBXoAP6ltEBwdMdd6Nw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=dca4a09c57256a292bdea9afb8c3dd694cb4d53f", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/buJG8h_7rl-KSNzTqynBbICVQBXoAP6ltEBwdMdd6Nw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=52fb92ef3a9b36793f7486e79b8103279defc075", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/buJG8h_7rl-KSNzTqynBbICVQBXoAP6ltEBwdMdd6Nw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ab6d81061d7863f05bc50c3d5cb2a414e8d7eddc", "width": 320, "height": 320}], "variants": {}, "id": "27uInluSRxKW9xgTyr7wl03JBTQKdKRMneYMbRRMMzQ"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j0myuc", "is_robot_indexable": true, "report_reasons": null, "author": "pmz", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j0myuc/a7ulesbuildnodetsc_build_your_typescript_nodejs/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/a7ul/esbuild-node-tsc", "subreddit_subscribers": 49509, "created_utc": 1601191594.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_j0myuc", "before": null}}