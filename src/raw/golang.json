{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_57uz3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Announcing the 2020 Go Developer Survey", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jeuosg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 230, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 230, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603245041.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.golang.org", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://blog.golang.org/survey2020", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 80, "id": "award_8352bdff-3e03-4189-8a08-82501dd8f835", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=16&amp;height=16&amp;auto=webp&amp;s=85b1aa61933f163dd2b77b1e78f4d82d9c947ec1", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=32&amp;height=32&amp;auto=webp&amp;s=67935636337b07ca5b98d945f4bcdae26e5f567e", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=48&amp;height=48&amp;auto=webp&amp;s=547d5fb33f5a4a5d6fc154cbd658638cc2b1c3a0", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=64&amp;height=64&amp;auto=webp&amp;s=e17bc331183e7ba194314a34e43b35460a835fff", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=128&amp;height=128&amp;auto=webp&amp;s=1b4e617f18af8d4e2c47c2f154d4422be43c809f", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Everything is better with a good hug", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Hugz", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=16&amp;height=16&amp;auto=webp&amp;s=85b1aa61933f163dd2b77b1e78f4d82d9c947ec1", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=32&amp;height=32&amp;auto=webp&amp;s=67935636337b07ca5b98d945f4bcdae26e5f567e", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=48&amp;height=48&amp;auto=webp&amp;s=547d5fb33f5a4a5d6fc154cbd658638cc2b1c3a0", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=64&amp;height=64&amp;auto=webp&amp;s=e17bc331183e7ba194314a34e43b35460a835fff", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=128&amp;height=128&amp;auto=webp&amp;s=1b4e617f18af8d4e2c47c2f154d4422be43c809f", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jeuosg", "is_robot_indexable": true, "report_reasons": null, "author": "spf13", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jeuosg/announcing_the_2020_go_developer_survey/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://blog.golang.org/survey2020", "subreddit_subscribers": 130562, "created_utc": 1603216241.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "[https://github.com/sugarme/gotch](https://github.com/sugarme/gotch)\n\nWe are happy to share a new toolkit for developing deep learning in Go - [gotch](https://github.com/sugarme/gotch). `gotch` is a Pytorch C++ API Go binding featuring with:\n\n* Comprehensive Pytorch tensor APIs (\\~ 1404)\n* Fully featured Pytorch dynamic graph computation\n* JIT interface to run model trained/saved using PyTorch Python API\n* Load pretrained Pytorch models and run inference\n* Pure Go APIs to build and train neural network models with both CPU and GPU support\n* Most recent image models\n* NLP Language models - [Transformer](https://github.com/sugarme/transformer) in separate package built with GoTch and [pure Go Tokenizer](https://github.com/sugarme/tokenizer).", "author_fullname": "t2_8vuqjc7q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Oh my `gotch` - Most comprehensive Pytorch C++ API Go binding for deep learning in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_judpna", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 78, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 78, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1605404912.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1605433466.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/sugarme/gotch\"&gt;https://github.com/sugarme/gotch&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;We are happy to share a new toolkit for developing deep learning in Go - &lt;a href=\"https://github.com/sugarme/gotch\"&gt;gotch&lt;/a&gt;. &lt;code&gt;gotch&lt;/code&gt; is a Pytorch C++ API Go binding featuring with:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Comprehensive Pytorch tensor APIs (~ 1404)&lt;/li&gt;\n&lt;li&gt;Fully featured Pytorch dynamic graph computation&lt;/li&gt;\n&lt;li&gt;JIT interface to run model trained/saved using PyTorch Python API&lt;/li&gt;\n&lt;li&gt;Load pretrained Pytorch models and run inference&lt;/li&gt;\n&lt;li&gt;Pure Go APIs to build and train neural network models with both CPU and GPU support&lt;/li&gt;\n&lt;li&gt;Most recent image models&lt;/li&gt;\n&lt;li&gt;NLP Language models - &lt;a href=\"https://github.com/sugarme/transformer\"&gt;Transformer&lt;/a&gt; in separate package built with GoTch and &lt;a href=\"https://github.com/sugarme/tokenizer\"&gt;pure Go Tokenizer&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 300, "id": "award_28e8196b-d4e9-45bc-b612-cd4c7d3ed4b3", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png?width=16&amp;height=16&amp;auto=webp&amp;s=c1400eb6ea235d0c96c3aa6e271c71d7f339cbd4", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png?width=32&amp;height=32&amp;auto=webp&amp;s=77ad345b2f9b062140e028764394594326771a17", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png?width=48&amp;height=48&amp;auto=webp&amp;s=5b5211166e4b260311ad9f3ea31d3b815110769c", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png?width=64&amp;height=64&amp;auto=webp&amp;s=bf3a2c642ad50547087d770c65c29777970d3af3", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png?width=128&amp;height=128&amp;auto=webp&amp;s=eae06d6a70c62c78dc66cb14f2a84651cb822cc4", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "When an upvote just isn't enough, smash the Rocket Like.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Rocket Like", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png?width=16&amp;height=16&amp;auto=webp&amp;s=c1400eb6ea235d0c96c3aa6e271c71d7f339cbd4", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png?width=32&amp;height=32&amp;auto=webp&amp;s=77ad345b2f9b062140e028764394594326771a17", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png?width=48&amp;height=48&amp;auto=webp&amp;s=5b5211166e4b260311ad9f3ea31d3b815110769c", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png?width=64&amp;height=64&amp;auto=webp&amp;s=bf3a2c642ad50547087d770c65c29777970d3af3", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png?width=128&amp;height=128&amp;auto=webp&amp;s=eae06d6a70c62c78dc66cb14f2a84651cb822cc4", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/94pn64yuas941_RocketLike.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "judpna", "is_robot_indexable": true, "report_reasons": null, "author": "nikon-sugar", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/judpna/oh_my_gotch_most_comprehensive_pytorch_c_api_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/judpna/oh_my_gotch_most_comprehensive_pytorch_c_api_go/", "subreddit_subscribers": 130562, "created_utc": 1605404666.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_i0jv3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Featherweight (Generic) Go @ OOPSLA 2020 by Robert Griesemer, Philip Wadler et. al.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ju82tt", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 67, "total_awards_received": 1, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/62xlcsJ0AUs?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Featherweight Go", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/62xlcsJ0AUs?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "ACM SIGPLAN", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/62xlcsJ0AUs/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCwG9512Wm7jSS6Iqshz4Dpg"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/62xlcsJ0AUs?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/ju82tt", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 67, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 1}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1605412399.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=62xlcsJ0AUs", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "gid_1", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_width": 512, "static_icon_width": 512, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Shows the Silver Award... and that's it.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 512, "name": "Silver", "resized_static_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_format": null, "icon_height": 512, "penny_price": null, "award_type": "global", "static_icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ju82tt", "is_robot_indexable": true, "report_reasons": null, "author": "JavaSuck", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/ju82tt/featherweight_generic_go_oopsla_2020_by_robert/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=62xlcsJ0AUs", "subreddit_subscribers": 130562, "created_utc": 1605383599.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Featherweight Go", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/62xlcsJ0AUs?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "ACM SIGPLAN", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/62xlcsJ0AUs/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCwG9512Wm7jSS6Iqshz4Dpg"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "With `GOPATH` on its way out, what is the current best practice when working on multiple modules that form a dependency tree?\n\nFor simplicity, let's assume two modules:\n\nexample.com/library/go.mod:\n\n    module example.com/library\n    \n    go 1.15\n\nexample.com/project/go.mod:\n\n    module example.com/project\n    \n    go 1.15\n    \n    require (\n        example.com/library v0.0.1\n    )\n\nWhen working on these two modules concurrently, is there a way to have changes in library show up in project **without**\n\n* adding and removing `replace` directives to `project/go.mod` all the time\n* having to commit and update the library project on single-line changes\n* crazy symlink hackery with vendoring\n* falling back to `GOPATH` mode\n* putting everything in one monorepo-like monster module\n\n?\n\nI'm pretty sure I read the relevant articles and blogs, and maybe I'm missing something very obvious. But I just cannot find a way to make this dev process work properly.\n\nAny hints?", "author_fullname": "t2_7qirwhsb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What is the current (1.15) best practice to work on interdependent modules?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_juizr6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1605459233.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;With &lt;code&gt;GOPATH&lt;/code&gt; on its way out, what is the current best practice when working on multiple modules that form a dependency tree?&lt;/p&gt;\n\n&lt;p&gt;For simplicity, let&amp;#39;s assume two modules:&lt;/p&gt;\n\n&lt;p&gt;example.com/library/go.mod:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module example.com/library\n\ngo 1.15\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;example.com/project/go.mod:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module example.com/project\n\ngo 1.15\n\nrequire (\n    example.com/library v0.0.1\n)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When working on these two modules concurrently, is there a way to have changes in library show up in project &lt;strong&gt;without&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;adding and removing &lt;code&gt;replace&lt;/code&gt; directives to &lt;code&gt;project/go.mod&lt;/code&gt; all the time&lt;/li&gt;\n&lt;li&gt;having to commit and update the library project on single-line changes&lt;/li&gt;\n&lt;li&gt;crazy symlink hackery with vendoring&lt;/li&gt;\n&lt;li&gt;falling back to &lt;code&gt;GOPATH&lt;/code&gt; mode&lt;/li&gt;\n&lt;li&gt;putting everything in one monorepo-like monster module&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;?&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m pretty sure I read the relevant articles and blogs, and maybe I&amp;#39;m missing something very obvious. But I just cannot find a way to make this dev process work properly.&lt;/p&gt;\n\n&lt;p&gt;Any hints?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "juizr6", "is_robot_indexable": true, "report_reasons": null, "author": "COrthbandt", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/juizr6/what_is_the_current_115_best_practice_to_work_on/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/juizr6/what_is_the_current_115_best_practice_to_work_on/", "subreddit_subscribers": 130562, "created_utc": 1605430433.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello fellow go developers,\n\nI'm currently creating a rest application in golang, and am using GORM for my orm. So far i successfully have everything implemented however i'm now wanting to add some stuff in order to make further queries easier.\n\nThis will be adding \"grandchildren\" foreign keys. I can't see anything in the documentation about this but effectivly what i'm wanting is the following: \n\n    type Map struct{\n    \tId int `gorm:\"primaryKey\"`\n    \tBuildings []Building `gorm:\"references:Id\"`\n    }\n    \n    type Building struct{\n    \tId int\t`gorm:\"primaryKey\"`\n    \tMapId int\n    \tFloors []Floor `gorm:\"references:Id\"`\n    }\n    \n    type Floor struct{\n    \tId              int `gorm:\"primaryKey\"`\n    \tBuildingId      int\n            MapId           int\n    }\n\nFrom reading documentation I can't seem to find a sane way of doing this, if anyone can link to some documentation or an example that would be great, please note: I don't want to hold an instance of the map within the floor just the ID.\n\n&amp;#x200B;\n\nThanks for your help.\n\nCoffee-to-code", "author_fullname": "t2_6m1l7tfe", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GORM - grandchild foreign key", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jukcqg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1605467599.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello fellow go developers,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m currently creating a rest application in golang, and am using GORM for my orm. So far i successfully have everything implemented however i&amp;#39;m now wanting to add some stuff in order to make further queries easier.&lt;/p&gt;\n\n&lt;p&gt;This will be adding &amp;quot;grandchildren&amp;quot; foreign keys. I can&amp;#39;t see anything in the documentation about this but effectivly what i&amp;#39;m wanting is the following: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Map struct{\n    Id int `gorm:&amp;quot;primaryKey&amp;quot;`\n    Buildings []Building `gorm:&amp;quot;references:Id&amp;quot;`\n}\n\ntype Building struct{\n    Id int  `gorm:&amp;quot;primaryKey&amp;quot;`\n    MapId int\n    Floors []Floor `gorm:&amp;quot;references:Id&amp;quot;`\n}\n\ntype Floor struct{\n    Id              int `gorm:&amp;quot;primaryKey&amp;quot;`\n    BuildingId      int\n        MapId           int\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;From reading documentation I can&amp;#39;t seem to find a sane way of doing this, if anyone can link to some documentation or an example that would be great, please note: I don&amp;#39;t want to hold an instance of the map within the floor just the ID.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Thanks for your help.&lt;/p&gt;\n\n&lt;p&gt;Coffee-to-code&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jukcqg", "is_robot_indexable": true, "report_reasons": null, "author": "coffee-to-code-", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jukcqg/gorm_grandchild_foreign_key/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jukcqg/gorm_grandchild_foreign_key/", "subreddit_subscribers": 130562, "created_utc": 1605438799.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_2gj71dvd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "mtojek/gdriver : Download large files from Google Drive (API v3)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ju1brr", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 62, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 62, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1605386259.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/mtojek/gdriver", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ju1brr", "is_robot_indexable": true, "report_reasons": null, "author": "kardb", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/ju1brr/mtojekgdriver_download_large_files_from_google/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/mtojek/gdriver", "subreddit_subscribers": 130562, "created_utc": 1605357459.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_hmhfh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "ANN: Apache H2 Database pure-go SQL Driver", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jukaeq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1605467216.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/jmrobles/h2go", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jukaeq", "is_robot_indexable": true, "report_reasons": null, "author": "jmrobles", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jukaeq/ann_apache_h2_database_purego_sql_driver/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/jmrobles/h2go", "subreddit_subscribers": 130562, "created_utc": 1605438416.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_15r4p1", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Article on how bad practices can be good with example from Go's standard library", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ju4u87", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.74, "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1605400981.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "pmihaylov.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://pmihaylov.com/good-and-bad-practices/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ju4u87", "is_robot_indexable": true, "report_reasons": null, "author": "pmihaylov", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/ju4u87/article_on_how_bad_practices_can_be_good_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://pmihaylov.com/good-and-bad-practices/", "subreddit_subscribers": 130562, "created_utc": 1605372181.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_49u7dffb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "v1.4 of sessionup - HTTP sessions now with dynamic metadata support", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ju8f78", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1605413560.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/swithek/sessionup", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ju8f78", "is_robot_indexable": true, "report_reasons": null, "author": "swithek", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/ju8f78/v14_of_sessionup_http_sessions_now_with_dynamic/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/swithek/sessionup", "subreddit_subscribers": 130562, "created_utc": 1605384760.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello!\n\nI'm teaching myself Go and I don't know anyone else who knows Go. So far I like the language. The concurrency is great.\n\nI've written a simple program called `mx-counter` that takes in a list of email addresses and outputs the count of each mail server.\n\nhttps://github.com/tom-on-the-internet/mx-counter\n\nExample:\n\nGiven\n\n```\ntom@tomontheinternet.com\njane@yahoo.ca\njoe@gmail.com\nfred@youtube.com\ningrid@slack.com\nrory@microsoft.com\n```\n\nOutputs\n\n```\ngoogle.com 4\nyahoodns.net 1\noutlook.com 1\n```\n\nIt would mean the world to me if you could **point out some things I'm doing wrong, or places I could improve**. If I get enough feedback, I'll turn it into a blog post and/or video.\n\nI also have a few questions. It would be incredible is you could answer any or all of them.\n\n1. I wrote a function to get the unique values from a slice. Is this really something I should write? Should I be importing it from another package? In the JavaScript world, I would probably import a package for this. Not because I can't write this myself, but because it's not core to my project.\n\n2. How should I test this? I've read that I should only test my public functions. But that would mean testing a single function that makes network requests. And if a domain changed their MX records, my tests would fail.\n\n3. Should any one my functions be public? They aren't consumed by another package.\n\n4. Should I split this into multiple files?\n\n5. Am I approaching any of this in the way a seasoned Go developer would?\n\nThanks so much!\n\nTom", "author_fullname": "t2_8d0umj10", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What's \"wrong\" with my Go code?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_juexn6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.33, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1605438538.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m teaching myself Go and I don&amp;#39;t know anyone else who knows Go. So far I like the language. The concurrency is great.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve written a simple program called &lt;code&gt;mx-counter&lt;/code&gt; that takes in a list of email addresses and outputs the count of each mail server.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/tom-on-the-internet/mx-counter\"&gt;https://github.com/tom-on-the-internet/mx-counter&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Example:&lt;/p&gt;\n\n&lt;p&gt;Given&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\ntom@tomontheinternet.com\njane@yahoo.ca\njoe@gmail.com\nfred@youtube.com\ningrid@slack.com\nrory@microsoft.com\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Outputs&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\ngoogle.com 4\nyahoodns.net 1\noutlook.com 1\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;It would mean the world to me if you could &lt;strong&gt;point out some things I&amp;#39;m doing wrong, or places I could improve&lt;/strong&gt;. If I get enough feedback, I&amp;#39;ll turn it into a blog post and/or video.&lt;/p&gt;\n\n&lt;p&gt;I also have a few questions. It would be incredible is you could answer any or all of them.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;I wrote a function to get the unique values from a slice. Is this really something I should write? Should I be importing it from another package? In the JavaScript world, I would probably import a package for this. Not because I can&amp;#39;t write this myself, but because it&amp;#39;s not core to my project.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;How should I test this? I&amp;#39;ve read that I should only test my public functions. But that would mean testing a single function that makes network requests. And if a domain changed their MX records, my tests would fail.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Should any one my functions be public? They aren&amp;#39;t consumed by another package.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Should I split this into multiple files?&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Am I approaching any of this in the way a seasoned Go developer would?&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Thanks so much!&lt;/p&gt;\n\n&lt;p&gt;Tom&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "juexn6", "is_robot_indexable": true, "report_reasons": null, "author": "tom-on-the-internet", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/juexn6/whats_wrong_with_my_go_code/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/juexn6/whats_wrong_with_my_go_code/", "subreddit_subscribers": 130562, "created_utc": 1605409738.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4u657w0f", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go's Recurring Security Problem", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jtmlve", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 119, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 119, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1605325091.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/tempus-ex/gos-recurring-security-problem-2b5339f19216", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jtmlve", "is_robot_indexable": true, "report_reasons": null, "author": "Double_Address", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jtmlve/gos_recurring_security_problem/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/tempus-ex/gos-recurring-security-problem-2b5339f19216", "subreddit_subscribers": 130562, "created_utc": 1605296291.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_jtmlve", "before": null}}