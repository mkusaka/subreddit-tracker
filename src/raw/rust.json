{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once. If you want your code reviewed or review other's code, there's a [codereview stackexchange](https://codereview.stackexchange.com/questions/tagged/rust), too. If you need to test your code, maybe [the Rust playground](https://play.rust-lang.org) is for you.\n\nHere are some other venues where help may be found:\n\n[/r/learnrust](https://www.reddit.com/r/learnrust) is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/).\n\nThe official Rust Programming Language Discord: [https://discord.gg/rust-lang](https://discord.gg/rust-lang)\n\nThe unofficial Rust community Discord: [https://bit.ly/rust-community](https://bit.ly/rust-community)\n\nAlso check out [last week's thread](https://reddit.com/r/rust/comments/h98zfz/hey_rustaceans_got_an_easy_question_ask_here/) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nAlso if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hey Rustaceans! Got an easy question? Ask here (26/2020)!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hdku4k", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": "", "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592827167.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven&amp;#39;t been written yet.&lt;/p&gt;\n\n&lt;p&gt;If you have a &lt;a href=\"http://stackoverflow.com/\"&gt;StackOverflow&lt;/a&gt; account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it &lt;a href=\"http://stackoverflow.com/questions/tagged/rust\"&gt;the &amp;quot;Rust&amp;quot; tag&lt;/a&gt; for maximum visibility). Note that this site is very interested in question quality. I&amp;#39;ve been asked to read a RFC I authored once. If you want your code reviewed or review other&amp;#39;s code, there&amp;#39;s a &lt;a href=\"https://codereview.stackexchange.com/questions/tagged/rust\"&gt;codereview stackexchange&lt;/a&gt;, too. If you need to test your code, maybe &lt;a href=\"https://play.rust-lang.org\"&gt;the Rust playground&lt;/a&gt; is for you.&lt;/p&gt;\n\n&lt;p&gt;Here are some other venues where help may be found:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/learnrust\"&gt;/r/learnrust&lt;/a&gt; is a subreddit to share your questions and epiphanies learning Rust programming.&lt;/p&gt;\n\n&lt;p&gt;The official Rust user forums: &lt;a href=\"https://users.rust-lang.org/\"&gt;https://users.rust-lang.org/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The official Rust Programming Language Discord: &lt;a href=\"https://discord.gg/rust-lang\"&gt;https://discord.gg/rust-lang&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The unofficial Rust community Discord: &lt;a href=\"https://bit.ly/rust-community\"&gt;https://bit.ly/rust-community&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also check out &lt;a href=\"https://reddit.com/r/rust/comments/h98zfz/hey_rustaceans_got_an_easy_question_ask_here/\"&gt;last week&amp;#39;s thread&lt;/a&gt; with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.&lt;/p&gt;\n\n&lt;p&gt;Also if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hdku4k", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 75, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/hdku4k/hey_rustaceans_got_an_easy_question_ask_here/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/hdku4k/hey_rustaceans_got_an_easy_question_ask_here/", "subreddit_subscribers": 104458, "created_utc": 1592798367.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_eki22", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "This Week in Rust 344", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hepkfq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": "", "subreddit_type": "public", "ups": 123, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 123, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592983351.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "this-week-in-rust.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://this-week-in-rust.org/blog/2020/06/23/this-week-in-rust-344/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "twir", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hepkfq", "is_robot_indexable": true, "report_reasons": null, "author": "seino_chan", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/hepkfq/this_week_in_rust_344/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://this-week-in-rust.org/blog/2020/06/23/this-week-in-rust-344/", "subreddit_subscribers": 104458, "created_utc": 1592954551.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_rpppxb8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GNOME Builder \u2764\ufe0f Rust Analyzer Part 1", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hfiuyz", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 100, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 100, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593104501.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "gunibert.de", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://gunibert.de/posts/builder_and_analyzer/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hfiuyz", "is_robot_indexable": true, "report_reasons": null, "author": "llort_lemmort", "discussion_type": null, "num_comments": 15, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/hfiuyz/gnome_builder_rust_analyzer_part_1/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://gunibert.de/posts/builder_and_analyzer/", "subreddit_subscribers": 104458, "created_utc": 1593075701.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hello, I've got some code that is running *significantly* faster in a VirtualBox VM running Ubuntu 18.04 than on the host machine, a 2019 iMac running macOS Mojave. I am stumped as to why - does Rust optimize so much better for Linux that even a virtual Linux environment can run the code better than a mac? Does mac have some security checks slowing down kernel operations that it somehow lets VirtualBox bypass? Is there some feature of Rust that I am misusing really badly to get this weird behavior?\n\nThe code in question is my first Rust program of any length. You give it some letters and it finds a legal bananagrams/scrabble configuration for those letters with minimal bounding box area using a (exponential time) branch and bound approach. The repo is [here](https://github.com/DireLines/bananagrams).\n\nFor example,\n\n    cargo run --release -- teststring -c -s \n\nyields the configuration\n\n    t    \n    e n g\n    s   i\n    t   r\n    s   t\n\n\nI'm trying to optimize this code as an exercise. On Linux you can use perf to profile stuff, so I made an Ubuntu VM and started to do that. I was taken aback when the program ran faster in the VM. I ran this command using [this](https://github.com/DireLines/bananagrams/commit/1caf105ee239ed5140c078a83e12bc14226eeea5) version of the code:\n\n    cargo build --release &amp;&amp; time ./target/release/bananagrams teststring -c -s\n\nOn Mac:\n\n    51.53 real 51.45 user 0.02 sys\n\nOn Ubuntu VM(!):\n\n    20.10 real 20.06 user 0.01 sys\n\nWhat gives?\n\nFor the record, the best time on Mac so far was 27s using the same code, but with rayon's par_iter() somewhere important instead of iter(). But weirdly, the VM beats this time single-threaded.", "author_fullname": "t2_9lk6g", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why is my ~500-line single-threaded Rust code running faster in an Ubuntu VM than natively on OSX?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hff9ox", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 108, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 108, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1593072997.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593084657.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I&amp;#39;ve got some code that is running &lt;em&gt;significantly&lt;/em&gt; faster in a VirtualBox VM running Ubuntu 18.04 than on the host machine, a 2019 iMac running macOS Mojave. I am stumped as to why - does Rust optimize so much better for Linux that even a virtual Linux environment can run the code better than a mac? Does mac have some security checks slowing down kernel operations that it somehow lets VirtualBox bypass? Is there some feature of Rust that I am misusing really badly to get this weird behavior?&lt;/p&gt;\n\n&lt;p&gt;The code in question is my first Rust program of any length. You give it some letters and it finds a legal bananagrams/scrabble configuration for those letters with minimal bounding box area using a (exponential time) branch and bound approach. The repo is &lt;a href=\"https://github.com/DireLines/bananagrams\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;For example,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;cargo run --release -- teststring -c -s \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;yields the configuration&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;t    \ne n g\ns   i\nt   r\ns   t\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m trying to optimize this code as an exercise. On Linux you can use perf to profile stuff, so I made an Ubuntu VM and started to do that. I was taken aback when the program ran faster in the VM. I ran this command using &lt;a href=\"https://github.com/DireLines/bananagrams/commit/1caf105ee239ed5140c078a83e12bc14226eeea5\"&gt;this&lt;/a&gt; version of the code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;cargo build --release &amp;amp;&amp;amp; time ./target/release/bananagrams teststring -c -s\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On Mac:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;51.53 real 51.45 user 0.02 sys\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;On Ubuntu VM(!):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;20.10 real 20.06 user 0.01 sys\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What gives?&lt;/p&gt;\n\n&lt;p&gt;For the record, the best time on Mac so far was 27s using the same code, but with rayon&amp;#39;s par_iter() somewhere important instead of iter(). But weirdly, the VM beats this time single-threaded.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hff9ox", "is_robot_indexable": true, "report_reasons": null, "author": "DireLines", "discussion_type": null, "num_comments": 24, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/hff9ox/why_is_my_500line_singlethreaded_rust_code/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/hff9ox/why_is_my_500line_singlethreaded_rust_code/", "subreddit_subscribers": 104458, "created_utc": 1593055857.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_68joj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "dabreegster/abstreet: A traffic simulation game exploring how small changes to roads affect cyclists, transit users, pedestrians, and drivers.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hffhxl", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 81, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 81, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593085657.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/dabreegster/abstreet", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hffhxl", "is_robot_indexable": true, "report_reasons": null, "author": "juanpabloaj", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/hffhxl/dabreegsterabstreet_a_traffic_simulation_game/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/dabreegster/abstreet", "subreddit_subscribers": 104458, "created_utc": 1593056857.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_fskxf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "toyDB: distributed SQL database in Rust, built from scratch to learn", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hf6anm", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": null, "subreddit_type": "public", "ups": 323, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 323, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593051689.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/erikgrinaker/toydb", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hf6anm", "is_robot_indexable": true, "report_reasons": null, "author": "erikgrinaker", "discussion_type": null, "num_comments": 42, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/hf6anm/toydb_distributed_sql_database_in_rust_built_from/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/erikgrinaker/toydb", "subreddit_subscribers": 104458, "created_utc": 1593022889.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_opo23", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Tour of Rust - Let's go on an adventure! - Website redesign", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hfeldt", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 52, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 52, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593081823.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "tourofrust.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "http://tourofrust.com/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hfeldt", "is_robot_indexable": true, "report_reasons": null, "author": "richardanaya", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/hfeldt/tour_of_rust_lets_go_on_an_adventure_website/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://tourofrust.com/", "subreddit_subscribers": 104458, "created_utc": 1593053023.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_13q9wd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "PR has been raised for `format_args_capture` feature", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hfjv2f", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593110128.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/rust-lang/rust/pull/73670", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hfjv2f", "is_robot_indexable": true, "report_reasons": null, "author": "DoveOfHope", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/hfjv2f/pr_has_been_raised_for_format_args_capture_feature/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/rust-lang/rust/pull/73670", "subreddit_subscribers": 104458, "created_utc": 1593081328.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I know Rust but am not at all familiar with C++, but whenever I see a snippet of code in C++ it seems easy enough to read which is really nice to see. I've been watching [this C++ programmer](https://www.twitch.tv/videos/659249134) pick it up over the past week and (though he's still learning) he took to it almost like it was nothing. ([Jason Turner](https://www.youtube.com/watch?v=Y5-ZgxfQvpc) picked up the basics pretty quickly too.) Meanwhile, watching them has given me a bit of familiarity with C++ and am curious what else there is to know. I'm wondering what the main things are I would need to know if I were sent to work with some C++ code next week, for example.\n\nHere is some of what I've seen so far:\n\n- Traits are basically like something called interfaces but differ in many respects\n\n- Declarations are in reverse order (variable type then name) and adding const = move semantics while without const it's the same as mut\n\n- C++ has lookup tables that it uses a lot (he wanted to make one but ended up using dynamic traits to put something similar together for practice and later on rewrote it as a match statement)\n\n- If you take a C++ enum and add a union, you basically get a Rust enum (unions being the part that can hold values, I think)\n\n- The auto keyword is like the i and u in isize and usize\n\n- **-&gt;** takes values out of a struct in the same way the dot operator does, I think\n\n- &amp; goes on the right instead of the left. Also apparently you can append it to the variable name but you can append it to the type instead if you prefer?\n\n- Obviously no &amp;str and String, no borrow checker, no annotated lifetimes and no Result or Option\n\n- C++ compiler messages are long and cryptic and you're supposed to scroll to the bottom to see what the actual problem is\n\n- Various syntax differences like parentheses after if statements, no implied return at the end of functions, etc.\n\n\nSo that's about what I've gotten so far. Any other quick tips?", "author_fullname": "t2_3qb5s", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What are the main takeaways for a Rust programmer to become familiar with C++?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hfhuuk", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1593074899.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593098829.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I know Rust but am not at all familiar with C++, but whenever I see a snippet of code in C++ it seems easy enough to read which is really nice to see. I&amp;#39;ve been watching &lt;a href=\"https://www.twitch.tv/videos/659249134\"&gt;this C++ programmer&lt;/a&gt; pick it up over the past week and (though he&amp;#39;s still learning) he took to it almost like it was nothing. (&lt;a href=\"https://www.youtube.com/watch?v=Y5-ZgxfQvpc\"&gt;Jason Turner&lt;/a&gt; picked up the basics pretty quickly too.) Meanwhile, watching them has given me a bit of familiarity with C++ and am curious what else there is to know. I&amp;#39;m wondering what the main things are I would need to know if I were sent to work with some C++ code next week, for example.&lt;/p&gt;\n\n&lt;p&gt;Here is some of what I&amp;#39;ve seen so far:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Traits are basically like something called interfaces but differ in many respects&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Declarations are in reverse order (variable type then name) and adding const = move semantics while without const it&amp;#39;s the same as mut&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++ has lookup tables that it uses a lot (he wanted to make one but ended up using dynamic traits to put something similar together for practice and later on rewrote it as a match statement)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If you take a C++ enum and add a union, you basically get a Rust enum (unions being the part that can hold values, I think)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;The auto keyword is like the i and u in isize and usize&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&lt;strong&gt;-&amp;gt;&lt;/strong&gt; takes values out of a struct in the same way the dot operator does, I think&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;&amp;amp; goes on the right instead of the left. Also apparently you can append it to the variable name but you can append it to the type instead if you prefer?&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Obviously no &amp;amp;str and String, no borrow checker, no annotated lifetimes and no Result or Option&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;C++ compiler messages are long and cryptic and you&amp;#39;re supposed to scroll to the bottom to see what the actual problem is&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Various syntax differences like parentheses after if statements, no implied return at the end of functions, etc.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;So that&amp;#39;s about what I&amp;#39;ve gotten so far. Any other quick tips?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hfhuuk", "is_robot_indexable": true, "report_reasons": null, "author": "Dhghomon", "discussion_type": null, "num_comments": 23, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/hfhuuk/what_are_the_main_takeaways_for_a_rust_programmer/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/hfhuuk/what_are_the_main_takeaways_for_a_rust_programmer/", "subreddit_subscribers": 104458, "created_utc": 1593070029.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I started a mock up of a DataFrame library in Rust based on [Apache Arrow](https://github.com/apache/arrow). I started it just for fun, but I believe it is getting quite capable. After the first groupby benchmark it turns out we can already be more than 2x faster than pandas! \n\nhttps://preview.redd.it/a1w9chhyg1751.png?width=1400&amp;format=png&amp;auto=webp&amp;s=32817765aaf754c1afb0fee327e9336840c56f9f\n\n[Project link](https://github.com/ritchie46/polars)", "author_fullname": "t2_zvbil", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "DataFrames in Rust", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "media_metadata": {"a1w9chhyg1751": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 46, "x": 108, "u": "https://preview.redd.it/a1w9chhyg1751.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=0841d907a3673c36e00ad0007d204cb0c3fe1071"}, {"y": 92, "x": 216, "u": "https://preview.redd.it/a1w9chhyg1751.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=ae40856996c58d461d898f0385082383ddc7a20c"}, {"y": 137, "x": 320, "u": "https://preview.redd.it/a1w9chhyg1751.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=81e39d3dc7d8fa1107ee3eb065694b797ce38f26"}, {"y": 274, "x": 640, "u": "https://preview.redd.it/a1w9chhyg1751.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=6ff3250d0d91368d8f82d1a9145f2eb6734e2914"}, {"y": 411, "x": 960, "u": "https://preview.redd.it/a1w9chhyg1751.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=4bcd3753a5125361e3a3377d15a79051ce0ac889"}, {"y": 462, "x": 1080, "u": "https://preview.redd.it/a1w9chhyg1751.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=5ca6f9315189aa0d9cfa4167eb9f8fee487804fc"}], "s": {"y": 600, "x": 1400, "u": "https://preview.redd.it/a1w9chhyg1751.png?width=1400&amp;format=png&amp;auto=webp&amp;s=32817765aaf754c1afb0fee327e9336840c56f9f"}, "id": "a1w9chhyg1751"}}, "name": "t3_hfk83v", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593112102.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I started a mock up of a DataFrame library in Rust based on &lt;a href=\"https://github.com/apache/arrow\"&gt;Apache Arrow&lt;/a&gt;. I started it just for fun, but I believe it is getting quite capable. After the first groupby benchmark it turns out we can already be more than 2x faster than pandas! &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/a1w9chhyg1751.png?width=1400&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=32817765aaf754c1afb0fee327e9336840c56f9f\"&gt;https://preview.redd.it/a1w9chhyg1751.png?width=1400&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=32817765aaf754c1afb0fee327e9336840c56f9f&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ritchie46/polars\"&gt;Project link&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hfk83v", "is_robot_indexable": true, "report_reasons": null, "author": "ritchie46", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/hfk83v/dataframes_in_rust/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/hfk83v/dataframes_in_rust/", "subreddit_subscribers": 104458, "created_utc": 1593083302.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "x86 support was [added](https://github.com/RustCrypto/hashes/pull/167) in `sha-1 v0.9.1` and `sha2 v0.9.1`. It uses runtime detection (unlike [AES](https://github.com/RustCrypto/block-ciphers/issues/25#issuecomment-635789096)), so owners of CPUs with Intel SHA extension will benefit from it automatically. For example, on Ryzen 2700X both hash functions (SHA-1 and SHA-256) are able to process more than 2 GB/s.\n\nLimited ARM support (Linux-only) was added earlier, but since the relevant intrinsics currently are not stable, we have to rely on assembly backend, which is disabled by default and feature-gated behind the `asm` feature.", "author_fullname": "t2_11wnac", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[ANN] RustCrypto's sha-1 and sha2 now support hardware acceleration on both x86 and ARM", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hf2vcx", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": "", "subreddit_type": "public", "ups": 127, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 127, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1593012272.0, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593040853.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;x86 support was &lt;a href=\"https://github.com/RustCrypto/hashes/pull/167\"&gt;added&lt;/a&gt; in &lt;code&gt;sha-1 v0.9.1&lt;/code&gt; and &lt;code&gt;sha2 v0.9.1&lt;/code&gt;. It uses runtime detection (unlike &lt;a href=\"https://github.com/RustCrypto/block-ciphers/issues/25#issuecomment-635789096\"&gt;AES&lt;/a&gt;), so owners of CPUs with Intel SHA extension will benefit from it automatically. For example, on Ryzen 2700X both hash functions (SHA-1 and SHA-256) are able to process more than 2 GB/s.&lt;/p&gt;\n\n&lt;p&gt;Limited ARM support (Linux-only) was added earlier, but since the relevant intrinsics currently are not stable, we have to rely on assembly backend, which is disabled by default and feature-gated behind the &lt;code&gt;asm&lt;/code&gt; feature.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "rustcrypto", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hf2vcx", "is_robot_indexable": true, "report_reasons": null, "author": "newpavlov", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/hf2vcx/ann_rustcryptos_sha1_and_sha2_now_support/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/hf2vcx/ann_rustcryptos_sha1_and_sha2_now_support/", "subreddit_subscribers": 104458, "created_utc": 1593012053.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hello, a beginner here.\n\nI have this application that reads from the serial port (using [serialport-rs](https://gitlab.com/susurrus/serialport-rs) crate). The data stream naturally coming in a sequence of 8 bytes. For example, if a message has a length of 150 bytes, we would be reading 18 messages of 8 bytes and 1 last message of 6 bytes if using the standard [std::io::read()](https://doc.rust-lang.org/std/io/trait.Read.html) function.\n\nMy data has this string format\n\n    { node: \"0x12\", light: 0.0, object_temp: 25.375, ambient_temp: 25.09375, humidity: 35.155273, pressure: 97349.0 }\n\nor if reading from with `String::from_utf8_lossy()`, we will have this format.\n\n    \"{\\\"node\\\":\\\"0x12\\\",\\\"light\\\":0.000000,\\\"object_temp\\\":25.375000,\\\"ambient_temp\\\":25.093750,\\\"humidity\\\":35.155273,\\\"pressure\\\":97349.000000}\\n\n\nI am using **serde\\_json** to parse the JSON string. Due to the nature of not knowing exactly how many bytes the application will be receiving for a complete JSON string, I use `read_exact()` to fill a `Vec` of 150 bytes each. Then I split the JSON at the delimiter `\"\\n\"`**,** and finally grab the first vector element to parse. There are a few problems with this approach that I don't know how to solve, hoping to gain some insights and knowledge from you guys.\n\n1. reading the data into a fix byte array will leave the next data packet uncomplete, therefore losing it in the parsing process\n2. Since this is a stream of data, there is no EOF to use functions such as `io::read_to_string()` or `io::read_to_end()` from `io::std` library\n\nThere is one possible approach, read each byte and insert it into a `Vec` until the \"\\\\n\" is detected, we will then parse the `Vec`, reset it, and so on. I've heard that resetting a `Vec` is quite slow and expensive. So this might be a bad approach.\n\nHere is the snippet of the code.\n\n&amp;#x200B;\n\nhttps://preview.redd.it/6ozkg2s8iz651.png?width=1602&amp;format=png&amp;auto=webp&amp;s=d8f85e6ae63a017ccf4d55d213b983ab36b344f8\n\nThank you.", "author_fullname": "t2_j7sks", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What is the \"Rust Way\" of reading and parsing of JSON serial port as stream data?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "media_metadata": {"6ozkg2s8iz651": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 121, "x": 108, "u": "https://preview.redd.it/6ozkg2s8iz651.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=d5dd0655820fe47e05bb30e11d502c61552ea645"}, {"y": 242, "x": 216, "u": "https://preview.redd.it/6ozkg2s8iz651.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=2566d0bb01189634bf5972933dce7a7545e3f911"}, {"y": 359, "x": 320, "u": "https://preview.redd.it/6ozkg2s8iz651.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=c734b8b805a03d2c6e429b8dd9378bbb2b80e85a"}, {"y": 718, "x": 640, "u": "https://preview.redd.it/6ozkg2s8iz651.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=60ce9aeeb4f570c969ea8526e8e93e6d5456bbef"}, {"y": 1077, "x": 960, "u": "https://preview.redd.it/6ozkg2s8iz651.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=256f24e68aa5a2d294b11432074e0f7d20475d58"}, {"y": 1212, "x": 1080, "u": "https://preview.redd.it/6ozkg2s8iz651.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=2ddc1e5c7ce48fb2d698854f530f561b21c71830"}], "s": {"y": 1798, "x": 1602, "u": "https://preview.redd.it/6ozkg2s8iz651.png?width=1602&amp;format=png&amp;auto=webp&amp;s=d8f85e6ae63a017ccf4d55d213b983ab36b344f8"}, "id": "6ozkg2s8iz651"}}, "name": "t3_hfg43l", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593088642.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, a beginner here.&lt;/p&gt;\n\n&lt;p&gt;I have this application that reads from the serial port (using &lt;a href=\"https://gitlab.com/susurrus/serialport-rs\"&gt;serialport-rs&lt;/a&gt; crate). The data stream naturally coming in a sequence of 8 bytes. For example, if a message has a length of 150 bytes, we would be reading 18 messages of 8 bytes and 1 last message of 6 bytes if using the standard &lt;a href=\"https://doc.rust-lang.org/std/io/trait.Read.html\"&gt;std::io::read()&lt;/a&gt; function.&lt;/p&gt;\n\n&lt;p&gt;My data has this string format&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{ node: &amp;quot;0x12&amp;quot;, light: 0.0, object_temp: 25.375, ambient_temp: 25.09375, humidity: 35.155273, pressure: 97349.0 }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or if reading from with &lt;code&gt;String::from_utf8_lossy()&lt;/code&gt;, we will have this format.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;{\\&amp;quot;node\\&amp;quot;:\\&amp;quot;0x12\\&amp;quot;,\\&amp;quot;light\\&amp;quot;:0.000000,\\&amp;quot;object_temp\\&amp;quot;:25.375000,\\&amp;quot;ambient_temp\\&amp;quot;:25.093750,\\&amp;quot;humidity\\&amp;quot;:35.155273,\\&amp;quot;pressure\\&amp;quot;:97349.000000}\\n\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am using &lt;strong&gt;serde_json&lt;/strong&gt; to parse the JSON string. Due to the nature of not knowing exactly how many bytes the application will be receiving for a complete JSON string, I use &lt;code&gt;read_exact()&lt;/code&gt; to fill a &lt;code&gt;Vec&lt;/code&gt; of 150 bytes each. Then I split the JSON at the delimiter &lt;code&gt;&amp;quot;\\n&amp;quot;&lt;/code&gt;&lt;strong&gt;,&lt;/strong&gt; and finally grab the first vector element to parse. There are a few problems with this approach that I don&amp;#39;t know how to solve, hoping to gain some insights and knowledge from you guys.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;reading the data into a fix byte array will leave the next data packet uncomplete, therefore losing it in the parsing process&lt;/li&gt;\n&lt;li&gt;Since this is a stream of data, there is no EOF to use functions such as &lt;code&gt;io::read_to_string()&lt;/code&gt; or &lt;code&gt;io::read_to_end()&lt;/code&gt; from &lt;code&gt;io::std&lt;/code&gt; library&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;There is one possible approach, read each byte and insert it into a &lt;code&gt;Vec&lt;/code&gt; until the &amp;quot;\\n&amp;quot; is detected, we will then parse the &lt;code&gt;Vec&lt;/code&gt;, reset it, and so on. I&amp;#39;ve heard that resetting a &lt;code&gt;Vec&lt;/code&gt; is quite slow and expensive. So this might be a bad approach.&lt;/p&gt;\n\n&lt;p&gt;Here is the snippet of the code.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/6ozkg2s8iz651.png?width=1602&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=d8f85e6ae63a017ccf4d55d213b983ab36b344f8\"&gt;https://preview.redd.it/6ozkg2s8iz651.png?width=1602&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=d8f85e6ae63a017ccf4d55d213b983ab36b344f8&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Thank you.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hfg43l", "is_robot_indexable": true, "report_reasons": null, "author": "altran1502", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/hfg43l/what_is_the_rust_way_of_reading_and_parsing_of/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/hfg43l/what_is_the_rust_way_of_reading_and_parsing_of/", "subreddit_subscribers": 104458, "created_utc": 1593059842.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_hfg43l", "before": null}}