{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I posted a draft design today for new file system interfaces for Go.\n\nVideo: https://golang.org/s/draft-iofs-video\n\nDesign: https://golang.org/s/draft-iofs-design\n\nLet's do the Q&amp;A about the design here in Reddit. My hope is that the threading support will help keep questions and answers matched.\n\nPlease start a new top-level comment for each new question.\n\nSee also the related [Q&amp;A for the //go:embed draft design](https://golang.org/s/draft-embed-reddit).", "author_fullname": "t2_2jha", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Q&amp;A] io/fs draft design", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hv976o", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": null, "subreddit_type": "public", "ups": 190, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 190, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1595425280.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1595373625.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I posted a draft design today for new file system interfaces for Go.&lt;/p&gt;\n\n&lt;p&gt;Video: &lt;a href=\"https://golang.org/s/draft-iofs-video\"&gt;https://golang.org/s/draft-iofs-video&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Design: &lt;a href=\"https://golang.org/s/draft-iofs-design\"&gt;https://golang.org/s/draft-iofs-design&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s do the Q&amp;amp;A about the design here in Reddit. My hope is that the threading support will help keep questions and answers matched.&lt;/p&gt;\n\n&lt;p&gt;Please start a new top-level comment for each new question.&lt;/p&gt;\n\n&lt;p&gt;See also the related &lt;a href=\"https://golang.org/s/draft-embed-reddit\"&gt;Q&amp;amp;A for the //go:embed draft design&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 150, "id": "award_77ba55a2-c33c-4351-ac49-807455a80148", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png", "days_of_premium": 0, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=16&amp;height=16&amp;auto=webp&amp;s=7a2f2b927be72d2b46ebd95bab8c072c3be0fbab", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=32&amp;height=32&amp;auto=webp&amp;s=6e42b7095bcc331e53202438613aa827addf70c3", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=48&amp;height=48&amp;auto=webp&amp;s=c740f7ef642fd2042d62c2bcba98734d08dfae6c", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=64&amp;height=64&amp;auto=webp&amp;s=74e630f1072bb2423034ae48aefa241d834d7186", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=128&amp;height=128&amp;auto=webp&amp;s=0a89cd8011c8210315ee60441eefd77b973a0c82", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "description": "Prayers up for the blessed.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Bless Up", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=16&amp;height=16&amp;auto=webp&amp;s=7a2f2b927be72d2b46ebd95bab8c072c3be0fbab", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=32&amp;height=32&amp;auto=webp&amp;s=6e42b7095bcc331e53202438613aa827addf70c3", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=48&amp;height=48&amp;auto=webp&amp;s=c740f7ef642fd2042d62c2bcba98734d08dfae6c", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=64&amp;height=64&amp;auto=webp&amp;s=74e630f1072bb2423034ae48aefa241d834d7186", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=128&amp;height=128&amp;auto=webp&amp;s=0a89cd8011c8210315ee60441eefd77b973a0c82", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hv976o", "is_robot_indexable": true, "report_reasons": null, "author": "rsc", "discussion_type": null, "num_comments": 227, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hv976o/qa_iofs_draft_design/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/golang/comments/hv976o/qa_iofs_draft_design/", "subreddit_subscribers": 120647, "created_utc": 1595344825.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_5odlw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Design Draft: First Class Fuzzing", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hvpr96", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": null, "subreddit_type": "public", "ups": 100, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 100, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1595433805.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "go.googlesource.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://go.googlesource.com/proposal/+/refs/heads/master/design/40307-fuzzing.md", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hvpr96", "is_robot_indexable": true, "report_reasons": null, "author": "Ainar-G", "discussion_type": null, "num_comments": 64, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hvpr96/design_draft_first_class_fuzzing/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://go.googlesource.com/proposal/+/refs/heads/master/design/40307-fuzzing.md", "subreddit_subscribers": 120647, "created_utc": 1595405005.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_fugu8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Flattening and Filtering JSON for Cleaner Types", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_i0k7rc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1596136377.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "kgrz.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://kgrz.io/go-json-flatten-filter-cleaner-types.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i0k7rc", "is_robot_indexable": true, "report_reasons": null, "author": "kgrz", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/i0k7rc/flattening_and_filtering_json_for_cleaner_types/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://kgrz.io/go-json-flatten-filter-cleaner-types.html", "subreddit_subscribers": 120647, "created_utc": 1596107577.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello, I spent the last month learning go from courses on pluralsight, learnt how to write tests, benchmark tests and familiarized myself with the tooling, etc.  \nI'm dying to get to the level where I can understand/contribute to Kubernetes and Istio (I have some experience in consuming/using them - now I want to contribute to these projects), but before that I'm looking into ways that can help me improve my golang skills? how can I do that without a mentor or code-reviews? \"since I'm not working, last year SE student\".", "author_fullname": "t2_2mkphybl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Improving my Golang without a mentor or code-reviews", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_i0kpta", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596138824.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I spent the last month learning go from courses on pluralsight, learnt how to write tests, benchmark tests and familiarized myself with the tooling, etc.&lt;br/&gt;\nI&amp;#39;m dying to get to the level where I can understand/contribute to Kubernetes and Istio (I have some experience in consuming/using them - now I want to contribute to these projects), but before that I&amp;#39;m looking into ways that can help me improve my golang skills? how can I do that without a mentor or code-reviews? &amp;quot;since I&amp;#39;m not working, last year SE student&amp;quot;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i0kpta", "is_robot_indexable": true, "report_reasons": null, "author": "hacktron95", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/i0kpta/improving_my_golang_without_a_mentor_or/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/i0kpta/improving_my_golang_without_a_mentor_or/", "subreddit_subscribers": 120647, "created_utc": 1596110024.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I noticed a pretty big performance regression in my code when I made one structure smaller. The object is being allocated often (1 million times in the benchmark), but there are other smaller objects that are allocated up to 20 million times (objects between 24 to 64 bytes).\n\nThe object used to be 216 bytes and I decreased it to 144 bytes, which gave a performance hit of 5%. I then added tail padding and noticed that padding 144+96=240 or 144+112=256 was giving that boost of 5%. Funnily, padding 144+368=512 is even faster by 2%!\n\nWhat's going on here? Is this due to CPU cache line size, or due to Go's sizeclasses? Neither really explains why 512 bytes is faster than 256 bytes. If it were up to sizeclasses, surely according to [https://github.com/golang/go/blob/master/src/runtime/sizeclasses.go](https://github.com/golang/go/blob/master/src/runtime/sizeclasses.go) the original size of 144 should be sufficient? What should I be looking at? Is the benchmark function causing this behaviour (i.e. allocating the same objects for 10\\*120 times)?\n\nInteresting fact, it seems to correlate with another large object that is slightly larger (192 bytes). The following configurations are fast: 144+72=216 and 192+72=264, and 144+112=256 and 192+64=256. So they do not necessarily need to be the same size!\n\nExtra information:\n\n* I have an Intel i5-6300U 64-bit, and I run Arch Linux with one terminal open and Chrome, closed down most other background processes.\n* The allocation is part of a JS parser that is building the AST, so lots of small allocations and pointers. Most objects are 24 bytes up to 64 bytes big, but I have four objects of around 256 bytes.\n* The benchmark is parsing jquery.js about 120 times, I run the benchmark 10 times to get consistent results.\n* The total memory that gets allocated is 6GB\n* The structure in question is FuncDecl at [https://github.com/tdewolff/parse/blob/develop/js/ast.go#L856](https://github.com/tdewolff/parse/blob/develop/js/ast.go#L856), the other interesting structure is MethodDecl at [https://github.com/tdewolff/parse/blob/develop/js/ast.go#L881](https://github.com/tdewolff/parse/blob/develop/js/ast.go#L881). Both are being allocated often.\n* The benchmark function is at [https://github.com/tdewolff/minify/blob/develop/js/js\\_test.go#L478](https://github.com/tdewolff/minify/blob/develop/js/js_test.go#L478)", "author_fullname": "t2_lpz4p", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Optimizing structs, tail padding makes it faster?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_i0blo6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 54, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 54, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1596067089.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596095572.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I noticed a pretty big performance regression in my code when I made one structure smaller. The object is being allocated often (1 million times in the benchmark), but there are other smaller objects that are allocated up to 20 million times (objects between 24 to 64 bytes).&lt;/p&gt;\n\n&lt;p&gt;The object used to be 216 bytes and I decreased it to 144 bytes, which gave a performance hit of 5%. I then added tail padding and noticed that padding 144+96=240 or 144+112=256 was giving that boost of 5%. Funnily, padding 144+368=512 is even faster by 2%!&lt;/p&gt;\n\n&lt;p&gt;What&amp;#39;s going on here? Is this due to CPU cache line size, or due to Go&amp;#39;s sizeclasses? Neither really explains why 512 bytes is faster than 256 bytes. If it were up to sizeclasses, surely according to &lt;a href=\"https://github.com/golang/go/blob/master/src/runtime/sizeclasses.go\"&gt;https://github.com/golang/go/blob/master/src/runtime/sizeclasses.go&lt;/a&gt; the original size of 144 should be sufficient? What should I be looking at? Is the benchmark function causing this behaviour (i.e. allocating the same objects for 10*120 times)?&lt;/p&gt;\n\n&lt;p&gt;Interesting fact, it seems to correlate with another large object that is slightly larger (192 bytes). The following configurations are fast: 144+72=216 and 192+72=264, and 144+112=256 and 192+64=256. So they do not necessarily need to be the same size!&lt;/p&gt;\n\n&lt;p&gt;Extra information:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I have an Intel i5-6300U 64-bit, and I run Arch Linux with one terminal open and Chrome, closed down most other background processes.&lt;/li&gt;\n&lt;li&gt;The allocation is part of a JS parser that is building the AST, so lots of small allocations and pointers. Most objects are 24 bytes up to 64 bytes big, but I have four objects of around 256 bytes.&lt;/li&gt;\n&lt;li&gt;The benchmark is parsing jquery.js about 120 times, I run the benchmark 10 times to get consistent results.&lt;/li&gt;\n&lt;li&gt;The total memory that gets allocated is 6GB&lt;/li&gt;\n&lt;li&gt;The structure in question is FuncDecl at &lt;a href=\"https://github.com/tdewolff/parse/blob/develop/js/ast.go#L856\"&gt;https://github.com/tdewolff/parse/blob/develop/js/ast.go#L856&lt;/a&gt;, the other interesting structure is MethodDecl at &lt;a href=\"https://github.com/tdewolff/parse/blob/develop/js/ast.go#L881\"&gt;https://github.com/tdewolff/parse/blob/develop/js/ast.go#L881&lt;/a&gt;. Both are being allocated often.&lt;/li&gt;\n&lt;li&gt;The benchmark function is at &lt;a href=\"https://github.com/tdewolff/minify/blob/develop/js/js_test.go#L478\"&gt;https://github.com/tdewolff/minify/blob/develop/js/js_test.go#L478&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i0blo6", "is_robot_indexable": true, "report_reasons": null, "author": "tdewolff", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/i0blo6/optimizing_structs_tail_padding_makes_it_faster/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/i0blo6/optimizing_structs_tail_padding_makes_it_faster/", "subreddit_subscribers": 120647, "created_utc": 1596066772.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_81yj9s9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Kyber-K2SO is a clean implementation of the Kyber IND-CCA2-secure key encapsulation mechanism (KEM),", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_i0hnbd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1596122193.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/SymbolicSoft/kyber-k2so", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i0hnbd", "is_robot_indexable": true, "report_reasons": null, "author": "donutloop", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/i0hnbd/kyberk2so_is_a_clean_implementation_of_the_kyber/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/SymbolicSoft/kyber-k2so", "subreddit_subscribers": 120647, "created_utc": 1596093393.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "The project link: [https://github.com/go-rod/rod](https://github.com/go-rod/rod)\n\nHere a side-by-side comparison between rod and chromedp, they will print the identical result (both will fail-fast and report useful message if an error happens): finding the specified section sect on the [awesome-go](https://github.com/avelino/awesome-go) page, and printing the associated projects.\n\nFor more comparison, please goto [here](https://github.com/go-rod/rod/tree/master/lib/examples/compare-chromedp).\n\nAbout error handling please read our [doc](https://github.com/go-rod/rod#q-why-functions-dont-return-error-values).\n\n[rod vs chromedp](https://preview.redd.it/6rjs12aghtd51.jpg?width=3932&amp;format=pjpg&amp;auto=webp&amp;s=21f5824613e51f68c3cf29450c858ab6d755ce9e)", "author_fullname": "t2_2vjtqjem", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rod, a simpler way to drive headless browser", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "media_metadata": {"6rjs12aghtd51": {"status": "valid", "e": "Image", "m": "image/jpg", "p": [{"y": 98, "x": 108, "u": "https://preview.redd.it/6rjs12aghtd51.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=2341ce584874c3c02bb4bc84f798b186fef163ca"}, {"y": 196, "x": 216, "u": "https://preview.redd.it/6rjs12aghtd51.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=abdcd09934571977fa0ac36ec404b0d21256a0d6"}, {"y": 291, "x": 320, "u": "https://preview.redd.it/6rjs12aghtd51.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ce640881ef7244491bf4c45a1b0cf582a3aea10a"}, {"y": 582, "x": 640, "u": "https://preview.redd.it/6rjs12aghtd51.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=51989cef155153dd00db76fb0192453cadfd2522"}, {"y": 874, "x": 960, "u": "https://preview.redd.it/6rjs12aghtd51.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=01c48bed7ab43ef8030c1de3972de7341a345f77"}, {"y": 983, "x": 1080, "u": "https://preview.redd.it/6rjs12aghtd51.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=10d438f1ea50ffb792f22ef765fa2981baac5eab"}], "s": {"y": 3580, "x": 3932, "u": "https://preview.redd.it/6rjs12aghtd51.jpg?width=3932&amp;format=pjpg&amp;auto=webp&amp;s=21f5824613e51f68c3cf29450c858ab6d755ce9e"}, "id": "6rjs12aghtd51"}}, "name": "t3_i03nte", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 53, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 53, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1596055998.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596069029.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The project link: &lt;a href=\"https://github.com/go-rod/rod\"&gt;https://github.com/go-rod/rod&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here a side-by-side comparison between rod and chromedp, they will print the identical result (both will fail-fast and report useful message if an error happens): finding the specified section sect on the &lt;a href=\"https://github.com/avelino/awesome-go\"&gt;awesome-go&lt;/a&gt; page, and printing the associated projects.&lt;/p&gt;\n\n&lt;p&gt;For more comparison, please goto &lt;a href=\"https://github.com/go-rod/rod/tree/master/lib/examples/compare-chromedp\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;About error handling please read our &lt;a href=\"https://github.com/go-rod/rod#q-why-functions-dont-return-error-values\"&gt;doc&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/6rjs12aghtd51.jpg?width=3932&amp;amp;format=pjpg&amp;amp;auto=webp&amp;amp;s=21f5824613e51f68c3cf29450c858ab6d755ce9e\"&gt;rod vs chromedp&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i03nte", "is_robot_indexable": true, "report_reasons": null, "author": "y_smood", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/i03nte/rod_a_simpler_way_to_drive_headless_browser/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/i03nte/rod_a_simpler_way_to_drive_headless_browser/", "subreddit_subscribers": 120647, "created_utc": 1596040229.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ct6udim", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "4 practical principles of high-quality database integration tests in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_i0ji1i", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.56, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1596132610.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "threedots.tech", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://threedots.tech/post/database-integration-testing/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i0ji1i", "is_robot_indexable": true, "report_reasons": null, "author": "roblaszczak", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/i0ji1i/4_practical_principles_of_highquality_database/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://threedots.tech/post/database-integration-testing/", "subreddit_subscribers": 120647, "created_utc": 1596103810.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi, I'm considering to implement my MyCtx struct what would implement context.Context interface.MyCtx would be enriched with Logger and maybe the other stuff.In our app, we would pass it as MyCtx type as first func argument.So we can easily access the Logger withou using the (context.Context).Value and type cast.For (database/sql).ExecContext it could be passed also because MyCtx implents context.Context interface.\n\nDo you think it's OK?", "author_fullname": "t2_3fsqrcsg", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Question] Custom context.Context implementation", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_i0m0hv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596144416.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I&amp;#39;m considering to implement my MyCtx struct what would implement context.Context interface.MyCtx would be enriched with Logger and maybe the other stuff.In our app, we would pass it as MyCtx type as first func argument.So we can easily access the Logger withou using the (context.Context).Value and type cast.For (database/sql).ExecContext it could be passed also because MyCtx implents context.Context interface.&lt;/p&gt;\n\n&lt;p&gt;Do you think it&amp;#39;s OK?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i0m0hv", "is_robot_indexable": true, "report_reasons": null, "author": "prochac", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/i0m0hv/question_custom_contextcontext_implementation/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/i0m0hv/question_custom_contextcontext_implementation/", "subreddit_subscribers": 120647, "created_utc": 1596115616.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi \n\n&amp;#x200B;\n\nI hope someone can help me with figuring out the logic for this function.\n\nI need to write a function that looks at a string of numbers and identifies if any individual numbers next to each other are repeating.\n\n&amp;#x200B;\n\nExample string: 0123444567889\n\n&amp;#x200B;\n\nIn the example string, there is a 1 triple of digit 4 and 1 double of the digit 8.\n\nI have tried to do this by converting the string to a list with integers and comparing each value to the previous one. This does seem to work fine for doubles e.g. 88, however, when there is a triple-digit repeat it can still see the double inside.\n\n&amp;#x200B;\n\nExample code:\n\n    package main\n    \n    import (\n    \t\"fmt\"\n    \t\"strconv\"\n    \t\"strings\"\n    )\n    \n    // This turns the string into a list of integers\n    func makeDigitList(number string) []int {\n    \tlist := strings.Split(number, \"\")\n    \n    \tvar digitList = []int{}\n    \n    \tfor _, v := range list {\n    \t\ttheInteger, err := strconv.Atoi(v)\n    \t\tif err != nil {\n    \t\t\tpanic(err)\n    \t\t}\n    \t\tdigitList = append(digitList, theInteger)\n    \t}\n    \treturn digitList\n    }\n    \n    func main() {\n    \n    \tdigitList := makeDigitList(\"0123444567889\")\n    \n    \tfor i, v := range digitList {\n                    \n                    // On index zero there will be no previous value - skip\n    \t\tif i == 0 {\n    \n    \t\t} else {\n                            // If the index is bigger or equal to 2 look for a tripple\n    \t\t\t// Else look for a double\n                            if i &gt;= 2 &amp;&amp; digitList[i-1] == v &amp;&amp; digitList[i-2] == v {\n    \t\t\t\tfmt.Println(\"Found 3\")\n    \t\t\t} else if digitList[i-1] == v {\n    \t\t\t\tfmt.Println(\"Found 2\")\n    \t\t\t}\n    \n    \t\t}\n    \n    \t}\n    \n    }\n\nThis returns:\n\nFound 2\n\nFound 3\n\nFound 2\n\n&amp;#x200B;\n\nWhere I need it to return: \n\nFound 3\n\nFound 2\n\n&amp;#x200B;\n\nAny help on this is greatly appreciated.", "author_fullname": "t2_x7o7kdh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Finding repeating numbers", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_i0lsak", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596143482.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I hope someone can help me with figuring out the logic for this function.&lt;/p&gt;\n\n&lt;p&gt;I need to write a function that looks at a string of numbers and identifies if any individual numbers next to each other are repeating.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Example string: 0123444567889&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;In the example string, there is a 1 triple of digit 4 and 1 double of the digit 8.&lt;/p&gt;\n\n&lt;p&gt;I have tried to do this by converting the string to a list with integers and comparing each value to the previous one. This does seem to work fine for doubles e.g. 88, however, when there is a triple-digit repeat it can still see the double inside.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Example code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;strconv&amp;quot;\n    &amp;quot;strings&amp;quot;\n)\n\n// This turns the string into a list of integers\nfunc makeDigitList(number string) []int {\n    list := strings.Split(number, &amp;quot;&amp;quot;)\n\n    var digitList = []int{}\n\n    for _, v := range list {\n        theInteger, err := strconv.Atoi(v)\n        if err != nil {\n            panic(err)\n        }\n        digitList = append(digitList, theInteger)\n    }\n    return digitList\n}\n\nfunc main() {\n\n    digitList := makeDigitList(&amp;quot;0123444567889&amp;quot;)\n\n    for i, v := range digitList {\n\n                // On index zero there will be no previous value - skip\n        if i == 0 {\n\n        } else {\n                        // If the index is bigger or equal to 2 look for a tripple\n            // Else look for a double\n                        if i &amp;gt;= 2 &amp;amp;&amp;amp; digitList[i-1] == v &amp;amp;&amp;amp; digitList[i-2] == v {\n                fmt.Println(&amp;quot;Found 3&amp;quot;)\n            } else if digitList[i-1] == v {\n                fmt.Println(&amp;quot;Found 2&amp;quot;)\n            }\n\n        }\n\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This returns:&lt;/p&gt;\n\n&lt;p&gt;Found 2&lt;/p&gt;\n\n&lt;p&gt;Found 3&lt;/p&gt;\n\n&lt;p&gt;Found 2&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Where I need it to return: &lt;/p&gt;\n\n&lt;p&gt;Found 3&lt;/p&gt;\n\n&lt;p&gt;Found 2&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Any help on this is greatly appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i0lsak", "is_robot_indexable": true, "report_reasons": null, "author": "ATQO", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/i0lsak/finding_repeating_numbers/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/i0lsak/finding_repeating_numbers/", "subreddit_subscribers": 120647, "created_utc": 1596114682.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi All:I'm relatively new to Go, so I apologize if this is a trivial question ( [https://www.reddit.com/r/golang/comments/6ux8gc/newbie\\_question\\_why\\_does\\_golang\\_benchmark\\_result/](https://www.reddit.com/r/golang/comments/6ux8gc/newbie_question_why_does_golang_benchmark_result/)  seems similar, but distinct).\n\nI am trying to benchmark using interface methods v.s. type assertions, and am seeing a strange behavior in the benchmarks:\n\nI have 4 test cases, when I run all 4 together, the results are more or less consistently:\n\n    BenchmarkMain-12     \t  244844\t      4902 ns/op\t       3 B/op\t       0 allocs/op\n    BenchmarkMain2-12    \t  122421\t      9747 ns/op\t       7 B/op\t       0 allocs/op\n    BenchmarkMain3-12    \t  244813\t      4892 ns/op\t       3 B/op\t       0 allocs/op\n    BenchmarkMain4-12    \t  239946\t      4840 ns/op\t       3 B/op\t       0 allocs/op\n\n&amp;#x200B;\n\nIf I sequentially comment out benchmarks, the results vary:\n\n    BenchmarkMain-12     \t  244836\t      4793 ns/op\t       3 B/op\t       0 allocs/op \n    BenchmarkMain2-12    \t  123693\t      9768 ns/op\t       6 B/op\t       0 allocs/op \n    BenchmarkMain3-12    \t  244839\t      4943 ns/op\t       3 B/op\t       0 allocs/op\n\n..   \n\n\n    BenchmarkMain-12     \t  249944\t      4840 ns/op\t       3 B/op\t       0 allocs/op \n    BenchmarkMain2-12    \t  121185\t      9959 ns/op\t       7 B/op\t       0 allocs/op\n\n&amp;#x200B;\n\nUntil the cases generally are consistent if I run them individually:\n\n    BenchmarkMain-12    \t  239943\t      4936 ns/op\t       3 B/op\t       0 allocs/op\n\n...\n\n     BenchmarkMain2-12    \t  230719\t      4961 ns/op\t       3 B/op\t       0 allocs/op\n\n..\n\n    BenchmarkMain3-12    \t  232940\t      4872 ns/op\t       3 B/op\t       0 allocs/op\n    \n     ... \n    \n    BenchmarkMain4-12    \t  244856\t      4828 ns/op\t       3 B/op\t       0 allocs/op\n\nI suspect I could be running into cache coherency or similar mechanics that may explain the variation, but I'd like to ask if someone more experienced with Go would be able to offer any insights.\n\nmain.go:\n\n    package main\n    \n    var baseList []baseInterface\n    var embedList []embedImpl\n    \n    type typeID int\n    \n    const (\n    \tC_T1 typeID = iota\n    \tC_T2\n    )\n    \n    type baseInterface interface {\n    \tGetList() []typeID\n    }\n    \n    type baseImpl struct {\n    \tList []typeID\n    }\n    \n    func (a baseImpl) GetList() []typeID {\n    \treturn a.List\n    }\n    \n    type embedImpl struct {\n    \tbaseImpl\n    \tchildList []childType\n    }\n    \n    type childType struct {\n    \tA string\n    }\n    \n    func main() {\n    \n    }\n\nmain\\_test.go:\n\n    package main\n    \n    import (\n    \t\"log\"\n    \t\"testing\"\n    )\n    \n    func BenchmarkMain(b *testing.B) {\n    \tb.ReportAllocs()\n    \tb.ResetTimer()\n    \tbaseList = append(baseList, baseImpl{})\n    \n    \ta := embedImpl{}\n    \tfor t := 0; t &lt; 10000; t++ {\n    \t\ta.List = append(a.List, C_T1)\n    \t\ta.List = append(a.List, C_T2)\n    \t}\n    \n    \tbaseList = append(baseList, a)\n    \n    \tfor i := 0; i &lt; b.N; i++ {\n    \t\tm := baseList[len(baseList)-1].GetList()\n    \t\tfor k, _ := range m {\n    \t\t\tif k == 30000 {\n    \t\t\t\tlog.Println(k)\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    \n    func BenchmarkMain2(b *testing.B) {\n    \tb.ReportAllocs()\n    \tb.ResetTimer()\n    \tbaseList = append(baseList, baseImpl{})\n    \n    \ta := embedImpl{}\n    \tfor t := 0; t &lt; 10000; t++ {\n    \t\ta.List = append(a.List, C_T1)\n    \t\ta.List = append(a.List, C_T2)\n    \t}\n    \n    \tbaseList = append(baseList, a)\n    \n    \tfor i := 0; i &lt; b.N; i++ {\n    \t\tat := baseList[len(baseList)-1].(embedImpl)\n    \t\tm := at.GetList()\n    \t\tfor k, _ := range m {\n    \t\t\tif k == 30000 {\n    \t\t\t\tlog.Println(k)\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    \n    func BenchmarkMain3(b *testing.B) {\n    \tb.ReportAllocs()\n    \tb.ResetTimer()\n    \tbaseList = append(baseList, baseImpl{})\n    \n    \ta := embedImpl{}\n    \tfor t := 0; t &lt; 10000; t++ {\n    \t\ta.List = append(a.List, C_T1)\n    \t\ta.List = append(a.List, C_T2)\n    \t}\n    \n    \tbaseList = append(baseList, a)\n    \n    \tfor i := 0; i &lt; b.N; i++ {\n    \t\tat := baseList[len(baseList)-1].(embedImpl)\n    \t\tm := at.List\n    \t\tfor k, _ := range m {\n    \t\t\tif k == 30000 {\n    \t\t\t\tlog.Println(k)\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n    \n    func BenchmarkMain4(b *testing.B) {\n    \tb.ReportAllocs()\n    \tb.ResetTimer()\n    \ta := embedImpl{}\n    \tfor t := 0; t &lt; 10000; t++ {\n    \t\ta.List = append(a.List, C_T1)\n    \t\ta.List = append(a.List, C_T2)\n    \t}\n    \n    \tembedList = append(embedList, a)\n    \n    \tfor i := 0; i &lt; b.N; i++ {\n    \t\tat := embedList[len(embedList)-1]\n    \t\tm := at.List\n    \t\tfor k, _ := range m {\n    \t\t\tif k == 30000 {\n    \t\t\t\tlog.Println(k)\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n\n&amp;#x200B;\n\nThanks!", "author_fullname": "t2_lcwq1md", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Benchmarks - results vary when running multiple v.s. single benchmark functions", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_i0l02h", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1596111650.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596140125.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi All:I&amp;#39;m relatively new to Go, so I apologize if this is a trivial question ( &lt;a href=\"https://www.reddit.com/r/golang/comments/6ux8gc/newbie_question_why_does_golang_benchmark_result/\"&gt;https://www.reddit.com/r/golang/comments/6ux8gc/newbie_question_why_does_golang_benchmark_result/&lt;/a&gt;  seems similar, but distinct).&lt;/p&gt;\n\n&lt;p&gt;I am trying to benchmark using interface methods v.s. type assertions, and am seeing a strange behavior in the benchmarks:&lt;/p&gt;\n\n&lt;p&gt;I have 4 test cases, when I run all 4 together, the results are more or less consistently:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;BenchmarkMain-12          244844          4902 ns/op           3 B/op          0 allocs/op\nBenchmarkMain2-12         122421          9747 ns/op           7 B/op          0 allocs/op\nBenchmarkMain3-12         244813          4892 ns/op           3 B/op          0 allocs/op\nBenchmarkMain4-12         239946          4840 ns/op           3 B/op          0 allocs/op\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;If I sequentially comment out benchmarks, the results vary:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;BenchmarkMain-12          244836          4793 ns/op           3 B/op          0 allocs/op \nBenchmarkMain2-12         123693          9768 ns/op           6 B/op          0 allocs/op \nBenchmarkMain3-12         244839          4943 ns/op           3 B/op          0 allocs/op\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;..   &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;BenchmarkMain-12          249944          4840 ns/op           3 B/op          0 allocs/op \nBenchmarkMain2-12         121185          9959 ns/op           7 B/op          0 allocs/op\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Until the cases generally are consistent if I run them individually:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;BenchmarkMain-12          239943          4936 ns/op           3 B/op          0 allocs/op\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;...&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; BenchmarkMain2-12        230719          4961 ns/op           3 B/op          0 allocs/op\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;..&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;BenchmarkMain3-12         232940          4872 ns/op           3 B/op          0 allocs/op\n\n ... \n\nBenchmarkMain4-12         244856          4828 ns/op           3 B/op          0 allocs/op\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I suspect I could be running into cache coherency or similar mechanics that may explain the variation, but I&amp;#39;d like to ask if someone more experienced with Go would be able to offer any insights.&lt;/p&gt;\n\n&lt;p&gt;main.go:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nvar baseList []baseInterface\nvar embedList []embedImpl\n\ntype typeID int\n\nconst (\n    C_T1 typeID = iota\n    C_T2\n)\n\ntype baseInterface interface {\n    GetList() []typeID\n}\n\ntype baseImpl struct {\n    List []typeID\n}\n\nfunc (a baseImpl) GetList() []typeID {\n    return a.List\n}\n\ntype embedImpl struct {\n    baseImpl\n    childList []childType\n}\n\ntype childType struct {\n    A string\n}\n\nfunc main() {\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;main_test.go:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    &amp;quot;log&amp;quot;\n    &amp;quot;testing&amp;quot;\n)\n\nfunc BenchmarkMain(b *testing.B) {\n    b.ReportAllocs()\n    b.ResetTimer()\n    baseList = append(baseList, baseImpl{})\n\n    a := embedImpl{}\n    for t := 0; t &amp;lt; 10000; t++ {\n        a.List = append(a.List, C_T1)\n        a.List = append(a.List, C_T2)\n    }\n\n    baseList = append(baseList, a)\n\n    for i := 0; i &amp;lt; b.N; i++ {\n        m := baseList[len(baseList)-1].GetList()\n        for k, _ := range m {\n            if k == 30000 {\n                log.Println(k)\n            }\n        }\n    }\n}\n\nfunc BenchmarkMain2(b *testing.B) {\n    b.ReportAllocs()\n    b.ResetTimer()\n    baseList = append(baseList, baseImpl{})\n\n    a := embedImpl{}\n    for t := 0; t &amp;lt; 10000; t++ {\n        a.List = append(a.List, C_T1)\n        a.List = append(a.List, C_T2)\n    }\n\n    baseList = append(baseList, a)\n\n    for i := 0; i &amp;lt; b.N; i++ {\n        at := baseList[len(baseList)-1].(embedImpl)\n        m := at.GetList()\n        for k, _ := range m {\n            if k == 30000 {\n                log.Println(k)\n            }\n        }\n    }\n}\n\nfunc BenchmarkMain3(b *testing.B) {\n    b.ReportAllocs()\n    b.ResetTimer()\n    baseList = append(baseList, baseImpl{})\n\n    a := embedImpl{}\n    for t := 0; t &amp;lt; 10000; t++ {\n        a.List = append(a.List, C_T1)\n        a.List = append(a.List, C_T2)\n    }\n\n    baseList = append(baseList, a)\n\n    for i := 0; i &amp;lt; b.N; i++ {\n        at := baseList[len(baseList)-1].(embedImpl)\n        m := at.List\n        for k, _ := range m {\n            if k == 30000 {\n                log.Println(k)\n            }\n        }\n    }\n}\n\nfunc BenchmarkMain4(b *testing.B) {\n    b.ReportAllocs()\n    b.ResetTimer()\n    a := embedImpl{}\n    for t := 0; t &amp;lt; 10000; t++ {\n        a.List = append(a.List, C_T1)\n        a.List = append(a.List, C_T2)\n    }\n\n    embedList = append(embedList, a)\n\n    for i := 0; i &amp;lt; b.N; i++ {\n        at := embedList[len(embedList)-1]\n        m := at.List\n        for k, _ := range m {\n            if k == 30000 {\n                log.Println(k)\n            }\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i0l02h", "is_robot_indexable": true, "report_reasons": null, "author": "motsuaboshi", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/i0l02h/benchmarks_results_vary_when_running_multiple_vs/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/i0l02h/benchmarks_results_vary_when_running_multiple_vs/", "subreddit_subscribers": 120647, "created_utc": 1596111325.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "hello guys is go lang is good for pen-testing ? and if is good what are the good lib that i should learn?", "author_fullname": "t2_5r6k6mfk", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go for pen-testing", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_i0knnn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596138540.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;hello guys is go lang is good for pen-testing ? and if is good what are the good lib that i should learn?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i0knnn", "is_robot_indexable": true, "report_reasons": null, "author": "mohamedsayed2004", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/i0knnn/go_for_pentesting/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/i0knnn/go_for_pentesting/", "subreddit_subscribers": 120647, "created_utc": 1596109740.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_i0knnn", "before": null}}