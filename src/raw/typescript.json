{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - January", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_eib2jh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 32, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 32, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1577865929.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "908dba50-143b-11ea-8541-0e435e5ea9e1", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eib2jh", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 8, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/eib2jh/whos_hiring_typescript_developers_january/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/eib2jh/whos_hiring_typescript_developers_january/", "subreddit_subscribers": 31203, "created_utc": 1577837129.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_4gzg7npn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Set Up a Typescript React Redux Project", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_et3gev", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": true, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1579859830.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "typeofnan.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "et3gev", "is_robot_indexable": true, "report_reasons": null, "author": "nas5w", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/et3gev/set_up_a_typescript_react_redux_project/", "parent_whitelist_status": null, "stickied": false, "url": "https://typeofnan.dev/setup-a-typescript-react-redux-project/", "subreddit_subscribers": 31203, "created_utc": 1579831030.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "On the GitHub the last commit was almost 2 years ago, does it work well?\nAlso does it work fine with both pg and pg-promise?\n\nhttps://github.com/SweetIQ/schemats", "author_fullname": "t2_3fiyykou", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is schemats, still maintained", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_et56d4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1579868404.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;On the GitHub the last commit was almost 2 years ago, does it work well?\nAlso does it work fine with both pg and pg-promise?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/SweetIQ/schemats\"&gt;https://github.com/SweetIQ/schemats&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/vhy7sfGsQiTZ7oNVGizD_wl0WkNxruHIUOFHoJoH0Mk.jpg?auto=webp&amp;s=dff7b3b3408194acd6d92b15b41e512e5264ccc2", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/vhy7sfGsQiTZ7oNVGizD_wl0WkNxruHIUOFHoJoH0Mk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=7bb06f1bf67505863a3009458022a48d04dd0e25", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/vhy7sfGsQiTZ7oNVGizD_wl0WkNxruHIUOFHoJoH0Mk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=ea4d711d12c882d5bb532515c715e497cf67dea6", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/vhy7sfGsQiTZ7oNVGizD_wl0WkNxruHIUOFHoJoH0Mk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=80d77374692e87eb89c44c5d74c4858636d99f35", "width": 320, "height": 320}], "variants": {}, "id": "l7cy3Q1Teu9pKZacokTfxTPvsvF9fjwEtPU4qQpHvBk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "et56d4", "is_robot_indexable": true, "report_reasons": null, "author": "CloudsOfMagellan", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/et56d4/is_schemats_still_maintained/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/et56d4/is_schemats_still_maintained/", "subreddit_subscribers": 31203, "created_utc": 1579839604.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "So I'm trying to have a counter that's like Day: n for how many times the loop runs. So it would be like starting at day 0 and every time it goes through the loop just add one day. I've declared and initialized all my variables I'm dealing with. The code for my loop is: \n\nwhile (isHarvestTime === false &amp;&amp; alive === true) {  \n print(\"Day: \" + day);  \n}\n\n&amp;#x200B;\n\nAll I'm getting as output is a blank screen so I'm not really sure how to get the day counter to print.", "author_fullname": "t2_1585f8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Question about Loops/Output not printing", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_eszchn", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579841994.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I&amp;#39;m trying to have a counter that&amp;#39;s like Day: n for how many times the loop runs. So it would be like starting at day 0 and every time it goes through the loop just add one day. I&amp;#39;ve declared and initialized all my variables I&amp;#39;m dealing with. The code for my loop is: &lt;/p&gt;\n\n&lt;p&gt;while (isHarvestTime === false &amp;amp;&amp;amp; alive === true) {&lt;br/&gt;\n print(&amp;quot;Day: &amp;quot; + day);&lt;br/&gt;\n}&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;All I&amp;#39;m getting as output is a blank screen so I&amp;#39;m not really sure how to get the day counter to print.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eszchn", "is_robot_indexable": true, "report_reasons": null, "author": "ksf69", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/eszchn/question_about_loopsoutput_not_printing/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/eszchn/question_about_loopsoutput_not_printing/", "subreddit_subscribers": 31203, "created_utc": 1579813194.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "&amp;#x200B;\n\nhttps://preview.redd.it/6xjpi8f6slc41.png?width=913&amp;format=png&amp;auto=webp&amp;s=65540e7469a6f7abe5ed0facb700e0ade505db77\n\nType inference has always stumped me, forcing me to use explicit types / generics. I finally figured it out!\n\n&amp;#x200B;\n\n[The dropdown includes values that are all fields in the \\`data\\` array passed to \\`useSearchItems\\`.](https://preview.redd.it/hoc218ubslc41.png?width=760&amp;format=png&amp;auto=webp&amp;s=ba41378ccf7732168eadb5b97e2294e9a71b57fe)\n\nIf there are any experts on how typescript's \\`infer\\` keyword works, I think it could make for a super useful Medium article.", "author_fullname": "t2_y5o38", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I finally understand how to infer types!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 28, "hide_score": false, "media_metadata": {"6xjpi8f6slc41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 22, "x": 108, "u": "https://external-preview.redd.it/6xjpi8f6slc41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=4d3c602a67c76edff0a3bb48c16657776f23b47d"}, {"y": 44, "x": 216, "u": "https://external-preview.redd.it/6xjpi8f6slc41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=0f8bfc04a7717f171b99aa515a56d28c8652c1b3"}, {"y": 65, "x": 320, "u": "https://external-preview.redd.it/6xjpi8f6slc41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=0ba8f20bef530cd9b3a30fb83c13a8573d87cacd"}, {"y": 131, "x": 640, "u": "https://external-preview.redd.it/6xjpi8f6slc41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=71a276000aea788e85b7109984675a9d979c264e"}], "s": {"y": 188, "x": 913, "u": "https://preview.redd.it/6xjpi8f6slc41.png?width=913&amp;format=png&amp;auto=webp&amp;s=65540e7469a6f7abe5ed0facb700e0ade505db77"}, "id": "6xjpi8f6slc41"}, "hoc218ubslc41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 24, "x": 108, "u": "https://external-preview.redd.it/hoc218ubslc41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=68bc26257d8d0f75a6170d3aa937e318d164ba7e"}, {"y": 48, "x": 216, "u": "https://external-preview.redd.it/hoc218ubslc41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=42a749062ad7b45192eab26fef05e88091423535"}, {"y": 72, "x": 320, "u": "https://external-preview.redd.it/hoc218ubslc41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=9aade3e965e6e5fb7bc4d6f44970a4d325c1f58e"}, {"y": 144, "x": 640, "u": "https://external-preview.redd.it/hoc218ubslc41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=421bf61e05c2ecafaf347baddfa7f6ca062af599"}], "s": {"y": 171, "x": 760, "u": "https://preview.redd.it/hoc218ubslc41.png?width=760&amp;format=png&amp;auto=webp&amp;s=ba41378ccf7732168eadb5b97e2294e9a71b57fe"}, "id": "hoc218ubslc41"}}, "name": "t3_et0irh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/yo3PX-WKhtrjJmVN_wGM6t6naEzDutuzSrDZjR9geYo.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579846825.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/6xjpi8f6slc41.png?width=913&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=65540e7469a6f7abe5ed0facb700e0ade505db77\"&gt;https://preview.redd.it/6xjpi8f6slc41.png?width=913&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=65540e7469a6f7abe5ed0facb700e0ade505db77&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Type inference has always stumped me, forcing me to use explicit types / generics. I finally figured it out!&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/hoc218ubslc41.png?width=760&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=ba41378ccf7732168eadb5b97e2294e9a71b57fe\"&gt;The dropdown includes values that are all fields in the `data` array passed to `useSearchItems`.&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If there are any experts on how typescript&amp;#39;s `infer` keyword works, I think it could make for a super useful Medium article.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "et0irh", "is_robot_indexable": true, "report_reasons": null, "author": "TheOneBehindIt", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/et0irh/i_finally_understand_how_to_infer_types/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/et0irh/i_finally_understand_how_to_infer_types/", "subreddit_subscribers": 31203, "created_utc": 1579818025.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Would love to get feedback on this:\n\n[https://www.reddit.com/r/Deno/comments/esazl4/drash\\_a\\_microframework\\_for\\_deno/](https://www.reddit.com/r/Deno/comments/esazl4/drash_a_microframework_for_deno/)\n\nThanks!", "author_fullname": "t2_3fqr7nwz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Drash - A microframework for deno", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_esnv1t", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579780944.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Would love to get feedback on this:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/Deno/comments/esazl4/drash_a_microframework_for_deno/\"&gt;https://www.reddit.com/r/Deno/comments/esazl4/drash_a_microframework_for_deno/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "esnv1t", "is_robot_indexable": true, "report_reasons": null, "author": "crookse", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/esnv1t/drash_a_microframework_for_deno/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/esnv1t/drash_a_microframework_for_deno/", "subreddit_subscribers": 31203, "created_utc": 1579752144.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_6bnqt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Unexpected Lessons from 100% Test Coverage", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 40, "hide_score": false, "name": "t3_eso0pv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/6B9mbou-XXlshb1n8zuZaVP2DAUYP2D2lRqsIB6A-WY.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "javascript", "selftext": "", "author_fullname": "t2_6bnqt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Unexpected Lessons from 100% Test Coverage", "link_flair_richtext": [], "subreddit_name_prefixed": "r/javascript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 40, "hide_score": false, "name": "t3_esnz08", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1579781508.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?auto=webp&amp;s=5b6e582ac7dcf1d94b38ab8f2bfdb367bb8d766b", "width": 1200, "height": 344}, "resolutions": [{"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=ddb6690cb6893aebcb1e59cecf34d0d2a526ac39", "width": 108, "height": 30}, {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=375019923c90e5a46184da8a2cb440b962d8e7bd", "width": 216, "height": 61}, {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=bd5ecd22ee99fc9c0b056adc640b84c2cc982ead", "width": 320, "height": 91}, {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=eb5f041fb44e87a19741da0e878ffd705c5ade1c", "width": 640, "height": 183}, {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6045c3fc82aa30f5593a5e5cdecaa5914763ce04", "width": 960, "height": 275}, {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=8fac234a724414c61e89fb5d4c775de174d36111", "width": 1080, "height": 309}], "variants": {}, "id": "N9RHQ5zPvG0Sw1ZoezFhSKsyjm8QCoTfvZ_zLVPFCO8"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh30", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "esnz08", "is_robot_indexable": true, "report_reasons": null, "author": "eyassh", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/javascript/comments/esnz08/unexpected_lessons_from_100_test_coverage/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@EyasSH/unexpected-lessons-from-100-test-coverage-eebeee211b7a", "subreddit_subscribers": 798546, "created_utc": 1579752708.0, "num_crossposts": 2, "media": null, "is_video": false}], "created": 1579781765.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?auto=webp&amp;s=5b6e582ac7dcf1d94b38ab8f2bfdb367bb8d766b", "width": 1200, "height": 344}, "resolutions": [{"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=ddb6690cb6893aebcb1e59cecf34d0d2a526ac39", "width": 108, "height": 30}, {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=375019923c90e5a46184da8a2cb440b962d8e7bd", "width": 216, "height": 61}, {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=bd5ecd22ee99fc9c0b056adc640b84c2cc982ead", "width": 320, "height": 91}, {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=eb5f041fb44e87a19741da0e878ffd705c5ade1c", "width": 640, "height": 183}, {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6045c3fc82aa30f5593a5e5cdecaa5914763ce04", "width": 960, "height": 275}, {"url": "https://external-preview.redd.it/JiPnJY66dRe78LCX8yn0GAY1FeJti5a3xuxvS9D_xNA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=8fac234a724414c61e89fb5d4c775de174d36111", "width": 1080, "height": 309}], "variants": {}, "id": "N9RHQ5zPvG0Sw1ZoezFhSKsyjm8QCoTfvZ_zLVPFCO8"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eso0pv", "is_robot_indexable": true, "report_reasons": null, "author": "eyassh", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_esnz08", "author_flair_text_color": null, "permalink": "/r/typescript/comments/eso0pv/unexpected_lessons_from_100_test_coverage/", "parent_whitelist_status": null, "stickied": false, "url": "https://medium.com/@EyasSH/unexpected-lessons-from-100-test-coverage-eebeee211b7a", "subreddit_subscribers": 31203, "created_utc": 1579752965.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I was wondering if anyone happens to know if what I am trying to achieve is even possible.\n\nWhat I have in regular Javascript is the following:\n\n    let functions = {\n        add: (state, x, y) =&gt; state + x + y,\n        subtract: (state, x) =&gt; state - x,\n        decrement: (state) =&gt; state - 1,\n        increment: (state) =&gt; state + 1,\n    };\n    \n    function wrapper(func) {\n        return (...args) =&gt; func(5, ...args);\n    }\n    \n    function wrapObject(obj) {\n        const newFunctions = {};\n        Object.keys(obj).map(key =&gt; {\n            newFunctions[key] = wrapper(obj[key]);\n        });\n        return newFunctions;\n    }\n    \n    const newFunctions = wrapObject(functions);\n    \n    newFunctions.add()\n\nThe idea is simple. You have an object with functions that all have state as the first argument. I want to create a new object where I return the same functions except where the state is injected. In the above example it's just the number 5 that's always injected but that's beside the point. I achieve this by simply looping over the keys and returning an object with those keys and the values wrapped in a wrapper function.\n\nThe problem with this code is that the editor doesn't know what parameters the function add (or any of them) takes. I would like to keep this intact so I figured I would use typescript.\n\nI came up with the following:\n\n    type Dictionary = { [key: string]: (state: number, ...args: any[]) =&gt; any }\n    type StateFunction = (state: any, ...args: any[]) =&gt; any\n    type OmitFirstParam&lt;T&gt; = T extends (state: number, ...args: infer P) =&gt; any ? P : never;\n    type NewFunction&lt;T&gt; = T extends (state: number, ...args: infer P) =&gt; any ? (...args: P) =&gt; void :  never;\n    type NewDictionary&lt;T&gt; = T extends { [key: string]: infer F } ? { [key: string]:  NewFunction&lt;F&gt;  } : never;\n    \n    \n    let functions = {\n        add: (state: number, x: number, y: number) =&gt; state + x + y,\n        subtract: (state: number, x: number) =&gt; state - x,\n        decrement: (state: number) =&gt; state - 1,\n        increment: (state: number) =&gt; state + 1,\n    };\n    \n    \n    function wrapper&lt;T extends StateFunction&gt;(func: T): (...funcArgs: OmitFirstParam&lt;T&gt;) =&gt; void {\n        return (...args) =&gt; func(5, ...args);\n    }\n    \n    \n    function wrapObject&lt;T extends { [key: string]: (state: number, ...args: any[]) =&gt; any }&gt;(obj: T): NewDictionary&lt;T&gt; {\n        const newFunctions: any = {};\n        Object.keys(obj).map(key =&gt; {\n            newFunctions[key] = wrapper(obj[key])\n        });\n        return newFunctions;\n    }\n    \n    \n    const newFunctions = wrapObject(functions);\n    \n    newFunctions.increment();\n\nthe code in [typescriptlang playground](https://www.typescriptlang.org/play/?ssl=32&amp;ssc=26&amp;pln=1&amp;pc=1#code/C4TwDgpgBAIglgY2HA9gOwIYCcRQLxQDeUA2gNYQgBcUAzsFnGgOYC6NAFPRsBDWgFcAtgCMIWADRQAdLOzNaNDGhAlWASnwA+KMtwBfALAAoUJCgBlYDwgAxAWiSo0+KF2u8lKqbOnzFuipqmng6eiZm0ADyQnDAtnBY9AAK2BhCADwAKjoEWVAQAB68aAAmtG7cnlCCouI+clgKNEwAZuJQySFhKlAA-J1Q-BAAbuIA3BHg0AByEADu9o7I6Nm5UPlFJeWVHnw1wmKSMo3NUG0dXdqBuAMcvv40V6FQIyhwpUNQNaMTU+ZzebwJzobAgNauTbFCBlCrEciUGj0RgsdjnNDtLBQWxQfT9IikCjUOgMJhsGhQQFLEFoDK2HS4r5oX5YSbGEwmAA2EGAUFaDhpFQIhBM32+GFKpU4VX2tSOUkK-EO9SgxLl4m6JJsUAA1FBCrrVRJRWLaAIRAwMEhpXslXVjoqDvbNTKoABafXG4xiqClCAILAQIQw4A2mx2o4uvbuqAARi9PqYAaDIbD1XVWCj2r18ZM+jZHOM-OWzig8ywGDAkCw2QK0Nhlj21JWaC0HGLCBoWXUnF8HYAgk0AjE4gkksBUhXMjlNW8PkQTd9A8ABFgXPdTrRNR2OABWBp+IfqNlGdlnjstssVsBREQAK39wFrWxhO3hRKRpNRadlyuODyHLxVA0a49FxNsUHvLse0pBZgRbMEIRFb0xQQdB6B+RYBRbAIwOFfNFygW8HyQaQiVoDhILvdRpCESsOCJa5kJ9H1mSwkt0IREBWFcctK2rSj7y4jRCP0Y9COXVcXDY5tnFoE9CxMNC0AwmTsLk3jr2Ix923U9DxLPNSOJU6Qk0DYM0GADhjyAA)\n\nIt almost works. It correctly realizes that the state parameter is not needed anymore but it thinks that every function takes the same arguments namely x and y. What I think is going wrong is that typescript has to pick one function for the type `key: string]: (state: number, ...args: any[]) =&gt; any` and uses that to build the Dictionary type that I created.\n\nI have a feeling it's not possible.\n\nEDIT: \n\nThanks to /u/Erelde I got something that works [link](https://www.typescriptlang.org/play/?ssl=1&amp;ssc=1&amp;pln=38&amp;pc=19#code/C4TwDgpgBAysCGwIDECuA7AxsAlge3SgF4oAKAZwSQC4p50QAaKAOjfgCcBzc2+kANoBdAJTEAfHQYBuALAAoUJCgB5ALY5gyHB0oBBbgB5kkksigQAHknQATcmUqIIfBszYtOPWjnQAzCA4oAAUxIkl+KAB+Mg8vXhCwyQA3PBxbKFp0CGTAuUVwaABZeDBIW0MAFQtrCDsHACUITDwOCsoOXy5mOGc0LFwCcVMoAG8oAQBrKF8oSYgQPD8oSqFadU1tXWADLiqpoUkAX3yFABsIYCg-DGx8dAcSUYUoV7pbW1oKKhcodFQ1AAjQLMSxZAHAjjMEDgoGBJJQJxIKAAaigllRUCYLze5FQgOAHHg2C+SN+-zhUPRsMhCLJUAAtOjGDjXrZmhwIGo6sBST8afCJIifoyoABGFnyN4zLCc7noXmOfl-CGC8LC5yYiUKE4KPXyG4De5QADuRLKgSqNRs9ig-TuQ1IhswtEqYmeUrenOAqA4hFIcW4CX4wgRztIAFZ3OwgyJ8kd9QpnYNCGbSipAQArZrAK1WG0OcZTBa0DpdNawH72lNQI7iUh4LOukS0EoWiqVSQe6UtB5XbIm6v3YMMYhjXWe14Z7PYFjzEDkBtZkQsNSlUjzoXd6VvAdDgjkYsgIRjtMWjhLzNH0Ss2tx2-e32EPe3FPkeP63uUP4QQev4enua045k6-4Hve8jnJcUDJPAZyoNAJAvkaB4sL4mByjypAiAoX54BcLBnHgXCkLB8EQDhkHyGRCFjshDoPCw7IYVyWGUXhBFESRNEUfqPF0b++6MXiBJEtgpAAMzsQe+EQIRxGkXBCGUQo-FIYJYGMfAHySYwABM0kPLJ8ncUpFFAA)", "author_fullname": "t2_96s8l", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "TypeScript generic higher order functions", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_esf793", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1579726503.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579742998.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was wondering if anyone happens to know if what I am trying to achieve is even possible.&lt;/p&gt;\n\n&lt;p&gt;What I have in regular Javascript is the following:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;let functions = {\n    add: (state, x, y) =&amp;gt; state + x + y,\n    subtract: (state, x) =&amp;gt; state - x,\n    decrement: (state) =&amp;gt; state - 1,\n    increment: (state) =&amp;gt; state + 1,\n};\n\nfunction wrapper(func) {\n    return (...args) =&amp;gt; func(5, ...args);\n}\n\nfunction wrapObject(obj) {\n    const newFunctions = {};\n    Object.keys(obj).map(key =&amp;gt; {\n        newFunctions[key] = wrapper(obj[key]);\n    });\n    return newFunctions;\n}\n\nconst newFunctions = wrapObject(functions);\n\nnewFunctions.add()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The idea is simple. You have an object with functions that all have state as the first argument. I want to create a new object where I return the same functions except where the state is injected. In the above example it&amp;#39;s just the number 5 that&amp;#39;s always injected but that&amp;#39;s beside the point. I achieve this by simply looping over the keys and returning an object with those keys and the values wrapped in a wrapper function.&lt;/p&gt;\n\n&lt;p&gt;The problem with this code is that the editor doesn&amp;#39;t know what parameters the function add (or any of them) takes. I would like to keep this intact so I figured I would use typescript.&lt;/p&gt;\n\n&lt;p&gt;I came up with the following:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Dictionary = { [key: string]: (state: number, ...args: any[]) =&amp;gt; any }\ntype StateFunction = (state: any, ...args: any[]) =&amp;gt; any\ntype OmitFirstParam&amp;lt;T&amp;gt; = T extends (state: number, ...args: infer P) =&amp;gt; any ? P : never;\ntype NewFunction&amp;lt;T&amp;gt; = T extends (state: number, ...args: infer P) =&amp;gt; any ? (...args: P) =&amp;gt; void :  never;\ntype NewDictionary&amp;lt;T&amp;gt; = T extends { [key: string]: infer F } ? { [key: string]:  NewFunction&amp;lt;F&amp;gt;  } : never;\n\n\nlet functions = {\n    add: (state: number, x: number, y: number) =&amp;gt; state + x + y,\n    subtract: (state: number, x: number) =&amp;gt; state - x,\n    decrement: (state: number) =&amp;gt; state - 1,\n    increment: (state: number) =&amp;gt; state + 1,\n};\n\n\nfunction wrapper&amp;lt;T extends StateFunction&amp;gt;(func: T): (...funcArgs: OmitFirstParam&amp;lt;T&amp;gt;) =&amp;gt; void {\n    return (...args) =&amp;gt; func(5, ...args);\n}\n\n\nfunction wrapObject&amp;lt;T extends { [key: string]: (state: number, ...args: any[]) =&amp;gt; any }&amp;gt;(obj: T): NewDictionary&amp;lt;T&amp;gt; {\n    const newFunctions: any = {};\n    Object.keys(obj).map(key =&amp;gt; {\n        newFunctions[key] = wrapper(obj[key])\n    });\n    return newFunctions;\n}\n\n\nconst newFunctions = wrapObject(functions);\n\nnewFunctions.increment();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the code in &lt;a href=\"https://www.typescriptlang.org/play/?ssl=32&amp;amp;ssc=26&amp;amp;pln=1&amp;amp;pc=1#code/C4TwDgpgBAIglgY2HA9gOwIYCcRQLxQDeUA2gNYQgBcUAzsFnGgOYC6NAFPRsBDWgFcAtgCMIWADRQAdLOzNaNDGhAlWASnwA+KMtwBfALAAoUJCgBlYDwgAxAWiSo0+KF2u8lKqbOnzFuipqmng6eiZm0ADyQnDAtnBY9AAK2BhCADwAKjoEWVAQAB68aAAmtG7cnlCCouI+clgKNEwAZuJQySFhKlAA-J1Q-BAAbuIA3BHg0AByEADu9o7I6Nm5UPlFJeWVHnw1wmKSMo3NUG0dXdqBuAMcvv40V6FQIyhwpUNQNaMTU+ZzebwJzobAgNauTbFCBlCrEciUGj0RgsdjnNDtLBQWxQfT9IikCjUOgMJhsGhQQFLEFoDK2HS4r5oX5YSbGEwmAA2EGAUFaDhpFQIhBM32+GFKpU4VX2tSOUkK-EO9SgxLl4m6JJsUAA1FBCrrVRJRWLaAIRAwMEhpXslXVjoqDvbNTKoABafXG4xiqClCAILAQIQw4A2mx2o4uvbuqAARi9PqYAaDIbD1XVWCj2r18ZM+jZHOM-OWzig8ywGDAkCw2QK0Nhlj21JWaC0HGLCBoWXUnF8HYAgk0AjE4gkksBUhXMjlNW8PkQTd9A8ABFgXPdTrRNR2OABWBp+IfqNlGdlnjstssVsBREQAK39wFrWxhO3hRKRpNRadlyuODyHLxVA0a49FxNsUHvLse0pBZgRbMEIRFb0xQQdB6B+RYBRbAIwOFfNFygW8HyQaQiVoDhILvdRpCESsOCJa5kJ9H1mSwkt0IREBWFcctK2rSj7y4jRCP0Y9COXVcXDY5tnFoE9CxMNC0AwmTsLk3jr2Ix923U9DxLPNSOJU6Qk0DYM0GADhjyAA\"&gt;typescriptlang playground&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It almost works. It correctly realizes that the state parameter is not needed anymore but it thinks that every function takes the same arguments namely x and y. What I think is going wrong is that typescript has to pick one function for the type &lt;code&gt;key: string]: (state: number, ...args: any[]) =&amp;gt; any&lt;/code&gt; and uses that to build the Dictionary type that I created.&lt;/p&gt;\n\n&lt;p&gt;I have a feeling it&amp;#39;s not possible.&lt;/p&gt;\n\n&lt;p&gt;EDIT: &lt;/p&gt;\n\n&lt;p&gt;Thanks to &lt;a href=\"/u/Erelde\"&gt;/u/Erelde&lt;/a&gt; I got something that works &lt;a href=\"https://www.typescriptlang.org/play/?ssl=1&amp;amp;ssc=1&amp;amp;pln=38&amp;amp;pc=19#code/C4TwDgpgBAysCGwIDECuA7AxsAlge3SgF4oAKAZwSQC4p50QAaKAOjfgCcBzc2+kANoBdAJTEAfHQYBuALAAoUJCgB5ALY5gyHB0oBBbgB5kkksigQAHknQATcmUqIIfBszYtOPWjnQAzCA4oAAUxIkl+KAB+Mg8vXhCwyQA3PBxbKFp0CGTAuUVwaABZeDBIW0MAFQtrCDsHACUITDwOCsoOXy5mOGc0LFwCcVMoAG8oAQBrKF8oSYgQPD8oSqFadU1tXWADLiqpoUkAX3yFABsIYCg-DGx8dAcSUYUoV7pbW1oKKhcodFQ1AAjQLMSxZAHAjjMEDgoGBJJQJxIKAAaigllRUCYLze5FQgOAHHg2C+SN+-zhUPRsMhCLJUAAtOjGDjXrZmhwIGo6sBST8afCJIifoyoABGFnyN4zLCc7noXmOfl-CGC8LC5yYiUKE4KPXyG4De5QADuRLKgSqNRs9ig-TuQ1IhswtEqYmeUrenOAqA4hFIcW4CX4wgRztIAFZ3OwgyJ8kd9QpnYNCGbSipAQArZrAK1WG0OcZTBa0DpdNawH72lNQI7iUh4LOukS0EoWiqVSQe6UtB5XbIm6v3YMMYhjXWe14Z7PYFjzEDkBtZkQsNSlUjzoXd6VvAdDgjkYsgIRjtMWjhLzNH0Ss2tx2-e32EPe3FPkeP63uUP4QQev4enua045k6-4Hve8jnJcUDJPAZyoNAJAvkaB4sL4mByjypAiAoX54BcLBnHgXCkLB8EQDhkHyGRCFjshDoPCw7IYVyWGUXhBFESRNEUfqPF0b++6MXiBJEtgpAAMzsQe+EQIRxGkXBCGUQo-FIYJYGMfAHySYwABM0kPLJ8ncUpFFAA\"&gt;link&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "esf793", "is_robot_indexable": true, "report_reasons": null, "author": "KusanagiZerg", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/esf793/typescript_generic_higher_order_functions/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/esf793/typescript_generic_higher_order_functions/", "subreddit_subscribers": 31203, "created_utc": 1579714198.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "For example\n\n    interface iObj1 { x:string }\n    interface iObj2 extends iObj1 { y:number }\n    const someObj : iObj1 = {x:'hello'};\n    someObj.y = 1\n    someFunc (someObj as iObj2);\n\nI could just be doing something stupid but this doesn't seem to work", "author_fullname": "t2_3fiyykou", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to add fixed properties to an object", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_esdo91", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579736242.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For example&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface iObj1 { x:string }\ninterface iObj2 extends iObj1 { y:number }\nconst someObj : iObj1 = {x:&amp;#39;hello&amp;#39;};\nsomeObj.y = 1\nsomeFunc (someObj as iObj2);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I could just be doing something stupid but this doesn&amp;#39;t seem to work&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "esdo91", "is_robot_indexable": true, "report_reasons": null, "author": "CloudsOfMagellan", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/esdo91/how_to_add_fixed_properties_to_an_object/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/esdo91/how_to_add_fixed_properties_to_an_object/", "subreddit_subscribers": 31203, "created_utc": 1579707442.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_38slxkv8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "TypeScript Tip of the Week \u2014 Nullish Coalescing vs Logical OR Operator", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_eskcbq", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": true, "thumbnail": "https://b.thumbs.redditmedia.com/fYYVhzYk6-rEuaRwLPnquAz5y8qr613OO3ejN7k0s9w.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1579765068.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/R2aBcbnBP585h64_Clo6HTVjaaxED_t224Nm2gBwNug.jpg?auto=webp&amp;s=b5e94ccf877f00259ce889d3568292bfc1357ba4", "width": 350, "height": 350}, "resolutions": [{"url": "https://external-preview.redd.it/R2aBcbnBP585h64_Clo6HTVjaaxED_t224Nm2gBwNug.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6d3bee5c472e755b3f0c51e6817d05bd00dd4920", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/R2aBcbnBP585h64_Clo6HTVjaaxED_t224Nm2gBwNug.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=5c887c7c2436f307c45b27f434e6515cf217f193", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/R2aBcbnBP585h64_Clo6HTVjaaxED_t224Nm2gBwNug.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=5ce23b34d88448caf6e75050e2cb2f20d13a3c32", "width": 320, "height": 320}], "variants": {}, "id": "UWvWV2jRsUqo9GzFBbeIK5-Cb1RcrHRtf7-8DeHKGT8"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eskcbq", "is_robot_indexable": true, "report_reasons": null, "author": "shadow13499", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/eskcbq/typescript_tip_of_the_week_nullish_coalescing_vs/", "parent_whitelist_status": null, "stickied": false, "url": "https://medium.com/@sredmond/typescript-tip-of-the-week-nullish-coalescing-vs-logical-or-operator-72779807051", "subreddit_subscribers": 31203, "created_utc": 1579736268.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_3fiyykou", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Does someone have a simple bash script to include non .ts files in /dist after running tsc?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_esie55", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579756735.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "esie55", "is_robot_indexable": true, "report_reasons": null, "author": "CloudsOfMagellan", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/esie55/does_someone_have_a_simple_bash_script_to_include/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/esie55/does_someone_have_a_simple_bash_script_to_include/", "subreddit_subscribers": 31203, "created_utc": 1579727935.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_esie55", "before": null}}