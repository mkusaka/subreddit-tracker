{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "What is the best code generator out there for Golang REST APIs\n\nI used the oapi-codegen utility but it often has trouble parsing schemas that go-swagger usually accepts. I am looking for a more stable solution. What does the community prefer?", "author_fullname": "t2_1fwabg03", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best Server Code Generator for OpenAPI specifications in GoLang?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ieyjum", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 26, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 26, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598193458.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;What is the best code generator out there for Golang REST APIs&lt;/p&gt;\n\n&lt;p&gt;I used the oapi-codegen utility but it often has trouble parsing schemas that go-swagger usually accepts. I am looking for a more stable solution. What does the community prefer?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ieyjum", "is_robot_indexable": true, "report_reasons": null, "author": "siddharths067", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/ieyjum/best_server_code_generator_for_openapi/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/ieyjum/best_server_code_generator_for_openapi/", "subreddit_subscribers": 123102, "created_utc": 1598164658.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I like hacktoberfest. I want to focus on Go projects this year, though - kind of my new year's resolution: \"more Go. less Node/Python/Bash\". \n\nI have _some_ projects in mind, but I'm siloed, of course (I only know the ones I know). Does anyone want to chime in with young, interesting Go projects that could use some help?", "author_fullname": "t2_10hv97", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hacktoberfest is coming", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iekqx8", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 91, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 91, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598140056.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I like hacktoberfest. I want to focus on Go projects this year, though - kind of my new year&amp;#39;s resolution: &amp;quot;more Go. less Node/Python/Bash&amp;quot;. &lt;/p&gt;\n\n&lt;p&gt;I have &lt;em&gt;some&lt;/em&gt; projects in mind, but I&amp;#39;m siloed, of course (I only know the ones I know). Does anyone want to chime in with young, interesting Go projects that could use some help?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iekqx8", "is_robot_indexable": true, "report_reasons": null, "author": "therealkevinard", "discussion_type": null, "num_comments": 20, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iekqx8/hacktoberfest_is_coming/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/iekqx8/hacktoberfest_is_coming/", "subreddit_subscribers": 123102, "created_utc": 1598111256.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey all,\n\nSo I am building my API payload struct (to match my json schema which I use for OpenAPI definition). So think of a typical User:\n\n    type User struct {\n    \tId             *uuid.UUID `json:\"id\"`\n    \tName           string     `json:\"name\"`\n    \tUsername       string     `json:\"username\"`\n    \tPassword       string     `json:\"password\"`\n    \tEmail          string     `json:\"email\"`\n    \tRole           string     `json:\"role\"`\n    \tLastSignedInAt *time.Time `json:\"lastLogin\"`\n    \tCreatedAt      *time.Time `json:\"createdAt\"`\n    \tUpdatedAt      *time.Time `json:\"lastUpdated\"`\n    \tActive         bool       `json:\"active\"`\n    }\n\nThis basically matches the columns in my DB. However, upon login, I only return the name, email and role as part of the login response payload. I include the Id in the JWT token claims, but otherwise some of the data is really for internal only use.\n\nNow, I know I can use the omit option or - option for not returning keys without values, etc.. that's fine. What I am hoping though, is that I can use the same structure to store (or retrieve) data from the DB as well. I am using Postgresql, pgx, and for retrieving data, the pgxscan library to scan in to the structure.\n\nWhat I want to avoid is the old school Java DAO and DTO process.. where by we had to essentially copy the same data from one object to another... I want to \"pass thru\" the struct instance that is un-marshaled from say a request that includes JSON to the DB code so that it can write the struct to the DB.. or vice versa.. on a GET or GET ALL, it scans into a struct like above, and can then just \"null out\" some of the properties that shouldn't go back as part of the response.\n\nI think this is doable.. but more so.. is it \"good Go code\" to do this.. or is it frowned upon. Still a noob with Go, so I want to avoid building this, then have some expert Go dev come in one day and be like WTF is this crap.. bad bad code. \n\nThanks Go pros.", "author_fullname": "t2_5fvsqpks", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Use single struct for both API payload and DB?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ietxlo", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.78, "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598171997.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey all,&lt;/p&gt;\n\n&lt;p&gt;So I am building my API payload struct (to match my json schema which I use for OpenAPI definition). So think of a typical User:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type User struct {\n    Id             *uuid.UUID `json:&amp;quot;id&amp;quot;`\n    Name           string     `json:&amp;quot;name&amp;quot;`\n    Username       string     `json:&amp;quot;username&amp;quot;`\n    Password       string     `json:&amp;quot;password&amp;quot;`\n    Email          string     `json:&amp;quot;email&amp;quot;`\n    Role           string     `json:&amp;quot;role&amp;quot;`\n    LastSignedInAt *time.Time `json:&amp;quot;lastLogin&amp;quot;`\n    CreatedAt      *time.Time `json:&amp;quot;createdAt&amp;quot;`\n    UpdatedAt      *time.Time `json:&amp;quot;lastUpdated&amp;quot;`\n    Active         bool       `json:&amp;quot;active&amp;quot;`\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This basically matches the columns in my DB. However, upon login, I only return the name, email and role as part of the login response payload. I include the Id in the JWT token claims, but otherwise some of the data is really for internal only use.&lt;/p&gt;\n\n&lt;p&gt;Now, I know I can use the omit option or - option for not returning keys without values, etc.. that&amp;#39;s fine. What I am hoping though, is that I can use the same structure to store (or retrieve) data from the DB as well. I am using Postgresql, pgx, and for retrieving data, the pgxscan library to scan in to the structure.&lt;/p&gt;\n\n&lt;p&gt;What I want to avoid is the old school Java DAO and DTO process.. where by we had to essentially copy the same data from one object to another... I want to &amp;quot;pass thru&amp;quot; the struct instance that is un-marshaled from say a request that includes JSON to the DB code so that it can write the struct to the DB.. or vice versa.. on a GET or GET ALL, it scans into a struct like above, and can then just &amp;quot;null out&amp;quot; some of the properties that shouldn&amp;#39;t go back as part of the response.&lt;/p&gt;\n\n&lt;p&gt;I think this is doable.. but more so.. is it &amp;quot;good Go code&amp;quot; to do this.. or is it frowned upon. Still a noob with Go, so I want to avoid building this, then have some expert Go dev come in one day and be like WTF is this crap.. bad bad code. &lt;/p&gt;\n\n&lt;p&gt;Thanks Go pros.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ietxlo", "is_robot_indexable": true, "report_reasons": null, "author": "codeordieforaliving", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/ietxlo/use_single_struct_for_both_api_payload_and_db/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/ietxlo/use_single_struct_for_both_api_payload_and_db/", "subreddit_subscribers": 123102, "created_utc": 1598143197.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "    package main\n    \n    import (\n    \t\"fmt\"\n    )\n    \n    func main() {\n    \tvar framerate float32 = 1/24\n    \n    \ttemp := fmt.Sprintf(\"%.6f\", framerate)\n    \n    \tfmt.Println(temp)\n    }\n\nWhy does this code print `0.000000`?", "author_fullname": "t2_nloj51k", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Float prints 0.0000", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ieywov", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598195474.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    &amp;quot;fmt&amp;quot;\n)\n\nfunc main() {\n    var framerate float32 = 1/24\n\n    temp := fmt.Sprintf(&amp;quot;%.6f&amp;quot;, framerate)\n\n    fmt.Println(temp)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Why does this code print &lt;code&gt;0.000000&lt;/code&gt;?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ieywov", "is_robot_indexable": true, "report_reasons": null, "author": "Jeff-with-a-ph", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/ieywov/float_prints_00000/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/ieywov/float_prints_00000/", "subreddit_subscribers": 123102, "created_utc": 1598166674.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "so i have a web socket server\n\nevery one in the front end should see a dot in his mouse position &amp; other \"players \" dots\n\nthe problem is how to know which is which\n\nand how to send data to all players to update position ..\n\ni am using the [golang.org/x/net/websocket](https://golang.org/x/net/websocket)  \nedit : also how do i know when someone new connects to the websocket   \n", "author_fullname": "t2_4c0rphct", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "how many clients are connected to the websocket server ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_if2ko5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.33, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1598187177.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598215614.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;so i have a web socket server&lt;/p&gt;\n\n&lt;p&gt;every one in the front end should see a dot in his mouse position &amp;amp; other &amp;quot;players &amp;quot; dots&lt;/p&gt;\n\n&lt;p&gt;the problem is how to know which is which&lt;/p&gt;\n\n&lt;p&gt;and how to send data to all players to update position ..&lt;/p&gt;\n\n&lt;p&gt;i am using the &lt;a href=\"https://golang.org/x/net/websocket\"&gt;golang.org/x/net/websocket&lt;/a&gt;&lt;br/&gt;\nedit : also how do i know when someone new connects to the websocket   &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "if2ko5", "is_robot_indexable": true, "report_reasons": null, "author": "younlok", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/if2ko5/how_many_clients_are_connected_to_the_websocket/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/if2ko5/how_many_clients_are_connected_to_the_websocket/", "subreddit_subscribers": 123102, "created_utc": 1598186814.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_slnayyl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Minimalistic package to scan CSV rows into struct types", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_if1ghy", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1598210100.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "pkg.go.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://pkg.go.dev/github.com/artyom/csvstruct", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "if1ghy", "is_robot_indexable": true, "report_reasons": null, "author": "AwkwardAddress", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/if1ghy/minimalistic_package_to_scan_csv_rows_into_struct/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://pkg.go.dev/github.com/artyom/csvstruct", "subreddit_subscribers": 123102, "created_utc": 1598181300.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey Gophers,\n\nI have a question which is a bit more theoretical:\n\nAt work we have a fine piece of Software which does a lot with data (no surprise so far). Lately I got a Client Library for another piece of Software to which we want to send data via the client. And here comes my question:\n\n&amp;#x200B;\n\nThe client would like to have a Logger in its Constructor (sure as an Interface with two methods). Should a client library use a logger and if so, how should it do?\n\nA:  Should it receive the logger from the using service (this means the already existing logger should support the interface which is not in our case) ?\n\nB: Should we totally skip logging in the client library and just return errors ?\n\nC: Should the client define its own logger and only be configured with LogLevel and Output ?\n\n&amp;#x200B;\n\nThanks in advance for all your answers\n\ncheers Jan", "author_fullname": "t2_53jbt0m", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Client with Logger or without?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_if0alh", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598203393.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey Gophers,&lt;/p&gt;\n\n&lt;p&gt;I have a question which is a bit more theoretical:&lt;/p&gt;\n\n&lt;p&gt;At work we have a fine piece of Software which does a lot with data (no surprise so far). Lately I got a Client Library for another piece of Software to which we want to send data via the client. And here comes my question:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;The client would like to have a Logger in its Constructor (sure as an Interface with two methods). Should a client library use a logger and if so, how should it do?&lt;/p&gt;\n\n&lt;p&gt;A:  Should it receive the logger from the using service (this means the already existing logger should support the interface which is not in our case) ?&lt;/p&gt;\n\n&lt;p&gt;B: Should we totally skip logging in the client library and just return errors ?&lt;/p&gt;\n\n&lt;p&gt;C: Should the client define its own logger and only be configured with LogLevel and Output ?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance for all your answers&lt;/p&gt;\n\n&lt;p&gt;cheers Jan&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "if0alh", "is_robot_indexable": true, "report_reasons": null, "author": "jphein", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/if0alh/client_with_logger_or_without/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/if0alh/client_with_logger_or_without/", "subreddit_subscribers": 123102, "created_utc": 1598174593.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am trying to build golang as a static library for my C project using CGO. Everthing is fine so far, But I am having a problem passing C function to golang function as a parameter. I am not sure whether am I doing it correctly, or it is prohibited to do so?\n\nin golang file\n\n    //export go_example_callback\n    func go_example_callback(pfoo unsafe.Pointer, p1 C.int) {\n        foo := (*func(C.int))(pfoo)\n    \n        // call the c function pointer\n        (*foo)(5)\n    \n        // would also love to store pfoo as global variables to use it in anywhere\n    }\n\nand then build as a static library using this command below:\n\n    go build -o awesome.dylib -buildmode=c-shared awesome.go\n\nlink the static library in my C project, and then trying to use go\\_example\\_callback\n\nin my C project \n\n    void pfoo(int x) {\n        printf(x);\n    }\n    int main(void) {\n        go_example_callback(&amp;pfoo, 5);\n        // expect printing 5 in the console, but I am getting error instead\n    }\n\nIt will be nice if I am able to call C function in golang through this way.  Is it possible to do so? If yes, how shld I do it correctly? Many thanks for the help!", "author_fullname": "t2_12asxd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "CGO problem: C call go function, and passing c function pointer as the parameter", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_if0a10", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1598174787.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598203309.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am trying to build golang as a static library for my C project using CGO. Everthing is fine so far, But I am having a problem passing C function to golang function as a parameter. I am not sure whether am I doing it correctly, or it is prohibited to do so?&lt;/p&gt;\n\n&lt;p&gt;in golang file&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;//export go_example_callback\nfunc go_example_callback(pfoo unsafe.Pointer, p1 C.int) {\n    foo := (*func(C.int))(pfoo)\n\n    // call the c function pointer\n    (*foo)(5)\n\n    // would also love to store pfoo as global variables to use it in anywhere\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then build as a static library using this command below:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;go build -o awesome.dylib -buildmode=c-shared awesome.go\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;link the static library in my C project, and then trying to use go_example_callback&lt;/p&gt;\n\n&lt;p&gt;in my C project &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;void pfoo(int x) {\n    printf(x);\n}\nint main(void) {\n    go_example_callback(&amp;amp;pfoo, 5);\n    // expect printing 5 in the console, but I am getting error instead\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It will be nice if I am able to call C function in golang through this way.  Is it possible to do so? If yes, how shld I do it correctly? Many thanks for the help!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "if0a10", "is_robot_indexable": true, "report_reasons": null, "author": "MonkeyD-IchiJou", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/if0a10/cgo_problem_c_call_go_function_and_passing_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/if0a10/cgo_problem_c_call_go_function_and_passing_c/", "subreddit_subscribers": 123102, "created_utc": 1598174509.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi, I've recently started working with opentelemetry to instrument go application, which makes the functions really big as there is a lot of logic related to instrumentation(adding events/attributes/starting/finishing spans/traces). I wonder if there is a good design pattern/template for instrumenting code outside of the method's logic or somehow the size of the functions small?", "author_fullname": "t2_1ug1w57x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How do you organize the instrumentation code?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iek9wx", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598138491.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I&amp;#39;ve recently started working with opentelemetry to instrument go application, which makes the functions really big as there is a lot of logic related to instrumentation(adding events/attributes/starting/finishing spans/traces). I wonder if there is a good design pattern/template for instrumenting code outside of the method&amp;#39;s logic or somehow the size of the functions small?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iek9wx", "is_robot_indexable": true, "report_reasons": null, "author": "nikoren1980", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iek9wx/how_do_you_organize_the_instrumentation_code/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/iek9wx/how_do_you_organize_the_instrumentation_code/", "subreddit_subscribers": 123102, "created_utc": 1598109691.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi All,\n\nJust want to present this tool called [sharef](https://github.com/emiraganov/sharef), maybe someone find it useful also\\*\\*.\\*\\* It is command line tool that allows sharing p2p files over [WebRTC.](https://WebRTC.It) It is totally written in GO. Although there are some similar approaches, I just wanted to make tool more feature rich and easier to use. For me, it helps to move things around easier specially in some complex cloud setups. It is in some early stage. I have some more ideas around it, but we will see.\n\nAny feedback is welcome.", "author_fullname": "t2_7c46xqbk", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Sharef", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iep395", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.7, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598154440.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi All,&lt;/p&gt;\n\n&lt;p&gt;Just want to present this tool called &lt;a href=\"https://github.com/emiraganov/sharef\"&gt;sharef&lt;/a&gt;, maybe someone find it useful also**.** It is command line tool that allows sharing p2p files over &lt;a href=\"https://WebRTC.It\"&gt;WebRTC.&lt;/a&gt; It is totally written in GO. Although there are some similar approaches, I just wanted to make tool more feature rich and easier to use. For me, it helps to move things around easier specially in some complex cloud setups. It is in some early stage. I have some more ideas around it, but we will see.&lt;/p&gt;\n\n&lt;p&gt;Any feedback is welcome.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iep395", "is_robot_indexable": true, "report_reasons": null, "author": "emiraganov", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iep395/sharef/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/iep395/sharef/", "subreddit_subscribers": 123102, "created_utc": 1598125640.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_iep395", "before": null}}