{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - May", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_gb7km3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 45, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 45, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1588320346.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gb7km3", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gb7km3/whos_hiring_typescript_developers_may/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/gb7km3/whos_hiring_typescript_developers_may/", "subreddit_subscribers": 39422, "created_utc": 1588291546.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Not sure if my title makes sense, here is my problem:\n\nI have a function that runs multiple functions concurrently, and returns the array of results (ignore the absence of promises in what follows, I'm using coroutines).\n\n    parrallel(() =&gt; 'a', () =&gt; 1, () =&gt; [0, 1, 2]);\n    // Returns ['a', 1, [0, 1, 2]]\n\nAs of now, I'm using the following type declaration that handles calling this function with up to 7 arguments while keeping type-safety:\n\n    type Fn&lt;T&gt; = () =&gt; T;\n    export function parallel&lt;T&gt;(fcts: Fn&lt;T&gt;[]): T[]; \n    export function parallel&lt;T&gt;(fcts: [Fn&lt;T&gt;]): [T]; \n    export function parallel&lt;T, U&gt;(fcts: [Fn&lt;T&gt;, Fn&lt;U&gt;]): [T, U]; \n    export function parallel&lt;T, U, V&gt;(fcts: [Fn&lt;T&gt;, Fn&lt;U&gt;, Fn&lt;V&gt;]): [T, U, V]; \n    export function parallel&lt;T, U, V, W&gt;(fcts: [Fn&lt;T&gt;, Fn&lt;U&gt;, Fn&lt;V&gt;, Fn&lt;W&gt;]): [T, U, V, W]; \n    export function parallel&lt;T, U, V, W, X&gt;(fcts: [Fn&lt;T&gt;, Fn&lt;U&gt;, Fn&lt;V&gt;, Fn&lt;W&gt;, Fn&lt;X&gt;]): [T, U, V, W, X]; \n    export function parallel&lt;T, U, V, W, X, Y&gt;(fcts: [Fn&lt;T&gt;, Fn&lt;U&gt;, Fn&lt;V&gt;, Fn&lt;W&gt;, Fn&lt;X&gt;, Fn&lt;Y&gt;]): [T, U, V, W, X, Y]; \n    export function parallel&lt;T, U, V, W, X, Y, Z&gt;(fcts: [Fn&lt;T&gt;, Fn&lt;U&gt;, Fn&lt;V&gt;, Fn&lt;W&gt;, Fn&lt;X&gt;, Fn&lt;Y&gt;, Fn&lt;Z&gt;]): [T, U, V, W, X, Y, Z];\n\nI did not find any way to find a type declaration that work for any number of arguments, is it even possible ?", "author_fullname": "t2_qo1pt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Return type of a function that takes any number of functions as argument, and return the array of returned values", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_gi84kp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589305457.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Not sure if my title makes sense, here is my problem:&lt;/p&gt;\n\n&lt;p&gt;I have a function that runs multiple functions concurrently, and returns the array of results (ignore the absence of promises in what follows, I&amp;#39;m using coroutines).&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;parrallel(() =&amp;gt; &amp;#39;a&amp;#39;, () =&amp;gt; 1, () =&amp;gt; [0, 1, 2]);\n// Returns [&amp;#39;a&amp;#39;, 1, [0, 1, 2]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As of now, I&amp;#39;m using the following type declaration that handles calling this function with up to 7 arguments while keeping type-safety:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Fn&amp;lt;T&amp;gt; = () =&amp;gt; T;\nexport function parallel&amp;lt;T&amp;gt;(fcts: Fn&amp;lt;T&amp;gt;[]): T[]; \nexport function parallel&amp;lt;T&amp;gt;(fcts: [Fn&amp;lt;T&amp;gt;]): [T]; \nexport function parallel&amp;lt;T, U&amp;gt;(fcts: [Fn&amp;lt;T&amp;gt;, Fn&amp;lt;U&amp;gt;]): [T, U]; \nexport function parallel&amp;lt;T, U, V&amp;gt;(fcts: [Fn&amp;lt;T&amp;gt;, Fn&amp;lt;U&amp;gt;, Fn&amp;lt;V&amp;gt;]): [T, U, V]; \nexport function parallel&amp;lt;T, U, V, W&amp;gt;(fcts: [Fn&amp;lt;T&amp;gt;, Fn&amp;lt;U&amp;gt;, Fn&amp;lt;V&amp;gt;, Fn&amp;lt;W&amp;gt;]): [T, U, V, W]; \nexport function parallel&amp;lt;T, U, V, W, X&amp;gt;(fcts: [Fn&amp;lt;T&amp;gt;, Fn&amp;lt;U&amp;gt;, Fn&amp;lt;V&amp;gt;, Fn&amp;lt;W&amp;gt;, Fn&amp;lt;X&amp;gt;]): [T, U, V, W, X]; \nexport function parallel&amp;lt;T, U, V, W, X, Y&amp;gt;(fcts: [Fn&amp;lt;T&amp;gt;, Fn&amp;lt;U&amp;gt;, Fn&amp;lt;V&amp;gt;, Fn&amp;lt;W&amp;gt;, Fn&amp;lt;X&amp;gt;, Fn&amp;lt;Y&amp;gt;]): [T, U, V, W, X, Y]; \nexport function parallel&amp;lt;T, U, V, W, X, Y, Z&amp;gt;(fcts: [Fn&amp;lt;T&amp;gt;, Fn&amp;lt;U&amp;gt;, Fn&amp;lt;V&amp;gt;, Fn&amp;lt;W&amp;gt;, Fn&amp;lt;X&amp;gt;, Fn&amp;lt;Y&amp;gt;, Fn&amp;lt;Z&amp;gt;]): [T, U, V, W, X, Y, Z];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I did not find any way to find a type declaration that work for any number of arguments, is it even possible ?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gi84kp", "is_robot_indexable": true, "report_reasons": null, "author": "guigui_", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gi84kp/return_type_of_a_function_that_takes_any_number/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/gi84kp/return_type_of_a_function_that_takes_any_number/", "subreddit_subscribers": 39422, "created_utc": 1589276657.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_47bn4c86", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Get a better grip on TS at JSNation, the largest remote JavaScript conf", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 93, "hide_score": true, "name": "t3_giau0e", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/k1NZQtM98XOuOuVoAokHqZIR49A5uKP_NIocFDHZl9Y.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1589317496.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "sfree.life", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/N4qYkj5mxMDmoV6O855Y-tSUXkJJzNNiNnGGI2O5buA.jpg?auto=webp&amp;s=6bb8f04176a34bd34eebcddf0920fdb4034fa87e", "width": 1500, "height": 1001}, "resolutions": [{"url": "https://external-preview.redd.it/N4qYkj5mxMDmoV6O855Y-tSUXkJJzNNiNnGGI2O5buA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=519748bbcbbe75028b469112454c25027b4a17ce", "width": 108, "height": 72}, {"url": "https://external-preview.redd.it/N4qYkj5mxMDmoV6O855Y-tSUXkJJzNNiNnGGI2O5buA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=0322833d43daabeefed1754bd6e0d93bc115271b", "width": 216, "height": 144}, {"url": "https://external-preview.redd.it/N4qYkj5mxMDmoV6O855Y-tSUXkJJzNNiNnGGI2O5buA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=aacf3d4e39e6d1a912364d6bbd16ea268c6a0d61", "width": 320, "height": 213}, {"url": "https://external-preview.redd.it/N4qYkj5mxMDmoV6O855Y-tSUXkJJzNNiNnGGI2O5buA.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=4be77c7cfb8201a79d449d7817bcca7a47185a68", "width": 640, "height": 427}, {"url": "https://external-preview.redd.it/N4qYkj5mxMDmoV6O855Y-tSUXkJJzNNiNnGGI2O5buA.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=914e2cf22f7b8683c07de1a87dce9e67da4140fd", "width": 960, "height": 640}, {"url": "https://external-preview.redd.it/N4qYkj5mxMDmoV6O855Y-tSUXkJJzNNiNnGGI2O5buA.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=49b437680761bb4b27e9f1ad342ee82e9a5e6252", "width": 1080, "height": 720}], "variants": {}, "id": "mAfxbz15-bs3lfHlmdaxLwKo9zjeTybOtFT0ih2g1vw"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "giau0e", "is_robot_indexable": true, "report_reasons": null, "author": "strvd", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/giau0e/get_a_better_grip_on_ts_at_jsnation_the_largest/", "parent_whitelist_status": null, "stickied": false, "url": "https://sfree.life/jsnation-javascript-live-conference-2020-free/", "subreddit_subscribers": 39422, "created_utc": 1589288696.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_4f3ep", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Polymorphic TypeScript - Function overloading with rest parameters", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_gi7ljb", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": true, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589302851.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "tane.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gi7ljb", "is_robot_indexable": true, "report_reasons": null, "author": "tanepiper", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gi7ljb/polymorphic_typescript_function_overloading_with/", "parent_whitelist_status": null, "stickied": false, "url": "https://tane.dev/2020/05/polymorphic-typescript-function-overloading-with-rest-parameters/", "subreddit_subscribers": 39422, "created_utc": 1589274051.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_1hv1u00l", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Prototope - TailwindCSS-inspired CSS-in-JS library", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_gi5zen", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/H22AWaFTU7ylHW34Drj-akPvDBwahj-P1Ula_710E9A.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1589295129.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/8Kv0tcOGHFZ64j4LSI7f0OyjUBzYe1VDbATUnfCh8QQ.jpg?auto=webp&amp;s=98130b1b5939fef35b7927ef01fa105424118e7d", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/8Kv0tcOGHFZ64j4LSI7f0OyjUBzYe1VDbATUnfCh8QQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=bbe4ccf15cb90e60d542340c183968f5eb53a949", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/8Kv0tcOGHFZ64j4LSI7f0OyjUBzYe1VDbATUnfCh8QQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a137d35aae4b7df22082db576a8de94cf5b807b4", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/8Kv0tcOGHFZ64j4LSI7f0OyjUBzYe1VDbATUnfCh8QQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=5ea18a36d8f4f054c469e8e1e709ad2447f8a096", "width": 320, "height": 320}], "variants": {}, "id": "ISxTdoeDkNizbGhd4aO6qa2bl8LaRkgBwtSeT3EkGzw"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gi5zen", "is_robot_indexable": true, "report_reasons": null, "author": "areknawo", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gi5zen/prototope_tailwindcssinspired_cssinjs_library/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/Isotope-js/isotope/tree/master/packages/prototope", "subreddit_subscribers": 39422, "created_utc": 1589266329.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Why did the typescript programmers add this complexity to the language?In my opinion, being able to declare a function like\n\n`const func = ({arg1: string, arg2: number}) =&gt; {}`\n\nis way cleaner and more intuitive, so why would they make it the default that to declare a functions argument types you would have to do something like\n\n`const func = ({arg1, arg2} : {arg1: string, arg2: number}) =&gt; {}`", "author_fullname": "t2_ey63e", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Whats the benefit of declaring a functions argument types as ({arg1, arg2} : {arg1: string, arg2: number}) rather than just ({arg1: string, arg2: number})", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ghwggh", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 19, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 19, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589259935.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Why did the typescript programmers add this complexity to the language?In my opinion, being able to declare a function like&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const func = ({arg1: string, arg2: number}) =&amp;gt; {}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;is way cleaner and more intuitive, so why would they make it the default that to declare a functions argument types you would have to do something like&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const func = ({arg1, arg2} : {arg1: string, arg2: number}) =&amp;gt; {}&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ghwggh", "is_robot_indexable": true, "report_reasons": null, "author": "samgermain", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ghwggh/whats_the_benefit_of_declaring_a_functions/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ghwggh/whats_the_benefit_of_declaring_a_functions/", "subreddit_subscribers": 39422, "created_utc": 1589231135.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm well aware that there are many mocking libraries out there, but I went ahead and created another one (for use with jest): [https://lusito.github.io/mockzilla/](https://lusito.github.io/mockzilla/)\n\nMy main focus was to be able to easily write and verify mocks of a deeply nested API like the webextensions browser object.\n\nIn webextensions you would have code like this one:\n\n    browser.webRequest.onBeforeRedirect.addListener(callback, filter);\n\nBut you don't have access to an actual implementation of this API, which is why some libraries already didn't work for my use-case. Other libraries would require a lot of typing and I loathe that.\n\nWith [mockzilla](https://lusito.github.io/mockzilla), I can now just write a simple line like this:\n\n    mockBrowser.webRequest.onBeforeRedirect.addListener.expect(listener, expect.anything());\n\nThis contains types for auto-completion and type-safety. It is auto-verified, so no need to call verify() at the end of a test.\n\nAnother possibility is to assimilate an actual instance to become partially ~~borg~~ mock:\n\n    const myInstance = new MyClass();\n    const mock = mockAssimilate(myInstance, \"myInstance\", {\n        mock: [\"runA\"],\n        whitelist: [\"run\", \"someProp\"],\n    });\n    mock.runA.expect(expect.anything(), true).andReturn(true);\n\nmockAssimilate works with types as well, even on private methods.\n\nThere are a few more things included. Take a look at the documentation.\n\nI am still working on the API design, looking for some feedback and ideas.", "author_fullname": "t2_odw52y5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "mockzilla: Yet another mocking library for TypeScript and jest.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ghv6q5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589255849.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m well aware that there are many mocking libraries out there, but I went ahead and created another one (for use with jest): &lt;a href=\"https://lusito.github.io/mockzilla/\"&gt;https://lusito.github.io/mockzilla/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;My main focus was to be able to easily write and verify mocks of a deeply nested API like the webextensions browser object.&lt;/p&gt;\n\n&lt;p&gt;In webextensions you would have code like this one:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;browser.webRequest.onBeforeRedirect.addListener(callback, filter);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But you don&amp;#39;t have access to an actual implementation of this API, which is why some libraries already didn&amp;#39;t work for my use-case. Other libraries would require a lot of typing and I loathe that.&lt;/p&gt;\n\n&lt;p&gt;With &lt;a href=\"https://lusito.github.io/mockzilla\"&gt;mockzilla&lt;/a&gt;, I can now just write a simple line like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;mockBrowser.webRequest.onBeforeRedirect.addListener.expect(listener, expect.anything());\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This contains types for auto-completion and type-safety. It is auto-verified, so no need to call verify() at the end of a test.&lt;/p&gt;\n\n&lt;p&gt;Another possibility is to assimilate an actual instance to become partially &lt;del&gt;borg&lt;/del&gt; mock:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const myInstance = new MyClass();\nconst mock = mockAssimilate(myInstance, &amp;quot;myInstance&amp;quot;, {\n    mock: [&amp;quot;runA&amp;quot;],\n    whitelist: [&amp;quot;run&amp;quot;, &amp;quot;someProp&amp;quot;],\n});\nmock.runA.expect(expect.anything(), true).andReturn(true);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;mockAssimilate works with types as well, even on private methods.&lt;/p&gt;\n\n&lt;p&gt;There are a few more things included. Take a look at the documentation.&lt;/p&gt;\n\n&lt;p&gt;I am still working on the API design, looking for some feedback and ideas.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ghv6q5", "is_robot_indexable": true, "report_reasons": null, "author": "Lus1to", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ghv6q5/mockzilla_yet_another_mocking_library_for/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ghv6q5/mockzilla_yet_another_mocking_library_for/", "subreddit_subscribers": 39422, "created_utc": 1589227049.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_4cpeq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Castellated: An Adaptable, Robust Password Storage System for Node.js", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ghx52r", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589262166.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "wumpus-cave.net", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ghx52r", "is_robot_indexable": true, "report_reasons": null, "author": "frezik", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ghx52r/castellated_an_adaptable_robust_password_storage/", "parent_whitelist_status": null, "stickied": false, "url": "http://www.wumpus-cave.net/2020/05/11/castellated-an-adaptable-robust-password-storage-system-for-node-js/", "subreddit_subscribers": 39422, "created_utc": 1589233366.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I've been using utility types like [Pick](https://www.typescriptlang.org/docs/handbook/utility-types.html#picktk) and [Omit](https://www.typescriptlang.org/docs/handbook/utility-types.html#omittk) for some time now to reduce type repetition. I just stumbled across a scenario that struck me as odd though and would appreciate some explanation.\n\nSay I have an interface like so:\n\n    interface ComponentState {\n       user?: User;\n       loading: boolean;\n       error: Error | null;\n    }\n\nAnd then I want to define a discriminated union that references properties from that interface:\n\n    type ComponentActionTypes = \n    | {\n        type: ComponentActions.SET_USER,\n        payload: Pick&lt;ComponentState, 'user'&gt; //I would expect User | undefined\n      }\n    | {\n       type: ComponentActions.SET_LOADING,\n       payload: Pick&lt;ComponentState, 'loading'&gt; //I would expect boolean\n      }\n    | {\n       type: ComponentActions.SET_ERROR,\n       payload: Pick&lt;ComponentState, 'error'&gt; //I would expect Error | null\n      }\n\nI would expect the `payload` in each of the above `ComponentActionTypes` scenarios to conform to whatever the property type is for the `ComponentState` interface but the compiler interprets each of the payloads as objects with a key being that of the respective interface property and the value being the respective type. So the `payload` for `ComponentActionTypes` type `ComponentActions.SET_USER` is actually\n\n    { user: User | undefined } //I want action.payload to be User | undefined\n\nClearly I misunderstood how `Pick` works. Any suggestions on how I can achieve what I'm after without having to just replicate each of the types defined in the `ComponentState` interface?\n\n&amp;#x200B;\n\nMuch appreciated", "author_fullname": "t2_157yy4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Question about the Pick utility type", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ghwpyr", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589260858.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been using utility types like &lt;a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#picktk\"&gt;Pick&lt;/a&gt; and &lt;a href=\"https://www.typescriptlang.org/docs/handbook/utility-types.html#omittk\"&gt;Omit&lt;/a&gt; for some time now to reduce type repetition. I just stumbled across a scenario that struck me as odd though and would appreciate some explanation.&lt;/p&gt;\n\n&lt;p&gt;Say I have an interface like so:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface ComponentState {\n   user?: User;\n   loading: boolean;\n   error: Error | null;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then I want to define a discriminated union that references properties from that interface:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type ComponentActionTypes = \n| {\n    type: ComponentActions.SET_USER,\n    payload: Pick&amp;lt;ComponentState, &amp;#39;user&amp;#39;&amp;gt; //I would expect User | undefined\n  }\n| {\n   type: ComponentActions.SET_LOADING,\n   payload: Pick&amp;lt;ComponentState, &amp;#39;loading&amp;#39;&amp;gt; //I would expect boolean\n  }\n| {\n   type: ComponentActions.SET_ERROR,\n   payload: Pick&amp;lt;ComponentState, &amp;#39;error&amp;#39;&amp;gt; //I would expect Error | null\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I would expect the &lt;code&gt;payload&lt;/code&gt; in each of the above &lt;code&gt;ComponentActionTypes&lt;/code&gt; scenarios to conform to whatever the property type is for the &lt;code&gt;ComponentState&lt;/code&gt; interface but the compiler interprets each of the payloads as objects with a key being that of the respective interface property and the value being the respective type. So the &lt;code&gt;payload&lt;/code&gt; for &lt;code&gt;ComponentActionTypes&lt;/code&gt; type &lt;code&gt;ComponentActions.SET_USER&lt;/code&gt; is actually&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{ user: User | undefined } //I want action.payload to be User | undefined\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Clearly I misunderstood how &lt;code&gt;Pick&lt;/code&gt; works. Any suggestions on how I can achieve what I&amp;#39;m after without having to just replicate each of the types defined in the &lt;code&gt;ComponentState&lt;/code&gt; interface?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Much appreciated&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ghwpyr", "is_robot_indexable": true, "report_reasons": null, "author": "trblackwell1221", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ghwpyr/question_about_the_pick_utility_type/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ghwpyr/question_about_the_pick_utility_type/", "subreddit_subscribers": 39422, "created_utc": 1589232058.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have type:\n\n\\`\\`\\`ts  \ninterface INameType {  \n   name: string;  \n   typeId: number  \n   ...\n\n}\n\n\\`\\`\\`\n\nAnd I want to have a second type which takes all of the first interface properties but makes the ones I specify optional, like: \n\n\\`\\`\\`ts  \ninterface INameType {  \n   name: string;  \n   typeId?: number  \n   ...\n\n}\n\n\\`\\`\\`  \nHow can I accomplish this? Thank you", "author_fullname": "t2_eid4zjs", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Make a defined interface property optional", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ghwcjb", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589259569.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have type:&lt;/p&gt;\n\n&lt;p&gt;```ts&lt;br/&gt;\ninterface INameType {&lt;br/&gt;\n   name: string;&lt;br/&gt;\n   typeId: number&lt;br/&gt;\n   ...&lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;p&gt;And I want to have a second type which takes all of the first interface properties but makes the ones I specify optional, like: &lt;/p&gt;\n\n&lt;p&gt;```ts&lt;br/&gt;\ninterface INameType {&lt;br/&gt;\n   name: string;&lt;br/&gt;\n   typeId?: number&lt;br/&gt;\n   ...&lt;/p&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;```&lt;br/&gt;\nHow can I accomplish this? Thank you&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ghwcjb", "is_robot_indexable": true, "report_reasons": null, "author": "Mo_The_Legend", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ghwcjb/make_a_defined_interface_property_optional/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ghwcjb/make_a_defined_interface_property_optional/", "subreddit_subscribers": 39422, "created_utc": 1589230769.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_1zmgo", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "TypeScript alias for asserting value type for keyof", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_ghx4tg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/r7DnLEDsxQ48z-vBc7oXtcMJmMshWS8mO8IjKUEqA0U.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1589262145.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "stackoverflow.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/QgPvRTknlY3rMNDqH1k4I37XGiq9tZF_FsygC_Xht4o.jpg?auto=webp&amp;s=8cd5e918e2bde6ca72d4445d6fc007f203689799", "width": 316, "height": 316}, "resolutions": [{"url": "https://external-preview.redd.it/QgPvRTknlY3rMNDqH1k4I37XGiq9tZF_FsygC_Xht4o.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=b1c8a90e5690a7186afdb269ad05279551994d09", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/QgPvRTknlY3rMNDqH1k4I37XGiq9tZF_FsygC_Xht4o.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=533bd055cdae7998d1b8f9cd9d7dedabc1715bda", "width": 216, "height": 216}], "variants": {}, "id": "nfayPavSUB5ngYv6-19UHNBThsXfcLIDQl4HkEe3Cv0"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ghx4tg", "is_robot_indexable": true, "report_reasons": null, "author": "electricessence", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ghx4tg/typescript_alias_for_asserting_value_type_for/", "parent_whitelist_status": null, "stickied": false, "url": "https://stackoverflow.com/questions/61739893/typescript-alias-for-asserting-value-type-for-keyof", "subreddit_subscribers": 39422, "created_utc": 1589233345.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_ghx4tg", "before": null}}