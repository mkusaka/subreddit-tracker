{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - April", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_fsojx3", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 32, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 32, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1585728331.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsojx3", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fsojx3/whos_hiring_typescript_developers_april/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/fsojx3/whos_hiring_typescript_developers_april/", "subreddit_subscribers": 37785, "created_utc": 1585699531.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_kgt2q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Intro to Game development with Typescript and PixieJS", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 132, "hide_score": false, "name": "t3_g1j93n", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 37, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 37, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/OwkNTlyxMRYFtxmsRWpfzyZ_hzuCzLNlNbHXL-QZIOw.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1586946423.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "nosleepjavascript.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/iqrfIVgSz70FQ7yulVNVpBl-x1SICP2xflMpS1Ebnb4.jpg?auto=webp&amp;s=1a87b3d6c83b5d2cf0251265e56f8f32bbb07382", "width": 800, "height": 758}, "resolutions": [{"url": "https://external-preview.redd.it/iqrfIVgSz70FQ7yulVNVpBl-x1SICP2xflMpS1Ebnb4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=73fe2ab7cece436335164aa9e6fa8d634a6a28a5", "width": 108, "height": 102}, {"url": "https://external-preview.redd.it/iqrfIVgSz70FQ7yulVNVpBl-x1SICP2xflMpS1Ebnb4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=9f2ce99856fdd2d4f996811f2cbe4d17e6c63211", "width": 216, "height": 204}, {"url": "https://external-preview.redd.it/iqrfIVgSz70FQ7yulVNVpBl-x1SICP2xflMpS1Ebnb4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7eab272c7dc54652fe3b2ce327995c719334ed63", "width": 320, "height": 303}, {"url": "https://external-preview.redd.it/iqrfIVgSz70FQ7yulVNVpBl-x1SICP2xflMpS1Ebnb4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=91d2f3ce03ba44b77b6d5c1200eb4f2724bfa542", "width": 640, "height": 606}], "variants": {}, "id": "2jlPg752sUq4Xmqoa0YYw5MeT2ZxMfrmyu7bv9WlucA"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g1j93n", "is_robot_indexable": true, "report_reasons": null, "author": "franleplant", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g1j93n/intro_to_game_development_with_typescript_and/", "parent_whitelist_status": null, "stickied": false, "url": "https://nosleepjavascript.com/intro-to-gamedev/", "subreddit_subscribers": 37785, "created_utc": 1586917623.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi everyone, I'm playing a bit with `reflect-metatada` but something that's annoying me a lot is all the `any's` that are in the type definitions. For example:\n\n    const value = Reflect.getMetadata('key', Object)\n\nHow do we know `key` is a valid metadata key? And `value` would be any, what if it could be also `undefined`?\n\nI'm not saying that TypeScript should be automatically able to infer which `keys` and `values` are valid metadata in `Object` (even tho that'd be great) but at least, I think we should be able to do something like:\n\n    interface UserMetadata {\n      name: string;\n      age: number;\n    }\n    \n    const name = Reflect.getMetadata&lt;UserMetadata&gt;('name', Object);  // name is recognized as a valid key and is a string\n    const age = Reflect.getMetadata&lt;UserMetadata&gt;('age', Object);  // age is recognized as a valid key an is a number\n    const firstName = Reflect.getMetadata&lt;UserMetadata&gt;('firstName', Object);  // It complains because firstName is not a a valid key\n\nOr am I missing something and this is possible? So far, I tried to improve the default typings for `getMetadata` but even tho I got the `key` validation part right, it's still returning `any`.\n\n    function getMetadata&lt;T, K extends keyof T = keyof T&gt;(metadataKey: K, target: Object): T[K];\n\nWhat do you think?", "author_fullname": "t2_u4rdv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Opinions on strongly typed Reflect.getMetadata or better practices", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": true, "name": "t3_g1rlcf", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586984957.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone, I&amp;#39;m playing a bit with &lt;code&gt;reflect-metatada&lt;/code&gt; but something that&amp;#39;s annoying me a lot is all the &lt;code&gt;any&amp;#39;s&lt;/code&gt; that are in the type definitions. For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const value = Reflect.getMetadata(&amp;#39;key&amp;#39;, Object)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How do we know &lt;code&gt;key&lt;/code&gt; is a valid metadata key? And &lt;code&gt;value&lt;/code&gt; would be any, what if it could be also &lt;code&gt;undefined&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not saying that TypeScript should be automatically able to infer which &lt;code&gt;keys&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; are valid metadata in &lt;code&gt;Object&lt;/code&gt; (even tho that&amp;#39;d be great) but at least, I think we should be able to do something like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface UserMetadata {\n  name: string;\n  age: number;\n}\n\nconst name = Reflect.getMetadata&amp;lt;UserMetadata&amp;gt;(&amp;#39;name&amp;#39;, Object);  // name is recognized as a valid key and is a string\nconst age = Reflect.getMetadata&amp;lt;UserMetadata&amp;gt;(&amp;#39;age&amp;#39;, Object);  // age is recognized as a valid key an is a number\nconst firstName = Reflect.getMetadata&amp;lt;UserMetadata&amp;gt;(&amp;#39;firstName&amp;#39;, Object);  // It complains because firstName is not a a valid key\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or am I missing something and this is possible? So far, I tried to improve the default typings for &lt;code&gt;getMetadata&lt;/code&gt; but even tho I got the &lt;code&gt;key&lt;/code&gt; validation part right, it&amp;#39;s still returning &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function getMetadata&amp;lt;T, K extends keyof T = keyof T&amp;gt;(metadataKey: K, target: Object): T[K];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What do you think?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g1rlcf", "is_robot_indexable": true, "report_reasons": null, "author": "larsbs", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g1rlcf/opinions_on_strongly_typed_reflectgetmetadata_or/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g1rlcf/opinions_on_strongly_typed_reflectgetmetadata_or/", "subreddit_subscribers": 37785, "created_utc": 1586956157.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Having not felt like I've settled on an approach I like yet, I'm curious how other people organize their projects in regard to their type definitions.\n\nEdit: by 'global' I meant more like 'common' or 'shared' or whatever. Bad Ben, Bad!", "author_fullname": "t2_4m6huris", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "People who import their (global) types, where do you put them?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g165mn", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 19, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 19, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1586885178.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586902085.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Having not felt like I&amp;#39;ve settled on an approach I like yet, I&amp;#39;m curious how other people organize their projects in regard to their type definitions.&lt;/p&gt;\n\n&lt;p&gt;Edit: by &amp;#39;global&amp;#39; I meant more like &amp;#39;common&amp;#39; or &amp;#39;shared&amp;#39; or whatever. Bad Ben, Bad!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g165mn", "is_robot_indexable": true, "report_reasons": null, "author": "WhyNotBen_com", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g165mn/people_who_import_their_global_types_where_do_you/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g165mn/people_who_import_their_global_types_where_do_you/", "subreddit_subscribers": 37785, "created_utc": 1586873285.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I recently wanted to make sure that an array of strings contained all the strings of a string union.\n\nI found a simple way, but when attempting to generalize the pattern, I came across some behaviour I cannot explain. Perhaps someone has an idea? (disclaimer: I may be missing something obvious)\n\n&amp;#x200B;\n\n    type UnionEquality&lt;A, B&gt; = A extends B ? (B extends A ? true : never) : never;\n    type Foo = UnionEquality&lt;\"foo\" | \"bar\", \"foo\"&gt;; // true\n    type Foo2 = \"foo\" extends \"foo\" | \"bar\" ? (\"foo\" | \"bar\" extends \"foo\" ? true : never) : never; // never\n\nI'd expect \\`Foo\\` and \\`Foo2\\` to evaluate to the same type (`never`), since one is just an expansion of the other.", "author_fullname": "t2_9ixfe9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Conditional types change behaviour if under type alias", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g14n1c", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1586867649.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586896159.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I recently wanted to make sure that an array of strings contained all the strings of a string union.&lt;/p&gt;\n\n&lt;p&gt;I found a simple way, but when attempting to generalize the pattern, I came across some behaviour I cannot explain. Perhaps someone has an idea? (disclaimer: I may be missing something obvious)&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type UnionEquality&amp;lt;A, B&amp;gt; = A extends B ? (B extends A ? true : never) : never;\ntype Foo = UnionEquality&amp;lt;&amp;quot;foo&amp;quot; | &amp;quot;bar&amp;quot;, &amp;quot;foo&amp;quot;&amp;gt;; // true\ntype Foo2 = &amp;quot;foo&amp;quot; extends &amp;quot;foo&amp;quot; | &amp;quot;bar&amp;quot; ? (&amp;quot;foo&amp;quot; | &amp;quot;bar&amp;quot; extends &amp;quot;foo&amp;quot; ? true : never) : never; // never\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;d expect `Foo` and `Foo2` to evaluate to the same type (&lt;code&gt;never&lt;/code&gt;), since one is just an expansion of the other.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g14n1c", "is_robot_indexable": true, "report_reasons": null, "author": "adamschoenemann", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g14n1c/conditional_types_change_behaviour_if_under_type/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g14n1c/conditional_types_change_behaviour_if_under_type/", "subreddit_subscribers": 37785, "created_utc": 1586867359.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "[https://github.com/deepkit/deepkit](https://github.com/deepkit/deepkit)\n\nProduct page: [https://deepkit.ai/](https://deepkit.ai/)\n\nIt's a machine learning platform for experiment tracking, execution, and debugging. The GUI is a real-time interface with native-like desktop interface which means all data is streamed using reactive RPC APIs via websockets. There's no REST or polling involved.\n\nAdditional new TS open-source byproducts that were created specifically for this product and might be of interest to you:\n\n* [Marshal.ts](https://github.com/marcj/marshal.ts) \\- The fastest universal Typescript data serializer and validator incl. Mongo-ORM abstraction\n* [Glut.ts](https://github.com/marcj/glut.ts) \\- A reactive real-time client-server framework with distributed entity/file abstraction, distributed data exchange, and automatic entity syncing, based on RxJs and websockets\n* [angular-desktop-ui](https://github.com/marcj/angular-desktop-ui) \\- A GUI library for native-like GUI widget based on Angular 9+\n* [npm-local-development](https://github.com/marcj/npm-local-development) A \\`npm link\\` alternative that actually works with complex setups.\n* [typedoc-plugin-lerna-packages](https://github.com/marcj/typedoc-plugin-lerna-packages) \\- TS auto doc generator for lerna packages\n\nSome notes:\n\n* Package management with Lerna\n* oclif for cli (with custom build), Angular 9+ for GUI, Electron 8+, custom client-server framework using Glut.ts, Mongo DB\n* Development time roughly 1.5 year (80h/week, total EUR \\~450k), a single developer (for the main product + those OSS libs)\n* multi component build based on classic Makefile and webpack\n\nI post it here to give people the opportunity to look how such a complex product is organised, that it is possible to write something like that in TS as a solo developer, and to ask questions about the development process and the like.", "author_fullname": "t2_fgly0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Open-sourced a complex desktop application written entirely in Typescript: Server, cli, native-like frontend", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g0ri8q", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 80, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 80, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1586890833.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1586840350.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/deepkit/deepkit\"&gt;https://github.com/deepkit/deepkit&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Product page: &lt;a href=\"https://deepkit.ai/\"&gt;https://deepkit.ai/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s a machine learning platform for experiment tracking, execution, and debugging. The GUI is a real-time interface with native-like desktop interface which means all data is streamed using reactive RPC APIs via websockets. There&amp;#39;s no REST or polling involved.&lt;/p&gt;\n\n&lt;p&gt;Additional new TS open-source byproducts that were created specifically for this product and might be of interest to you:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/marcj/marshal.ts\"&gt;Marshal.ts&lt;/a&gt; - The fastest universal Typescript data serializer and validator incl. Mongo-ORM abstraction&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/marcj/glut.ts\"&gt;Glut.ts&lt;/a&gt; - A reactive real-time client-server framework with distributed entity/file abstraction, distributed data exchange, and automatic entity syncing, based on RxJs and websockets&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/marcj/angular-desktop-ui\"&gt;angular-desktop-ui&lt;/a&gt; - A GUI library for native-like GUI widget based on Angular 9+&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/marcj/npm-local-development\"&gt;npm-local-development&lt;/a&gt; A `npm link` alternative that actually works with complex setups.&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/marcj/typedoc-plugin-lerna-packages\"&gt;typedoc-plugin-lerna-packages&lt;/a&gt; - TS auto doc generator for lerna packages&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Some notes:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Package management with Lerna&lt;/li&gt;\n&lt;li&gt;oclif for cli (with custom build), Angular 9+ for GUI, Electron 8+, custom client-server framework using Glut.ts, Mongo DB&lt;/li&gt;\n&lt;li&gt;Development time roughly 1.5 year (80h/week, total EUR ~450k), a single developer (for the main product + those OSS libs)&lt;/li&gt;\n&lt;li&gt;multi component build based on classic Makefile and webpack&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I post it here to give people the opportunity to look how such a complex product is organised, that it is possible to write something like that in TS as a solo developer, and to ask questions about the development process and the like.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/aWn5iNFSNVcHP_RRLXPsHy_P_YhGUXyZ8c7ii-265Bw.jpg?auto=webp&amp;s=a0543b8f438470674c7d2586c2fe2cc9d518eec4", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/aWn5iNFSNVcHP_RRLXPsHy_P_YhGUXyZ8c7ii-265Bw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=01f388acd265b1acc05d19e00a7fe3c19ee50b14", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/aWn5iNFSNVcHP_RRLXPsHy_P_YhGUXyZ8c7ii-265Bw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f65dcdc17e4983872b9490a2cd92cfdd380ea642", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/aWn5iNFSNVcHP_RRLXPsHy_P_YhGUXyZ8c7ii-265Bw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3970cfdfd304ad6c91a99bede032b81b8e77d5e3", "width": 320, "height": 320}], "variants": {}, "id": "Qdgy9cpJYQew4TPjAaY5RZJCjMFiDjJFkzU43bUFTNo"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g0ri8q", "is_robot_indexable": true, "report_reasons": null, "author": "marcjschmidt", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g0ri8q/opensourced_a_complex_desktop_application_written/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g0ri8q/opensourced_a_complex_desktop_application_written/", "subreddit_subscribers": 37785, "created_utc": 1586811550.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Is it possible to have a type-hinted object initializer inside a constructor on a parent class? Ex:\n```\nclass Model {\n    modelField: string;\n    constructor(initializer: SomeSpecialType){\n        Object.assign(this, initializer);\n    }\n}\n\nclass User extends Model{\n    email: string;\n}\n\nconst user = new User({\n    email: '...' // only get type hints for the email property\n})\n```\n\nI know it is possible using a static method:\n\n```\nclass Model{\n    someField: string;\n    static new&lt;T extends Model&gt;(this: new() =&gt; T, data: Omit&lt;T, keyof Model&gt;) {\n        return Object.assign(new this, data);\n    }\n}\n\nconst user = User.new({\n    email: 'some email'\n})\n```\n\nI tried to use the same parameters inside the constructor but TS is telling me that the `this` keyword cannot be used in a `constructor` not generics can be used there.", "author_fullname": "t2_3iyu8buj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Type-hinted object initializer in parent constructor?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g13okd", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586891756.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is it possible to have a type-hinted object initializer inside a constructor on a parent class? Ex:\n```\nclass Model {\n    modelField: string;\n    constructor(initializer: SomeSpecialType){\n        Object.assign(this, initializer);\n    }\n}&lt;/p&gt;\n\n&lt;p&gt;class User extends Model{\n    email: string;\n}&lt;/p&gt;\n\n&lt;p&gt;const user = new User({\n    email: &amp;#39;...&amp;#39; // only get type hints for the email property\n})\n```&lt;/p&gt;\n\n&lt;p&gt;I know it is possible using a static method:&lt;/p&gt;\n\n&lt;p&gt;```\nclass Model{\n    someField: string;\n    static new&amp;lt;T extends Model&amp;gt;(this: new() =&amp;gt; T, data: Omit&amp;lt;T, keyof Model&amp;gt;) {\n        return Object.assign(new this, data);\n    }\n}&lt;/p&gt;\n\n&lt;p&gt;const user = User.new({\n    email: &amp;#39;some email&amp;#39;\n})\n```&lt;/p&gt;\n\n&lt;p&gt;I tried to use the same parameters inside the constructor but TS is telling me that the &lt;code&gt;this&lt;/code&gt; keyword cannot be used in a &lt;code&gt;constructor&lt;/code&gt; not generics can be used there.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g13okd", "is_robot_indexable": true, "report_reasons": null, "author": "IonelLupu", "discussion_type": null, "num_comments": 18, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g13okd/typehinted_object_initializer_in_parent/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g13okd/typehinted_object_initializer_in_parent/", "subreddit_subscribers": 37785, "created_utc": 1586862956.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I (or rather, a library I'm using) have a lot of interfaces for various options where a lot is optional.\n\n```\ninterface Options {\n  a?: number;\n  b?: number;\n  c?: number;\n}\n```\n\nI create objects of the options I'm going to use, but also need to refer to these myself. I want the type checking when making the object, but after that I don't want things I've not specified to be available, or things I _have_ specified to be possibly undefined, like here:\n\n```\nconst o: Options = { a: 1 } // Good: Object is type checked\no.a.toFixed(0)              // Bad: `a` is possibly undefined\n```\n\nCould just skip the type, but then there's no type checking of the options:\n\n```\nconst o = { a: 1, d: 2 } // Bad: `d` isn't an option\no.a.toFixed(0)           // Good: `a` is defined\n```\n\nSo, I created a helper function:\n\n```\nconst createOptions = &lt;O extends Options&gt;(options: O): O =&gt; options\nconst o = createOptions({ a: 1 }) // Good: Object is type checked\no.a.toFixed(0)                    // Good: `a` is defined\n```\n\nThis works, but having to create a function like this for every option type is getting annoying and messy. Is it possible to create a single generic helper function for this?\n\n---\n\nMy first newb attempt was the following, but here Typescript requires me to supply _2_ types, rather than just the _1_ (`Options`) that should be necessary.\n\n```\nconst create = &lt;T, U extends T&gt;(obj: U): U =&gt; obj\nconst o = create&lt;Options&gt;({ a: 1 }) // Bad: Typescript wants me to specify U\n```\n\nHow can I write this identity function so I only need to specify `T`, and have Typescript infer `U` itself from the object I pass in?\n\n\n[Playground Link](https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgPIAczAPYgM7IDeAsAFDLJwD8AXMiAK4C2ARtANxkUu33NtRO5ZAl6NW0MgF8yZAPRzkAITgATOgAVsePMBYAbAJ7IGIVRBigIqsglx4wybAAY6GLPeQBeIpToBGZBlSFwA6OFCwbAAxYAAPawAKZwBKWVIFZTU6ADlsZDBDdBQEAAsIBABrUABzW3tHbECfQj9kQOCm8MiY+KTU9MyAcWxsVQByYDxSuiUGRxAIawL8hCgIOEgnRacYAvK8FBhsKGQIADdoY0Li+vxHNY3Idxx8b2QAHlQzuMgzAhe9gAfIlsJhXng3Ck3N4gU5wfY7g4nAAmd6PTYQQH4RKtOABIJpEIo7pRWIJVTJInyRQqdTIABKEAAjgxgOsCEwUFFkHhighgDBjGibhA8EiHutMe8PgAVAA0yAAqj8-qoCLKQdgWAArOhK6HK2FOXUSpwAZnRUsgXwR+BBeIJUhSQmw5tJvQpVLIQA)", "author_fullname": "t2_fh4zp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Utility function to fix type widening?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g10np6", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1586849781.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586875918.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I (or rather, a library I&amp;#39;m using) have a lot of interfaces for various options where a lot is optional.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\ninterface Options {\n  a?: number;\n  b?: number;\n  c?: number;\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I create objects of the options I&amp;#39;m going to use, but also need to refer to these myself. I want the type checking when making the object, but after that I don&amp;#39;t want things I&amp;#39;ve not specified to be available, or things I &lt;em&gt;have&lt;/em&gt; specified to be possibly undefined, like here:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nconst o: Options = { a: 1 } // Good: Object is type checked\no.a.toFixed(0)              // Bad: `a` is possibly undefined\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Could just skip the type, but then there&amp;#39;s no type checking of the options:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nconst o = { a: 1, d: 2 } // Bad: `d` isn&amp;#39;t an option\no.a.toFixed(0)           // Good: `a` is defined\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;So, I created a helper function:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nconst createOptions = &amp;lt;O extends Options&amp;gt;(options: O): O =&amp;gt; options\nconst o = createOptions({ a: 1 }) // Good: Object is type checked\no.a.toFixed(0)                    // Good: `a` is defined\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This works, but having to create a function like this for every option type is getting annoying and messy. Is it possible to create a single generic helper function for this?&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;My first newb attempt was the following, but here Typescript requires me to supply &lt;em&gt;2&lt;/em&gt; types, rather than just the &lt;em&gt;1&lt;/em&gt; (&lt;code&gt;Options&lt;/code&gt;) that should be necessary.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nconst create = &amp;lt;T, U extends T&amp;gt;(obj: U): U =&amp;gt; obj\nconst o = create&amp;lt;Options&amp;gt;({ a: 1 }) // Bad: Typescript wants me to specify U\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;How can I write this identity function so I only need to specify &lt;code&gt;T&lt;/code&gt;, and have Typescript infer &lt;code&gt;U&lt;/code&gt; itself from the object I pass in?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.typescriptlang.org/play/#code/JYOwLgpgTgZghgYwgAgPIAczAPYgM7IDeAsAFDLJwD8AXMiAK4C2ARtANxkUu33NtRO5ZAl6NW0MgF8yZAPRzkAITgATOgAVsePMBYAbAJ7IGIVRBigIqsglx4wybAAY6GLPeQBeIpToBGZBlSFwA6OFCwbAAxYAAPawAKZwBKWVIFZTU6ADlsZDBDdBQEAAsIBABrUABzW3tHbECfQj9kQOCm8MiY+KTU9MyAcWxsVQByYDxSuiUGRxAIawL8hCgIOEgnRacYAvK8FBhsKGQIADdoY0Li+vxHNY3Idxx8b2QAHlQzuMgzAhe9gAfIlsJhXng3Ck3N4gU5wfY7g4nAAmd6PTYQQH4RKtOABIJpEIo7pRWIJVTJInyRQqdTIABKEAAjgxgOsCEwUFFkHhighgDBjGibhA8EiHutMe8PgAVAA0yAAqj8-qoCLKQdgWAArOhK6HK2FOXUSpwAZnRUsgXwR+BBeIJUhSQmw5tJvQpVLIQA\"&gt;Playground Link&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g10np6", "is_robot_indexable": true, "report_reasons": null, "author": "svish", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g10np6/utility_function_to_fix_type_widening/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g10np6/utility_function_to_fix_type_widening/", "subreddit_subscribers": 37785, "created_utc": 1586847118.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "does all my logic, classes, async/await code stay and work the same? Im just concerned that some of the stuff I wrote in javascript may not work in ts.\n\nthanks!!", "author_fullname": "t2_5od7pdpj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "migrating code from javascript", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g0zyqv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586872538.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;does all my logic, classes, async/await code stay and work the same? Im just concerned that some of the stuff I wrote in javascript may not work in ts.&lt;/p&gt;\n\n&lt;p&gt;thanks!!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g0zyqv", "is_robot_indexable": true, "report_reasons": null, "author": "UnableComplaint", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g0zyqv/migrating_code_from_javascript/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g0zyqv/migrating_code_from_javascript/", "subreddit_subscribers": 37785, "created_utc": 1586843738.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_3g9dj8rk", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Are Tests Necessary in TypeScript?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_g0qpxe", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/TdmmHWkF7U--mjsRbD4hJzgWr2lIBnS__5fNGThb-0s.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1586837773.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "executeprogram.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/IXtciCVw0laIIBALUuQ377B7-h08mnZ1cjGbV21OaM4.jpg?auto=webp&amp;s=17110cd38caaeab57e7f700d02e57c05ede45cda", "width": 500, "height": 500}, "resolutions": [{"url": "https://external-preview.redd.it/IXtciCVw0laIIBALUuQ377B7-h08mnZ1cjGbV21OaM4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=658918c0b2570a04a48f80cd2cbea3585e6ef526", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/IXtciCVw0laIIBALUuQ377B7-h08mnZ1cjGbV21OaM4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d8023b1c94929c676f43ac96dd9c4abcb5e17a63", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/IXtciCVw0laIIBALUuQ377B7-h08mnZ1cjGbV21OaM4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a88d75c577ae2a2093758446ddcfcfa8799c16d6", "width": 320, "height": 320}], "variants": {}, "id": "PCjeZ0d4udugndTpM_AhJIISOdK_sID70PQNCrC2ae8"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g0qpxe", "is_robot_indexable": true, "report_reasons": null, "author": "HetRadicaleBoven", "discussion_type": null, "num_comments": 18, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g0qpxe/are_tests_necessary_in_typescript/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.executeprogram.com/blog/are-tests-necessary-in-typescript", "subreddit_subscribers": 37785, "created_utc": 1586808973.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I could do \n```\nconst test = &lt;ILalamove&gt;partners[claimedPartner];\nconst riderInfos = await test.GetDriver(claimedJob.id,\n                                        claimedJob.riderId,\n                                        job.isTest,\n                                    );\n```\nBut not\n```\nconst riderInfos = await &lt;ILalamove&gt;partners[claimedPartner].GetDriver(claimedJob.id,\n                                        claimedJob.riderId,\n                                        job.isTest,\n                                    );\n```\nnor\n```\nconst riderInfos = await partners[claimedPartner] as &lt;ILalamove&gt; \n                  .GetDriver(claimedJob.id,claimedJob.riderId,job.isTest,);\n```\nDo we have better way to do this casting?\n\nThanks", "author_fullname": "t2_39a8ltwl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Typescript type cast", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g0ldya", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586821351.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I could do \n&lt;code&gt;\nconst test = &amp;lt;ILalamove&amp;gt;partners[claimedPartner];\nconst riderInfos = await test.GetDriver(claimedJob.id,\n                                        claimedJob.riderId,\n                                        job.isTest,\n                                    );\n&lt;/code&gt;\nBut not\n&lt;code&gt;\nconst riderInfos = await &amp;lt;ILalamove&amp;gt;partners[claimedPartner].GetDriver(claimedJob.id,\n                                        claimedJob.riderId,\n                                        job.isTest,\n                                    );\n&lt;/code&gt;\nnor\n&lt;code&gt;\nconst riderInfos = await partners[claimedPartner] as &amp;lt;ILalamove&amp;gt; \n                  .GetDriver(claimedJob.id,claimedJob.riderId,job.isTest,);\n&lt;/code&gt;\nDo we have better way to do this casting?&lt;/p&gt;\n\n&lt;p&gt;Thanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g0ldya", "is_robot_indexable": true, "report_reasons": null, "author": "GreatFireWallSucks", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g0ldya/typescript_type_cast/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g0ldya/typescript_type_cast/", "subreddit_subscribers": 37785, "created_utc": 1586792551.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_g0ldya", "before": null}}