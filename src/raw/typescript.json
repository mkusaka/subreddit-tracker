{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - August", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i1ikj5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 30, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 30, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596269158.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i1ikj5", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 2, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i1ikj5/whos_hiring_typescript_developers_august/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/i1ikj5/whos_hiring_typescript_developers_august/", "subreddit_subscribers": 47047, "created_utc": 1596240358.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Back from my rabbit hole\u2014here the verdict with 7 benchmarks and a tl;dr:\n\n[https://github.com/TypeStrong/ts-loader/issues/1157#issuecomment-680674236](https://github.com/TypeStrong/ts-loader/issues/1157#issuecomment-680674236)", "author_fullname": "t2_2x0723cu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[benchmark + verdict] webpack+ts-loader vs tsc+webpack w/project references", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_igti2j", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1598423376.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1598450665.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Back from my rabbit hole\u2014here the verdict with 7 benchmarks and a tl;dr:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/TypeStrong/ts-loader/issues/1157#issuecomment-680674236\"&gt;https://github.com/TypeStrong/ts-loader/issues/1157#issuecomment-680674236&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?auto=webp&amp;s=17734cd6fa93478bb284fae285130f029d734ea7", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=bb4d0d8072529abc0d6cb4af16ac0271906cf7bd", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d80a1812bf60a021606ad898b32ea2f1f7c99b8c", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2b73bb7cc8ef7386f1cfadd440ccf8ff4280b17a", "width": 320, "height": 320}], "variants": {}, "id": "SfX3HjxvFlAXfWHGyMzTDTsWmdDCxtfJp3oo1BMvj0Q"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "igti2j", "is_robot_indexable": true, "report_reasons": null, "author": "desmap", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/igti2j/benchmark_verdict_webpacktsloader_vs_tscwebpack/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/igti2j/benchmark_verdict_webpacktsloader_vs_tscwebpack/", "subreddit_subscribers": 47047, "created_utc": 1598421865.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "In my project there are \"converter\" types, which convert between two specific other types (`A` and `B`):\n\n    type Converter&lt;A, B&gt; = {\n      convertAtoB(value: A): B;\n      convertBtoA(value: B): A;\n    }\n\nThey are easy to type when A and B are specified manually, like `Converter&lt;string, number&gt;`. However, I want them to be inferred. My working attempt looks like this:\n\n    function converter&lt;A, B&gt;(data: Converter&lt;A, B&gt;) {\n      return data;\n    }\n    \n    var test = converter({\n      convertAtoB: (x: string) =&gt; x, // this one returns a string...\n      convertBtoA: (x: number) =&gt; x.toString() // and this accepts a number\n    })\n\nThe error is correctly shown in the above example (type \"string\" is not assignable to \"number\"). So far it's working.\n\nBut now I want to define an object containing multiple such converters, and still make it impossible to write incorrect implementations, like this:\n\n    var myConverters = converters({\n      stringAndNumber: {\n        convertAtoB: (x: string) =&gt; x, \n        convertBtoA: (x: number) =&gt; x.toString() // should error as above\n      },\n      booleanAndString: {\n        convertAtoB: (x: boolean) =&gt; x.toString(),\n        convertBtoA: (x: string) =&gt; x === 'true' ? true : false\n      }\n    })\n\nHow do I write that `converters` function, so that TypeScript reports errors just like with the singular `converter` function? I don't think I can accept A and B generic arguments in it, because every \"child\" converter has its own A and B.\n\nThanks!", "author_fullname": "t2_sss3a", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Inferring mutually dependent function types?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_igux0f", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1598430374.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598458166.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In my project there are &amp;quot;converter&amp;quot; types, which convert between two specific other types (&lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Converter&amp;lt;A, B&amp;gt; = {\n  convertAtoB(value: A): B;\n  convertBtoA(value: B): A;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;They are easy to type when A and B are specified manually, like &lt;code&gt;Converter&amp;lt;string, number&amp;gt;&lt;/code&gt;. However, I want them to be inferred. My working attempt looks like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function converter&amp;lt;A, B&amp;gt;(data: Converter&amp;lt;A, B&amp;gt;) {\n  return data;\n}\n\nvar test = converter({\n  convertAtoB: (x: string) =&amp;gt; x, // this one returns a string...\n  convertBtoA: (x: number) =&amp;gt; x.toString() // and this accepts a number\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The error is correctly shown in the above example (type &amp;quot;string&amp;quot; is not assignable to &amp;quot;number&amp;quot;). So far it&amp;#39;s working.&lt;/p&gt;\n\n&lt;p&gt;But now I want to define an object containing multiple such converters, and still make it impossible to write incorrect implementations, like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var myConverters = converters({\n  stringAndNumber: {\n    convertAtoB: (x: string) =&amp;gt; x, \n    convertBtoA: (x: number) =&amp;gt; x.toString() // should error as above\n  },\n  booleanAndString: {\n    convertAtoB: (x: boolean) =&amp;gt; x.toString(),\n    convertBtoA: (x: string) =&amp;gt; x === &amp;#39;true&amp;#39; ? true : false\n  }\n})\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How do I write that &lt;code&gt;converters&lt;/code&gt; function, so that TypeScript reports errors just like with the singular &lt;code&gt;converter&lt;/code&gt; function? I don&amp;#39;t think I can accept A and B generic arguments in it, because every &amp;quot;child&amp;quot; converter has its own A and B.&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "igux0f", "is_robot_indexable": true, "report_reasons": null, "author": "smthamazing", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/igux0f/inferring_mutually_dependent_function_types/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/igux0f/inferring_mutually_dependent_function_types/", "subreddit_subscribers": 47047, "created_utc": 1598429366.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "So, I have modals that take / have different typings...so, when I try to generically type them, I get errors.. any assistance?\n\n    type Notification = {\n      id: number;\n      title: string;\n      close: boolean;\n    }\n    \n    export type Notifications = {\n      notifications: {\n        [NOTIFICATION_ONE]: boolean;\n        [NOTIFICATION_TWO]: Notification\n     }\n    };\n\nand my error is here, in an action file\n\n     setNotificationState: (state, action) =&gt; {\n        const { key, value } = action.payload;\n        state.notifications[key] = value; &lt;-- error on this line\n     }\n      // ERROR IS:\n      TS7053: Element implicitly has an 'any' type because expression of type 'any' \n    can't be used to index type '{ notificationOne: boolean; notificationTwo: { it: number; title: string; close:boolean }; }'.\n\n&amp;#x200B;", "author_fullname": "t2_9303mz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "TS issue with dynamic key setting and varying values", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_igsy64", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1598419435.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598447998.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So, I have modals that take / have different typings...so, when I try to generically type them, I get errors.. any assistance?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Notification = {\n  id: number;\n  title: string;\n  close: boolean;\n}\n\nexport type Notifications = {\n  notifications: {\n    [NOTIFICATION_ONE]: boolean;\n    [NOTIFICATION_TWO]: Notification\n }\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and my error is here, in an action file&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; setNotificationState: (state, action) =&amp;gt; {\n    const { key, value } = action.payload;\n    state.notifications[key] = value; &amp;lt;-- error on this line\n }\n  // ERROR IS:\n  TS7053: Element implicitly has an &amp;#39;any&amp;#39; type because expression of type &amp;#39;any&amp;#39; \ncan&amp;#39;t be used to index type &amp;#39;{ notificationOne: boolean; notificationTwo: { it: number; title: string; close:boolean }; }&amp;#39;.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "igsy64", "is_robot_indexable": true, "report_reasons": null, "author": "Jamesfromvenice", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/igsy64/ts_issue_with_dynamic_key_setting_and_varying/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/igsy64/ts_issue_with_dynamic_key_setting_and_varying/", "subreddit_subscribers": 47047, "created_utc": 1598419198.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I've written an RPC implementation [Wildcard API](https://github.com/reframejs/wildcard-api) that allows you to define types on the backend and use them on the frontend.\n\nWhat do you think?\n\nIt's using `typeof` to export the endpoint types to the frontend, which enables my users to use backend types on the frontend without any additional compilation step (which API types usually need).", "author_fullname": "t2_4j4j1", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Use your backend types on the frontend", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_igu9w8", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1598440305.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1598454590.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve written an RPC implementation &lt;a href=\"https://github.com/reframejs/wildcard-api\"&gt;Wildcard API&lt;/a&gt; that allows you to define types on the backend and use them on the frontend.&lt;/p&gt;\n\n&lt;p&gt;What do you think?&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s using &lt;code&gt;typeof&lt;/code&gt; to export the endpoint types to the frontend, which enables my users to use backend types on the frontend without any additional compilation step (which API types usually need).&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/Gc5w-fliz0-82s_XsuBkV6vIO5u4yZffBKj71cTuu5U.jpg?auto=webp&amp;s=39724cb67bb602441d7a63d8fb948aef10bffb60", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/Gc5w-fliz0-82s_XsuBkV6vIO5u4yZffBKj71cTuu5U.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c73aeae370284eff3c757fc229fcf1ea913b0a8d", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/Gc5w-fliz0-82s_XsuBkV6vIO5u4yZffBKj71cTuu5U.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=dc4a5bd73bffebdba84439cf7c0652148c30208a", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/Gc5w-fliz0-82s_XsuBkV6vIO5u4yZffBKj71cTuu5U.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=22261f6be4039d1a672b8706a80ce63bb3200426", "width": 320, "height": 320}], "variants": {}, "id": "5hdGtA_-F-AoGqfq0-RdB7h1h9b9qhRBkYnDguGO6Ak"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "igu9w8", "is_robot_indexable": true, "report_reasons": null, "author": "brillout", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/igu9w8/use_your_backend_types_on_the_frontend/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/igu9w8/use_your_backend_types_on_the_frontend/", "subreddit_subscribers": 47047, "created_utc": 1598425790.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The last 24h I tinkered around with both and came to following conclusion, feedback is welcome:\n\n||webpack+ts-loader|tsc+webpack|\n|-|-|-|\n|transpileOnly|**only in not referenced files**|no| \n|paralllel TS transpilations|**only in not referenced files**|no|\n|parallel webpack bundling|**yes**|**yes**|\n|fork-ts-checker|not sure[3]|no|\n|one less dependency|no|**yes**|\n|100% project ref compatibility, now and in future|no|**yes**|\n|no multi bundlings|**yes**|no[4]|\n\n*[3] couldn't get it to work and ts-fork-checker has severe perf issues with project references reported by multiple people https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/issues/463 and https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/issues/453*\n\n*[4] you can avoid them with setting a aggregateDelay of 750ms but that's not a real solution*", "author_fullname": "t2_2x0723cu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[result] webpack+ts-loader vs tsc+webpack comparison (context: TS project references)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_igdn86", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1598385334.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1598395852.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The last 24h I tinkered around with both and came to following conclusion, feedback is welcome:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;&lt;/th&gt;\n&lt;th&gt;webpack+ts-loader&lt;/th&gt;\n&lt;th&gt;tsc+webpack&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;transpileOnly&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;only in not referenced files&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;no&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;paralllel TS transpilations&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;only in not referenced files&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;no&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;parallel webpack bundling&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;yes&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;yes&lt;/strong&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;fork-ts-checker&lt;/td&gt;\n&lt;td&gt;not sure[3]&lt;/td&gt;\n&lt;td&gt;no&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;one less dependency&lt;/td&gt;\n&lt;td&gt;no&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;yes&lt;/strong&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;100% project ref compatibility, now and in future&lt;/td&gt;\n&lt;td&gt;no&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;yes&lt;/strong&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;no multi bundlings&lt;/td&gt;\n&lt;td&gt;&lt;strong&gt;yes&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;no[4]&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;&lt;em&gt;[3] couldn&amp;#39;t get it to work and ts-fork-checker has severe perf issues with project references reported by multiple people &lt;a href=\"https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/issues/463\"&gt;https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/issues/463&lt;/a&gt; and &lt;a href=\"https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/issues/453\"&gt;https://github.com/TypeStrong/fork-ts-checker-webpack-plugin/issues/453&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;[4] you can avoid them with setting a aggregateDelay of 750ms but that&amp;#39;s not a real solution&lt;/em&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?auto=webp&amp;s=17734cd6fa93478bb284fae285130f029d734ea7", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=bb4d0d8072529abc0d6cb4af16ac0271906cf7bd", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d80a1812bf60a021606ad898b32ea2f1f7c99b8c", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2b73bb7cc8ef7386f1cfadd440ccf8ff4280b17a", "width": 320, "height": 320}], "variants": {}, "id": "SfX3HjxvFlAXfWHGyMzTDTsWmdDCxtfJp3oo1BMvj0Q"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "igdn86", "is_robot_indexable": true, "report_reasons": null, "author": "desmap", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/igdn86/result_webpacktsloader_vs_tscwebpack_comparison/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/igdn86/result_webpacktsloader_vs_tscwebpack_comparison/", "subreddit_subscribers": 47047, "created_utc": 1598367052.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have the following types (simplified):\n\n```\nexport type AnyInput = string | Type1 | Type2;\n\nexport interface Model&lt;T extends AnyInput = AnyInput&gt; {\n  defaultInput: T;\n  toType2: (defaultColor: T) =&gt; Type2;\n  fromType2: (type2: Type2) =&gt; T;\n}\n```\n\nBasically my app will take input in a few forms, and for easy manipulation of the data, I use `Model` to define an object that bundles some of the data manipulators together.\n\nUnfortunately it seems that the \"or\"'s in `AnyInput` aren't working as expected.\n\n```\nfunction stringToType2(defaultColor: string) { ... }\n\nconst model: Model&lt;string&gt; = {\n    toType2: stringToType2,\n};\n\nconst withModel = (model: Model): ((props: BaseProps) =&gt; JSX.Element) =&gt; { ... };\n\nconst foo = withModel(model);\n```\n\nThis results in the following error on `foo(model)`:\n\n```\nTS2345: Argument of type 'Model&lt;string&gt;' is not assignable to parameter of type 'Model&lt;AnyInput&gt;'.\n  Types of property 'toType2' are incompatible.\n    Type '(defaultInput: string) =&gt; Type2' is not assignable to type '(defaultInput: AnyInput) =&gt; Type2'.\n      Types of parameters 'defaultInput' and 'defaultInput' are incompatible.\n        Type 'AnyInput' is not assignable to type 'string'.\n          Type 'Type2' is not assignable to type 'string'.\n```\n\nI can't figure out why '(defaultInput: string) =&gt; Type2' is not assigned able to '(defaultInput: AnyInput) =&gt; Type2'. `string` is in `AnyInput`. This should be fine. There's no reason to try to assign `Type2` to `string`. It's an **OR** (`|`), `Type2` doesn't have to be assignable, only one of the types in `AnyInput` does.", "author_fullname": "t2_4901d0yx", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Object of increased specificity not valid for generic interface", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_igfxa7", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1598377047.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598402936.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have the following types (simplified):&lt;/p&gt;\n\n&lt;p&gt;```\nexport type AnyInput = string | Type1 | Type2;&lt;/p&gt;\n\n&lt;p&gt;export interface Model&amp;lt;T extends AnyInput = AnyInput&amp;gt; {\n  defaultInput: T;\n  toType2: (defaultColor: T) =&amp;gt; Type2;\n  fromType2: (type2: Type2) =&amp;gt; T;\n}\n```&lt;/p&gt;\n\n&lt;p&gt;Basically my app will take input in a few forms, and for easy manipulation of the data, I use &lt;code&gt;Model&lt;/code&gt; to define an object that bundles some of the data manipulators together.&lt;/p&gt;\n\n&lt;p&gt;Unfortunately it seems that the &amp;quot;or&amp;quot;&amp;#39;s in &lt;code&gt;AnyInput&lt;/code&gt; aren&amp;#39;t working as expected.&lt;/p&gt;\n\n&lt;p&gt;```\nfunction stringToType2(defaultColor: string) { ... }&lt;/p&gt;\n\n&lt;p&gt;const model: Model&amp;lt;string&amp;gt; = {\n    toType2: stringToType2,\n};&lt;/p&gt;\n\n&lt;p&gt;const withModel = (model: Model): ((props: BaseProps) =&amp;gt; JSX.Element) =&amp;gt; { ... };&lt;/p&gt;\n\n&lt;p&gt;const foo = withModel(model);\n```&lt;/p&gt;\n\n&lt;p&gt;This results in the following error on &lt;code&gt;foo(model)&lt;/code&gt;:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nTS2345: Argument of type &amp;#39;Model&amp;lt;string&amp;gt;&amp;#39; is not assignable to parameter of type &amp;#39;Model&amp;lt;AnyInput&amp;gt;&amp;#39;.\n  Types of property &amp;#39;toType2&amp;#39; are incompatible.\n    Type &amp;#39;(defaultInput: string) =&amp;gt; Type2&amp;#39; is not assignable to type &amp;#39;(defaultInput: AnyInput) =&amp;gt; Type2&amp;#39;.\n      Types of parameters &amp;#39;defaultInput&amp;#39; and &amp;#39;defaultInput&amp;#39; are incompatible.\n        Type &amp;#39;AnyInput&amp;#39; is not assignable to type &amp;#39;string&amp;#39;.\n          Type &amp;#39;Type2&amp;#39; is not assignable to type &amp;#39;string&amp;#39;.\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I can&amp;#39;t figure out why &amp;#39;(defaultInput: string) =&amp;gt; Type2&amp;#39; is not assigned able to &amp;#39;(defaultInput: AnyInput) =&amp;gt; Type2&amp;#39;. &lt;code&gt;string&lt;/code&gt; is in &lt;code&gt;AnyInput&lt;/code&gt;. This should be fine. There&amp;#39;s no reason to try to assign &lt;code&gt;Type2&lt;/code&gt; to &lt;code&gt;string&lt;/code&gt;. It&amp;#39;s an &lt;strong&gt;OR&lt;/strong&gt; (&lt;code&gt;|&lt;/code&gt;), &lt;code&gt;Type2&lt;/code&gt; doesn&amp;#39;t have to be assignable, only one of the types in &lt;code&gt;AnyInput&lt;/code&gt; does.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "igfxa7", "is_robot_indexable": true, "report_reasons": null, "author": "thunfremlinc", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/igfxa7/object_of_increased_specificity_not_valid_for/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/igfxa7/object_of_increased_specificity_not_valid_for/", "subreddit_subscribers": 47047, "created_utc": 1598374136.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi all, been stuck on this for half a day:\n\n    function merge&lt;ExtraKeys, Object&gt;(obj: Object): ExtraKeys &amp; Object {\n      return '' as any // this is obviously dummy code\n    }\n    \n    type Person = { name: string }\n    const bob: Person = { name: 'Bob' }\n\n    // Correct outcome\n    // bobWithAge.age = number\n    // bobWithAge.name = string \n    const bobWithAge = merge&lt;{age: number}, Person&gt;(bob)\n\n    // Actual outcome #1\n    // bobWithAge.name = string \n    // bobWithAge.age = any\n    const bobWithAge = merge(bob)\n\n    // Actual outcome #2\n    // Expected 2 type arguments, got 1\n    // bobWithAge.age = number\n    // bobWithAge.name = any \n    const bobWithAge = merge&lt;{age: number}&gt;(bob)\n\n    // Ideal outcome\n    // bobWithAge.age = number\n    // bobWithAge.name = string \n    const bobWithAge = merge&lt;{age: number}&gt;(bob)\n\nWhat we have here is an example function `merge`, which takes an object and adds additional parameters to its type.\n\nNow the problem is that in #1 where I don't specify anything, the compiler is smart enough to infer that `bob` has a `name`. However it has no idea what bob's age is because it has not received any typing information about age.\n\nIn #2, I specified that the result should have an age. However, it complaints that I cannot leave the second parameter blank. This is even though the compiler has correctly inferred it in #1 and there is sufficient information to figure out what the second generic is.\n\nI want it to look like the Ideal Outcome. Where I only specify the additional generic, but let Typescript infer the second parameter. Is this possible? I've searched for several hours but I can't seem to find a solution for it.", "author_fullname": "t2_qenggvc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Automatically infer Generics if not specified", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_igfogv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1598373882.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598402217.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all, been stuck on this for half a day:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function merge&amp;lt;ExtraKeys, Object&amp;gt;(obj: Object): ExtraKeys &amp;amp; Object {\n  return &amp;#39;&amp;#39; as any // this is obviously dummy code\n}\n\ntype Person = { name: string }\nconst bob: Person = { name: &amp;#39;Bob&amp;#39; }\n\n// Correct outcome\n// bobWithAge.age = number\n// bobWithAge.name = string \nconst bobWithAge = merge&amp;lt;{age: number}, Person&amp;gt;(bob)\n\n// Actual outcome #1\n// bobWithAge.name = string \n// bobWithAge.age = any\nconst bobWithAge = merge(bob)\n\n// Actual outcome #2\n// Expected 2 type arguments, got 1\n// bobWithAge.age = number\n// bobWithAge.name = any \nconst bobWithAge = merge&amp;lt;{age: number}&amp;gt;(bob)\n\n// Ideal outcome\n// bobWithAge.age = number\n// bobWithAge.name = string \nconst bobWithAge = merge&amp;lt;{age: number}&amp;gt;(bob)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What we have here is an example function &lt;code&gt;merge&lt;/code&gt;, which takes an object and adds additional parameters to its type.&lt;/p&gt;\n\n&lt;p&gt;Now the problem is that in #1 where I don&amp;#39;t specify anything, the compiler is smart enough to infer that &lt;code&gt;bob&lt;/code&gt; has a &lt;code&gt;name&lt;/code&gt;. However it has no idea what bob&amp;#39;s age is because it has not received any typing information about age.&lt;/p&gt;\n\n&lt;p&gt;In #2, I specified that the result should have an age. However, it complaints that I cannot leave the second parameter blank. This is even though the compiler has correctly inferred it in #1 and there is sufficient information to figure out what the second generic is.&lt;/p&gt;\n\n&lt;p&gt;I want it to look like the Ideal Outcome. Where I only specify the additional generic, but let Typescript infer the second parameter. Is this possible? I&amp;#39;ve searched for several hours but I can&amp;#39;t seem to find a solution for it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "igfogv", "is_robot_indexable": true, "report_reasons": null, "author": "aelesia-", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/igfogv/automatically_infer_generics_if_not_specified/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/igfogv/automatically_infer_generics_if_not_specified/", "subreddit_subscribers": 47047, "created_utc": 1598373417.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_s37is", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Runtime JSON type checks with Typescript interfaces", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 116, "top_awarded_type": null, "hide_score": false, "name": "t3_ifm356", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 56, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 56, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/WGCCzj8t63LPYjKzdiIMdCXDreAHlUECJpxNsl5rEhI.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1598291710.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/bytecodeagency/runtime-json-type-checks-with-typescript-interfaces-379e8ea81258?sk=489009cb893e8a700956d9e51ff855d7", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/YDKkkyXKomqTrREW-mY75TRBARGJxEXtLfGK89b1H34.jpg?auto=webp&amp;s=0bd41ed4488466cdcc9c1a6d51d82fc606989684", "width": 1200, "height": 1001}, "resolutions": [{"url": "https://external-preview.redd.it/YDKkkyXKomqTrREW-mY75TRBARGJxEXtLfGK89b1H34.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f97dc6fa857ca31cc0ed971fc108e0b23b296091", "width": 108, "height": 90}, {"url": "https://external-preview.redd.it/YDKkkyXKomqTrREW-mY75TRBARGJxEXtLfGK89b1H34.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=92041f0df0b939c0d9d305707da1de9d92b51998", "width": 216, "height": 180}, {"url": "https://external-preview.redd.it/YDKkkyXKomqTrREW-mY75TRBARGJxEXtLfGK89b1H34.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=4cf898dfab418f70598b8c673ccf7fb59f3010eb", "width": 320, "height": 266}, {"url": "https://external-preview.redd.it/YDKkkyXKomqTrREW-mY75TRBARGJxEXtLfGK89b1H34.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=7bdf363b80cb76126a30acf17fab6bfa5fecf6a1", "width": 640, "height": 533}, {"url": "https://external-preview.redd.it/YDKkkyXKomqTrREW-mY75TRBARGJxEXtLfGK89b1H34.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=2db3c75a7b48fe1d4e28179b794d94fba1ec7eb3", "width": 960, "height": 800}, {"url": "https://external-preview.redd.it/YDKkkyXKomqTrREW-mY75TRBARGJxEXtLfGK89b1H34.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=30e8831b2c40e6fafb4e0d886f52ecfee0422edd", "width": 1080, "height": 900}], "variants": {}, "id": "LpInEfuSXavOh8bp3xoU0JLkNVsarGp2yPCGJ3HAl2U"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ifm356", "is_robot_indexable": true, "report_reasons": null, "author": "lucianonooijen", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ifm356/runtime_json_type_checks_with_typescript/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/bytecodeagency/runtime-json-type-checks-with-typescript-interfaces-379e8ea81258?sk=489009cb893e8a700956d9e51ff855d7", "subreddit_subscribers": 47047, "created_utc": 1598262910.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm trying to use React Router 5 path matches to set state. Trouble is something about the index signature is giving problems\n\n    const backgrounds = {\n      '/': nightPlanetBoat,\n      '/portfolio': spaceGasClouds,\n      '/about': spaceGasClouds\n    }\n    \n    function App(props: any) {\n      const [backgroundImage, setBackgroundImage] = useState(nightPlanetBoat);\n    \n      useEffect(() =&gt; {\n        console.log('props.location :&gt;&gt; ', props.location);\n    \n        setBackgroundImage(backgrounds[props.location.pathName as keyof typeof backgrounds]);\n      }, [props.location.pathName]);\n    \n    /*\n    /home/owner/cp/project/src/App.tsx\n    TypeScript error in /home/owner/cp/project/src/App.tsx(46,24):\n    Element implicitly has an 'any' type because expression of type 'string | number | symbol' can't be used to index type '{ '/': string; '/portfolio': string; '/about': string; }'.\n      No index signature with a parameter of type 'string' was found on type '{ '/': string; '/portfolio': string; '/about': string; }'.  TS7053\n    \n        44 |     console.log('props.location :&gt;&gt; ', props.location);\n        45 |     console.log('props.history', props.history)\n      &gt; 46 |     setBackgroundImage(backgrounds[props.location.pathName as keyof typeof backgrounds]);\n           |                        ^\n        47 |   }, [props.location.pathName]);\n        48 | \n        49 |   return (\n    */\n\n**Also tried**\n\n* No type assertion. `as string`. `as const`. None of these fixed the index signature problem", "author_fullname": "t2_3dgvi4uq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Index signature issue when trying to use strings as object keys", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ifzm4u", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1598348954.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598337396.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to use React Router 5 path matches to set state. Trouble is something about the index signature is giving problems&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const backgrounds = {\n  &amp;#39;/&amp;#39;: nightPlanetBoat,\n  &amp;#39;/portfolio&amp;#39;: spaceGasClouds,\n  &amp;#39;/about&amp;#39;: spaceGasClouds\n}\n\nfunction App(props: any) {\n  const [backgroundImage, setBackgroundImage] = useState(nightPlanetBoat);\n\n  useEffect(() =&amp;gt; {\n    console.log(&amp;#39;props.location :&amp;gt;&amp;gt; &amp;#39;, props.location);\n\n    setBackgroundImage(backgrounds[props.location.pathName as keyof typeof backgrounds]);\n  }, [props.location.pathName]);\n\n/*\n/home/owner/cp/project/src/App.tsx\nTypeScript error in /home/owner/cp/project/src/App.tsx(46,24):\nElement implicitly has an &amp;#39;any&amp;#39; type because expression of type &amp;#39;string | number | symbol&amp;#39; can&amp;#39;t be used to index type &amp;#39;{ &amp;#39;/&amp;#39;: string; &amp;#39;/portfolio&amp;#39;: string; &amp;#39;/about&amp;#39;: string; }&amp;#39;.\n  No index signature with a parameter of type &amp;#39;string&amp;#39; was found on type &amp;#39;{ &amp;#39;/&amp;#39;: string; &amp;#39;/portfolio&amp;#39;: string; &amp;#39;/about&amp;#39;: string; }&amp;#39;.  TS7053\n\n    44 |     console.log(&amp;#39;props.location :&amp;gt;&amp;gt; &amp;#39;, props.location);\n    45 |     console.log(&amp;#39;props.history&amp;#39;, props.history)\n  &amp;gt; 46 |     setBackgroundImage(backgrounds[props.location.pathName as keyof typeof backgrounds]);\n       |                        ^\n    47 |   }, [props.location.pathName]);\n    48 | \n    49 |   return (\n*/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Also tried&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;No type assertion. &lt;code&gt;as string&lt;/code&gt;. &lt;code&gt;as const&lt;/code&gt;. None of these fixed the index signature problem&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ifzm4u", "is_robot_indexable": true, "report_reasons": null, "author": "javascript_dev", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ifzm4u/index_signature_issue_when_trying_to_use_strings/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ifzm4u/index_signature_issue_when_trying_to_use_strings/", "subreddit_subscribers": 47047, "created_utc": 1598308596.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Before writing the interface below for a React functiom component, the top function had no matching overload on `OuterContainer` for property `backgroundImage`. The bottom function, returned from the styled method, also had no reference to `props.backgroundImage` either.\n\nSo it really looks like the interface `ExtraContainerProps`, being passed as a type argument to `styled` as it is being invoked, extends the returned object's type definition. Is that what's happening?\n\n    const ContainerStateInjector = (props: any) =&gt; {\n      const [backgroundImage, setBackgroundImage] = useState(nightPlanetBoat);\n    \n      return (\n        &lt;OuterContainer backgroundImage={backgroundImage}&gt;\n          { props.children }\n        &lt;/OuterContainer&gt;\n      )\n    }\n    \n    interface ExtraContainerProps {\n      backgroundImage: string;\n    }\n    \n    const OuterContainer = styled.div&lt;ExtraContainerProps&gt;`\n      background-image: url(${props =&gt; props.backgroundImage});\n      background-position: center;\n\nI haven't used interfaces much in this pattern, I usually use them as annotations or type arguments on function declarations, so this broadens my understanding of their use cases.", "author_fullname": "t2_4w51o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Does passing an interface type argument at the call site extend the shape of the returned object's type?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ifw8o5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598327078.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Before writing the interface below for a React functiom component, the top function had no matching overload on &lt;code&gt;OuterContainer&lt;/code&gt; for property &lt;code&gt;backgroundImage&lt;/code&gt;. The bottom function, returned from the styled method, also had no reference to &lt;code&gt;props.backgroundImage&lt;/code&gt; either.&lt;/p&gt;\n\n&lt;p&gt;So it really looks like the interface &lt;code&gt;ExtraContainerProps&lt;/code&gt;, being passed as a type argument to &lt;code&gt;styled&lt;/code&gt; as it is being invoked, extends the returned object&amp;#39;s type definition. Is that what&amp;#39;s happening?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const ContainerStateInjector = (props: any) =&amp;gt; {\n  const [backgroundImage, setBackgroundImage] = useState(nightPlanetBoat);\n\n  return (\n    &amp;lt;OuterContainer backgroundImage={backgroundImage}&amp;gt;\n      { props.children }\n    &amp;lt;/OuterContainer&amp;gt;\n  )\n}\n\ninterface ExtraContainerProps {\n  backgroundImage: string;\n}\n\nconst OuterContainer = styled.div&amp;lt;ExtraContainerProps&amp;gt;`\n  background-image: url(${props =&amp;gt; props.backgroundImage});\n  background-position: center;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I haven&amp;#39;t used interfaces much in this pattern, I usually use them as annotations or type arguments on function declarations, so this broadens my understanding of their use cases.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ifw8o5", "is_robot_indexable": true, "report_reasons": null, "author": "fpuen", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ifw8o5/does_passing_an_interface_type_argument_at_the/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ifw8o5/does_passing_an_interface_type_argument_at_the/", "subreddit_subscribers": 47047, "created_utc": 1598298278.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_ifw8o5", "before": null}}