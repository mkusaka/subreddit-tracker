{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once. If you want your code reviewed or review other's code, there's a [codereview stackexchange](https://codereview.stackexchange.com/questions/tagged/rust), too. If you need to test your code, maybe [the Rust playground](https://play.rust-lang.org) is for you.\n\nHere are some other venues where help may be found:\n\n[/r/learnrust](https://www.reddit.com/r/learnrust) is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/).\n\nThe official Rust Programming Language Discord: [https://discord.gg/rust-lang](https://discord.gg/rust-lang)\n\nThe unofficial Rust community Discord: [https://bit.ly/rust-community](https://bit.ly/rust-community)\n\nAlso check out [last weeks' thread](https://reddit.com/r/rust/comments/ji8ukt/hey_rustaceans_got_an_easy_question_ask_here/) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nAlso if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hey Rustaceans! Got an easy question? Ask here (45/2020)!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": "easyquestions", "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jmijzu", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.77, "author_flair_background_color": "", "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "\ud83d\ude4b questions", "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604327293.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven&amp;#39;t been written yet.&lt;/p&gt;\n\n&lt;p&gt;If you have a &lt;a href=\"http://stackoverflow.com/\"&gt;StackOverflow&lt;/a&gt; account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it &lt;a href=\"http://stackoverflow.com/questions/tagged/rust\"&gt;the &amp;quot;Rust&amp;quot; tag&lt;/a&gt; for maximum visibility). Note that this site is very interested in question quality. I&amp;#39;ve been asked to read a RFC I authored once. If you want your code reviewed or review other&amp;#39;s code, there&amp;#39;s a &lt;a href=\"https://codereview.stackexchange.com/questions/tagged/rust\"&gt;codereview stackexchange&lt;/a&gt;, too. If you need to test your code, maybe &lt;a href=\"https://play.rust-lang.org\"&gt;the Rust playground&lt;/a&gt; is for you.&lt;/p&gt;\n\n&lt;p&gt;Here are some other venues where help may be found:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/learnrust\"&gt;/r/learnrust&lt;/a&gt; is a subreddit to share your questions and epiphanies learning Rust programming.&lt;/p&gt;\n\n&lt;p&gt;The official Rust user forums: &lt;a href=\"https://users.rust-lang.org/\"&gt;https://users.rust-lang.org/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The official Rust Programming Language Discord: &lt;a href=\"https://discord.gg/rust-lang\"&gt;https://discord.gg/rust-lang&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The unofficial Rust community Discord: &lt;a href=\"https://bit.ly/rust-community\"&gt;https://bit.ly/rust-community&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also check out &lt;a href=\"https://reddit.com/r/rust/comments/ji8ukt/hey_rustaceans_got_an_easy_question_ask_here/\"&gt;last weeks&amp;#39; thread&lt;/a&gt; with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.&lt;/p&gt;\n\n&lt;p&gt;Also if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "e86091d6-dfe6-11ea-a6d0-0eaf4ae01c99", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#f7f5ff", "id": "jmijzu", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 106, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/jmijzu/hey_rustaceans_got_an_easy_question_ask_here/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/jmijzu/hey_rustaceans_got_an_easy_question_ask_here/", "subreddit_subscribers": 117363, "created_utc": 1604298493.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_eki22", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "This Week in Rust 363", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_joxy7n", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": "", "subreddit_type": "public", "ups": 85, "total_awards_received": 2, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 85, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1604663898.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "this-week-in-rust.org", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://this-week-in-rust.org/blog/2020/11/04/this-week-in-rust-363/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 125, "id": "award_5f123e3d-4f48-42f4-9c11-e98b566d5897", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=16&amp;height=16&amp;auto=webp&amp;s=92932f465d58e4c16b12b6eac4ca07d27e3d11c0", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=32&amp;height=32&amp;auto=webp&amp;s=d11484a208d68a318bf9d4fcf371171a1cb6a7ef", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=48&amp;height=48&amp;auto=webp&amp;s=febdf28b6f39f7da7eb1365325b85e0bb49a9f63", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=64&amp;height=64&amp;auto=webp&amp;s=b4406a2d88bf86fa3dc8a45aacf7e0c7bdccc4fb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=128&amp;height=128&amp;auto=webp&amp;s=19555b13e3e196b62eeb9160d1ac1d1b372dcb0b", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "When you come across a feel-good thing.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Wholesome", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=16&amp;height=16&amp;auto=webp&amp;s=92932f465d58e4c16b12b6eac4ca07d27e3d11c0", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=32&amp;height=32&amp;auto=webp&amp;s=d11484a208d68a318bf9d4fcf371171a1cb6a7ef", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=48&amp;height=48&amp;auto=webp&amp;s=febdf28b6f39f7da7eb1365325b85e0bb49a9f63", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=64&amp;height=64&amp;auto=webp&amp;s=b4406a2d88bf86fa3dc8a45aacf7e0c7bdccc4fb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=128&amp;height=128&amp;auto=webp&amp;s=19555b13e3e196b62eeb9160d1ac1d1b372dcb0b", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png"}, {"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "award_74fe5152-7906-4991-9016-bc2d8e261200", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=16&amp;height=16&amp;auto=webp&amp;s=094da86916604f4fc9f7f63c827e31c976f00928", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=32&amp;height=32&amp;auto=webp&amp;s=52886a42b9871ec69a4465609472a864dbab27b1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=48&amp;height=48&amp;auto=webp&amp;s=63a8f5eff627778a221c58daffbfbbb87b7fe350", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=64&amp;height=64&amp;auto=webp&amp;s=da0d9de08517646db45b766dbb0e7b94d2e97312", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=128&amp;height=128&amp;auto=webp&amp;s=58d3501a4314be9d47349a1f7925e18f30a832e5", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "I don't know what to do with my hands!", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Excited", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=16&amp;height=16&amp;auto=webp&amp;s=094da86916604f4fc9f7f63c827e31c976f00928", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=32&amp;height=32&amp;auto=webp&amp;s=52886a42b9871ec69a4465609472a864dbab27b1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=48&amp;height=48&amp;auto=webp&amp;s=63a8f5eff627778a221c58daffbfbbb87b7fe350", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=64&amp;height=64&amp;auto=webp&amp;s=da0d9de08517646db45b766dbb0e7b94d2e97312", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=128&amp;height=128&amp;auto=webp&amp;s=58d3501a4314be9d47349a1f7925e18f30a832e5", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "twir", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "joxy7n", "is_robot_indexable": true, "report_reasons": null, "author": "seino_chan", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/joxy7n/this_week_in_rust_363/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://this-week-in-rust.org/blog/2020/11/04/this-week-in-rust-363/", "subreddit_subscribers": 117363, "created_utc": 1604635098.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_16t2wd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "40 Millisencond Bug", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jp23jq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": null, "subreddit_type": "public", "ups": 99, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 99, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1604683294.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "vorner.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://vorner.github.io/2020/11/06/40-ms-bug.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jp23jq", "is_robot_indexable": true, "report_reasons": null, "author": "Michal_Vaner", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/jp23jq/40_millisencond_bug/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://vorner.github.io/2020/11/06/40-ms-bug.html", "subreddit_subscribers": 117363, "created_utc": 1604654494.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_47dzr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Anu: Version control tool in Rust, written by Pijul developers", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_joqput", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 190, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 190, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1604637933.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "nest.anu.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://nest.anu.dev/anu/anu", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "joqput", "is_robot_indexable": true, "report_reasons": null, "author": "adamnemecek", "discussion_type": null, "num_comments": 62, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/joqput/anu_version_control_tool_in_rust_written_by_pijul/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://nest.anu.dev/anu/anu", "subreddit_subscribers": 117363, "created_utc": 1604609133.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "After a month of hard work I am glad to finally have contributed back to the community something I think will be useful for others.\n\nAs I was building a calendar application (side project to learn rust) in rust I could not find a good crate for working with recurrence rules, so I decided to try to implement one myself!\n\n[RRule.rs](https://RRule.rs) is a rust implementation of recurrence rules as defined in the iCalendar RFC (more info in README). It is mostly a port of the great [rrule.js](https://github.com/jakubroztocil/rrule) library, but a lot faster!\n\nRepository can be found [here](https://github.com/fmeringdal/rust_rrule) and documentation [here](https://docs.rs/rrule).\n\nAny feedback or contribution is highly appreciated :D", "author_fullname": "t2_3lxziksj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "My first contribution to the rust community!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jp3twx", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604692561.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;After a month of hard work I am glad to finally have contributed back to the community something I think will be useful for others.&lt;/p&gt;\n\n&lt;p&gt;As I was building a calendar application (side project to learn rust) in rust I could not find a good crate for working with recurrence rules, so I decided to try to implement one myself!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://RRule.rs\"&gt;RRule.rs&lt;/a&gt; is a rust implementation of recurrence rules as defined in the iCalendar RFC (more info in README). It is mostly a port of the great &lt;a href=\"https://github.com/jakubroztocil/rrule\"&gt;rrule.js&lt;/a&gt; library, but a lot faster!&lt;/p&gt;\n\n&lt;p&gt;Repository can be found &lt;a href=\"https://github.com/fmeringdal/rust_rrule\"&gt;here&lt;/a&gt; and documentation &lt;a href=\"https://docs.rs/rrule\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Any feedback or contribution is highly appreciated :D&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jp3twx", "is_robot_indexable": true, "report_reasons": null, "author": "fmeringdal", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/jp3twx/my_first_contribution_to_the_rust_community/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/jp3twx/my_first_contribution_to_the_rust_community/", "subreddit_subscribers": 117363, "created_utc": 1604663761.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hi Rustaceans! I have a bit theoretical question about the Rust type system. Is it possible to implement units system on Rust which will be zero-cost on run-time and check correctness of quantity operations on compile-time? I'm looking at [`Boost::Units`](https://www.boost.org/doc/libs/release/doc/html/boost_units/Units.html) as something I would like to have in Rust-world. The aim is to make it possible to write something like\n```rust\nGramm(10) * Cm(3.14) / (Second(3).powi(2)) + Newton(15) * Gramm(1) / Kg(10)\n```\n\nFor me it looks like at least const-generics are required, but let this question be about current (or near-future) nightly compiler.", "author_fullname": "t2_x4u0o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Question: is boost::units possible on Rust?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jp0xpd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604677000.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi Rustaceans! I have a bit theoretical question about the Rust type system. Is it possible to implement units system on Rust which will be zero-cost on run-time and check correctness of quantity operations on compile-time? I&amp;#39;m looking at &lt;a href=\"https://www.boost.org/doc/libs/release/doc/html/boost_units/Units.html\"&gt;&lt;code&gt;Boost::Units&lt;/code&gt;&lt;/a&gt; as something I would like to have in Rust-world. The aim is to make it possible to write something like\n&lt;code&gt;rust\nGramm(10) * Cm(3.14) / (Second(3).powi(2)) + Newton(15) * Gramm(1) / Kg(10)\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;For me it looks like at least const-generics are required, but let this question be about current (or near-future) nightly compiler.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jp0xpd", "is_robot_indexable": true, "report_reasons": null, "author": "hombit", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/jp0xpd/question_is_boostunits_possible_on_rust/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/jp0xpd/question_is_boostunits_possible_on_rust/", "subreddit_subscribers": 117363, "created_utc": 1604648200.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_ewto0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust vs Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jp4orc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ewto0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust vs Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jp4kvp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1604696123.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "bitfieldconsulting.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://bitfieldconsulting.com/golang/rust-vs-go", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jp4kvp", "is_robot_indexable": true, "report_reasons": null, "author": "bitfieldconsulting", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jp4kvp/rust_vs_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://bitfieldconsulting.com/golang/rust-vs-go", "subreddit_subscribers": 129730, "created_utc": 1604667323.0, "num_crossposts": 1, "media": null, "is_video": false}], "created": 1604696590.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "bitfieldconsulting.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://bitfieldconsulting.com/golang/rust-vs-go", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jp4orc", "is_robot_indexable": true, "report_reasons": null, "author": "bitfieldconsulting", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_jp4kvp", "author_flair_text_color": null, "permalink": "/r/rust/comments/jp4orc/rust_vs_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://bitfieldconsulting.com/golang/rust-vs-go", "subreddit_subscribers": 117363, "created_utc": 1604667790.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_42hkw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust GameDev Ecosystem Survey", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": "announcement", "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_joj5e0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 140, "total_awards_received": 1, "media_embed": {"content": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;It&amp;#39;s time for our annual survey! \ud83d\udcec&lt;br&gt;&lt;br&gt;Kindly spare 10 minutes to help the Rust GameDev WG understand our ecosystem better:&lt;a href=\"https://t.co/KRp4SCFRs7\"&gt;https://t.co/KRp4SCFRs7&lt;/a&gt;&lt;br&gt;&lt;br&gt;We&amp;#39;ll keep it open for a full month; last reminder will come with next month&amp;#39;s newsletter.&lt;/p&gt;&amp;mdash; Rust GameDev (@rust_gamedev) &lt;a href=\"https://twitter.com/rust_gamedev/status/1324349001706229760?ref_src=twsrc%5Etfw\"&gt;November 5, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "width": 350, "scrolling": false, "height": 542}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "twitter.com", "oembed": {"provider_url": "https://twitter.com", "version": "1.0", "url": "https://twitter.com/rust_gamedev/status/1324349001706229760", "author_name": "Rust GameDev", "height": 542, "width": 350, "html": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;It&amp;#39;s time for our annual survey! \ud83d\udcec&lt;br&gt;&lt;br&gt;Kindly spare 10 minutes to help the Rust GameDev WG understand our ecosystem better:&lt;a href=\"https://t.co/KRp4SCFRs7\"&gt;https://t.co/KRp4SCFRs7&lt;/a&gt;&lt;br&gt;&lt;br&gt;We&amp;#39;ll keep it open for a full month; last reminder will come with next month&amp;#39;s newsletter.&lt;/p&gt;&amp;mdash; Rust GameDev (@rust_gamedev) &lt;a href=\"https://twitter.com/rust_gamedev/status/1324349001706229760?ref_src=twsrc%5Etfw\"&gt;November 5, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "author_url": "https://twitter.com/rust_gamedev", "provider_name": "Twitter", "cache_age": 3153600000, "type": "rich"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;It&amp;#39;s time for our annual survey! \ud83d\udcec&lt;br&gt;&lt;br&gt;Kindly spare 10 minutes to help the Rust GameDev WG understand our ecosystem better:&lt;a href=\"https://t.co/KRp4SCFRs7\"&gt;https://t.co/KRp4SCFRs7&lt;/a&gt;&lt;br&gt;&lt;br&gt;We&amp;#39;ll keep it open for a full month; last reminder will come with next month&amp;#39;s newsletter.&lt;/p&gt;&amp;mdash; Rust GameDev (@rust_gamedev) &lt;a href=\"https://twitter.com/rust_gamedev/status/1324349001706229760?ref_src=twsrc%5Etfw\"&gt;November 5, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "width": 350, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/joj5e0", "height": 542}, "link_flair_text": "\ud83d\udce2 announcement", "can_mod_post": false, "score": 140, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1604613358.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "twitter.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://twitter.com/rust_gamedev/status/1324349001706229760", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "award_74fe5152-7906-4991-9016-bc2d8e261200", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=16&amp;height=16&amp;auto=webp&amp;s=094da86916604f4fc9f7f63c827e31c976f00928", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=32&amp;height=32&amp;auto=webp&amp;s=52886a42b9871ec69a4465609472a864dbab27b1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=48&amp;height=48&amp;auto=webp&amp;s=63a8f5eff627778a221c58daffbfbbb87b7fe350", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=64&amp;height=64&amp;auto=webp&amp;s=da0d9de08517646db45b766dbb0e7b94d2e97312", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=128&amp;height=128&amp;auto=webp&amp;s=58d3501a4314be9d47349a1f7925e18f30a832e5", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "I don't know what to do with my hands!", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Excited", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=16&amp;height=16&amp;auto=webp&amp;s=094da86916604f4fc9f7f63c827e31c976f00928", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=32&amp;height=32&amp;auto=webp&amp;s=52886a42b9871ec69a4465609472a864dbab27b1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=48&amp;height=48&amp;auto=webp&amp;s=63a8f5eff627778a221c58daffbfbbb87b7fe350", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=64&amp;height=64&amp;auto=webp&amp;s=da0d9de08517646db45b766dbb0e7b94d2e97312", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=128&amp;height=128&amp;auto=webp&amp;s=58d3501a4314be9d47349a1f7925e18f30a832e5", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png"}], "awarders": [], "media_only": false, "link_flair_template_id": "a7b927d4-9358-11e7-9a1f-0e84c5ae6800", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ffffff", "id": "joj5e0", "is_robot_indexable": true, "report_reasons": null, "author": "erlend_sh", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/joj5e0/rust_gamedev_ecosystem_survey/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://twitter.com/rust_gamedev/status/1324349001706229760", "subreddit_subscribers": 117363, "created_utc": 1604584558.0, "num_crossposts": 1, "media": {"type": "twitter.com", "oembed": {"provider_url": "https://twitter.com", "version": "1.0", "url": "https://twitter.com/rust_gamedev/status/1324349001706229760", "author_name": "Rust GameDev", "height": 542, "width": 350, "html": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;It&amp;#39;s time for our annual survey! \ud83d\udcec&lt;br&gt;&lt;br&gt;Kindly spare 10 minutes to help the Rust GameDev WG understand our ecosystem better:&lt;a href=\"https://t.co/KRp4SCFRs7\"&gt;https://t.co/KRp4SCFRs7&lt;/a&gt;&lt;br&gt;&lt;br&gt;We&amp;#39;ll keep it open for a full month; last reminder will come with next month&amp;#39;s newsletter.&lt;/p&gt;&amp;mdash; Rust GameDev (@rust_gamedev) &lt;a href=\"https://twitter.com/rust_gamedev/status/1324349001706229760?ref_src=twsrc%5Etfw\"&gt;November 5, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "author_url": "https://twitter.com/rust_gamedev", "provider_name": "Twitter", "cache_age": 3153600000, "type": "rich"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hi y'all! This is not necessarily a Rust question, but I implemented it in Rust and you are all so helpful so I'm asking here.\n\nI wanted to generate pretty-printed WebAssembly text format code. Something like this:\n\n```\n(module\n  (import\n    \"wasi_snapshot_preview1\"\n    \"proc_exit\"\n    (func $__wasi_snapshot_preview1_proc_exit (param i32))\n  )\n  (func\n    $_start\n    (export \"_start\")\n    (local $var i32)\n    (local.set $var (i32.const 0))\n    (call $__wasi_snapshot_preview1_proc_exit (i32.const 0))\n  )\n)\n```\n\nBasically, I want to be able to control exactly how the instructions get folded into s-expressions. To my knowledge, nothing existed that could do that. So I wrote a proof-of-concept implementation that only supports a few instructions [here](https://github.com/yagehu/wat-ast).\n\nWith this library, I can build a data structure in memory and output it to a string of `.wat` code. For an example, see this [test case](https://github.com/yagehu/wat-ast/blob/main/src/elements/module.rs).\n\nMy question is: What did I implement? Should I call it an AST? I thought normally ASTs get generated in-memory by parsers.", "author_fullname": "t2_dxryp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Weird question: What did I just implement?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_joyivl", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.87, "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604666192.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi y&amp;#39;all! This is not necessarily a Rust question, but I implemented it in Rust and you are all so helpful so I&amp;#39;m asking here.&lt;/p&gt;\n\n&lt;p&gt;I wanted to generate pretty-printed WebAssembly text format code. Something like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n(module\n  (import\n    &amp;quot;wasi_snapshot_preview1&amp;quot;\n    &amp;quot;proc_exit&amp;quot;\n    (func $__wasi_snapshot_preview1_proc_exit (param i32))\n  )\n  (func\n    $_start\n    (export &amp;quot;_start&amp;quot;)\n    (local $var i32)\n    (local.set $var (i32.const 0))\n    (call $__wasi_snapshot_preview1_proc_exit (i32.const 0))\n  )\n)\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Basically, I want to be able to control exactly how the instructions get folded into s-expressions. To my knowledge, nothing existed that could do that. So I wrote a proof-of-concept implementation that only supports a few instructions &lt;a href=\"https://github.com/yagehu/wat-ast\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;With this library, I can build a data structure in memory and output it to a string of &lt;code&gt;.wat&lt;/code&gt; code. For an example, see this &lt;a href=\"https://github.com/yagehu/wat-ast/blob/main/src/elements/module.rs\"&gt;test case&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;My question is: What did I implement? Should I call it an AST? I thought normally ASTs get generated in-memory by parsers.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "joyivl", "is_robot_indexable": true, "report_reasons": null, "author": "trustyhardware", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/joyivl/weird_question_what_did_i_just_implement/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/joyivl/weird_question_what_did_i_just_implement/", "subreddit_subscribers": 117363, "created_utc": 1604637392.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_7xlzd0wd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "RustScan, a modern day port scanner in Rust. Little something I've been working on.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_joufu2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1604650407.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "http://github.com/rustScan/RustScan", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "joufu2", "is_robot_indexable": true, "report_reasons": null, "author": "beesec", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/joufu2/rustscan_a_modern_day_port_scanner_in_rust_little/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://github.com/rustScan/RustScan", "subreddit_subscribers": 117363, "created_utc": 1604621607.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "After creating a new macro in module B, I got a strange error. I could use it in module C,  but not in module A.\n\nAfter spending way too long, I found out that in main, I first defined module A, then module B and finally module C. Since A was defined before B, I could use all symbols except the macro from B in A... Moving the mod B line to before A fixed it.\n\nThe message \"help: have you added the \\`#\\[macro\\_use\\]\\` on the module/import?\" didn't help since I had done that.\n\nIs there a reason it works like this?", "author_fullname": "t2_5a83rsj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "PSA: mod lines' order matter", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jp49g7", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604694639.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;After creating a new macro in module B, I got a strange error. I could use it in module C,  but not in module A.&lt;/p&gt;\n\n&lt;p&gt;After spending way too long, I found out that in main, I first defined module A, then module B and finally module C. Since A was defined before B, I could use all symbols except the macro from B in A... Moving the mod B line to before A fixed it.&lt;/p&gt;\n\n&lt;p&gt;The message &amp;quot;help: have you added the `#[macro_use]` on the module/import?&amp;quot; didn&amp;#39;t help since I had done that.&lt;/p&gt;\n\n&lt;p&gt;Is there a reason it works like this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jp49g7", "is_robot_indexable": true, "report_reasons": null, "author": "ClimberSeb", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/jp49g7/psa_mod_lines_order_matter/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/jp49g7/psa_mod_lines_order_matter/", "subreddit_subscribers": 117363, "created_utc": 1604665839.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "So I am learning Rust and in the meantime having a huge-but-slow side-project and I think this is the first time I actually wrote some code. But I can't get it to compile.\n\nThis is my code:\n\n`#![allow(unused)]`\n\n`use git2::Repository;`\n\n`use std::fs;`\n\n`fn main() {`\n\n`makefolder();`\n\n`// The repositories to clone are passed to the function here, I will have some more repo's, and they might not all be on GitHub, in future, I hope to let it read from a list and clone them automatically.`\n\n`clonerepo_github(\"Marnix0810\", \"ClaudscapeAI\");`\n\n`}`\n\n&amp;#x200B;\n\n`fn makefolder() -&gt; std::io::Result&lt;()&gt; {`\n\n`fs::create_dir(\"../linked-repositories\")?;`\n\n`Ok(())`\n\n`}`\n\n`// This is where I think it goes wrong, but I don't know what to put here instead...`\n\n`fn clonerepo_github(u: str, r: str){`\n\n`let url = (\"`[`https://github.com/{}/{}`](https://github.com/{}/{})`\", u, r);`\n\n`let repo = match Repository::clone(url, \"../linked-repositories/(r)\") {`\n\n`Ok(r) =&gt; r,`\n\n`Err(e) =&gt; panic!(\"failed to clone: {}\", e),`\n\n`};`\n\n`}`\n\nCan anyone of you please help me?\n\n&amp;#x200B;\n\nPS: This is also my first time on this subreddit, I hope I'm not out of line here...\n\n&amp;#x200B;\n\nedit: This is the Cargo output I got:\n\n&amp;#x200B;\n\n   `Compiling cio-finit v0.1.0 (C:\\Users\\marni\\Dropbox\\Documenten\\CIO\\cio-finit)`\n\n`error[E0308]: mismatched types`\n\n `--&gt; src\\main.rs:7:22`\n\n  `|`\n\n`7 |     clonerepo_github(\"Marnix0810\", \"ClaudscapeAI\");`\n\n  `|                      ^^^^^^^^^^^^ expected \\`str\\`, found \\`&amp;str\\``\n\n`error[E0308]: mismatched types`\n\n `--&gt; src\\main.rs:7:36`\n\n  `|`\n\n`7 |     clonerepo_github(\"Marnix0810\", \"ClaudscapeAI\");`\n\n  `|                                    ^^^^^^^^^^^^^^ expected \\`str\\`, found \\`&amp;str\\``\n\n`error[E0277]: the size for values of type \\`str\\` cannot be known at compilation time`\n\n `--&gt; src\\main.rs:7:5`\n\n  `|`\n\n`7 |     clonerepo_github(\"Marnix0810\", \"ClaudscapeAI\");`\n\n  `|     ^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time`\n\n  `|`\n\n  `= help: the trait \\`std::marker::Sized\\` is not implemented for \\`str\\``\n\n  `= note: all function arguments must have a statically known size`\n\n&amp;#x200B;\n\n`error[E0277]: the size for values of type \\`str\\` cannot be known at compilation time`\n\n  `--&gt; src\\main.rs:15:21`\n\n   `|`\n\n`15 | fn clonerepo_github(u: str, r: str){`\n\n   `|                     ^ doesn't have a size known at compile-time`\n\n   `|`\n\n   `= help: the trait \\`std::marker::Sized\\` is not implemented for \\`str\\``\n\n   `= help: unsized locals are gated as an unstable feature`\n\n`help: function arguments must have a statically known size, borrowed types always have a known size`\n\n   `|`\n\n`15 | fn clonerepo_github(u: &amp;str, r: str){`\n\n   `|                        ^`\n\n&amp;#x200B;\n\n`error[E0277]: the size for values of type \\`str\\` cannot be known at compilation time`\n\n  `--&gt; src\\main.rs:15:29`\n\n   `|`\n\n`15 | fn clonerepo_github(u: str, r: str){`\n\n   `|                             ^ doesn't have a size known at compile-time`\n\n   `|`\n\n   `= help: the trait \\`std::marker::Sized\\` is not implemented for \\`str\\``\n\n   `= help: unsized locals are gated as an unstable feature`\n\n`help: function arguments must have a statically known size, borrowed types always have a known size`\n\n   `|`\n\n`15 | fn clonerepo_github(u: str, r: &amp;str){`\n\n   `|                                ^`\n\n&amp;#x200B;\n\n`error[E0277]: the size for values of type \\`str\\` cannot be known at compilation time`\n\n  `--&gt; src\\main.rs:16:15`\n\n   `|`\n\n`16 |     let url = (\"`[`https://github.com/{}/{}`](https://github.com/{}/{})`\", u, r);`\n\n   `|               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time`\n\n   `|`\n\n   `= help: within \\`(&amp;'static str, str, str)\\`, the trait \\`std::marker::Sized\\` is not implemented for \\`str\\``\n\n   `= note: required because it appears within the type \\`(&amp;'static str, str, str)\\``\n\n   `= note: tuples must have a statically known size to be initialized`\n\n&amp;#x200B;\n\n`error[E0277]: the size for values of type \\`str\\` cannot be known at compilation time`\n\n  `--&gt; src\\main.rs:16:9`\n\n   `|`\n\n`16 |     let url = (\"`[`https://github.com/{}/{}`](https://github.com/{}/{})`\", u, r);`\n\n   `|         ^^^ doesn't have a size known at compile-time`\n\n   `|`\n\n   `= help: within \\`(&amp;str, str, str)\\`, the trait \\`std::marker::Sized\\` is not implemented for \\`str\\``\n\n   `= note: required because it appears within the type \\`(&amp;str, str, str)\\``\n\n   `= note: all local variables must have a statically known size`\n\n   `= help: unsized locals are gated as an unstable feature`\n\n&amp;#x200B;\n\n`error[E0308]: mismatched types`\n\n  `--&gt; src\\main.rs:17:40`\n\n   `|`\n\n`17 |     let repo = match Repository::clone(url, \"../linked-repositories/(r)\") {`\n\n   `|                                        ^^^ expected \\`&amp;str\\`, found tuple`\n\n   `|`\n\n   `= note: expected reference \\`&amp;str\\``\n\n`found tuple \\`(&amp;str, str, str)\\``\n\n&amp;#x200B;\n\n`error: aborting due to 8 previous errors`\n\n&amp;#x200B;\n\n`Some errors have detailed explanations: E0277, E0308.`\n\n`For more information about an error, try \\`rustc --explain E0277\\`.`\n\n`error: could not compile \\`cio-finit\\`.`\n\n&amp;#x200B;\n\n`To learn more, run the command again with --verbose.`", "author_fullname": "t2_4h7lxczs", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I'm new to Rust and... Well this is the first thing that I tried, but I have no idea what to do now...", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jopxhi", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.73, "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1604609149.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1604635447.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I am learning Rust and in the meantime having a huge-but-slow side-project and I think this is the first time I actually wrote some code. But I can&amp;#39;t get it to compile.&lt;/p&gt;\n\n&lt;p&gt;This is my code:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;#![allow(unused)]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;use git2::Repository;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;use std::fs;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;fn main() {&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;makefolder();&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;// The repositories to clone are passed to the function here, I will have some more repo&amp;#39;s, and they might not all be on GitHub, in future, I hope to let it read from a list and clone them automatically.&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;clonerepo_github(&amp;quot;Marnix0810&amp;quot;, &amp;quot;ClaudscapeAI&amp;quot;);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;fn makefolder() -&amp;gt; std::io::Result&amp;lt;()&amp;gt; {&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;fs::create_dir(&amp;quot;../linked-repositories&amp;quot;)?;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Ok(())&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;// This is where I think it goes wrong, but I don&amp;#39;t know what to put here instead...&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;fn clonerepo_github(u: str, r: str){&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;let url = (&amp;quot;&lt;/code&gt;&lt;a href=\"https://github.com/%7B%7D/%7B%7D\"&gt;&lt;code&gt;https://github.com/{}/{}&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;quot;, u, r);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;let repo = match Repository::clone(url, &amp;quot;../linked-repositories/(r)&amp;quot;) {&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Ok(r) =&amp;gt; r,&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Err(e) =&amp;gt; panic!(&amp;quot;failed to clone: {}&amp;quot;, e),&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;};&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Can anyone of you please help me?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;PS: This is also my first time on this subreddit, I hope I&amp;#39;m not out of line here...&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;edit: This is the Cargo output I got:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Compiling cio-finit v0.1.0 (C:\\Users\\marni\\Dropbox\\Documenten\\CIO\\cio-finit)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error[E0308]: mismatched types&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;--&amp;gt; src\\main.rs:7:22&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;7 |     clonerepo_github(&amp;quot;Marnix0810&amp;quot;, &amp;quot;ClaudscapeAI&amp;quot;);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|                      ^^^^^^^^^^^^ expected \\&lt;/code&gt;str`, found `&amp;amp;str``&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error[E0308]: mismatched types&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;--&amp;gt; src\\main.rs:7:36&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;7 |     clonerepo_github(&amp;quot;Marnix0810&amp;quot;, &amp;quot;ClaudscapeAI&amp;quot;);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|                                    ^^^^^^^^^^^^^^ expected \\&lt;/code&gt;str`, found `&amp;amp;str``&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error[E0277]: the size for values of type \\&lt;/code&gt;str` cannot be known at compilation time`&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;--&amp;gt; src\\main.rs:7:5&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;7 |     clonerepo_github(&amp;quot;Marnix0810&amp;quot;, &amp;quot;ClaudscapeAI&amp;quot;);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|     ^^^^^^^^^^^^^^^^ doesn&amp;#39;t have a size known at compile-time&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= help: the trait \\&lt;/code&gt;std::marker::Sized` is not implemented for `str``&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= note: all function arguments must have a statically known size&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error[E0277]: the size for values of type \\&lt;/code&gt;str` cannot be known at compilation time`&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;--&amp;gt; src\\main.rs:15:21&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;15 | fn clonerepo_github(u: str, r: str){&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|                     ^ doesn&amp;#39;t have a size known at compile-time&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= help: the trait \\&lt;/code&gt;std::marker::Sized` is not implemented for `str``&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= help: unsized locals are gated as an unstable feature&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;help: function arguments must have a statically known size, borrowed types always have a known size&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;15 | fn clonerepo_github(u: &amp;amp;str, r: str){&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|                        ^&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error[E0277]: the size for values of type \\&lt;/code&gt;str` cannot be known at compilation time`&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;--&amp;gt; src\\main.rs:15:29&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;15 | fn clonerepo_github(u: str, r: str){&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|                             ^ doesn&amp;#39;t have a size known at compile-time&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= help: the trait \\&lt;/code&gt;std::marker::Sized` is not implemented for `str``&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= help: unsized locals are gated as an unstable feature&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;help: function arguments must have a statically known size, borrowed types always have a known size&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;15 | fn clonerepo_github(u: str, r: &amp;amp;str){&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|                                ^&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error[E0277]: the size for values of type \\&lt;/code&gt;str` cannot be known at compilation time`&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;--&amp;gt; src\\main.rs:16:15&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;16 |     let url = (&amp;quot;&lt;/code&gt;&lt;a href=\"https://github.com/%7B%7D/%7B%7D\"&gt;&lt;code&gt;https://github.com/{}/{}&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;quot;, u, r);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ doesn&amp;#39;t have a size known at compile-time&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= help: within \\&lt;/code&gt;(&amp;amp;&amp;#39;static str, str, str)`, the trait `std::marker::Sized` is not implemented for `str``&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= note: required because it appears within the type \\&lt;/code&gt;(&amp;amp;&amp;#39;static str, str, str)``&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= note: tuples must have a statically known size to be initialized&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error[E0277]: the size for values of type \\&lt;/code&gt;str` cannot be known at compilation time`&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;--&amp;gt; src\\main.rs:16:9&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;16 |     let url = (&amp;quot;&lt;/code&gt;&lt;a href=\"https://github.com/%7B%7D/%7B%7D\"&gt;&lt;code&gt;https://github.com/{}/{}&lt;/code&gt;&lt;/a&gt;&lt;code&gt;&amp;quot;, u, r);&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|         ^^^ doesn&amp;#39;t have a size known at compile-time&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= help: within \\&lt;/code&gt;(&amp;amp;str, str, str)`, the trait `std::marker::Sized` is not implemented for `str``&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= note: required because it appears within the type \\&lt;/code&gt;(&amp;amp;str, str, str)``&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= note: all local variables must have a statically known size&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= help: unsized locals are gated as an unstable feature&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error[E0308]: mismatched types&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;--&amp;gt; src\\main.rs:17:40&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;17 |     let repo = match Repository::clone(url, &amp;quot;../linked-repositories/(r)&amp;quot;) {&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|                                        ^^^ expected \\&lt;/code&gt;&amp;amp;str`, found tuple`&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;|&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;= note: expected reference \\&lt;/code&gt;&amp;amp;str``&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;found tuple \\&lt;/code&gt;(&amp;amp;str, str, str)``&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error: aborting due to 8 previous errors&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Some errors have detailed explanations: E0277, E0308.&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;For more information about an error, try \\&lt;/code&gt;rustc --explain E0277`.`&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;error: could not compile \\&lt;/code&gt;cio-finit`.`&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;To learn more, run the command again with --verbose.&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jopxhi", "is_robot_indexable": true, "report_reasons": null, "author": "marnix2813", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/jopxhi/im_new_to_rust_and_well_this_is_the_first_thing/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/jopxhi/im_new_to_rust_and_well_this_is_the_first_thing/", "subreddit_subscribers": 117363, "created_utc": 1604606647.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_jopxhi", "before": null}}