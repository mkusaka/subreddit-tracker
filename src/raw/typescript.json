{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - August", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i1ikj5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 28, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 28, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596269158.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i1ikj5", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 0, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i1ikj5/whos_hiring_typescript_developers_august/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/i1ikj5/whos_hiring_typescript_developers_august/", "subreddit_subscribers": 45917, "created_utc": 1596240358.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm trying to make a TypeScript/Express/React/Webpack project and there's a few bits that I can't get plumbed right. Specifically, I want to have a \"good\" dev experience without a ton of recompiling. \n\nAs such, I want to run the project when developing using both:\n\n1. Nodemon+TS-Node\n2. Webpack Hot Module Replacement\n\nI can't seem to find a combination of configurations that will allow me to get both of those working at the same time. Does anyone have any examples of this setup working well?\n\nThanks!", "author_fullname": "t2_4iz8fs5g", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "TypeScript/Express/React/Webpack starter project?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_i74q3u", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597094539.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to make a TypeScript/Express/React/Webpack project and there&amp;#39;s a few bits that I can&amp;#39;t get plumbed right. Specifically, I want to have a &amp;quot;good&amp;quot; dev experience without a ton of recompiling. &lt;/p&gt;\n\n&lt;p&gt;As such, I want to run the project when developing using both:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Nodemon+TS-Node&lt;/li&gt;\n&lt;li&gt;Webpack Hot Module Replacement&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I can&amp;#39;t seem to find a combination of configurations that will allow me to get both of those working at the same time. Does anyone have any examples of this setup working well?&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i74q3u", "is_robot_indexable": true, "report_reasons": null, "author": "Multipoptart", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i74q3u/typescriptexpressreactwebpack_starter_project/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i74q3u/typescriptexpressreactwebpack_starter_project/", "subreddit_subscribers": 45917, "created_utc": 1597065739.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_m2819s", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Game of Life in TypeScript - text/video tutorial", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 78, "top_awarded_type": null, "hide_score": false, "name": "t3_i6mtcf", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 24, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 24, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/on2mMHi7j7hLPDwuf0i7WcHhgyJ1fgz2tYxba2UCBS0.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1597021491.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/hypersphere-codes/conways-game-of-life-in-typescript-a955aec3bd49", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/zzbZlb83RvpOLbT6o-5UprI6ADwtxHn6hSNLON495j4.jpg?auto=webp&amp;s=4d4d6d909ebd9be554b07ac489af6559149ced58", "width": 1200, "height": 675}, "resolutions": [{"url": "https://external-preview.redd.it/zzbZlb83RvpOLbT6o-5UprI6ADwtxHn6hSNLON495j4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9e25a32fe524520322448f35c19352cad626ac07", "width": 108, "height": 60}, {"url": "https://external-preview.redd.it/zzbZlb83RvpOLbT6o-5UprI6ADwtxHn6hSNLON495j4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=493f2d81d75c797619ecfff2de0003d8d07ad211", "width": 216, "height": 121}, {"url": "https://external-preview.redd.it/zzbZlb83RvpOLbT6o-5UprI6ADwtxHn6hSNLON495j4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b75edd5fbbdde3d20e2ab0f5a79452de2a590eb5", "width": 320, "height": 180}, {"url": "https://external-preview.redd.it/zzbZlb83RvpOLbT6o-5UprI6ADwtxHn6hSNLON495j4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a1e217750ec62c6eada7278734ee7b08409f9033", "width": 640, "height": 360}, {"url": "https://external-preview.redd.it/zzbZlb83RvpOLbT6o-5UprI6ADwtxHn6hSNLON495j4.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=c4833315db426f81254efe82a2c911d5844a3888", "width": 960, "height": 540}, {"url": "https://external-preview.redd.it/zzbZlb83RvpOLbT6o-5UprI6ADwtxHn6hSNLON495j4.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f0ba5a4750783970aae9fe8322b5b1efa6665b45", "width": 1080, "height": 607}], "variants": {}, "id": "iuEzyvv_d3FJK17Nk3g3WzjSEqaAgXgPlZIXWMnhiWs"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i6mtcf", "is_robot_indexable": true, "report_reasons": null, "author": "ab-azure", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i6mtcf/game_of_life_in_typescript_textvideo_tutorial/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/hypersphere-codes/conways-game-of-life-in-typescript-a955aec3bd49", "subreddit_subscribers": 45917, "created_utc": 1596992691.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_9a5uc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "MikroOrm v4 /w GraphQL example project", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_i6kwnr", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 25, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 25, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/nDF9VH_ePhFnsVsQ5PDr_gmEI4GY9R6KygnYSTDTYwo.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1597014665.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/driescroons/mikro-orm-graphql-example", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/mY5pmAHWZIkjGqarMcp3E2qvggaG8Wb5K3wYHEYda4o.jpg?auto=webp&amp;s=db7c98beb8b76ece5471c7f3f4b0e0184a221682", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/mY5pmAHWZIkjGqarMcp3E2qvggaG8Wb5K3wYHEYda4o.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=3f4a3f241fe57fa6bcf9b8158d126626274ba700", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/mY5pmAHWZIkjGqarMcp3E2qvggaG8Wb5K3wYHEYda4o.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6dfc327341390e38e270b3b3048efba31c3febad", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/mY5pmAHWZIkjGqarMcp3E2qvggaG8Wb5K3wYHEYda4o.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=6dd322a68022e1e5e6cf32870b350d00ca48dc78", "width": 320, "height": 320}], "variants": {}, "id": "V8k2jsS2Lxh9Vc0EnZL0HKzxgpLXakkgqumXe5pikVA"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i6kwnr", "is_robot_indexable": true, "report_reasons": null, "author": "CROEWENS", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i6kwnr/mikroorm_v4_w_graphql_example_project/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/driescroons/mikro-orm-graphql-example", "subreddit_subscribers": 45917, "created_utc": 1596985865.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I want to use typescript in the front end without the use of a framework. Basically, just compiling it down to es3 javascript. In the tsconfig.json file, I've sent module to none but that's not exactly what I want. \n\nI do not want the import and export statements to appear in the javascript files after compiling and module none does that; however, in development, I want to be able to use import and export for better IntelliSense, using types, interfaces, and etc. \n\nHow do you accomplish this?", "author_fullname": "t2_3n05n1d4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Typescript without a framework for frontend development", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i6m5iv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597019175.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I want to use typescript in the front end without the use of a framework. Basically, just compiling it down to es3 javascript. In the tsconfig.json file, I&amp;#39;ve sent module to none but that&amp;#39;s not exactly what I want. &lt;/p&gt;\n\n&lt;p&gt;I do not want the import and export statements to appear in the javascript files after compiling and module none does that; however, in development, I want to be able to use import and export for better IntelliSense, using types, interfaces, and etc. &lt;/p&gt;\n\n&lt;p&gt;How do you accomplish this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i6m5iv", "is_robot_indexable": true, "report_reasons": null, "author": "04Tribe", "discussion_type": null, "num_comments": 23, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i6m5iv/typescript_without_a_framework_for_frontend/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i6m5iv/typescript_without_a_framework_for_frontend/", "subreddit_subscribers": 45917, "created_utc": 1596990375.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I've recently switched my Webpack config to using `@babel/preset-typescript` instead of `ts-loader` for easier integration with other tools (like React hot reloading). I know that Babel just strips the types and does not do any type checking by itself.\n\nHowever, I do not want it to compile anything until my types are correct, the main reasons being:\n\n- Saving a file with wrong types often indicates actual erors in the logic of the app, and hot-loading such a broken file can break my components, so I need to manually refresh the page.\n- Sometimes IDEs just bug out and stop showing errors where they should be. I want to at least see them in the terminal, preferably the same one that runs my dev server.\n- Production build should only be successful if all types are correct.\n\n`ts-loader` had the correct behavior out of the box. How do I set up a project with Webpack and `@babel/preset-typescript` to behave in the same way?\n\nThanks!", "author_fullname": "t2_sss3a", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "When using @babel/preset-typescript, how do I prevent compilation unless type checks pass?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i6no4g", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1597011553.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597024391.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve recently switched my Webpack config to using &lt;code&gt;@babel/preset-typescript&lt;/code&gt; instead of &lt;code&gt;ts-loader&lt;/code&gt; for easier integration with other tools (like React hot reloading). I know that Babel just strips the types and does not do any type checking by itself.&lt;/p&gt;\n\n&lt;p&gt;However, I do not want it to compile anything until my types are correct, the main reasons being:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Saving a file with wrong types often indicates actual erors in the logic of the app, and hot-loading such a broken file can break my components, so I need to manually refresh the page.&lt;/li&gt;\n&lt;li&gt;Sometimes IDEs just bug out and stop showing errors where they should be. I want to at least see them in the terminal, preferably the same one that runs my dev server.&lt;/li&gt;\n&lt;li&gt;Production build should only be successful if all types are correct.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;code&gt;ts-loader&lt;/code&gt; had the correct behavior out of the box. How do I set up a project with Webpack and &lt;code&gt;@babel/preset-typescript&lt;/code&gt; to behave in the same way?&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i6no4g", "is_robot_indexable": true, "report_reasons": null, "author": "smthamazing", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i6no4g/when_using_babelpresettypescript_how_do_i_prevent/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i6no4g/when_using_babelpresettypescript_how_do_i_prevent/", "subreddit_subscribers": 45917, "created_utc": 1596995591.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "i.e. keeping the class aware of the method, and the method aware that `this` refers to that class\n\nis it possible without resorting to ugly hacks and/or completely breaking IDE intellisense?\n\nmethod1.ts\n\n    export default function method1 () : void\n    {\n        // somehow make this function aware that it will be a method of SomeClass\n    \n        this.propStr += 'o'\n        this.method2()\n    }\n\nmethod2.ts\n\n    export default function method2 () : void\n    {\n        // somehow make this function aware that it will be a method of SomeClass\n    \n        this.propNum += 1\n    }\n\nSomeClass.ts\n\n    import method1 from './method1'\n    import method2 from './method2'\n    \n    export default class SomeClass\n    {\n        private propStr:string = 'foo'\n        private propNum:number = 123\n    \n        public method1 = method1.bind(this)\n        public method2 = method2.bind(this)\n    }", "author_fullname": "t2_138jbp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "defining a method in a different file than the class", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i6v0w4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.43, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597049782.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;i.e. keeping the class aware of the method, and the method aware that &lt;code&gt;this&lt;/code&gt; refers to that class&lt;/p&gt;\n\n&lt;p&gt;is it possible without resorting to ugly hacks and/or completely breaking IDE intellisense?&lt;/p&gt;\n\n&lt;p&gt;method1.ts&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export default function method1 () : void\n{\n    // somehow make this function aware that it will be a method of SomeClass\n\n    this.propStr += &amp;#39;o&amp;#39;\n    this.method2()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;method2.ts&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export default function method2 () : void\n{\n    // somehow make this function aware that it will be a method of SomeClass\n\n    this.propNum += 1\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;SomeClass.ts&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import method1 from &amp;#39;./method1&amp;#39;\nimport method2 from &amp;#39;./method2&amp;#39;\n\nexport default class SomeClass\n{\n    private propStr:string = &amp;#39;foo&amp;#39;\n    private propNum:number = 123\n\n    public method1 = method1.bind(this)\n    public method2 = method2.bind(this)\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i6v0w4", "is_robot_indexable": true, "report_reasons": null, "author": "__romkin", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i6v0w4/defining_a_method_in_a_different_file_than_the/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i6v0w4/defining_a_method_in_a_different_file_than_the/", "subreddit_subscribers": 45917, "created_utc": 1597020982.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I've been playing around with using an object, hashed by action types, that maps to a state reducer. I've done this with JS in the past and the TypeScript(ing) is a bit complicated for my liking.\n\nHere's my sample code - \n\n    const INCREMENT = 'increment'\n    type IncrementAction = { type: typeof INCREMENT; amount: number }\n    export const increment = (amount: number): IncrementAction =&gt; ({ type: INCREMENT, amount })\n    \n    const DECREMENT = 'decrement'\n    type DecrementAction = { type: typeof DECREMENT; amount: number }\n    export const decrement = (amount: number): DecrementAction =&gt; ({ type: DECREMENT, amount })\n    \n    type StoreState = { readonly amount: number }\n    type StoreActions = IncrementAction | DecrementAction\n    \n    type StoreReducer&lt;S, A extends StoreActions&gt; = {\n      [key in A['type']]?: (state: S, action: A extends StoreActions ? (A['type'] extends key ? A : never) : never) =&gt; S\n    }\n    \n    const reducers: StoreReducer&lt;StoreState, StoreActions&gt; = {\n      [INCREMENT]: (state, action) =&gt; ({ amount: state.amount + action.amount }),\n      [DECREMENT]: (state, action) =&gt; ({ amount: state.amount - action.amount }),\n    }\n    \n    const initialState: StoreState = { amount: 0 }\n    \n    export default (state: StoreState = initialState, action: StoreActions) =&gt; {\n      const reducer = reducers[action.type]\n      if (reducer) return reducer(state, action as never) // sad panda\n      return state\n    }\n\nSo this will \"work\" - within each reducer function, \\`(state, action)\\` both parameters get inferred properly based on the key - which is really cool!  \n\nMy problems with it are \n\n* The StoreReducer type makes my brain bleed.  This seems overly complicated and I swear I'm going to look at that later and think \"wtf is this thing?\"\n* in the actual reducer function, typescript seems to get \"confused\" and the type of the action parameter from the returned function always comes back as \\`never\\`, so I need to cast the action to never, which.... seems a bit wrong, and is making me a sad panda.\n\n I'm wondering if anyone else has done this in the past and what your approach was.", "author_fullname": "t2_4zbor", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Help: Redux reducer object pattern / better options?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i6d7na", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596975359.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been playing around with using an object, hashed by action types, that maps to a state reducer. I&amp;#39;ve done this with JS in the past and the TypeScript(ing) is a bit complicated for my liking.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s my sample code - &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const INCREMENT = &amp;#39;increment&amp;#39;\ntype IncrementAction = { type: typeof INCREMENT; amount: number }\nexport const increment = (amount: number): IncrementAction =&amp;gt; ({ type: INCREMENT, amount })\n\nconst DECREMENT = &amp;#39;decrement&amp;#39;\ntype DecrementAction = { type: typeof DECREMENT; amount: number }\nexport const decrement = (amount: number): DecrementAction =&amp;gt; ({ type: DECREMENT, amount })\n\ntype StoreState = { readonly amount: number }\ntype StoreActions = IncrementAction | DecrementAction\n\ntype StoreReducer&amp;lt;S, A extends StoreActions&amp;gt; = {\n  [key in A[&amp;#39;type&amp;#39;]]?: (state: S, action: A extends StoreActions ? (A[&amp;#39;type&amp;#39;] extends key ? A : never) : never) =&amp;gt; S\n}\n\nconst reducers: StoreReducer&amp;lt;StoreState, StoreActions&amp;gt; = {\n  [INCREMENT]: (state, action) =&amp;gt; ({ amount: state.amount + action.amount }),\n  [DECREMENT]: (state, action) =&amp;gt; ({ amount: state.amount - action.amount }),\n}\n\nconst initialState: StoreState = { amount: 0 }\n\nexport default (state: StoreState = initialState, action: StoreActions) =&amp;gt; {\n  const reducer = reducers[action.type]\n  if (reducer) return reducer(state, action as never) // sad panda\n  return state\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So this will &amp;quot;work&amp;quot; - within each reducer function, `(state, action)` both parameters get inferred properly based on the key - which is really cool!  &lt;/p&gt;\n\n&lt;p&gt;My problems with it are &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;The StoreReducer type makes my brain bleed.  This seems overly complicated and I swear I&amp;#39;m going to look at that later and think &amp;quot;wtf is this thing?&amp;quot;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;in the actual reducer function, typescript seems to get &amp;quot;confused&amp;quot; and the type of the action parameter from the returned function always comes back as `never`, so I need to cast the action to never, which.... seems a bit wrong, and is making me a sad panda.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m wondering if anyone else has done this in the past and what your approach was.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i6d7na", "is_robot_indexable": true, "report_reasons": null, "author": "tswaters", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i6d7na/help_redux_reducer_object_pattern_better_options/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i6d7na/help_redux_reducer_object_pattern_better_options/", "subreddit_subscribers": 45917, "created_utc": 1596946559.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Is it possible to retrieve the type set for the keys in a dynamic object like so:   \n\n\n    type Treatments = {\n      [treatment: string]: 'on' | 'off' | string;\n    };\n    \n    const addTreatment = (prev: Treatments, treatment: ***Treatments Key Type***): Treatments =&gt; {\n        return {\n          ...prev,\n          [treatment]: value,\n        }\n     };", "author_fullname": "t2_5984v", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Retrieving the type of the keys for an object with dynamic keys", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i6dx8u", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596978811.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is it possible to retrieve the type set for the keys in a dynamic object like so:   &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Treatments = {\n  [treatment: string]: &amp;#39;on&amp;#39; | &amp;#39;off&amp;#39; | string;\n};\n\nconst addTreatment = (prev: Treatments, treatment: ***Treatments Key Type***): Treatments =&amp;gt; {\n    return {\n      ...prev,\n      [treatment]: value,\n    }\n };\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i6dx8u", "is_robot_indexable": true, "report_reasons": null, "author": "MonsoonHD", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i6dx8u/retrieving_the_type_of_the_keys_for_an_object/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i6dx8u/retrieving_the_type_of_the_keys_for_an_object/", "subreddit_subscribers": 45917, "created_utc": 1596950011.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Or at least do they plan to add that feature in the future in typescript ?\n\nHere is an example of what I am talking about :\n\n```\ntype shallowSerializableReference = unknown[] | {[x:string] : unknown};\nfunction shouldDiff(oldVal: unknown, newVal: unknown): oldVal is shallowSerializableReference , newVal is shallowSerializableReference {\n\treturn (\n\t\t(isOfInternalClass(oldVal, \"Object\") &amp;&amp; isOfInternalClass(newVal, \"Object\")) ||\n\t\t(isOfInternalClass(oldVal, \"Array\") &amp;&amp; isOfInternalClass(newVal, \"Array\"))\n\t);\n}\n```", "author_fullname": "t2_1ihbqq55", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is there any such think as type assertion via is , but via a more than one parameter asserting function ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i68ngl", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596956240.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Or at least do they plan to add that feature in the future in typescript ?&lt;/p&gt;\n\n&lt;p&gt;Here is an example of what I am talking about :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\ntype shallowSerializableReference = unknown[] | {[x:string] : unknown};\nfunction shouldDiff(oldVal: unknown, newVal: unknown): oldVal is shallowSerializableReference , newVal is shallowSerializableReference {\n    return (\n        (isOfInternalClass(oldVal, &amp;quot;Object&amp;quot;) &amp;amp;&amp;amp; isOfInternalClass(newVal, &amp;quot;Object&amp;quot;)) ||\n        (isOfInternalClass(oldVal, &amp;quot;Array&amp;quot;) &amp;amp;&amp;amp; isOfInternalClass(newVal, &amp;quot;Array&amp;quot;))\n    );\n}\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i68ngl", "is_robot_indexable": true, "report_reasons": null, "author": "liaguris", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i68ngl/is_there_any_such_think_as_type_assertion_via_is/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i68ngl/is_there_any_such_think_as_type_assertion_via_is/", "subreddit_subscribers": 45917, "created_utc": 1596927440.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "How to define that type ?", "author_fullname": "t2_1ihbqq55", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Array type of unknown length with first element type1 and the rest of the elements type2 .", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i5wgu2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 18, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 18, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596908278.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;How to define that type ?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i5wgu2", "is_robot_indexable": true, "report_reasons": null, "author": "liaguris", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i5wgu2/array_type_of_unknown_length_with_first_element/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i5wgu2/array_type_of_unknown_length_with_first_element/", "subreddit_subscribers": 45917, "created_utc": 1596879478.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_i5wgu2", "before": null}}