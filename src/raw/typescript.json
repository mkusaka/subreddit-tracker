{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - June", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_gua247", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 34, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 34, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1590998803.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gua247", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 2, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/gua247/whos_hiring_typescript_developers_june/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/gua247/whos_hiring_typescript_developers_june/", "subreddit_subscribers": 42779, "created_utc": 1590970003.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "A simple little app to visualize reversing an array.   \n\n\nWant to start doing more algorithms as well as visualizing them.   \n\n\nStarting off very basic! \n\n&amp;#x200B;\n\n [https://github.com/risingBirdSong/visualizeReverseArray](https://github.com/risingBirdSong/visualizeReverseArray)", "author_fullname": "t2_1iv9u0qf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "simple algo visualizer -- reverse an array", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hfcnnp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1593074023.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;A simple little app to visualize reversing an array.   &lt;/p&gt;\n\n&lt;p&gt;Want to start doing more algorithms as well as visualizing them.   &lt;/p&gt;\n\n&lt;p&gt;Starting off very basic! &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/risingBirdSong/visualizeReverseArray\"&gt;https://github.com/risingBirdSong/visualizeReverseArray&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/m1gIvGknDk0DQqM-yUnqVlMGuRJfF98kO9JGMJ3ev_g.jpg?auto=webp&amp;s=2e7e3ffa8377b46c8e7379d9e7fe132113dfbc03", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/m1gIvGknDk0DQqM-yUnqVlMGuRJfF98kO9JGMJ3ev_g.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6659952747d4e27a4328a750a3583152c64a8d34", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/m1gIvGknDk0DQqM-yUnqVlMGuRJfF98kO9JGMJ3ev_g.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1fe5126f21338ad9ad263b1cf2d6a25df214e959", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/m1gIvGknDk0DQqM-yUnqVlMGuRJfF98kO9JGMJ3ev_g.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c04350e6aedc52f8c75ee70f955bf5b2b255eb51", "width": 320, "height": 320}], "variants": {}, "id": "0dgofSbD3XnAvvent6IxqqPq1HHdwYA9hWL-Y2_qrUE"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hfcnnp", "is_robot_indexable": true, "report_reasons": null, "author": "weather-headed", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hfcnnp/simple_algo_visualizer_reverse_an_array/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hfcnnp/simple_algo_visualizer_reverse_an_array/", "subreddit_subscribers": 42779, "created_utc": 1593045223.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_35unu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "8 Visual Studio Code Assistant rules for nasty TypeScript / Angular bugs", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 108, "top_awarded_type": null, "hide_score": false, "name": "t3_hfhu2t", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.6, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/XHQ5eXNqO5vsL_QszmCwy1KxcjXh_frNDmDTvVNot-k.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1593098713.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/@tomaszs2/8-visual-studio-code-assistant-rules-for-nasty-angular-bugs-9f186277e0ab", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/xhJzfq9e0wRrpUKFH_6LrJ1lr4KbuKa3sTEnxKE3uCg.jpg?auto=webp&amp;s=4ddae1606cf61f6613fa3e2fbcaeff35e28ab617", "width": 1200, "height": 928}, "resolutions": [{"url": "https://external-preview.redd.it/xhJzfq9e0wRrpUKFH_6LrJ1lr4KbuKa3sTEnxKE3uCg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=4c48f328f432ac9b711063bec006d368f1e92368", "width": 108, "height": 83}, {"url": "https://external-preview.redd.it/xhJzfq9e0wRrpUKFH_6LrJ1lr4KbuKa3sTEnxKE3uCg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f1bed92c8ce4cabed54005adeaf79195c424d089", "width": 216, "height": 167}, {"url": "https://external-preview.redd.it/xhJzfq9e0wRrpUKFH_6LrJ1lr4KbuKa3sTEnxKE3uCg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=e74dae877c38bcefffac4055ddccb35c4be6bf8a", "width": 320, "height": 247}, {"url": "https://external-preview.redd.it/xhJzfq9e0wRrpUKFH_6LrJ1lr4KbuKa3sTEnxKE3uCg.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=6f6b3665f5913a66a19d8bfb02771f6ee3b9538a", "width": 640, "height": 494}, {"url": "https://external-preview.redd.it/xhJzfq9e0wRrpUKFH_6LrJ1lr4KbuKa3sTEnxKE3uCg.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=e2f915e585a39bde9c7a8ef29b5acd90d6aab06c", "width": 960, "height": 742}, {"url": "https://external-preview.redd.it/xhJzfq9e0wRrpUKFH_6LrJ1lr4KbuKa3sTEnxKE3uCg.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=283f40f73b25ae9ffdd3e12f2de242fb538c2989", "width": 1080, "height": 835}], "variants": {}, "id": "gBNEByQ7qY4Nn7IF4Ggx2D3VXdKrJa2WTlKIH1ZrZ8k"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hfhu2t", "is_robot_indexable": true, "report_reasons": null, "author": "bear007", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hfhu2t/8_visual_studio_code_assistant_rules_for_nasty/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@tomaszs2/8-visual-studio-code-assistant-rules-for-nasty-angular-bugs-9f186277e0ab", "subreddit_subscribers": 42779, "created_utc": 1593069913.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Let's say I have a custom Map type, like this:\n\n```\ntype shapeMap = Map&lt;string, [number, number][]&gt;\n```\n\nHow do I get the value type of this Map back (`[number, number][]`)? I can do something stupid like this, but it seems very incorrect:\n\n```\ntype shapeMapValue = Exclude&lt;ReturnType&lt;shapeMap[\"get\"]&gt;, undefined&gt;\n```", "author_fullname": "t2_2ddzk3sp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Getting Map value type", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hf5g3a", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593049094.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Let&amp;#39;s say I have a custom Map type, like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\ntype shapeMap = Map&amp;lt;string, [number, number][]&amp;gt;\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;How do I get the value type of this Map back (&lt;code&gt;[number, number][]&lt;/code&gt;)? I can do something stupid like this, but it seems very incorrect:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\ntype shapeMapValue = Exclude&amp;lt;ReturnType&amp;lt;shapeMap[&amp;quot;get&amp;quot;]&amp;gt;, undefined&amp;gt;\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hf5g3a", "is_robot_indexable": true, "report_reasons": null, "author": "MKuranowski", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hf5g3a/getting_map_value_type/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hf5g3a/getting_map_value_type/", "subreddit_subscribers": 42779, "created_utc": 1593020294.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Sorry for the weird title, but I don't really know how to describe it in a short way :D So here is an example:\n\n    type T1 = {\n        prop: 'v1';\n    }\n    type T2 = {\n        prop: 'v2';\n    }\n\nNow, I want to have something like that:\n\n    type PropType = 'v1' | 'v2';\n\nBUT without explicitly writing v1 and v2 again. Is there some way to extract the type from \"prop\" off T1 and T2? Something like:\n\n    type PropType = ExtractPropertyType&lt;T1 | T2, 'prop'&gt;;\n\nThanks for any help!", "author_fullname": "t2_37bcoxh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Get union type from property type shared by different types", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hezem0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 19, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 19, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593027097.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Sorry for the weird title, but I don&amp;#39;t really know how to describe it in a short way :D So here is an example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type T1 = {\n    prop: &amp;#39;v1&amp;#39;;\n}\ntype T2 = {\n    prop: &amp;#39;v2&amp;#39;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, I want to have something like that:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type PropType = &amp;#39;v1&amp;#39; | &amp;#39;v2&amp;#39;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;BUT without explicitly writing v1 and v2 again. Is there some way to extract the type from &amp;quot;prop&amp;quot; off T1 and T2? Something like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type PropType = ExtractPropertyType&amp;lt;T1 | T2, &amp;#39;prop&amp;#39;&amp;gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Thanks for any help!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hezem0", "is_robot_indexable": true, "report_reasons": null, "author": "OptionalHippo", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hezem0/get_union_type_from_property_type_shared_by/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hezem0/get_union_type_from_property_type_shared_by/", "subreddit_subscribers": 42779, "created_utc": 1592998297.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Yesterday I started writing a few web scrapers in Node.js to gather some data for a personal project of mine (wait for it). One of the things I had to deal, is how to convert addresses to geolocation (latitude and longitude, basically.) So I started doing what we do best as Javascript developers: \n\n*Hm\u2026 there must be a package for that.*\n\n&amp;#x200B;\n\n[https://medium.com/@armand1m\\_/an-alternative-to-google-geocoder-api-in-node-js-78728c7b9faa?source=friends\\_link&amp;sk=914c1b3acee09686d740675b1e8424d7](https://medium.com/@armand1m_/an-alternative-to-google-geocoder-api-in-node-js-78728c7b9faa?source=friends_link&amp;sk=914c1b3acee09686d740675b1e8424d7)", "author_fullname": "t2_3cl7e290", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "An alternative to Google Geocoder API (in Node.js)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hf2jyh", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593039761.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Yesterday I started writing a few web scrapers in Node.js to gather some data for a personal project of mine (wait for it). One of the things I had to deal, is how to convert addresses to geolocation (latitude and longitude, basically.) So I started doing what we do best as Javascript developers: &lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Hm\u2026 there must be a package for that.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://medium.com/@armand1m_/an-alternative-to-google-geocoder-api-in-node-js-78728c7b9faa?source=friends_link&amp;amp;sk=914c1b3acee09686d740675b1e8424d7\"&gt;https://medium.com/@armand1m_/an-alternative-to-google-geocoder-api-in-node-js-78728c7b9faa?source=friends_link&amp;amp;sk=914c1b3acee09686d740675b1e8424d7&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hf2jyh", "is_robot_indexable": true, "report_reasons": null, "author": "EvoNext", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hf2jyh/an_alternative_to_google_geocoder_api_in_nodejs/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hf2jyh/an_alternative_to_google_geocoder_api_in_nodejs/", "subreddit_subscribers": 42779, "created_utc": 1593010961.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "    export default class Utilities {\n    \n       /* take a generic callback argument. Store all return values \n          of the callback until the callback returns false\n    \n       Then, end looping. Return an array of all prior return values\n       */\n       static loopUntilFalse&lt;Args, CallbackReturn&gt;(callback: (args: Args) =&gt; CallbackReturn|false): unknown {\n          let continueLooping = true;\n          const returnValues: Array&lt;CallbackReturn&gt; = [];\n    \n          while (continueLooping === true) {\n    \n             // any\n             // Cannot find name 'args'.ts(2304)\n             const latestReturnValue = callback(args);\n    \n             if (latestReturnValue === false) { \n                continueLooping = false \n             } else if (typeof latestReturnValue !== \"boolean\") {\n                returnValues.push(latestReturnValue);\n             }\n          }\n    \n          return returnValues;\n       }\n    }\n\nHow should an unknown shape of arguments be passed into the method here? I'm a little rough on generics and also function argument syntax in TS, so I suspect the problem is on one of those, or a combination of both.\n\nAlso if my generic return syntax looks off any feedback there is also welcome.\n\n&amp;#x200B;", "author_fullname": "t2_4w51o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Help passing generic callback arguments to a utility method's callback", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hf10mx", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1593006496.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593034114.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;export default class Utilities {\n\n   /* take a generic callback argument. Store all return values \n      of the callback until the callback returns false\n\n   Then, end looping. Return an array of all prior return values\n   */\n   static loopUntilFalse&amp;lt;Args, CallbackReturn&amp;gt;(callback: (args: Args) =&amp;gt; CallbackReturn|false): unknown {\n      let continueLooping = true;\n      const returnValues: Array&amp;lt;CallbackReturn&amp;gt; = [];\n\n      while (continueLooping === true) {\n\n         // any\n         // Cannot find name &amp;#39;args&amp;#39;.ts(2304)\n         const latestReturnValue = callback(args);\n\n         if (latestReturnValue === false) { \n            continueLooping = false \n         } else if (typeof latestReturnValue !== &amp;quot;boolean&amp;quot;) {\n            returnValues.push(latestReturnValue);\n         }\n      }\n\n      return returnValues;\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How should an unknown shape of arguments be passed into the method here? I&amp;#39;m a little rough on generics and also function argument syntax in TS, so I suspect the problem is on one of those, or a combination of both.&lt;/p&gt;\n\n&lt;p&gt;Also if my generic return syntax looks off any feedback there is also welcome.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hf10mx", "is_robot_indexable": true, "report_reasons": null, "author": "fpuen", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hf10mx/help_passing_generic_callback_arguments_to_a/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hf10mx/help_passing_generic_callback_arguments_to_a/", "subreddit_subscribers": 42779, "created_utc": 1593005314.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm having trouble understanding the static analysis in TypeScript, can anyone tell me why this works:\n\n    const myFunc = (aParam?: string, upper?: boolean): string =&gt; {\n      if (aParam &amp;&amp; upper) {\n        return aParam.toUpperCase();\n      }\n      return 'Hello';\n    }\n\nbut not this:\n\n    const myFunc = (aParam?: string, upper?: boolean): string =&gt; {\n      const x = aParam &amp;&amp; upper;\n      if (x) {\n        return aParam.toUpperCase();\n      }\n      return 'Hello';\n    }\n\nThe bottom code results in \"Object is possibly 'undefined'\" for aParam", "author_fullname": "t2_5qrfa", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Compile-time null/undefined check confusion", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hf39oc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593042196.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m having trouble understanding the static analysis in TypeScript, can anyone tell me why this works:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const myFunc = (aParam?: string, upper?: boolean): string =&amp;gt; {\n  if (aParam &amp;amp;&amp;amp; upper) {\n    return aParam.toUpperCase();\n  }\n  return &amp;#39;Hello&amp;#39;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but not this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const myFunc = (aParam?: string, upper?: boolean): string =&amp;gt; {\n  const x = aParam &amp;amp;&amp;amp; upper;\n  if (x) {\n    return aParam.toUpperCase();\n  }\n  return &amp;#39;Hello&amp;#39;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The bottom code results in &amp;quot;Object is possibly &amp;#39;undefined&amp;#39;&amp;quot; for aParam&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hf39oc", "is_robot_indexable": true, "report_reasons": null, "author": "phalanui", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hf39oc/compiletime_nullundefined_check_confusion/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hf39oc/compiletime_nullundefined_check_confusion/", "subreddit_subscribers": 42779, "created_utc": 1593013396.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hey there! \n\nI have a project in mind that would require broadcasting video from user to user, with some features that allow for applying filters to video frames in-between (in node/typescript backend service). \n\nI've read about webrtc a bit, but there aren't a ton of resources out there and the examples on webrtc site are a bit vague. \n\nAny ideas / suggestions / alternatives? \n\nThank you!", "author_fullname": "t2_6nk4lswu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best approach for video streaming web app", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_heqpdn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592987560.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey there! &lt;/p&gt;\n\n&lt;p&gt;I have a project in mind that would require broadcasting video from user to user, with some features that allow for applying filters to video frames in-between (in node/typescript backend service). &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve read about webrtc a bit, but there aren&amp;#39;t a ton of resources out there and the examples on webrtc site are a bit vague. &lt;/p&gt;\n\n&lt;p&gt;Any ideas / suggestions / alternatives? &lt;/p&gt;\n\n&lt;p&gt;Thank you!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "heqpdn", "is_robot_indexable": true, "report_reasons": null, "author": "devnubster", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/heqpdn/best_approach_for_video_streaming_web_app/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/heqpdn/best_approach_for_video_streaming_web_app/", "subreddit_subscribers": 42779, "created_utc": 1592958760.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm trying to approach something like this:\n\n```\nclass Document {}\n\nclass User extends Document {\n  email: string;\n}\n\nexport class Service&lt;T extends Document&gt; {\n  constructor() {}\n  find(): T {\n    const user = new User();\n    user.email = 'info@example.com';\n    return user;\n  }\n}\n\nexport class UserService extends Service&lt;User&gt; {\n  constructor() {\n    super();\n  }\n}\n\nconst userService = new UserService();\nconst user = userService.find();\nconsole.log(\"user &gt;&gt;&gt;&gt;\", user);\n```\n\nthis gives me the error: \n\n```\ntest.ts:12:5 - error TS2322: Type 'User' is not assignable to type 'T'.\n  'User' is assignable to the constraint of type 'T', but 'T' could be instantiated with a different subtype of constraint 'Document'.\n\n12     return user;\n       ~~~~~~~~~~~~\n```\n\nhow can I fix this?", "author_fullname": "t2_44g01slv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Generic type defined at class-level", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hewb4z", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593011137.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to approach something like this:&lt;/p&gt;\n\n&lt;p&gt;```\nclass Document {}&lt;/p&gt;\n\n&lt;p&gt;class User extends Document {\n  email: string;\n}&lt;/p&gt;\n\n&lt;p&gt;export class Service&amp;lt;T extends Document&amp;gt; {\n  constructor() {}\n  find(): T {\n    const user = new User();\n    user.email = &amp;#39;&lt;a href=\"mailto:info@example.com\"&gt;info@example.com&lt;/a&gt;&amp;#39;;\n    return user;\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export class UserService extends Service&amp;lt;User&amp;gt; {\n  constructor() {\n    super();\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;const userService = new UserService();\nconst user = userService.find();\nconsole.log(&amp;quot;user &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;quot;, user);\n```&lt;/p&gt;\n\n&lt;p&gt;this gives me the error: &lt;/p&gt;\n\n&lt;p&gt;```\ntest.ts:12:5 - error TS2322: Type &amp;#39;User&amp;#39; is not assignable to type &amp;#39;T&amp;#39;.\n  &amp;#39;User&amp;#39; is assignable to the constraint of type &amp;#39;T&amp;#39;, but &amp;#39;T&amp;#39; could be instantiated with a different subtype of constraint &amp;#39;Document&amp;#39;.&lt;/p&gt;\n\n&lt;p&gt;12     return user;\n       ~~~~~~~~~~~~\n```&lt;/p&gt;\n\n&lt;p&gt;how can I fix this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hewb4z", "is_robot_indexable": true, "report_reasons": null, "author": "koomenk", "discussion_type": null, "num_comments": 10, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hewb4z/generic_type_defined_at_classlevel/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hewb4z/generic_type_defined_at_classlevel/", "subreddit_subscribers": 42779, "created_utc": 1592982337.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_1sx0ljkb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "(Beta) I've written a guide to architecting Node TypeScript apps - still WIP but has a runnable companion repo and full documentation", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 73, "top_awarded_type": null, "hide_score": false, "name": "t3_hed665", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 42, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 42, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/Co81dT_wn1MdOcxnl3FVj_xFkiFtQcxg5879pTWYpTc.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1592941746.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "jbreckmckye.gitbook.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://jbreckmckye.gitbook.io/node-ts-architecture/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VTAm3L7PBeBBfCcfBe907p88o1XYn3fosuU34RQ6DZU.jpg?auto=webp&amp;s=fd88093475cb2b18839ba0f76ce975740aaff760", "width": 1200, "height": 630}, "resolutions": [{"url": "https://external-preview.redd.it/VTAm3L7PBeBBfCcfBe907p88o1XYn3fosuU34RQ6DZU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=dd2ab7c7554d0c49869fefc7d9361a97a4fb9d02", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/VTAm3L7PBeBBfCcfBe907p88o1XYn3fosuU34RQ6DZU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d1a2f14744e2e8277c316430948420583e1e4881", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/VTAm3L7PBeBBfCcfBe907p88o1XYn3fosuU34RQ6DZU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=997c69dfc47d0dd845549ca362d21e9cd0e308ed", "width": 320, "height": 168}, {"url": "https://external-preview.redd.it/VTAm3L7PBeBBfCcfBe907p88o1XYn3fosuU34RQ6DZU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=f7a64ac2cc612c2ed1aab5930bd17b1faf81eaea", "width": 640, "height": 336}, {"url": "https://external-preview.redd.it/VTAm3L7PBeBBfCcfBe907p88o1XYn3fosuU34RQ6DZU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=e7886060bcce369fc67e4fd6d120d9300b8d15f5", "width": 960, "height": 504}, {"url": "https://external-preview.redd.it/VTAm3L7PBeBBfCcfBe907p88o1XYn3fosuU34RQ6DZU.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=cc0c9e5480125e960a0e795d8eb7420660adbd0c", "width": 1080, "height": 567}], "variants": {}, "id": "mY0TmduBds1R3q4vrj7z1bEAjtMMf5uTgfGSSrNIx60"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hed665", "is_robot_indexable": true, "report_reasons": null, "author": "yojimbo_beta", "discussion_type": null, "num_comments": 13, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hed665/beta_ive_written_a_guide_to_architecting_node/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://jbreckmckye.gitbook.io/node-ts-architecture/", "subreddit_subscribers": 42779, "created_utc": 1592912946.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_hed665", "before": null}}