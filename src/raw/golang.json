{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_10x60q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "In the german keyboard layout the keys for = and ) are next to each other, which sometimes results in happy little typos :)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fi2ukz", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 198, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 198, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584147564.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fi2ukz", "is_robot_indexable": true, "report_reasons": null, "author": "nikoksr", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fi2ukz/in_the_german_keyboard_layout_the_keys_for_and/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://i.redd.it/dtlpd62g0hm41.png", "subreddit_subscribers": 105878, "created_utc": 1584118764.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4yhvm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GolangCI.com is closing", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_fiif1m", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584221593.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fiif1m", "is_robot_indexable": true, "report_reasons": null, "author": "mondoman712", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fiif1m/golangcicom_is_closing/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/golangci/golangci-com-is-closing-d1fc1bd30e0e", "subreddit_subscribers": 105878, "created_utc": 1584192793.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello friends this is another go version manager that i created for fun, to learn how to use go and because i'm so lazy to update to latest version.. XD.  Peace out\n\n[https://github.com/ljesparis/govm](https://github.com/ljesparis/govm)", "author_fullname": "t2_gs4sprz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "yet another go version manager for fun XD", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_fiib30", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1584221082.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello friends this is another go version manager that i created for fun, to learn how to use go and because i&amp;#39;m so lazy to update to latest version.. XD.  Peace out&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ljesparis/govm\"&gt;https://github.com/ljesparis/govm&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fiib30", "is_robot_indexable": true, "report_reasons": null, "author": "ljesparis", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fiib30/yet_another_go_version_manager_for_fun_xd/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/fiib30/yet_another_go_version_manager_for_fun_xd/", "subreddit_subscribers": 105878, "created_utc": 1584192282.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi, I want to design a `Replay` serivce, which acts as a failover. the service has a `Append` method to receive payload, and a `Recover` method to redo with the payload.\n\nNow, different serivces have same `Append` method implementation but different `Recover`, and I came with a solution like below\n\n```\ntype payload int\n\ntype Appender interface {\n\tAppend(payload) error\n\tClose() error\n}\n\ntype Recover interface {\n\tRecover(payload) error\n}\n\ntype Replay interface {\n\tAppender\n\tRecover\n}\n\ntype baseAppender struct {\n\titems chan payload\n\tr     Recover\n\n\tcloseCh chan struct{}\n}\n\nfunc newBaseAppender(cap int, r Recover) *baseAppender {\n\tba := &amp;baseAppender{\n\t\titems:   make(chan payload, cap),\n\t\tr:       r,\n\t\tcloseCh: make(chan struct{}),\n\t}\n\tgo ba.retryLoop()\n\treturn ba\n}\n\nfunc (b *baseAppender) retryLoop() {\n\tfor {\n\t\tselect {\n\t\tcase &lt;-b.closeCh:\n\t\t\tlog.Println(\"exit retry loop...\")\n\t\t\treturn\n\t\tcase p := &lt;-b.items:\n\t\t\tb.r.Recover(p)\n\t\t}\n\t}\n}\n\nfunc (b *baseAppender) Close() error {\n\tclose(b.closeCh)\n\treturn nil\n}\n\nfunc (b *baseAppender) Append(p payload) error {\n\tb.items &lt;- p\n\treturn nil\n}\n\ntype replayImpl struct {\n\t*baseAppender\n}\n\nfunc (ri replayImpl) Recover(p payload) error {\n\tlog.Printf(\"get = %v\\n\", p)\n\treturn nil\n}\n\nfunc test(r Replay) {\n\tr.Append(payload(1))\n\tr.Append(payload(2))\n}\n\nfunc main() {\n\n\tri := replayImpl{}\n\tri.baseAppender = newBaseAppender(10, ri)\n\ttest(ri)\n\n\ttime.Sleep(5 * time.Second)\n\n```\nplayground link: https://play.golang.org/p/UcLzlfpawsR\n\nAs you can see above, `baseAppender` and `replayImpl` have mutual reference in main, I don't know if this is idiomatic in Golang, some google searches[1][2] show others do this way too, but I feel awkward with the mutual reference, Do your guy have any better design?\n\n- [1] https://stackoverflow.com/a/24234998\n- [2] https://golangbyexample.com/go-abstract-class/", "author_fullname": "t2_fj1nb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to design abstract class in go interface?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fid6er", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1584189893.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I want to design a &lt;code&gt;Replay&lt;/code&gt; serivce, which acts as a failover. the service has a &lt;code&gt;Append&lt;/code&gt; method to receive payload, and a &lt;code&gt;Recover&lt;/code&gt; method to redo with the payload.&lt;/p&gt;\n\n&lt;p&gt;Now, different serivces have same &lt;code&gt;Append&lt;/code&gt; method implementation but different &lt;code&gt;Recover&lt;/code&gt;, and I came with a solution like below&lt;/p&gt;\n\n&lt;p&gt;```\ntype payload int&lt;/p&gt;\n\n&lt;p&gt;type Appender interface {\n    Append(payload) error\n    Close() error\n}&lt;/p&gt;\n\n&lt;p&gt;type Recover interface {\n    Recover(payload) error\n}&lt;/p&gt;\n\n&lt;p&gt;type Replay interface {\n    Appender\n    Recover\n}&lt;/p&gt;\n\n&lt;p&gt;type baseAppender struct {\n    items chan payload\n    r     Recover&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;closeCh chan struct{}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}&lt;/p&gt;\n\n&lt;p&gt;func newBaseAppender(cap int, r Recover) *baseAppender {\n    ba := &amp;amp;baseAppender{\n        items:   make(chan payload, cap),\n        r:       r,\n        closeCh: make(chan struct{}),\n    }\n    go ba.retryLoop()\n    return ba\n}&lt;/p&gt;\n\n&lt;p&gt;func (b *baseAppender) retryLoop() {\n    for {\n        select {\n        case &amp;lt;-b.closeCh:\n            log.Println(&amp;quot;exit retry loop...&amp;quot;)\n            return\n        case p := &amp;lt;-b.items:\n            b.r.Recover(p)\n        }\n    }\n}&lt;/p&gt;\n\n&lt;p&gt;func (b *baseAppender) Close() error {\n    close(b.closeCh)\n    return nil\n}&lt;/p&gt;\n\n&lt;p&gt;func (b *baseAppender) Append(p payload) error {\n    b.items &amp;lt;- p\n    return nil\n}&lt;/p&gt;\n\n&lt;p&gt;type replayImpl struct {\n    *baseAppender\n}&lt;/p&gt;\n\n&lt;p&gt;func (ri replayImpl) Recover(p payload) error {\n    log.Printf(&amp;quot;get = %v\\n&amp;quot;, p)\n    return nil\n}&lt;/p&gt;\n\n&lt;p&gt;func test(r Replay) {\n    r.Append(payload(1))\n    r.Append(payload(2))\n}&lt;/p&gt;\n\n&lt;p&gt;func main() {&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ri := replayImpl{}\nri.baseAppender = newBaseAppender(10, ri)\ntest(ri)\n\ntime.Sleep(5 * time.Second)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;```\nplayground link: &lt;a href=\"https://play.golang.org/p/UcLzlfpawsR\"&gt;https://play.golang.org/p/UcLzlfpawsR&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;As you can see above, &lt;code&gt;baseAppender&lt;/code&gt; and &lt;code&gt;replayImpl&lt;/code&gt; have mutual reference in main, I don&amp;#39;t know if this is idiomatic in Golang, some google searches[1][2] show others do this way too, but I feel awkward with the mutual reference, Do your guy have any better design?&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;[1] &lt;a href=\"https://stackoverflow.com/a/24234998\"&gt;https://stackoverflow.com/a/24234998&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;[2] &lt;a href=\"https://golangbyexample.com/go-abstract-class/\"&gt;https://golangbyexample.com/go-abstract-class/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fid6er", "is_robot_indexable": true, "report_reasons": null, "author": "jiacai2050", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fid6er/how_to_design_abstract_class_in_go_interface/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/fid6er/how_to_design_abstract_class_in_go_interface/", "subreddit_subscribers": 105878, "created_utc": 1584161093.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_1w5x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to Use Netlify to Deploy a Free Go Web Application", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fi4jax", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 18, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 18, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584153822.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.carlmjohnson.net", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fi4jax", "is_robot_indexable": true, "report_reasons": null, "author": "earthboundkid", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fi4jax/how_to_use_netlify_to_deploy_a_free_go_web/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://blog.carlmjohnson.net/post/2020/2020-03-01-how-to-host-golang-on-netlify-for-free/", "subreddit_subscribers": 105878, "created_utc": 1584125022.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_12hsl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "gap v0.2.0 - a package to retrieve platform-specific paths (like config, user-data, cache, logs)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fi3jg2", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584150126.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fi3jg2", "is_robot_indexable": true, "report_reasons": null, "author": "muesli", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fi3jg2/gap_v020_a_package_to_retrieve_platformspecific/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/muesli/go-app-paths", "subreddit_subscribers": 105878, "created_utc": 1584121326.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Here's the link  [https://t.me/joinchat/QJ3IRxlEFFBlhFaSxMRuwQ](https://t.me/joinchat/QJ3IRxlEFFBlhFaSxMRuwQ) \n\nWe are currently about 11 members in the group and we planned to take up to solve exercises of \"The Go programming language\" book every week . \n\nWe're currently on our first week solving chapter 1 exercises. We plan to review each other's code after we are done. \n\n&amp;#x200B;\n\nPlease join the group if you'd like to involve in this learning process. If you're already proficient in golang, you can still join to review other's code and help us all learn the language the RIGHT way.", "author_fullname": "t2_3zsqfq5r", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Just a reminder - There's a Golang telegram group to sync up and learn the language together.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fi6scq", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1584162171.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Here&amp;#39;s the link  &lt;a href=\"https://t.me/joinchat/QJ3IRxlEFFBlhFaSxMRuwQ\"&gt;https://t.me/joinchat/QJ3IRxlEFFBlhFaSxMRuwQ&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;We are currently about 11 members in the group and we planned to take up to solve exercises of &amp;quot;The Go programming language&amp;quot; book every week . &lt;/p&gt;\n\n&lt;p&gt;We&amp;#39;re currently on our first week solving chapter 1 exercises. We plan to review each other&amp;#39;s code after we are done. &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Please join the group if you&amp;#39;d like to involve in this learning process. If you&amp;#39;re already proficient in golang, you can still join to review other&amp;#39;s code and help us all learn the language the RIGHT way.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fi6scq", "is_robot_indexable": true, "report_reasons": null, "author": "designatedtruth", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fi6scq/just_a_reminder_theres_a_golang_telegram_group_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/fi6scq/just_a_reminder_theres_a_golang_telegram_group_to/", "subreddit_subscribers": 105878, "created_utc": 1584133371.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "running this says \"undefined: palette\" at line 34.  I see the problem but don't know how to instantiate pallette.  This is to create lissajous gifs.  Would be fun to get it working:\n\n&amp;#x200B;\n\n`package main`  \n`import (`  \n `\"image\"`  \n `\"image/color\"`  \n `\"image/gif\"`  \n `\"io\"`  \n `\"math\"`  \n `\"math/rand\"`  \n `\"os\"`  \n`)`  \n`var pal = []color.Color{color.White,color.Black}`  \n`const (`  \n `whiteIndex = 0`  \n `blackIndex = 1`  \n`)`  \n`func main() {`  \n `lissajous(os.Stdout)`  \n`}`  \n`func lissajous(out io.Writer){`  \n `const (`  \n `cycles = 5`  \n `res = 0.001`  \n `size = 100`  \n `nframes = 64`  \n `delay = 8`  \n`)`  \n `freq := rand.Float64() *3.0`  \n `anim := gif.GIF{LoopCount: nframes}`  \n `phase := 0.0`  \n `for i := 0; i &lt; nframes; i++ {`  \n `rect := image.Rect(0,0,2*size+1,2*size+1)`  \n `img := image.NewPaletted(rect,palette)   // HERE IS THE PROBLEM!!!`  \n `for t:=0.0;t&lt;cycles*2*math.Pi; t += res{`  \n `x:=math.Sin(t)`  \n `y := math.Sin(t*freq + phase)`  \n`img.SetColorIndex(size+int(x*size+0.5),`  \n`size + int(y*size+0.5),`  \n`blackIndex)`  \n`}`  \n`phase += 0.1`  \n `anim.Delay = append(anim.Delay,delay)`  \n `anim.Image = append(anim.Image,img)`  \n`gif.EncodeAll(out, &amp;anim)`  \n`}`  \n`}`", "author_fullname": "t2_slat8xu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I'm doing the book on amazon \"Go Programming Language: A Complete Guide for Beginners\" and it has a bug in one of the examples. Can anyone spot it?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fi07ts", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1584137411.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;running this says &amp;quot;undefined: palette&amp;quot; at line 34.  I see the problem but don&amp;#39;t know how to instantiate pallette.  This is to create lissajous gifs.  Would be fun to get it working:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;package main&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;import (&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;&amp;quot;image&amp;quot;&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;&amp;quot;image/color&amp;quot;&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;&amp;quot;image/gif&amp;quot;&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;&amp;quot;io&amp;quot;&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;&amp;quot;math&amp;quot;&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;&amp;quot;math/rand&amp;quot;&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;&amp;quot;os&amp;quot;&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;var pal = []color.Color{color.White,color.Black}&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;const (&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;whiteIndex = 0&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;blackIndex = 1&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;func main() {&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;lissajous(os.Stdout)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;}&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;func lissajous(out io.Writer){&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;const (&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;cycles = 5&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;res = 0.001&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;size = 100&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;nframes = 64&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;delay = 8&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;)&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;freq := rand.Float64() *3.0&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;anim := gif.GIF{LoopCount: nframes}&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;phase := 0.0&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;for i := 0; i &amp;lt; nframes; i++ {&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;rect := image.Rect(0,0,2*size+1,2*size+1)&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;img := image.NewPaletted(rect,palette)   // HERE IS THE PROBLEM!!!&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;for t:=0.0;t&amp;lt;cycles*2*math.Pi; t += res{&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;x:=math.Sin(t)&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;y := math.Sin(t*freq + phase)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;img.SetColorIndex(size+int(x*size+0.5),&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;size + int(y*size+0.5),&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;blackIndex)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;}&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;phase += 0.1&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;anim.Delay = append(anim.Delay,delay)&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;anim.Image = append(anim.Image,img)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;gif.EncodeAll(out, &amp;amp;anim)&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;}&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fi07ts", "is_robot_indexable": true, "report_reasons": null, "author": "badukscenario", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fi07ts/im_doing_the_book_on_amazon_go_programming/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/fi07ts/im_doing_the_book_on_amazon_go_programming/", "subreddit_subscribers": 105878, "created_utc": 1584108611.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I'm pretty new to Go, so forgive me if I'm missing something obvious.\n\nI'm looking to take a document returned with the official MongoDB driver and marshal it into a custom type to work with later, but I'm missing something with the .Decode() method since my output is empty.\n\n\ttype discordUser struct {\n\t\tuserID            string `bson:\"userID\"`\n\t\tlastJoinTime      string `bson:\"lastJoinTime\"`\n\t\tconnected         bool   `bson:\"connected\"`\n\t\tlastChannelJoined string `bson:\"lastChannelJoined\"`\n\t}\n\n\ttype discordChannel struct {\n\t\tchannelID   string `bson:\"channelID\"`\n\t\tchannelName string `bson:\"channelName\"`\n\t}\n\n\ttype discordServer struct {\n\t\tserverID         string            `bson:\"serverID\"`\n\t\tprimaryChannelID string            `bson:\"primaryChannelID\"`\n\t\tusers            []*discordUser    `bson:\"users\"`\n\t\tchannels         []*discordChannel `bson:\"channels\"`\n\t\tsoundsPath       string            `bson:\"soundsPath\"`\n\t}\n\n\t...\n\n\tvar result discordServer\n\n\tif err := serversCollection.FindOne(context.TODO(), bson.M{\"serverID\": evt.GuildID}).Decode(&amp;result); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(result)\n\nThis returns output like this when the function its in gets called:\n\n    {  [] [] }\n\n\nIf I try decoding into something generic like bson.D, I see some output, but I'm unsure of how to work with it from there:\n\n\n\tvar result bson.D\n\n\tif err := serversCollection.FindOne(context.TODO(), bson.M{\"serverID\": evt.GuildID}).Decode(&amp;result); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\tfmt.Println(result)\n\n\nThis produces output that looks similar to this:\n\n\t[{_id ObjectID(\"...\")} {serverID ...} {primaryChannelID } {users [[{connected false} ...]", "author_fullname": "t2_am8tm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Marshaling MongoDB output into a custom type", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ficluh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1584186893.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m pretty new to Go, so forgive me if I&amp;#39;m missing something obvious.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m looking to take a document returned with the official MongoDB driver and marshal it into a custom type to work with later, but I&amp;#39;m missing something with the .Decode() method since my output is empty.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type discordUser struct {\n    userID            string `bson:&amp;quot;userID&amp;quot;`\n    lastJoinTime      string `bson:&amp;quot;lastJoinTime&amp;quot;`\n    connected         bool   `bson:&amp;quot;connected&amp;quot;`\n    lastChannelJoined string `bson:&amp;quot;lastChannelJoined&amp;quot;`\n}\n\ntype discordChannel struct {\n    channelID   string `bson:&amp;quot;channelID&amp;quot;`\n    channelName string `bson:&amp;quot;channelName&amp;quot;`\n}\n\ntype discordServer struct {\n    serverID         string            `bson:&amp;quot;serverID&amp;quot;`\n    primaryChannelID string            `bson:&amp;quot;primaryChannelID&amp;quot;`\n    users            []*discordUser    `bson:&amp;quot;users&amp;quot;`\n    channels         []*discordChannel `bson:&amp;quot;channels&amp;quot;`\n    soundsPath       string            `bson:&amp;quot;soundsPath&amp;quot;`\n}\n\n...\n\nvar result discordServer\n\nif err := serversCollection.FindOne(context.TODO(), bson.M{&amp;quot;serverID&amp;quot;: evt.GuildID}).Decode(&amp;amp;result); err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(result)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This returns output like this when the function its in gets called:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{  [] [] }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If I try decoding into something generic like bson.D, I see some output, but I&amp;#39;m unsure of how to work with it from there:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var result bson.D\n\nif err := serversCollection.FindOne(context.TODO(), bson.M{&amp;quot;serverID&amp;quot;: evt.GuildID}).Decode(&amp;amp;result); err != nil {\n    log.Fatal(err)\n}\n\nfmt.Println(result)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This produces output that looks similar to this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[{_id ObjectID(&amp;quot;...&amp;quot;)} {serverID ...} {primaryChannelID } {users [[{connected false} ...]\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ficluh", "is_robot_indexable": true, "report_reasons": null, "author": "BrunooSardine", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/ficluh/marshaling_mongodb_output_into_a_custom_type/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/ficluh/marshaling_mongodb_output_into_a_custom_type/", "subreddit_subscribers": 105878, "created_utc": 1584158093.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ekdew", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "cannon, a small CLI tool that lets you make changes to multiple git repos", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fi323z", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584148332.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fi323z", "is_robot_indexable": true, "report_reasons": null, "author": "jellycola", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fi323z/cannon_a_small_cli_tool_that_lets_you_make/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/touchbistro/cannon", "subreddit_subscribers": 105878, "created_utc": 1584119532.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_fi323z", "before": null}}