{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I posted a draft design today for new file system interfaces for Go.\n\nVideo: https://golang.org/s/draft-iofs-video\n\nDesign: https://golang.org/s/draft-iofs-design\n\nLet's do the Q&amp;A about the design here in Reddit. My hope is that the threading support will help keep questions and answers matched.\n\nPlease start a new top-level comment for each new question.\n\nSee also the related [Q&amp;A for the //go:embed draft design](https://golang.org/s/draft-embed-reddit).", "author_fullname": "t2_2jha", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Q&amp;A] io/fs draft design", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hv976o", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 164, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 164, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1595425280.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1595373625.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I posted a draft design today for new file system interfaces for Go.&lt;/p&gt;\n\n&lt;p&gt;Video: &lt;a href=\"https://golang.org/s/draft-iofs-video\"&gt;https://golang.org/s/draft-iofs-video&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Design: &lt;a href=\"https://golang.org/s/draft-iofs-design\"&gt;https://golang.org/s/draft-iofs-design&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s do the Q&amp;amp;A about the design here in Reddit. My hope is that the threading support will help keep questions and answers matched.&lt;/p&gt;\n\n&lt;p&gt;Please start a new top-level comment for each new question.&lt;/p&gt;\n\n&lt;p&gt;See also the related &lt;a href=\"https://golang.org/s/draft-embed-reddit\"&gt;Q&amp;amp;A for the //go:embed draft design&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 150, "id": "award_77ba55a2-c33c-4351-ac49-807455a80148", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png", "days_of_premium": 0, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=16&amp;height=16&amp;auto=webp&amp;s=7a2f2b927be72d2b46ebd95bab8c072c3be0fbab", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=32&amp;height=32&amp;auto=webp&amp;s=6e42b7095bcc331e53202438613aa827addf70c3", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=48&amp;height=48&amp;auto=webp&amp;s=c740f7ef642fd2042d62c2bcba98734d08dfae6c", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=64&amp;height=64&amp;auto=webp&amp;s=74e630f1072bb2423034ae48aefa241d834d7186", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=128&amp;height=128&amp;auto=webp&amp;s=0a89cd8011c8210315ee60441eefd77b973a0c82", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "description": "Prayers up for the blessed.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Bless Up", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=16&amp;height=16&amp;auto=webp&amp;s=7a2f2b927be72d2b46ebd95bab8c072c3be0fbab", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=32&amp;height=32&amp;auto=webp&amp;s=6e42b7095bcc331e53202438613aa827addf70c3", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=48&amp;height=48&amp;auto=webp&amp;s=c740f7ef642fd2042d62c2bcba98734d08dfae6c", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=64&amp;height=64&amp;auto=webp&amp;s=74e630f1072bb2423034ae48aefa241d834d7186", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=128&amp;height=128&amp;auto=webp&amp;s=0a89cd8011c8210315ee60441eefd77b973a0c82", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hv976o", "is_robot_indexable": true, "report_reasons": null, "author": "rsc", "discussion_type": null, "num_comments": 209, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hv976o/qa_iofs_draft_design/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/golang/comments/hv976o/qa_iofs_draft_design/", "subreddit_subscribers": 120077, "created_utc": 1595344825.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I posted a draft design today for embedding files into Go programs.\n\nVideo: https://golang.org/s/draft-embed-video\n\nDesign: https://golang.org/s/draft-embed-design\n\nLet's do the Q&amp;A about the design here in Reddit. My hope is that the threading support will help keep questions and answers matched.\n\nPlease start a new top-level comment for each new question.\n\nSee also the related [Q&amp;A for the io/fs draft design](https://golang.org/s/draft-iofs-reddit).", "author_fullname": "t2_2jha", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Q&amp;A] //go:embed draft design", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hv96ny", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 120, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 120, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1595373578.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I posted a draft design today for embedding files into Go programs.&lt;/p&gt;\n\n&lt;p&gt;Video: &lt;a href=\"https://golang.org/s/draft-embed-video\"&gt;https://golang.org/s/draft-embed-video&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Design: &lt;a href=\"https://golang.org/s/draft-embed-design\"&gt;https://golang.org/s/draft-embed-design&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s do the Q&amp;amp;A about the design here in Reddit. My hope is that the threading support will help keep questions and answers matched.&lt;/p&gt;\n\n&lt;p&gt;Please start a new top-level comment for each new question.&lt;/p&gt;\n\n&lt;p&gt;See also the related &lt;a href=\"https://golang.org/s/draft-iofs-reddit\"&gt;Q&amp;amp;A for the io/fs draft design&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hv96ny", "is_robot_indexable": true, "report_reasons": null, "author": "rsc", "discussion_type": null, "num_comments": 127, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hv96ny/qa_goembed_draft_design/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/golang/comments/hv96ny/qa_goembed_draft_design/", "subreddit_subscribers": 120077, "created_utc": 1595344778.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_146xxl4f", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A Growing Collection of Challenges to help you learn Go and Math!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hxkpxt", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.87, "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1595702529.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "tutorialedge.net", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://tutorialedge.net/challenges/go/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hxkpxt", "is_robot_indexable": true, "report_reasons": null, "author": "elliotforbes", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hxkpxt/a_growing_collection_of_challenges_to_help_you/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://tutorialedge.net/challenges/go/", "subreddit_subscribers": 120077, "created_utc": 1595673729.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_dtivp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go 1.15 Release Candidate 1 is released", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hx98am", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 96, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 96, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1595650744.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "groups.google.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://groups.google.com/forum/m/#!msg/golang-announce/irEtdvYep-Y/rOH3sqouCAAJ", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hx98am", "is_robot_indexable": true, "report_reasons": null, "author": "smasher164", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hx98am/go_115_release_candidate_1_is_released/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://groups.google.com/forum/m/#!msg/golang-announce/irEtdvYep-Y/rOH3sqouCAAJ", "subreddit_subscribers": 120077, "created_utc": 1595621944.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_qa6asfl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A simple HTTP Server to share files over WiFi via Qr Code", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hxlxfr", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1595708927.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/prdpx7/go-fileserver", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hxlxfr", "is_robot_indexable": true, "report_reasons": null, "author": "prdpx7", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hxlxfr/a_simple_http_server_to_share_files_over_wifi_via/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/prdpx7/go-fileserver", "subreddit_subscribers": 120077, "created_utc": 1595680127.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_168qjp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Deploy a private GoDoc server on Google Kubernetes Engine", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hx3uoq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "public", "ups": 54, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 54, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1595633516.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "cloud.google.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://cloud.google.com/community/tutorials/godoc-for-github-on-k8s", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hx3uoq", "is_robot_indexable": true, "report_reasons": null, "author": "keevans94", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hx3uoq/deploy_a_private_godoc_server_on_google/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://cloud.google.com/community/tutorials/godoc-for-github-on-k8s", "subreddit_subscribers": 120077, "created_utc": 1595604716.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Learning concurrency is little hard.\n\nI have read \"concurrency in go\" book but i didn't work with me maybe good general idea.\n\nWhat about you? What is the best way that make you fluent in write high performance go concurrency code?\n\nThanks in advance.", "author_fullname": "t2_550xs0mo", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "what is the most productive way to learn concurrency with go?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hxjdmq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.76, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1595694423.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Learning concurrency is little hard.&lt;/p&gt;\n\n&lt;p&gt;I have read &amp;quot;concurrency in go&amp;quot; book but i didn&amp;#39;t work with me maybe good general idea.&lt;/p&gt;\n\n&lt;p&gt;What about you? What is the best way that make you fluent in write high performance go concurrency code?&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hxjdmq", "is_robot_indexable": true, "report_reasons": null, "author": "golab0", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hxjdmq/what_is_the_most_productive_way_to_learn/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hxjdmq/what_is_the_most_productive_way_to_learn/", "subreddit_subscribers": 120077, "created_utc": 1595665623.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I want to share with the Golang community a side-project I made to calculate the **Mandelbrot Set** using **parallelism** and **distributed computing** with **Go**, **gRPC** and **Raylib**. Here you can see a video-demo running a local cluster of 2 nodes with 8 virtual cores each one.\n\nhttps://reddit.com/link/hxl08d/video/iz9elv21kzc51/player\n\nSource code: [https://github.com/albertnadal/MandelbrotGoLang](https://github.com/albertnadal/MandelbrotGoLang)\n\nYouTube: [https://youtu.be/pDbuClfEAIY](https://youtu.be/pDbuClfEAIY)\n\nI hope you find it really interesting and educative.", "author_fullname": "t2_2vjh5de9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I created a Mandelbrot Set visualizer using distributed computing and parallelism with Go, gRPC and Raylib", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "media_metadata": {"iz9elv21kzc51": {"status": "valid", "e": "RedditVideo", "dashUrl": "https://v.redd.it/link/hxl08d/asset/iz9elv21kzc51/DASHPlaylist.mpd?a=1598276048%2CYjA4ODg3MGIxNjM2ZjgwNDM0ZTk4ODlmZjIxNWVhNWNlZWZhYzA1ZGUzNGZmOGUxNmJhYTQ5ZWE4NjU2OGNhZg%3D%3D&amp;v=1&amp;f=sd", "x": 1920, "y": 1080, "hlsUrl": "https://v.redd.it/link/hxl08d/asset/iz9elv21kzc51/HLSPlaylist.m3u8?a=1598276048%2CMDAwODkwM2YyMzY4ZjMwY2UzZDUwY2E0NWFkMjIxNTZkNTg1ZmY2YzU2MmQ4ZDcwMGUxZmUwOGE2N2JkOTZjOA%3D%3D&amp;v=1&amp;f=sd", "id": "iz9elv21kzc51", "isGif": false}}, "name": "t3_hxl08d", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1595704097.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I want to share with the Golang community a side-project I made to calculate the &lt;strong&gt;Mandelbrot Set&lt;/strong&gt; using &lt;strong&gt;parallelism&lt;/strong&gt; and &lt;strong&gt;distributed computing&lt;/strong&gt; with &lt;strong&gt;Go&lt;/strong&gt;, &lt;strong&gt;gRPC&lt;/strong&gt; and &lt;strong&gt;Raylib&lt;/strong&gt;. Here you can see a video-demo running a local cluster of 2 nodes with 8 virtual cores each one.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://reddit.com/link/hxl08d/video/iz9elv21kzc51/player\"&gt;https://reddit.com/link/hxl08d/video/iz9elv21kzc51/player&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Source code: &lt;a href=\"https://github.com/albertnadal/MandelbrotGoLang\"&gt;https://github.com/albertnadal/MandelbrotGoLang&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;YouTube: &lt;a href=\"https://youtu.be/pDbuClfEAIY\"&gt;https://youtu.be/pDbuClfEAIY&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I hope you find it really interesting and educative.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hxl08d", "is_robot_indexable": true, "report_reasons": null, "author": "anadalg", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hxl08d/i_created_a_mandelbrot_set_visualizer_using/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hxl08d/i_created_a_mandelbrot_set_visualizer_using/", "subreddit_subscribers": 120077, "created_utc": 1595675297.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "There are a lot of great resources discussing pointer vs value semantics. But I did not understand the recommendation to use pointer semantics when in doubt. So far I understood:\n\n1. Build-in types: Value semantics\n2. Reference types: Value semantics\n3. Pointer semantics for decoding and unmarshalling\n4. If there're already side effects like using File, which must be closed. So we need to work on the original data.\n\nFor custom types let's see this example ([https://play.golang.org/p/ySwEqcXgS0A](https://play.golang.org/p/ySwEqcXgS0A)):\n\n    type Post struct {\n    \tvotes int\n    }\n    \n    func (p Post) upvoteValueSemantics(newVotes int) Post {\n    \treturn Post{votes: p.votes + newVotes}\n    }\n    \n    func (p *Post) upvotePointerSemantics(newVotes int) {\n    \tp.votes = p.votes + newVotes\n    }\n\nWhat semantic should be used here?", "author_fullname": "t2_7ejvogae", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Examples for Pointer Semantics", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hxklwp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1595701873.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;There are a lot of great resources discussing pointer vs value semantics. But I did not understand the recommendation to use pointer semantics when in doubt. So far I understood:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Build-in types: Value semantics&lt;/li&gt;\n&lt;li&gt;Reference types: Value semantics&lt;/li&gt;\n&lt;li&gt;Pointer semantics for decoding and unmarshalling&lt;/li&gt;\n&lt;li&gt;If there&amp;#39;re already side effects like using File, which must be closed. So we need to work on the original data.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;For custom types let&amp;#39;s see this example (&lt;a href=\"https://play.golang.org/p/ySwEqcXgS0A\"&gt;https://play.golang.org/p/ySwEqcXgS0A&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Post struct {\n    votes int\n}\n\nfunc (p Post) upvoteValueSemantics(newVotes int) Post {\n    return Post{votes: p.votes + newVotes}\n}\n\nfunc (p *Post) upvotePointerSemantics(newVotes int) {\n    p.votes = p.votes + newVotes\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What semantic should be used here?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hxklwp", "is_robot_indexable": true, "report_reasons": null, "author": "one_way_4443", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hxklwp/examples_for_pointer_semantics/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hxklwp/examples_for_pointer_semantics/", "subreddit_subscribers": 120077, "created_utc": 1595673073.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey guys,\n\nI've been learning go and web development for a few months. But, I have been learning the web basics using **fastHttp** server and it seems like it can do everything. Then why do I see so many people use frameworks like **Gin, Gorilla and Beego**. What are some things that they have that makes people use them?", "author_fullname": "t2_74wcgj6w", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Beginning web development in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hxjr01", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.4, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1595696711.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been learning go and web development for a few months. But, I have been learning the web basics using &lt;strong&gt;fastHttp&lt;/strong&gt; server and it seems like it can do everything. Then why do I see so many people use frameworks like &lt;strong&gt;Gin, Gorilla and Beego&lt;/strong&gt;. What are some things that they have that makes people use them?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hxjr01", "is_robot_indexable": true, "report_reasons": null, "author": "babelfishdev", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hxjr01/beginning_web_development_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hxjr01/beginning_web_development_in_go/", "subreddit_subscribers": 120077, "created_utc": 1595667911.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_5ibor34y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Authentication in Golang with JWTs", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hx06h4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 27, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 27, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1595619348.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "auth0.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://auth0.com/blog/authentication-in-golang/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hx06h4", "is_robot_indexable": true, "report_reasons": null, "author": "aman_agrwl", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hx06h4/authentication_in_golang_with_jwts/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://auth0.com/blog/authentication-in-golang/", "subreddit_subscribers": 120077, "created_utc": 1595590548.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am doing the Algorithms and Data Structures Specialization on Coursera and I am hard stuck into problem 3.7. Maximum Salary.\n\nBasically my code works on pretty all the test cases I can invent, but it failed in case 6 when I submit it.\n\n`Failed case #6/11: Wrong answer (Time used: 0.00/1.50, memory used: 9138176/536870912.)`\n\nHere you have the problem description:\n\n&gt;Problem Description  \n&gt;  \n&gt;Task. Compose the largest number out of a set of integers.  \n&gt;  \n&gt;Input Format. The first line of the input contains an integer \ud835\udc5b. The second line contains integers  \n&gt;  \n&gt;\ud835\udc4e1,\ud835\udc4e2,...,\ud835\udc4e\ud835\udc5b.  \n&gt;  \n&gt;Constraints. 1\u2264\ud835\udc5b\u2264100;1\u2264\ud835\udc4e\ud835\udc56 \u2264103 forall1\u2264\ud835\udc56\u2264\ud835\udc5b.Output Format.  \n&gt;  \n&gt;Output the largest number that can be composed out of \ud835\udc4e1, \ud835\udc4e2, . . . , \ud835\udc4e\ud835\udc5b.\n\nAnd here my implementation:\n\n    package main\n    \n    import (\n    \t\"fmt\"\n    \t\"strconv\"\n    )\n    \n    func main() {\n    \tvar n int\n    \tvar numbers []int\n    \n    \t_, _ = fmt.Scan(&amp;n)\n    \tfor i := 0; i &lt; n; i++ {\n    \t\tvar number int\n    \t\t_, _ = fmt.Scan(&amp;number)\n    \t\tnumbers = append(numbers, number)\n    \t}\n    \n    \tfmt.Print(maximumSalary(numbers))\n    }\n    \n    func maximumSalary(numbers []int) string {\n    \tvar answer string\n    \n    \tfor i := 0; i &lt; len(numbers); i++ {\n    \t\tmaxDigit := 0\n    \t\tfor j := i; j &lt; len(numbers); j++ {\n    \t\t\tif isGreaterOrEqual(numbers[j], maxDigit) {\n    \t\t\t\tmaxDigit = numbers[j]\n    \t\t\t\tnumbers[i], numbers[j] = numbers[j], numbers[i]\n    \t\t\t}\n    \t\t}\n    \n    \t\tanswer += strconv.Itoa(maxDigit)\n    \t}\n    \n    \treturn answer\n    }\n    \n    func isGreaterOrEqual(i, j int) bool {\n    \tiString := strconv.Itoa(i)\n    \tjString := strconv.Itoa(j)\n    \tif len(iString) == len(jString) {\n    \t\treturn i &gt;= j\n    \t} else {\n    \t\tn := 0\n    \t\tfor {\n    \t\t\tif n == len(iString) || n == len(jString) {\n    \t\t\t\tif len(iString) &lt; len(jString) {\n    \t\t\t\t\treturn true\n    \t\t\t\t} else {\n    \t\t\t\t\treturn false\n    \t\t\t\t}\n    \t\t\t}\n    \t\t\tif iString[n] &gt; jString[n] {\n    \t\t\t\treturn true\n    \t\t\t}\n    \t\t\tif n == 0 &amp;&amp; iString[n] &lt; jString[n] {\n    \t\t\t\treturn false\n    \t\t\t}\n    \n    \t\t\tn++\n    \t\t}\n    \t}\n    }\n\nI am really out of ideas if someone has achieved the problem before and can let me some advice, would be great.\n\nEdit: More detailed explanation.\n\nhttps://preview.redd.it/k7io9hyzuxc51.png?width=1804&amp;format=png&amp;auto=webp&amp;s=18686b14a57a56378db531cb5d675e789fd45361", "author_fullname": "t2_ynxudns", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Maximum Salary", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "media_metadata": {"k7io9hyzuxc51": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 64, "x": 108, "u": "https://preview.redd.it/k7io9hyzuxc51.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=fa9ad895197545985ba2b706a04ee585863a5102"}, {"y": 129, "x": 216, "u": "https://preview.redd.it/k7io9hyzuxc51.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=2a44e68097d2329170fba23aa498f3cf6d6efe71"}, {"y": 191, "x": 320, "u": "https://preview.redd.it/k7io9hyzuxc51.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=fd3871ae95c3273bbf1f999ebf2647ace87ecb22"}, {"y": 382, "x": 640, "u": "https://preview.redd.it/k7io9hyzuxc51.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=b761e537cb073397ced713ac8756ff4a87c3c1ec"}, {"y": 573, "x": 960, "u": "https://preview.redd.it/k7io9hyzuxc51.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=cbaf3de95a3095e199d1dbe013ed706268c88037"}, {"y": 645, "x": 1080, "u": "https://preview.redd.it/k7io9hyzuxc51.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=292859f90dcf9bc77797700a096a54210e045aed"}], "s": {"y": 1078, "x": 1804, "u": "https://preview.redd.it/k7io9hyzuxc51.png?width=1804&amp;format=png&amp;auto=webp&amp;s=18686b14a57a56378db531cb5d675e789fd45361"}, "id": "k7io9hyzuxc51"}}, "name": "t3_hxg4k1", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1595654656.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1595677446.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am doing the Algorithms and Data Structures Specialization on Coursera and I am hard stuck into problem 3.7. Maximum Salary.&lt;/p&gt;\n\n&lt;p&gt;Basically my code works on pretty all the test cases I can invent, but it failed in case 6 when I submit it.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Failed case #6/11: Wrong answer (Time used: 0.00/1.50, memory used: 9138176/536870912.)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Here you have the problem description:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;Problem Description  &lt;/p&gt;\n\n&lt;p&gt;Task. Compose the largest number out of a set of integers.  &lt;/p&gt;\n\n&lt;p&gt;Input Format. The first line of the input contains an integer \ud835\udc5b. The second line contains integers  &lt;/p&gt;\n\n&lt;p&gt;\ud835\udc4e1,\ud835\udc4e2,...,\ud835\udc4e\ud835\udc5b.  &lt;/p&gt;\n\n&lt;p&gt;Constraints. 1\u2264\ud835\udc5b\u2264100;1\u2264\ud835\udc4e\ud835\udc56 \u2264103 forall1\u2264\ud835\udc56\u2264\ud835\udc5b.Output Format.  &lt;/p&gt;\n\n&lt;p&gt;Output the largest number that can be composed out of \ud835\udc4e1, \ud835\udc4e2, . . . , \ud835\udc4e\ud835\udc5b.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;And here my implementation:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;strconv&amp;quot;\n)\n\nfunc main() {\n    var n int\n    var numbers []int\n\n    _, _ = fmt.Scan(&amp;amp;n)\n    for i := 0; i &amp;lt; n; i++ {\n        var number int\n        _, _ = fmt.Scan(&amp;amp;number)\n        numbers = append(numbers, number)\n    }\n\n    fmt.Print(maximumSalary(numbers))\n}\n\nfunc maximumSalary(numbers []int) string {\n    var answer string\n\n    for i := 0; i &amp;lt; len(numbers); i++ {\n        maxDigit := 0\n        for j := i; j &amp;lt; len(numbers); j++ {\n            if isGreaterOrEqual(numbers[j], maxDigit) {\n                maxDigit = numbers[j]\n                numbers[i], numbers[j] = numbers[j], numbers[i]\n            }\n        }\n\n        answer += strconv.Itoa(maxDigit)\n    }\n\n    return answer\n}\n\nfunc isGreaterOrEqual(i, j int) bool {\n    iString := strconv.Itoa(i)\n    jString := strconv.Itoa(j)\n    if len(iString) == len(jString) {\n        return i &amp;gt;= j\n    } else {\n        n := 0\n        for {\n            if n == len(iString) || n == len(jString) {\n                if len(iString) &amp;lt; len(jString) {\n                    return true\n                } else {\n                    return false\n                }\n            }\n            if iString[n] &amp;gt; jString[n] {\n                return true\n            }\n            if n == 0 &amp;amp;&amp;amp; iString[n] &amp;lt; jString[n] {\n                return false\n            }\n\n            n++\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am really out of ideas if someone has achieved the problem before and can let me some advice, would be great.&lt;/p&gt;\n\n&lt;p&gt;Edit: More detailed explanation.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/k7io9hyzuxc51.png?width=1804&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=18686b14a57a56378db531cb5d675e789fd45361\"&gt;https://preview.redd.it/k7io9hyzuxc51.png?width=1804&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=18686b14a57a56378db531cb5d675e789fd45361&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hxg4k1", "is_robot_indexable": true, "report_reasons": null, "author": "YurianG", "discussion_type": null, "num_comments": 15, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hxg4k1/maximum_salary/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hxg4k1/maximum_salary/", "subreddit_subscribers": 120077, "created_utc": 1595648646.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_hxg4k1", "before": null}}