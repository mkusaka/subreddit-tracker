{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once. If you want your code reviewed or review other's code, there's a [codereview stackexchange](https://codereview.stackexchange.com/questions/tagged/rust), too. If you need to test your code, maybe [the Rust playground](https://play.rust-lang.org) is for you.\n\nHere are some other venues where help may be found:\n\n[/r/learnrust](https://www.reddit.com/r/learnrust) is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/).\n\nThe official Rust Programming Language Discord: [https://discord.gg/rust-lang](https://discord.gg/rust-lang)\n\nThe unofficial Rust community Discord: [https://bit.ly/rust-community](https://bit.ly/rust-community)\n\nAlso check out [last week's thread](https://reddit.com/r/rust/comments/fnfky9/hey_rustaceans_got_an_easy_question_ask_here/) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nAlso if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hey Rustaceans! Got an easy question? Ask here (14/2020)!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_frfduy", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585552086.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven&amp;#39;t been written yet.&lt;/p&gt;\n\n&lt;p&gt;If you have a &lt;a href=\"http://stackoverflow.com/\"&gt;StackOverflow&lt;/a&gt; account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it &lt;a href=\"http://stackoverflow.com/questions/tagged/rust\"&gt;the &amp;quot;Rust&amp;quot; tag&lt;/a&gt; for maximum visibility). Note that this site is very interested in question quality. I&amp;#39;ve been asked to read a RFC I authored once. If you want your code reviewed or review other&amp;#39;s code, there&amp;#39;s a &lt;a href=\"https://codereview.stackexchange.com/questions/tagged/rust\"&gt;codereview stackexchange&lt;/a&gt;, too. If you need to test your code, maybe &lt;a href=\"https://play.rust-lang.org\"&gt;the Rust playground&lt;/a&gt; is for you.&lt;/p&gt;\n\n&lt;p&gt;Here are some other venues where help may be found:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/learnrust\"&gt;/r/learnrust&lt;/a&gt; is a subreddit to share your questions and epiphanies learning Rust programming.&lt;/p&gt;\n\n&lt;p&gt;The official Rust user forums: &lt;a href=\"https://users.rust-lang.org/\"&gt;https://users.rust-lang.org/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The official Rust Programming Language Discord: &lt;a href=\"https://discord.gg/rust-lang\"&gt;https://discord.gg/rust-lang&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The unofficial Rust community Discord: &lt;a href=\"https://bit.ly/rust-community\"&gt;https://bit.ly/rust-community&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also check out &lt;a href=\"https://reddit.com/r/rust/comments/fnfky9/hey_rustaceans_got_an_easy_question_ask_here/\"&gt;last week&amp;#39;s thread&lt;/a&gt; with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.&lt;/p&gt;\n\n&lt;p&gt;Also if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "frfduy", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 59, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/frfduy/hey_rustaceans_got_an_easy_question_ask_here/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/frfduy/hey_rustaceans_got_an_easy_question_ask_here/", "subreddit_subscribers": 95130, "created_utc": 1585523286.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "New week, new Rust! What are you folks up to? Answer here or over at [rust-users](https://users.rust-lang.org/t/whats-everyone-working-on-this-week-14-2020/40159?u=llogiq)!", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What's everyone working on this week (14/2020)?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_frff7k", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585552215.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;New week, new Rust! What are you folks up to? Answer here or over at &lt;a href=\"https://users.rust-lang.org/t/whats-everyone-working-on-this-week-14-2020/40159?u=llogiq\"&gt;rust-users&lt;/a&gt;!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "frff7k", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 24, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/frff7k/whats_everyone_working_on_this_week_142020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/frff7k/whats_everyone_working_on_this_week_142020/", "subreddit_subscribers": 95130, "created_utc": 1585523415.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "So I'm a Rust beginner, and I thought it would be cool to write my own reverse shell in Rust. I like messing with security and occasionally do boot2root challenges like [hackthebox](https://hackthebox.eu/). Usually I just use a simple netcat shell, since meterpreter is a little bit overkill and is detected by virtually every antivirus in existance. But I thought creating my own thing would be a fun challenge. I already wrote a simple program that creates a TcpStream it can send/receive stuff from.\n\nNow my question is, how could I go about \"piping\" a program (cmd or bash) through a TcpStream (like netcat's `-e` flag does)? I found a couple of existing reverse shells written in Rust, but most of them are pretty outdated and don't compile on the latest version anymore (and generally not cross-platform, which would also be nice).", "author_fullname": "t2_tq5fq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Writing a reverse shell in Rust?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fsxaaa", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 19, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 19, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585765769.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I&amp;#39;m a Rust beginner, and I thought it would be cool to write my own reverse shell in Rust. I like messing with security and occasionally do boot2root challenges like &lt;a href=\"https://hackthebox.eu/\"&gt;hackthebox&lt;/a&gt;. Usually I just use a simple netcat shell, since meterpreter is a little bit overkill and is detected by virtually every antivirus in existance. But I thought creating my own thing would be a fun challenge. I already wrote a simple program that creates a TcpStream it can send/receive stuff from.&lt;/p&gt;\n\n&lt;p&gt;Now my question is, how could I go about &amp;quot;piping&amp;quot; a program (cmd or bash) through a TcpStream (like netcat&amp;#39;s &lt;code&gt;-e&lt;/code&gt; flag does)? I found a couple of existing reverse shells written in Rust, but most of them are pretty outdated and don&amp;#39;t compile on the latest version anymore (and generally not cross-platform, which would also be nice).&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsxaaa", "is_robot_indexable": true, "report_reasons": null, "author": "ThePixelCoder", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fsxaaa/writing_a_reverse_shell_in_rust/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fsxaaa/writing_a_reverse_shell_in_rust/", "subreddit_subscribers": 95130, "created_utc": 1585736969.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_4wl2xsbn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Bryan Cantrill on Rust making systems programming exciting", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fsih8g", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 190, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FvvZA9n3e5pc%3Fstart%3D2960%26feature%3Doembed%26start%3D2960&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DvvZA9n3e5pc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FvvZA9n3e5pc%2Fhqdefault.jpg&amp;key=ed8fa8699ce04833838e66ce79ba05f1&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "m.youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "description": "Bryan Cantrill Oxide Computer Company February 26, 2020 While our software systems have become increasingly elastic, the physical substrate available to run ...", "title": "Stanford Seminar - The Soul of a New Machine: Rethinking the Computer", "url": "https://www.youtube.com/watch?v=vvZA9n3e5pc", "type": "video", "author_name": "stanfordonline", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FvvZA9n3e5pc%3Fstart%3D2960%26feature%3Doembed%26start%3D2960&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DvvZA9n3e5pc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FvvZA9n3e5pc%2Fhqdefault.jpg&amp;key=ed8fa8699ce04833838e66ce79ba05f1&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/vvZA9n3e5pc/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/stanfordonline"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FvvZA9n3e5pc%3Fstart%3D2960%26feature%3Doembed%26start%3D2960&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DvvZA9n3e5pc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FvvZA9n3e5pc%2Fhqdefault.jpg&amp;key=ed8fa8699ce04833838e66ce79ba05f1&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/fsih8g", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 190, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1585708662.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "m.youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsih8g", "is_robot_indexable": true, "report_reasons": null, "author": "wouldyoumindawfully", "discussion_type": null, "num_comments": 30, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fsih8g/bryan_cantrill_on_rust_making_systems_programming/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://m.youtube.com/watch?v=vvZA9n3e5pc&amp;t=49m20s", "subreddit_subscribers": 95130, "created_utc": 1585679862.0, "num_crossposts": 0, "media": {"type": "m.youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "description": "Bryan Cantrill Oxide Computer Company February 26, 2020 While our software systems have become increasingly elastic, the physical substrate available to run ...", "title": "Stanford Seminar - The Soul of a New Machine: Rethinking the Computer", "url": "https://www.youtube.com/watch?v=vvZA9n3e5pc", "type": "video", "author_name": "stanfordonline", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2FvvZA9n3e5pc%3Fstart%3D2960%26feature%3Doembed%26start%3D2960&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DvvZA9n3e5pc&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FvvZA9n3e5pc%2Fhqdefault.jpg&amp;key=ed8fa8699ce04833838e66ce79ba05f1&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/vvZA9n3e5pc/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/stanfordonline"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I'm surprised I'm writing this, but I cannot find a good debugger for Rust. I've been using VSCode as it has been the best---everything else has horribly mangled function names and whatnot. But VSCode debugging is a very broken experience. I've had issues with how it handles the embedded terminal. I'm currently having issues where code gets a segfault within the debugger which runs totally fine without it. And with *the exact same code* I've gotten \"Inconsistency detected by ld.so: rtld.c: 1180: dl\\_main: Assertion\" which makes the launch fail. It's like once every two weeks there's some new problem.\n\nI'm tired of realizing I have to file a VSCode bug report for Rust debugging. The lack of a decent debugger is really hampering me right now. I want to give up.", "author_fullname": "t2_108r9w", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust debugging is still really painful, VSCode particularly included", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fspk43", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 52, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 52, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585732050.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m surprised I&amp;#39;m writing this, but I cannot find a good debugger for Rust. I&amp;#39;ve been using VSCode as it has been the best---everything else has horribly mangled function names and whatnot. But VSCode debugging is a very broken experience. I&amp;#39;ve had issues with how it handles the embedded terminal. I&amp;#39;m currently having issues where code gets a segfault within the debugger which runs totally fine without it. And with &lt;em&gt;the exact same code&lt;/em&gt; I&amp;#39;ve gotten &amp;quot;Inconsistency detected by ld.so: rtld.c: 1180: dl_main: Assertion&amp;quot; which makes the launch fail. It&amp;#39;s like once every two weeks there&amp;#39;s some new problem.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m tired of realizing I have to file a VSCode bug report for Rust debugging. The lack of a decent debugger is really hampering me right now. I want to give up.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fspk43", "is_robot_indexable": true, "report_reasons": null, "author": "PXaZ", "discussion_type": null, "num_comments": 20, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fspk43/rust_debugging_is_still_really_painful_vscode/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fspk43/rust_debugging_is_still_really_painful_vscode/", "subreddit_subscribers": 95130, "created_utc": 1585703250.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_zq9p3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust in a Commercial", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fsd5s8", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 387, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/h3yFOf6hIjQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "It's Rust: Upwork is How", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/h3yFOf6hIjQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Upwork", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/h3yFOf6hIjQ/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCvxGFOnwUBDHHcxuPqhe4CQ"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/h3yFOf6hIjQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/fsd5s8", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 387, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1585691110.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtu.be", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsd5s8", "is_robot_indexable": true, "report_reasons": null, "author": "icsharppeople", "discussion_type": null, "num_comments": 74, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fsd5s8/rust_in_a_commercial/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://youtu.be/h3yFOf6hIjQ", "subreddit_subscribers": 95130, "created_utc": 1585662310.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "It's Rust: Upwork is How", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/h3yFOf6hIjQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Upwork", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/h3yFOf6hIjQ/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCvxGFOnwUBDHHcxuPqhe4CQ"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_1vja", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Oxidize 1K: March 20th, 2020 - Embedded Rust Lightning Conference - Full Video Stream", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fsn4ux", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 72, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/zPuELAzJyno?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 459, "scrolling": false, "height": 344}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Oxidize 1K: March 20th, 2020", "type": "video", "thumbnail_width": 480, "height": 344, "width": 459, "html": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/zPuELAzJyno?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Ferrous Systems GmbH", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/zPuELAzJyno/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UC7YY_Y0UXAbL_1xkY0hQjJA"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/zPuELAzJyno?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 459, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/fsn4ux", "height": 344}, "link_flair_text": null, "can_mod_post": false, "score": 72, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1585723351.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsn4ux", "is_robot_indexable": true, "report_reasons": null, "author": "ansible", "discussion_type": null, "num_comments": 0, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fsn4ux/oxidize_1k_march_20th_2020_embedded_rust/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=zPuELAzJyno", "subreddit_subscribers": 95130, "created_utc": 1585694551.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Oxidize 1K: March 20th, 2020", "type": "video", "thumbnail_width": 480, "height": 344, "width": 459, "html": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/zPuELAzJyno?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Ferrous Systems GmbH", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/zPuELAzJyno/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UC7YY_Y0UXAbL_1xkY0hQjJA"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hey guys,\nI am trying to write proper DRY code by using a declarative macro. For this purpose, I want to input a string with n+2 format fillers, replace the first and the last filler with static data and the intermediate ones with my variables, and wrap the API call around that. For this, I wrote a macro_rules! macro:\n\n    macro_rules! apicall {\n        ($s:expr,$($args:expr),*) =&gt; {\n            Ok(self\n                .client\n                .get(\n                    format!(\n                        $s,\n                        &amp;self.apiurl,\n                        $args,\n                        &amp;self.apikey,\n                    )\n                    .as_str(),\n                )\n                .send()\n                .await?\n                .json()\n                .await?)\n        };\n    }\n\n\nThe problem is that at the time I use the $args macro variable, I get a compiler error because the argument still repeats and the preprocessor doesn't know how to deal with that. So I tried to write a fix:\n\n    macro_rules! flatten {\n        ($arg:expr) =&gt; ($arg);\n        ($arg1:expr, $($args:expr),+) =&gt; {\n            $arg1, dewrap!($args)\n        }\n    }\n\nand replaced $args with flatten!($args). This however still produces the same compiler error even though $args should match the second pattern of flatten!. How do I work around this?", "author_fullname": "t2_170occ", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "macro_rules! ($($a:expr),+) flattening", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fsw9b1", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585760811.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys,\nI am trying to write proper DRY code by using a declarative macro. For this purpose, I want to input a string with n+2 format fillers, replace the first and the last filler with static data and the intermediate ones with my variables, and wrap the API call around that. For this, I wrote a macro_rules! macro:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;macro_rules! apicall {\n    ($s:expr,$($args:expr),*) =&amp;gt; {\n        Ok(self\n            .client\n            .get(\n                format!(\n                    $s,\n                    &amp;amp;self.apiurl,\n                    $args,\n                    &amp;amp;self.apikey,\n                )\n                .as_str(),\n            )\n            .send()\n            .await?\n            .json()\n            .await?)\n    };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The problem is that at the time I use the $args macro variable, I get a compiler error because the argument still repeats and the preprocessor doesn&amp;#39;t know how to deal with that. So I tried to write a fix:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;macro_rules! flatten {\n    ($arg:expr) =&amp;gt; ($arg);\n    ($arg1:expr, $($args:expr),+) =&amp;gt; {\n        $arg1, dewrap!($args)\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and replaced $args with flatten!($args). This however still produces the same compiler error even though $args should match the second pattern of flatten!. How do I work around this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsw9b1", "is_robot_indexable": true, "report_reasons": null, "author": "halbGefressen", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fsw9b1/macro_rules_aexpr_flattening/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fsw9b1/macro_rules_aexpr_flattening/", "subreddit_subscribers": 95130, "created_utc": 1585732011.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "[TinyVec](https://github.com/Lokathor/tinyvec) is a 100% safe code alternative to [SmallVec](https://github.com/servo/rust-smallvec) and [ArrayVec](https://github.com/bluss/arrayvec) crates. While SmallVec and ArrayVec create an array of unintialized memory and try to hide it from the user, TinyVec simply initializes the entire array up front. Real-world performance of this approach is surprisingly good: I have replaced SmallVec with TinyVec in `unicode-normalization` and `lewton` crates with no measurable impact on benchmarks.\n\nThe main drawback is that the type stored in TinyVec must implement `Default`, so it cannot replace SmallVec or ArrayVec in _all_ scenarios.\n\nTinyVec is implemented as an enum of `std::Vec` and `tinyvec::ArrayVec`, which allows some optimizations that are not possible with SmallVec - for example, you can explicitly match on this enum and call `drain()` on the underlying type to avoid branching on every access.\n\nTinyVec is designed to be a drop-in replacement for `std::Vec`, more so than SmallVec or ArrayVec that diverge from Vec behavior in some of their methods. We got a fuzzer to verify that TinyVec's behavior is identical to `std::Vec` via [arbitrary-model-tests](https://github.com/jakubadamw/arbitrary-model-tests) (which has found a few bugs!). Newly introduced methods are given deliberately long names that are unlikely to clash with future additions on Vec.\n\nFor a more detailed overview of the crate see the [docs.rs page](https://docs.rs/tinyvec/0.3.3/tinyvec/).\n\nP.S. I'm not the author of the crate, I'm just a happy user of it.", "author_fullname": "t2_d7oqq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Introducing TinyVec: 100% safe alternative to SmallVec and ArrayVec", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fshuhk", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 111, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 111, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585706705.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/Lokathor/tinyvec\"&gt;TinyVec&lt;/a&gt; is a 100% safe code alternative to &lt;a href=\"https://github.com/servo/rust-smallvec\"&gt;SmallVec&lt;/a&gt; and &lt;a href=\"https://github.com/bluss/arrayvec\"&gt;ArrayVec&lt;/a&gt; crates. While SmallVec and ArrayVec create an array of unintialized memory and try to hide it from the user, TinyVec simply initializes the entire array up front. Real-world performance of this approach is surprisingly good: I have replaced SmallVec with TinyVec in &lt;code&gt;unicode-normalization&lt;/code&gt; and &lt;code&gt;lewton&lt;/code&gt; crates with no measurable impact on benchmarks.&lt;/p&gt;\n\n&lt;p&gt;The main drawback is that the type stored in TinyVec must implement &lt;code&gt;Default&lt;/code&gt;, so it cannot replace SmallVec or ArrayVec in &lt;em&gt;all&lt;/em&gt; scenarios.&lt;/p&gt;\n\n&lt;p&gt;TinyVec is implemented as an enum of &lt;code&gt;std::Vec&lt;/code&gt; and &lt;code&gt;tinyvec::ArrayVec&lt;/code&gt;, which allows some optimizations that are not possible with SmallVec - for example, you can explicitly match on this enum and call &lt;code&gt;drain()&lt;/code&gt; on the underlying type to avoid branching on every access.&lt;/p&gt;\n\n&lt;p&gt;TinyVec is designed to be a drop-in replacement for &lt;code&gt;std::Vec&lt;/code&gt;, more so than SmallVec or ArrayVec that diverge from Vec behavior in some of their methods. We got a fuzzer to verify that TinyVec&amp;#39;s behavior is identical to &lt;code&gt;std::Vec&lt;/code&gt; via &lt;a href=\"https://github.com/jakubadamw/arbitrary-model-tests\"&gt;arbitrary-model-tests&lt;/a&gt; (which has found a few bugs!). Newly introduced methods are given deliberately long names that are unlikely to clash with future additions on Vec.&lt;/p&gt;\n\n&lt;p&gt;For a more detailed overview of the crate see the &lt;a href=\"https://docs.rs/tinyvec/0.3.3/tinyvec/\"&gt;docs.rs page&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;P.S. I&amp;#39;m not the author of the crate, I&amp;#39;m just a happy user of it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fshuhk", "is_robot_indexable": true, "report_reasons": null, "author": "Shnatsel", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fshuhk/introducing_tinyvec_100_safe_alternative_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fshuhk/introducing_tinyvec_100_safe_alternative_to/", "subreddit_subscribers": 95130, "created_utc": 1585677905.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "[kmon](https://github.com/orhun/kmon) provides a text-based user interface for managing the Linux kernel modules and monitoring the kernel activities. By managing, it means loading, unloading, blacklisting and showing the information of a module. These updates in the kernel modules, logs about the hardware and other kernel messages can be tracked with the real-time activity monitor in kmon. Since the usage of different tools like dmesg and kmod are required for these tasks in Linux, kmon aims to gather them in a single terminal window and facilitate the usage as much as possible while keeping the functionality.\n\nkmon is written in Rust and uses [tui-rs](https://github.com/fdehau/tui-rs) &amp; [termion](https://github.com/redox-os/termion) libraries for its text-based user interface.\n\n[kmon on action](https://i.redd.it/frrmmacme7q41.gif)\n\n**Project Homepage:** [https://github.com/orhun/kmon](https://github.com/orhun/kmon)  \n**Rust Package:** [https://crates.io/crates/kmon](https://crates.io/crates/kmon)", "author_fullname": "t2_4ko6b0m2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "kmon: Linux Kernel Manager and Activity Monitor written in Rust", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "media_metadata": {"frrmmacme7q41": {"status": "valid", "e": "AnimatedImage", "m": "image/gif", "p": [{"y": 59, "x": 108, "u": "https://external-preview.redd.it/frrmmacme7q41.gif?width=108&amp;crop=smart&amp;format=png8&amp;s=3c184be66cb4082a36eaf973eccc66e4165db278"}, {"y": 119, "x": 216, "u": "https://external-preview.redd.it/frrmmacme7q41.gif?width=216&amp;crop=smart&amp;format=png8&amp;s=91422b65fff0a3d2355b3b870e962d678583fc3e"}, {"y": 176, "x": 320, "u": "https://external-preview.redd.it/frrmmacme7q41.gif?width=320&amp;crop=smart&amp;format=png8&amp;s=69071c17e4440c11f9ce16134171699b520f2ea9"}, {"y": 353, "x": 640, "u": "https://external-preview.redd.it/frrmmacme7q41.gif?width=640&amp;crop=smart&amp;format=png8&amp;s=de6c6e2703415ea2127d15135185b5632809b1d2"}], "s": {"y": 497, "gif": "https://i.redd.it/frrmmacme7q41.gif", "mp4": "https://external-preview.redd.it/frrmmacme7q41.gif?format=mp4&amp;s=26d4029770c68f9cf11237f5b4d8183cfe2ddd1f", "x": 900}, "id": "frrmmacme7q41"}}, "name": "t3_fsz7ef", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1585746278.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585774347.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/orhun/kmon\"&gt;kmon&lt;/a&gt; provides a text-based user interface for managing the Linux kernel modules and monitoring the kernel activities. By managing, it means loading, unloading, blacklisting and showing the information of a module. These updates in the kernel modules, logs about the hardware and other kernel messages can be tracked with the real-time activity monitor in kmon. Since the usage of different tools like dmesg and kmod are required for these tasks in Linux, kmon aims to gather them in a single terminal window and facilitate the usage as much as possible while keeping the functionality.&lt;/p&gt;\n\n&lt;p&gt;kmon is written in Rust and uses &lt;a href=\"https://github.com/fdehau/tui-rs\"&gt;tui-rs&lt;/a&gt; &amp;amp; &lt;a href=\"https://github.com/redox-os/termion\"&gt;termion&lt;/a&gt; libraries for its text-based user interface.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://i.redd.it/frrmmacme7q41.gif\"&gt;kmon on action&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Project Homepage:&lt;/strong&gt; &lt;a href=\"https://github.com/orhun/kmon\"&gt;https://github.com/orhun/kmon&lt;/a&gt;&lt;br/&gt;\n&lt;strong&gt;Rust Package:&lt;/strong&gt; &lt;a href=\"https://crates.io/crates/kmon\"&gt;https://crates.io/crates/kmon&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsz7ef", "is_robot_indexable": true, "report_reasons": null, "author": "orhunp", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fsz7ef/kmon_linux_kernel_manager_and_activity_monitor/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fsz7ef/kmon_linux_kernel_manager_and_activity_monitor/", "subreddit_subscribers": 95130, "created_utc": 1585745547.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hi all,\n\n[Rust in Action](https://www.manning.com/books/rust-in-action?a_aid=rust&amp;a_bid=0367c58f&amp;chan=reddit) is an upcoming book from Manning Publications that teaches Rust by walking through systems programming examples.\n\nSome updates\n\n* I will be [live streaming](https://www.twitch.tv/manningpublications) on 16 April (7pm EDT)\n* there is still time to provide feedback! I'm committed to addressing every comment submitted to [the liveBook](https://livebook.manning.com/book/rust-in-action/)\n* the publisher informs me that Japanese and Korean translation rights have been sold and Russian is negotiation\n* the book should be at the printers in May!", "author_fullname": "t2_4majh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust in Action update - upcoming live stream; Japanese and Korean versions will be available, probably Russian also", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fsm1i1", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 44, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 44, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1585699425.0, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585719848.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all,&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.manning.com/books/rust-in-action?a_aid=rust&amp;amp;a_bid=0367c58f&amp;amp;chan=reddit\"&gt;Rust in Action&lt;/a&gt; is an upcoming book from Manning Publications that teaches Rust by walking through systems programming examples.&lt;/p&gt;\n\n&lt;p&gt;Some updates&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;I will be &lt;a href=\"https://www.twitch.tv/manningpublications\"&gt;live streaming&lt;/a&gt; on 16 April (7pm EDT)&lt;/li&gt;\n&lt;li&gt;there is still time to provide feedback! I&amp;#39;m committed to addressing every comment submitted to &lt;a href=\"https://livebook.manning.com/book/rust-in-action/\"&gt;the liveBook&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;the publisher informs me that Japanese and Korean translation rights have been sold and Russian is negotiation&lt;/li&gt;\n&lt;li&gt;the book should be at the printers in May!&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "rust in action", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsm1i1", "is_robot_indexable": true, "report_reasons": null, "author": "timClicks", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/fsm1i1/rust_in_action_update_upcoming_live_stream/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fsm1i1/rust_in_action_update_upcoming_live_stream/", "subreddit_subscribers": 95130, "created_utc": 1585691048.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_15or67", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Specs and Legion, two very different approaches to ECS", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fsczky", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 166, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 166, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1585690433.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "csherratt.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsczky", "is_robot_indexable": true, "report_reasons": null, "author": "att92010", "discussion_type": null, "num_comments": 24, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fsczky/specs_and_legion_two_very_different_approaches_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://csherratt.github.io/blog/posts/specs-and-legion/", "subreddit_subscribers": 95130, "created_utc": 1585661633.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_fsczky", "before": null}}