{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I've spent a good part of this year working on revisions to the RDoc for Hash.  The revisions include all methods documentation in addition to much of the introductory text (class documentation).  Lots more example code.\n\nCheck it out:\n\n\\- 2.7.2: [https://ruby-doc.org/core-2.7.2/Hash.html](https://ruby-doc.org/core-2.7.2/Hash.html)\n\n\\- 2.7.1: [https://ruby-doc.org/core-2.7.1/Hash.html](https://ruby-doc.org/core-2.7.1/Hash.html)", "author_fullname": "t2_1ruooe", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ruby 2.7.2 has revised Rdoc for Hash", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j7l51e", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 51, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 51, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602218700.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve spent a good part of this year working on revisions to the RDoc for Hash.  The revisions include all methods documentation in addition to much of the introductory text (class documentation).  Lots more example code.&lt;/p&gt;\n\n&lt;p&gt;Check it out:&lt;/p&gt;\n\n&lt;p&gt;- 2.7.2: &lt;a href=\"https://ruby-doc.org/core-2.7.2/Hash.html\"&gt;https://ruby-doc.org/core-2.7.2/Hash.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;- 2.7.1: &lt;a href=\"https://ruby-doc.org/core-2.7.1/Hash.html\"&gt;https://ruby-doc.org/core-2.7.1/Hash.html&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j7l51e", "is_robot_indexable": true, "report_reasons": null, "author": "BurdetteLamar", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/j7l51e/ruby_272_has_revised_rdoc_for_hash/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/j7l51e/ruby_272_has_revised_rdoc_for_hash/", "subreddit_subscribers": 67775, "created_utc": 1602189900.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_1iquhusy", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Speeding up Rails with Memoization", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 70, "top_awarded_type": null, "hide_score": false, "name": "t3_j7v6l2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/Xjq8cQFeQ8N9ZWXnj-yQxO9ywuqcFKDwFHBndDJ5KM0.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1602260419.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "honeybadger.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.honeybadger.io/blog/ruby-rails-memoization/?utm_source=rubyweekly&amp;utm_medium=email&amp;utm_campaign=ruby", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/LTLgvLhYHk_H2MxvebMtWTbqq-zeVK6ghhZX4NkuksY.jpg?auto=webp&amp;s=946dfa2b21fed19e3ce735d5cce6050591e546b8", "width": 2048, "height": 1024}, "resolutions": [{"url": "https://external-preview.redd.it/LTLgvLhYHk_H2MxvebMtWTbqq-zeVK6ghhZX4NkuksY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=95baefaf60da93e911a02b209152fcbb7d6c1cdf", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/LTLgvLhYHk_H2MxvebMtWTbqq-zeVK6ghhZX4NkuksY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2aeff025d6e18a37377240b05e3da79e7ec963f3", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/LTLgvLhYHk_H2MxvebMtWTbqq-zeVK6ghhZX4NkuksY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=29fc881aa01d339ea0528775350d3518f570c8d5", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/LTLgvLhYHk_H2MxvebMtWTbqq-zeVK6ghhZX4NkuksY.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=8166cf64db3d115696ec6cc461ea988357e864e7", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/LTLgvLhYHk_H2MxvebMtWTbqq-zeVK6ghhZX4NkuksY.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=31ba2de3e3993c26453d2e74bb3b358f4d7e53e3", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/LTLgvLhYHk_H2MxvebMtWTbqq-zeVK6ghhZX4NkuksY.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=a2601feb68388948ea92b47b54801fb557460e2b", "width": 1080, "height": 540}], "variants": {}, "id": "K_xfFOANcSVffWV8_XSK1nE4Zws0JCj6BdEwR7tfxBI"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j7v6l2", "is_robot_indexable": true, "report_reasons": null, "author": "flower_power_2000", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/j7v6l2/speeding_up_rails_with_memoization/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.honeybadger.io/blog/ruby-rails-memoization/?utm_source=rubyweekly&amp;utm_medium=email&amp;utm_campaign=ruby", "subreddit_subscribers": 67775, "created_utc": 1602231619.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I'm trying to generate a fixed digit random number, and I came across this code. Could someone help me with what is happening here?  \n\n\nI'm not sure i get much from the documentation for rand either.", "author_fullname": "t2_7m8mv9r7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Can someone help me out with what this does rand(999_999)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j7vkhg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Question", "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602262684.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to generate a fixed digit random number, and I came across this code. Could someone help me with what is happening here?  &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not sure i get much from the documentation for rand either.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "d3392e70-873c-11e9-af37-0eea3fce36a6", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j7vkhg", "is_robot_indexable": true, "report_reasons": null, "author": "prosperousdoggo", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/j7vkhg/can_someone_help_me_out_with_what_this_does/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/j7vkhg/can_someone_help_me_out_with_what_this_does/", "subreddit_subscribers": 67775, "created_utc": 1602233884.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Context:  \n I am pulling in data from a social media site and storing it in my database. For eg. Everday I make an api req to fetch all tweets of a user. Then make another api req for each tweet to fetch its public\\_metrics like tweets, likes,etc.   \n\n\nIf I am using Sidekiq, how should I build my data pipeline?  \n\n\nRight now, I have a worker who just makes both the api calls from the same worker.  \nShould I separate, \"fetching all tweets\" into a seprate worker and \"fetch tweets metrics\" into a separate wrker?", "author_fullname": "t2_3s6jjcxn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Beginner need some help understaind data pipeline", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j7vlbx", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602262820.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Context:&lt;br/&gt;\n I am pulling in data from a social media site and storing it in my database. For eg. Everday I make an api req to fetch all tweets of a user. Then make another api req for each tweet to fetch its public_metrics like tweets, likes,etc.   &lt;/p&gt;\n\n&lt;p&gt;If I am using Sidekiq, how should I build my data pipeline?  &lt;/p&gt;\n\n&lt;p&gt;Right now, I have a worker who just makes both the api calls from the same worker.&lt;br/&gt;\nShould I separate, &amp;quot;fetching all tweets&amp;quot; into a seprate worker and &amp;quot;fetch tweets metrics&amp;quot; into a separate wrker?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j7vlbx", "is_robot_indexable": true, "report_reasons": null, "author": "sitaram_", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/j7vlbx/beginner_need_some_help_understaind_data_pipeline/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/j7vlbx/beginner_need_some_help_understaind_data_pipeline/", "subreddit_subscribers": 67775, "created_utc": 1602234020.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I found this code to generate 6 digit number \n\n    rand(100000...999999)\n\nIs this approach fine?   \nI'm not sure what the two dots(..) or three dots(...) mean and I hope it doesn't expand into an array and then rand selects a values", "author_fullname": "t2_7m8mv9r7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Fastest way to generating a n digit number", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j7w5xn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Question", "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602266150.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I found this code to generate 6 digit number &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;rand(100000...999999)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is this approach fine?&lt;br/&gt;\nI&amp;#39;m not sure what the two dots(..) or three dots(...) mean and I hope it doesn&amp;#39;t expand into an array and then rand selects a values&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "d3392e70-873c-11e9-af37-0eea3fce36a6", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j7w5xn", "is_robot_indexable": true, "report_reasons": null, "author": "prosperousdoggo", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/j7w5xn/fastest_way_to_generating_a_n_digit_number/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/j7w5xn/fastest_way_to_generating_a_n_digit_number/", "subreddit_subscribers": 67775, "created_utc": 1602237350.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "[https://www.ruby-lang.org/en/news/2020/10/02/ruby-2-7-2-released/](https://www.ruby-lang.org/en/news/2020/10/02/ruby-2-7-2-released/)\n\nAnybody know what the incompatibility is? I'm glad they mention it as an issue, but I couldn't find any details on that page.", "author_fullname": "t2_4emgi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "\"Ruby 2.7.2 ... contains intentional incompatibility\"", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j7fk83", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 18, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 18, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602201185.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.ruby-lang.org/en/news/2020/10/02/ruby-2-7-2-released/\"&gt;https://www.ruby-lang.org/en/news/2020/10/02/ruby-2-7-2-released/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Anybody know what the incompatibility is? I&amp;#39;m glad they mention it as an issue, but I couldn&amp;#39;t find any details on that page.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j7fk83", "is_robot_indexable": true, "report_reasons": null, "author": "dogweather", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/j7fk83/ruby_272_contains_intentional_incompatibility/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/j7fk83/ruby_272_contains_intentional_incompatibility/", "subreddit_subscribers": 67775, "created_utc": 1602172385.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I have two strings say first = \"say\" and second = \"henlo\". I want to find the shortest possible user-friendly string(a-z, 0-9) that can encode this information. This string isn't any encrypted value I want it to be as human-readable as possible.\n\nThis is how I do it currently. I combine the two words with space since both the words can't contain space like \"first second\" word = \"say henlo\" and compute the hexdigest using SHA1 and I get a value like so\n\n    require 'faker'\n    \n    all = {}\n    iterations = 5000000\n    word_size = 10\n    count, duplicates = 0, 0\n    \n    iterations.times do\n        word = Faker::Lorem.sentence(80, true, 15).split(' ').sample(2).join(' ')\n        digest = Digest::SHA1.hexdigest(word)[0..word_size-1]\n        if all[digest] == word\n            duplicates += 1\n            next\n        end\n        if all.include?(digest) \n            puts [digest, all[digest], word].inspect\n            count += 1\n        end\n        all[digest] = word\n    end\n    puts [iterations, word_size, duplicates, count, (count.to_f / (iterations - duplicates)) * 100].inspect\n\nAnd this is the result I got\n\n    [1000000, 8, 363802, 64, 0.01]\n    [1000000, 10, 363723, 0, 0.0]\n    [5000000, 10, 3769185, 0, 0.0]\n\nNow, I have a couple of questions.\n\n1. Is there any other way to shrink the hexdigest likes into something shorter, and user-readable string without increasing the chance of collision?\n2. What is the probability that taking the first n characters is unique for a set of words like 1M words? How could I reliability calculate it to compute the trade-offs\n\nEDIT:The purpose of the short string isn't to substitute saving both the string themselves but to generate a short string for the user which they can use in their API calls.  \nEDIT 2: The reason I can't use the \"human-friend\" words as it is, is because it can be languages with accents(French and unicode ones also)  and API key is ASCII only. ", "author_fullname": "t2_7m8mv9r7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Help to create the shortest hexadecimal string from two strings", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j7juoj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Question", "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1602189436.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602214613.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have two strings say first = &amp;quot;say&amp;quot; and second = &amp;quot;henlo&amp;quot;. I want to find the shortest possible user-friendly string(a-z, 0-9) that can encode this information. This string isn&amp;#39;t any encrypted value I want it to be as human-readable as possible.&lt;/p&gt;\n\n&lt;p&gt;This is how I do it currently. I combine the two words with space since both the words can&amp;#39;t contain space like &amp;quot;first second&amp;quot; word = &amp;quot;say henlo&amp;quot; and compute the hexdigest using SHA1 and I get a value like so&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;require &amp;#39;faker&amp;#39;\n\nall = {}\niterations = 5000000\nword_size = 10\ncount, duplicates = 0, 0\n\niterations.times do\n    word = Faker::Lorem.sentence(80, true, 15).split(&amp;#39; &amp;#39;).sample(2).join(&amp;#39; &amp;#39;)\n    digest = Digest::SHA1.hexdigest(word)[0..word_size-1]\n    if all[digest] == word\n        duplicates += 1\n        next\n    end\n    if all.include?(digest) \n        puts [digest, all[digest], word].inspect\n        count += 1\n    end\n    all[digest] = word\nend\nputs [iterations, word_size, duplicates, count, (count.to_f / (iterations - duplicates)) * 100].inspect\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And this is the result I got&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[1000000, 8, 363802, 64, 0.01]\n[1000000, 10, 363723, 0, 0.0]\n[5000000, 10, 3769185, 0, 0.0]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, I have a couple of questions.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Is there any other way to shrink the hexdigest likes into something shorter, and user-readable string without increasing the chance of collision?&lt;/li&gt;\n&lt;li&gt;What is the probability that taking the first n characters is unique for a set of words like 1M words? How could I reliability calculate it to compute the trade-offs&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;EDIT:The purpose of the short string isn&amp;#39;t to substitute saving both the string themselves but to generate a short string for the user which they can use in their API calls.&lt;br/&gt;\nEDIT 2: The reason I can&amp;#39;t use the &amp;quot;human-friend&amp;quot; words as it is, is because it can be languages with accents(French and unicode ones also)  and API key is ASCII only. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "d3392e70-873c-11e9-af37-0eea3fce36a6", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j7juoj", "is_robot_indexable": true, "report_reasons": null, "author": "prosperousdoggo", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/j7juoj/help_to_create_the_shortest_hexadecimal_string/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/j7juoj/help_to_create_the_shortest_hexadecimal_string/", "subreddit_subscribers": 67775, "created_utc": 1602185813.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I am pleased to announce the release of [Polyphony](https://github.com/digital-fabric/polyphony) version 0.46.0, which includes a full-blown io\\_uring backend. The io\\_uring backend uses a relatively recent new I/O API in Linux that is the future of I/O processing. The new backend provides more than double the performance of the libev backend, achieving **over 120K requests/second** using a basic \"Hello world\" HTTP server.\n\nThose of you unfamiliar with io\\_uring can head over to the [Lord of the io\\_uring website](https://unixism.net/loti/index.html). The io\\_uring backend is automatically used on Linux with kernel version 5.6 or higher.\n\nFor more information on the new io\\_uring backend, including preliminary benchmark numbers and design details you can consult the [pull request](https://github.com/digital-fabric/polyphony/pull/44). The source code for the io\\_uring backend in all its glory can be found[ here](https://github.com/digital-fabric/polyphony/blob/master/ext/polyphony/backend_io_uring.c).\n\nFor more information on Polyphony please consult the (slightly outdated) [Polyphony docs](https://digital-fabric.github.io/polyphony/).", "author_fullname": "t2_ts8jq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Polyphony has an io_uring backend!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j79rmc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 36, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 36, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1602148358.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1602176608.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am pleased to announce the release of &lt;a href=\"https://github.com/digital-fabric/polyphony\"&gt;Polyphony&lt;/a&gt; version 0.46.0, which includes a full-blown io_uring backend. The io_uring backend uses a relatively recent new I/O API in Linux that is the future of I/O processing. The new backend provides more than double the performance of the libev backend, achieving &lt;strong&gt;over 120K requests/second&lt;/strong&gt; using a basic &amp;quot;Hello world&amp;quot; HTTP server.&lt;/p&gt;\n\n&lt;p&gt;Those of you unfamiliar with io_uring can head over to the &lt;a href=\"https://unixism.net/loti/index.html\"&gt;Lord of the io_uring website&lt;/a&gt;. The io_uring backend is automatically used on Linux with kernel version 5.6 or higher.&lt;/p&gt;\n\n&lt;p&gt;For more information on the new io_uring backend, including preliminary benchmark numbers and design details you can consult the &lt;a href=\"https://github.com/digital-fabric/polyphony/pull/44\"&gt;pull request&lt;/a&gt;. The source code for the io_uring backend in all its glory can be found&lt;a href=\"https://github.com/digital-fabric/polyphony/blob/master/ext/polyphony/backend_io_uring.c\"&gt; here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;For more information on Polyphony please consult the (slightly outdated) &lt;a href=\"https://digital-fabric.github.io/polyphony/\"&gt;Polyphony docs&lt;/a&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/eZrUWVMPf7c_RqF2TjKpsDs1KwpKZHh-8irRt2eGet4.jpg?auto=webp&amp;s=03be1e11328f3588dd480cfcc28c2e8fac6ce6b6", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/eZrUWVMPf7c_RqF2TjKpsDs1KwpKZHh-8irRt2eGet4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=a812d766d501bf69cbd4c0a2d3d8b56e1d08ff4e", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/eZrUWVMPf7c_RqF2TjKpsDs1KwpKZHh-8irRt2eGet4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=af59b10f3202e498880fe140d357d6e8d697028f", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/eZrUWVMPf7c_RqF2TjKpsDs1KwpKZHh-8irRt2eGet4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=052a70a9b2bd6cc20521758d26b0c6ac022d5345", "width": 320, "height": 320}], "variants": {}, "id": "AzNEFxpxQc7tFdW6sg0WhtKdbx5GGjb0q3tOV11CqHc"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j79rmc", "is_robot_indexable": true, "report_reasons": null, "author": "noteflakes", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/j79rmc/polyphony_has_an_io_uring_backend/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/j79rmc/polyphony_has_an_io_uring_backend/", "subreddit_subscribers": 67775, "created_utc": 1602147808.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_ldtje", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Getting started with Tailwind CSS on Rails 6", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 73, "top_awarded_type": null, "hide_score": false, "name": "t3_j78xd7", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "public", "ups": 19, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 19, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/Y_3rdAgaWQp-6ArUeyLEJesELCgE7ijcCW1YLTQqQO8.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1602171691.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "rubyyagi.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://rubyyagi.com/tailwind-css-on-rails-6-intro/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/45FUC-yLbYx9neDTbiQrnjtE2L5rfdg97W_-Ao1KoAU.jpg?auto=webp&amp;s=a0ee7eab620453194ce2914df73077beda66abb4", "width": 1200, "height": 628}, "resolutions": [{"url": "https://external-preview.redd.it/45FUC-yLbYx9neDTbiQrnjtE2L5rfdg97W_-Ao1KoAU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=fd2ce8b3051fe786b55d22446604e3bdea24d8f1", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/45FUC-yLbYx9neDTbiQrnjtE2L5rfdg97W_-Ao1KoAU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d3fd9ad90cf6e0de4119b2dfd30a200da2724f5f", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/45FUC-yLbYx9neDTbiQrnjtE2L5rfdg97W_-Ao1KoAU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=90b620b44f53630f1e62b2ce5e685e75752956b1", "width": 320, "height": 167}, {"url": "https://external-preview.redd.it/45FUC-yLbYx9neDTbiQrnjtE2L5rfdg97W_-Ao1KoAU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=4e106bb4625428d564962be098ce1f7733a8c564", "width": 640, "height": 334}, {"url": "https://external-preview.redd.it/45FUC-yLbYx9neDTbiQrnjtE2L5rfdg97W_-Ao1KoAU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=96747ca6f38f52e644f91091a7d9252434b78114", "width": 960, "height": 502}, {"url": "https://external-preview.redd.it/45FUC-yLbYx9neDTbiQrnjtE2L5rfdg97W_-Ao1KoAU.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=3bf2aa74fd9b5af968f4f0277868f1ecab8bdffe", "width": 1080, "height": 565}], "variants": {}, "id": "Oy6S8sT2JRa4s2J2br4SaRqwG_qvGM-xBs0hwy60dZU"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j78xd7", "is_robot_indexable": true, "report_reasons": null, "author": "soulchild_", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/j78xd7/getting_started_with_tailwind_css_on_rails_6/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://rubyyagi.com/tailwind-css-on-rails-6-intro/", "subreddit_subscribers": 67775, "created_utc": 1602142891.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I have published a few of my old Ruby articles at Medium. Here is the \"friends link\" so you can view the article without a membership.\n\n[https://medium.com/@bradtrupp/copy-all-files-in-a-directory-tree-to-a-common-destination-with-ruby-e944553995ef?source=friends\\_link&amp;sk=f6b9dfb362a6f8b329bd1d1c42407d06](https://medium.com/@bradtrupp/copy-all-files-in-a-directory-tree-to-a-common-destination-with-ruby-e944553995ef?source=friends_link&amp;sk=f6b9dfb362a6f8b329bd1d1c42407d06)\n\nAn old podcast receiver program that I used to use kept each feed in a separate subdirectory. I wanted the audio files in a single directory for my ease of playing.\n\nI wrote this quick Ruby utility back many years back to flatten out all the files into a single directory before I copy them to my (now retired) mp3 player.", "author_fullname": "t2_1sku", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Copy all files in a directory tree to a common destination with Ruby", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j7f3uo", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Blog post", "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1602171326.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1602199714.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have published a few of my old Ruby articles at Medium. Here is the &amp;quot;friends link&amp;quot; so you can view the article without a membership.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://medium.com/@bradtrupp/copy-all-files-in-a-directory-tree-to-a-common-destination-with-ruby-e944553995ef?source=friends_link&amp;amp;sk=f6b9dfb362a6f8b329bd1d1c42407d06\"&gt;https://medium.com/@bradtrupp/copy-all-files-in-a-directory-tree-to-a-common-destination-with-ruby-e944553995ef?source=friends_link&amp;amp;sk=f6b9dfb362a6f8b329bd1d1c42407d06&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;An old podcast receiver program that I used to use kept each feed in a separate subdirectory. I wanted the audio files in a single directory for my ease of playing.&lt;/p&gt;\n\n&lt;p&gt;I wrote this quick Ruby utility back many years back to flatten out all the files into a single directory before I copy them to my (now retired) mp3 player.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/aRjUAiV6-X7d8ynjAZpozsmOThrgJZDpCevFXkrqxvw.jpg?auto=webp&amp;s=5976498525505a6d13358392828cf44681eb5acb", "width": 1200, "height": 900}, "resolutions": [{"url": "https://external-preview.redd.it/aRjUAiV6-X7d8ynjAZpozsmOThrgJZDpCevFXkrqxvw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9581829f79924a3a062c478abba8208e4aaa374e", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/aRjUAiV6-X7d8ynjAZpozsmOThrgJZDpCevFXkrqxvw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b2000ca17e63a802efb49db3ac8fc1bd59a0d070", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/aRjUAiV6-X7d8ynjAZpozsmOThrgJZDpCevFXkrqxvw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ee5a396e556cca0f8b16d902f501ab9798563a97", "width": 320, "height": 240}, {"url": "https://external-preview.redd.it/aRjUAiV6-X7d8ynjAZpozsmOThrgJZDpCevFXkrqxvw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=aff1af0e81249ab99b43a7d94a9b761c89ae554b", "width": 640, "height": 480}, {"url": "https://external-preview.redd.it/aRjUAiV6-X7d8ynjAZpozsmOThrgJZDpCevFXkrqxvw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=cb22395649815100fd8e33a02f643376d5ea8ea9", "width": 960, "height": 720}, {"url": "https://external-preview.redd.it/aRjUAiV6-X7d8ynjAZpozsmOThrgJZDpCevFXkrqxvw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=c1f302cc92f43c911920bc37881523c544772043", "width": 1080, "height": 810}], "variants": {}, "id": "18h76qsorDaW0zT2AiL4Wo8uGguZCRPUX4Hpae9ZnJA"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "c8896134-873c-11e9-8edb-0e1f22813c3e", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j7f3uo", "is_robot_indexable": true, "report_reasons": null, "author": "brad", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/j7f3uo/copy_all_files_in_a_directory_tree_to_a_common/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/j7f3uo/copy_all_files_in_a_directory_tree_to_a_common/", "subreddit_subscribers": 67775, "created_utc": 1602170914.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_j7f3uo", "before": null}}