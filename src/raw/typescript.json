{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - October", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j2xtzq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 33, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 33, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1601539524.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j2xtzq", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 5, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j2xtzq/whos_hiring_typescript_developers_october/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/j2xtzq/whos_hiring_typescript_developers_october/", "subreddit_subscribers": 50634, "created_utc": 1601510724.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "So I have an API service that returns either data object in case of success, or an object containing error object.\n\nWhich means returned object can have two different types, depending on success. Is there a way to make typescript recognise which one it is with an if statement?\n\n    const getStuff = async () =&gt; {\n      try {\n        return (await axios.get('url')).data as { title: 'title' }\n      } catch (e) {\n        return { error: e, status: 400 }\n      }\n    }\n    \n    const returnedObject = await getStuff()\n    \n    returnedObject.status // maybe undefined, maybe 400\n    \n    if (returnedObject.error){\n      returnedObject.status // 400\n    } else {\n      returnedObject.title // 'whatever'\n      returnedObject.status // error, status doesn't exists on returnedObject\n    }", "author_fullname": "t2_hl2gz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Type check if return object is response object or error object", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jdhr9x", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603062124.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I have an API service that returns either data object in case of success, or an object containing error object.&lt;/p&gt;\n\n&lt;p&gt;Which means returned object can have two different types, depending on success. Is there a way to make typescript recognise which one it is with an if statement?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const getStuff = async () =&amp;gt; {\n  try {\n    return (await axios.get(&amp;#39;url&amp;#39;)).data as { title: &amp;#39;title&amp;#39; }\n  } catch (e) {\n    return { error: e, status: 400 }\n  }\n}\n\nconst returnedObject = await getStuff()\n\nreturnedObject.status // maybe undefined, maybe 400\n\nif (returnedObject.error){\n  returnedObject.status // 400\n} else {\n  returnedObject.title // &amp;#39;whatever&amp;#39;\n  returnedObject.status // error, status doesn&amp;#39;t exists on returnedObject\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jdhr9x", "is_robot_indexable": true, "report_reasons": null, "author": "Fyro-x", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jdhr9x/type_check_if_return_object_is_response_object_or/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jdhr9x/type_check_if_return_object_is_response_object_or/", "subreddit_subscribers": 50634, "created_utc": 1603033324.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Let's address it, TypeORM sucks but the community doesn't seem to do anything about it!! So I would like to take the step forward:\n\n1. Querybuilder is very bad, chaotic\n\n2. Relational query is not supported - subquery on relation etc\n\n3. Eager loading is not supported\n\n4. Cannot extend query builder\n\n5. Repository is just sugar coating over bad querybuilder\n\n6. Migration is super ugly and bad, have to write raw alter table queries 50% of the times, don't run migrations in batch\n\n7. Seeders are not supported\n\n8. Documentation asks to enable the db-model syncronization in development, but says to create migrations for production - What the hell?\n\n9. Entity Manager is of no use\n\n10. Polymorphic relations not supported\n\n11. ORM cannot spot basic difference between where() and andWhere()\n\n&amp;#x200B;\n\nThesre are my two cents! Your feedbacks are most welcome! \n\nWe need better alternative ORM in typescript!", "author_fullname": "t2_7bz9jje8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "TypeORM Sucks!! Something I wanted to talk about since long!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jcw28f", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.77, "author_flair_background_color": null, "subreddit_type": "public", "ups": 58, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 58, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602973695.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Let&amp;#39;s address it, TypeORM sucks but the community doesn&amp;#39;t seem to do anything about it!! So I would like to take the step forward:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Querybuilder is very bad, chaotic&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Relational query is not supported - subquery on relation etc&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Eager loading is not supported&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Cannot extend query builder&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Repository is just sugar coating over bad querybuilder&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Migration is super ugly and bad, have to write raw alter table queries 50% of the times, don&amp;#39;t run migrations in batch&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Seeders are not supported&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Documentation asks to enable the db-model syncronization in development, but says to create migrations for production - What the hell?&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Entity Manager is of no use&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Polymorphic relations not supported&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;ORM cannot spot basic difference between where() and andWhere()&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Thesre are my two cents! Your feedbacks are most welcome! &lt;/p&gt;\n\n&lt;p&gt;We need better alternative ORM in typescript!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jcw28f", "is_robot_indexable": true, "report_reasons": null, "author": "codingdogg", "discussion_type": null, "num_comments": 109, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jcw28f/typeorm_sucks_something_i_wanted_to_talk_about/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jcw28f/typeorm_sucks_something_i_wanted_to_talk_about/", "subreddit_subscribers": 50634, "created_utc": 1602944895.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_25dpy", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Type with typescript - cheat sheet with samples", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jd8pze", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.6, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603018788.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "goorep.se", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "http://goorep.se:1001/changelog/report/rSelect/PAGE_result.htm?alias=guest&amp;set=api&amp;query=Book+pages&amp;$$TArticleBook1.ArticleBookK=7096&amp;link=%5B%5B%229F1E006D78894848838A0970E2FF0BE9zoom%22,%22Object1%22,7096%5D,%5B%229F60D5FEDE8E41CC986C10147F0AD2F7zoom%22,%22TArticleBook1%22,7096%5D,%5B%2271C91DEE3C5A4FDC8EC1114C7C18033Bzoom%22,%22TArticleBook1%22,7096%5D%5D&amp;rows=50", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jd8pze", "is_robot_indexable": true, "report_reasons": null, "author": "gosh", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jd8pze/type_with_typescript_cheat_sheet_with_samples/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://goorep.se:1001/changelog/report/rSelect/PAGE_result.htm?alias=guest&amp;set=api&amp;query=Book+pages&amp;$$TArticleBook1.ArticleBookK=7096&amp;link=%5B%5B%229F1E006D78894848838A0970E2FF0BE9zoom%22,%22Object1%22,7096%5D,%5B%229F60D5FEDE8E41CC986C10147F0AD2F7zoom%22,%22TArticleBook1%22,7096%5D,%5B%2271C91DEE3C5A4FDC8EC1114C7C18033Bzoom%22,%22TArticleBook1%22,7096%5D%5D&amp;rows=50", "subreddit_subscribers": 50634, "created_utc": 1602989988.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm sorry, I got too excited with TS 4.1 and made compile-time regular expressions\n\n[https://github.com/microsoft/TypeScript/issues/6579#issuecomment-710776922](https://github.com/microsoft/TypeScript/issues/6579#issuecomment-710776922)", "author_fullname": "t2_nd0ng", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Compile-time regular expressions in TS", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jcruy8", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 42, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 42, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1602954195.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m sorry, I got too excited with TS 4.1 and made compile-time regular expressions&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/microsoft/TypeScript/issues/6579#issuecomment-710776922\"&gt;https://github.com/microsoft/TypeScript/issues/6579#issuecomment-710776922&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/oUQzzQfA3-JGtzj_7Jxhrq-7ysdjKnXeVDKfTykHdaA.jpg?auto=webp&amp;s=cba779060580ed3f457410dab623d999244c625b", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/oUQzzQfA3-JGtzj_7Jxhrq-7ysdjKnXeVDKfTykHdaA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=614e6bf4d7570c9c4d0e9da5224fcb0f4538375a", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/oUQzzQfA3-JGtzj_7Jxhrq-7ysdjKnXeVDKfTykHdaA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=def3c0fba828bd11a25b8af3f4f19956f9a78586", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/oUQzzQfA3-JGtzj_7Jxhrq-7ysdjKnXeVDKfTykHdaA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=eaf239dada5661bd9cc8cf071f171e89bae3b4ea", "width": 320, "height": 320}], "variants": {}, "id": "NJXrOyE3KfKBJ_zZ_HKaff4PvMVJeGk8i3forC7kCZE"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jcruy8", "is_robot_indexable": true, "report_reasons": null, "author": "AnyhowStep", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jcruy8/compiletime_regular_expressions_in_ts/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jcruy8/compiletime_regular_expressions_in_ts/", "subreddit_subscribers": 50634, "created_utc": 1602925395.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hey! I've just started using graphQL and would advice on whats the best framework setup for Typescript on Frontend (Vue 3) + Backend (Node).\n\nI'm currently using **AWS Amplify** to create the graphQL API and love how it generates the mutations / queries and subscriptions automatically just from a basic schema like:\n\n&gt;type Todo u/model {id: ID!name: String!description: String}\n\nAlthough it seems lacking in types and I'd ideally like to not get locked into the AWS ecosystem.\n\nI've looked into Vue Apollo but couldn't figure out how to automatically mutations / queries and subscriptions and ideally would like to have this feature on frontend and backend.\n\nI'd rather not have to manually set up all the the mutations / queries and if needed I could then customise them further down the line once I'm more familiar with graphQL. I'd love a solution where I can define schema and then just have default methods for each one that can be accessed like this.\n\n`await graphQL.createTodo( {name: 'Demo todo'})`\n\n`await graphQL.subscribeTodo( {id: '123'})`\n\nAnyway would love to hear opinions on what frameworks are best, so I can get all that juicy goodness from having a predefined schema.\n\nEDIT: To clarify I'll  be using a hosted graphQL instance and Node backend will also be a client. ", "author_fullname": "t2_a794i", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ultimate GraphQL + Typescript Setup?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jcmyms", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1602935627.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602929115.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey! I&amp;#39;ve just started using graphQL and would advice on whats the best framework setup for Typescript on Frontend (Vue 3) + Backend (Node).&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m currently using &lt;strong&gt;AWS Amplify&lt;/strong&gt; to create the graphQL API and love how it generates the mutations / queries and subscriptions automatically just from a basic schema like:&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;type Todo &lt;a href=\"/u/model\"&gt;u/model&lt;/a&gt; {id: ID!name: String!description: String}&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;Although it seems lacking in types and I&amp;#39;d ideally like to not get locked into the AWS ecosystem.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve looked into Vue Apollo but couldn&amp;#39;t figure out how to automatically mutations / queries and subscriptions and ideally would like to have this feature on frontend and backend.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d rather not have to manually set up all the the mutations / queries and if needed I could then customise them further down the line once I&amp;#39;m more familiar with graphQL. I&amp;#39;d love a solution where I can define schema and then just have default methods for each one that can be accessed like this.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;await graphQL.createTodo( {name: &amp;#39;Demo todo&amp;#39;})&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;await graphQL.subscribeTodo( {id: &amp;#39;123&amp;#39;})&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Anyway would love to hear opinions on what frameworks are best, so I can get all that juicy goodness from having a predefined schema.&lt;/p&gt;\n\n&lt;p&gt;EDIT: To clarify I&amp;#39;ll  be using a hosted graphQL instance and Node backend will also be a client. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jcmyms", "is_robot_indexable": true, "report_reasons": null, "author": "Manima1", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jcmyms/ultimate_graphql_typescript_setup/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jcmyms/ultimate_graphql_typescript_setup/", "subreddit_subscribers": 50634, "created_utc": 1602900315.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I made an online Ouija board!  [https://spiritboard.ably.dev/](https://spiritboard.ably.dev/)   \n\n\nIt is open source so you can edit it and make it your own. [https://github.com/ably/ouija](https://github.com/ably/ouija) I've also written up a very thorough readme which goes over how it all works which is in the repo.", "author_fullname": "t2_6cgo7cng", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Online ouija board built with typescript and pub/sub - https://spiritboard.ably.dev", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jc8lqq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1602878799.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I made an online Ouija board!  &lt;a href=\"https://spiritboard.ably.dev/\"&gt;https://spiritboard.ably.dev/&lt;/a&gt;   &lt;/p&gt;\n\n&lt;p&gt;It is open source so you can edit it and make it your own. &lt;a href=\"https://github.com/ably/ouija\"&gt;https://github.com/ably/ouija&lt;/a&gt; I&amp;#39;ve also written up a very thorough readme which goes over how it all works which is in the repo.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/HI-U8PkIQf8t9_j7PW82M1e6XBil-ZSPHewGZAf6cHw.jpg?auto=webp&amp;s=57e84df0ffbf4c818c106aff772e3af07be723f0", "width": 500, "height": 500}, "resolutions": [{"url": "https://external-preview.redd.it/HI-U8PkIQf8t9_j7PW82M1e6XBil-ZSPHewGZAf6cHw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e188f6efd5d2be86c2c76d654b47d4b3ebc76119", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/HI-U8PkIQf8t9_j7PW82M1e6XBil-ZSPHewGZAf6cHw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=74b8ef6e5b8026e97adc4a3332fcb1b2f9a630b8", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/HI-U8PkIQf8t9_j7PW82M1e6XBil-ZSPHewGZAf6cHw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=4399a4ab01d11fa25bc9f45991824e4fc2aae64c", "width": 320, "height": 320}], "variants": {}, "id": "41CEBBGMxpr4S8XQeXgQekAkpyAp-4mheOJS2JE-3Ic"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jc8lqq", "is_robot_indexable": true, "report_reasons": null, "author": "thisisreallyjofrank", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jc8lqq/online_ouija_board_built_with_typescript_and/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jc8lqq/online_ouija_board_built_with_typescript_and/", "subreddit_subscribers": 50634, "created_utc": 1602849999.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "    type ConfigCallback = (...args: never[]) =&gt; AxiosRequestConfig\n    \n    class ApiService {\n      private ctx: Context\n      constructor(ctx: Context) {\n        this.ctx = ctx\n      }\n    \n      buildRequest&lt;T&gt;(config: ConfigCallback) {\n        return async (...ar: Parameters&lt;typeof config&gt;): Promise&lt;T&gt; =&gt; {\n          const resolvedConfig =\n            typeof config === 'function' ? config.apply(this, ar) : config\n          try {\n            return await this.ctx.$axios.$request&lt;T&gt;(resolvedConfig)\n          } catch (e) {\n            throw e\n          }\n        }\n      }\n    \n      commons: this.buildRequest&lt;Commons[]&gt;((type: string) =&gt; ({\n        url: versioned('commons'),\n        method: 'get',\n        params: { type },\n      }))\n    \n      someMethod(){\n        // Argument of type '\"string\"' is not assignable to type 'never'\n        this.commons('someType')\n      }\n    \n    }\n\nSome might say I should do (type: string) =&gt; this.buildRequest&lt;&gt;() and remove all the trickery in buildRequest(), however \"commons\" or something similar doesn't have to be a function, so I want to avoid calling it like this.commons('params')().", "author_fullname": "t2_hl2gz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I cannot get callback function arguments typed for the life of me", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jce7ik", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.71, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1602883329.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602898201.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;type ConfigCallback = (...args: never[]) =&amp;gt; AxiosRequestConfig\n\nclass ApiService {\n  private ctx: Context\n  constructor(ctx: Context) {\n    this.ctx = ctx\n  }\n\n  buildRequest&amp;lt;T&amp;gt;(config: ConfigCallback) {\n    return async (...ar: Parameters&amp;lt;typeof config&amp;gt;): Promise&amp;lt;T&amp;gt; =&amp;gt; {\n      const resolvedConfig =\n        typeof config === &amp;#39;function&amp;#39; ? config.apply(this, ar) : config\n      try {\n        return await this.ctx.$axios.$request&amp;lt;T&amp;gt;(resolvedConfig)\n      } catch (e) {\n        throw e\n      }\n    }\n  }\n\n  commons: this.buildRequest&amp;lt;Commons[]&amp;gt;((type: string) =&amp;gt; ({\n    url: versioned(&amp;#39;commons&amp;#39;),\n    method: &amp;#39;get&amp;#39;,\n    params: { type },\n  }))\n\n  someMethod(){\n    // Argument of type &amp;#39;&amp;quot;string&amp;quot;&amp;#39; is not assignable to type &amp;#39;never&amp;#39;\n    this.commons(&amp;#39;someType&amp;#39;)\n  }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Some might say I should do (type: string) =&amp;gt; this.buildRequest&amp;lt;&amp;gt;() and remove all the trickery in buildRequest(), however &amp;quot;commons&amp;quot; or something similar doesn&amp;#39;t have to be a function, so I want to avoid calling it like this.commons(&amp;#39;params&amp;#39;)().&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jce7ik", "is_robot_indexable": true, "report_reasons": null, "author": "Fyro-x", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jce7ik/i_cannot_get_callback_function_arguments_typed/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jce7ik/i_cannot_get_callback_function_arguments_typed/", "subreddit_subscribers": 50634, "created_utc": 1602869401.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "So I've recently been seeing some impressive claims about various pieces of JS tooling written in languages other than JavaScript, so I was keen to give some of them a try.\n\nToday I spent some of my work 10% time experimenting with swapping babel out of the toolchain of a current work project (a small typescript react application that was originally bootstrapped with Create React App) and replacing it with SWC.\n\nAlthough test times are at present not that bad, anticipating the project getting bigger, I was particularly interested in seeing whether I could improve the test times (also jest runs are easy to benchmark).\n\nThe result was a little bit disappointing. Using `yarn add jest-benchmark` I found that our tests ran at an average of about 6.75 seconds per run using `babel` (average over 10 runs), compared to 6.5 using `swc`. Now I appreciate that transpilation isn't the only bottleneck in a test run, but given the wild claims I've seen everywhere about these tools (and all the blog posts which talk about it significantly speeding up your test runs), is this really what I'd expect to see or have I misconfigured things somehow? I've already raised an issue on the `swc` Github repository already only to have my issue immediately closed with a spectacularly unhelpful reply ([https://github.com/swc-project/swc/issues/1172](https://github.com/swc-project/swc/issues/1172)).\n\nTo configure `swc` with `jest`, I installed `jest-swc` and changed the `jestConfig` transform block to the following:\n\n    \"transform\": {\n      \"^.+\\\\.(js|jsx|ts|tsx)$\": \"swc-jest\",\n      \"^.+\\\\.css$\": \"&lt;rootDir&gt;/config/jest/cssTransform.js\",\n      \"^(?!.*\\\\.(js|jsx|ts|tsx|css|json)$)\": \"&lt;rootDir&gt;/config/jest/fileTransform.js\"\n    },\n\nI then added the following `.swcrc` to the root of the repository:\n\n    {\n      \"jsc\": {\n        \"target\": \"es2017\",\n        \"parser\": {\n          \"syntax\": \"typescript\",\n          \"tsx\": true,\n          \"decorators\": false,\n          \"dynamicImport\": false\n        },\n        \"transform\": {\n          \"react\": {\n            \"pragma\": \"React.createElement\",\n            \"pragmaFrag\": \"React.Fragment\",\n            \"throwIfNamespace\": true,\n            \"development\": false,\n            \"useBuiltins\": false\n          },\n          \"hidden\": {\n            \"jest\": true\n          }\n        }\n      },\n      \"module\": {\n        \"type\": \"commonjs\",\n        \"strict\": false,\n        \"strictMode\": true,\n        \"lazy\": false,\n        \"noInterop\": false\n      }\n    }", "author_fullname": "t2_5ptikh0d", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "swc with Jest vs swc with Babel", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jcdie9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1602871254.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1602896005.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I&amp;#39;ve recently been seeing some impressive claims about various pieces of JS tooling written in languages other than JavaScript, so I was keen to give some of them a try.&lt;/p&gt;\n\n&lt;p&gt;Today I spent some of my work 10% time experimenting with swapping babel out of the toolchain of a current work project (a small typescript react application that was originally bootstrapped with Create React App) and replacing it with SWC.&lt;/p&gt;\n\n&lt;p&gt;Although test times are at present not that bad, anticipating the project getting bigger, I was particularly interested in seeing whether I could improve the test times (also jest runs are easy to benchmark).&lt;/p&gt;\n\n&lt;p&gt;The result was a little bit disappointing. Using &lt;code&gt;yarn add jest-benchmark&lt;/code&gt; I found that our tests ran at an average of about 6.75 seconds per run using &lt;code&gt;babel&lt;/code&gt; (average over 10 runs), compared to 6.5 using &lt;code&gt;swc&lt;/code&gt;. Now I appreciate that transpilation isn&amp;#39;t the only bottleneck in a test run, but given the wild claims I&amp;#39;ve seen everywhere about these tools (and all the blog posts which talk about it significantly speeding up your test runs), is this really what I&amp;#39;d expect to see or have I misconfigured things somehow? I&amp;#39;ve already raised an issue on the &lt;code&gt;swc&lt;/code&gt; Github repository already only to have my issue immediately closed with a spectacularly unhelpful reply (&lt;a href=\"https://github.com/swc-project/swc/issues/1172\"&gt;https://github.com/swc-project/swc/issues/1172&lt;/a&gt;).&lt;/p&gt;\n\n&lt;p&gt;To configure &lt;code&gt;swc&lt;/code&gt; with &lt;code&gt;jest&lt;/code&gt;, I installed &lt;code&gt;jest-swc&lt;/code&gt; and changed the &lt;code&gt;jestConfig&lt;/code&gt; transform block to the following:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;quot;transform&amp;quot;: {\n  &amp;quot;^.+\\\\.(js|jsx|ts|tsx)$&amp;quot;: &amp;quot;swc-jest&amp;quot;,\n  &amp;quot;^.+\\\\.css$&amp;quot;: &amp;quot;&amp;lt;rootDir&amp;gt;/config/jest/cssTransform.js&amp;quot;,\n  &amp;quot;^(?!.*\\\\.(js|jsx|ts|tsx|css|json)$)&amp;quot;: &amp;quot;&amp;lt;rootDir&amp;gt;/config/jest/fileTransform.js&amp;quot;\n},\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I then added the following &lt;code&gt;.swcrc&lt;/code&gt; to the root of the repository:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n  &amp;quot;jsc&amp;quot;: {\n    &amp;quot;target&amp;quot;: &amp;quot;es2017&amp;quot;,\n    &amp;quot;parser&amp;quot;: {\n      &amp;quot;syntax&amp;quot;: &amp;quot;typescript&amp;quot;,\n      &amp;quot;tsx&amp;quot;: true,\n      &amp;quot;decorators&amp;quot;: false,\n      &amp;quot;dynamicImport&amp;quot;: false\n    },\n    &amp;quot;transform&amp;quot;: {\n      &amp;quot;react&amp;quot;: {\n        &amp;quot;pragma&amp;quot;: &amp;quot;React.createElement&amp;quot;,\n        &amp;quot;pragmaFrag&amp;quot;: &amp;quot;React.Fragment&amp;quot;,\n        &amp;quot;throwIfNamespace&amp;quot;: true,\n        &amp;quot;development&amp;quot;: false,\n        &amp;quot;useBuiltins&amp;quot;: false\n      },\n      &amp;quot;hidden&amp;quot;: {\n        &amp;quot;jest&amp;quot;: true\n      }\n    }\n  },\n  &amp;quot;module&amp;quot;: {\n    &amp;quot;type&amp;quot;: &amp;quot;commonjs&amp;quot;,\n    &amp;quot;strict&amp;quot;: false,\n    &amp;quot;strictMode&amp;quot;: true,\n    &amp;quot;lazy&amp;quot;: false,\n    &amp;quot;noInterop&amp;quot;: false\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/Xdqep7WgWvDrjTyFO4VLx5duD7jhOoLXZ4V1Bf2dq_Q.jpg?auto=webp&amp;s=2e98960adeb6230919c01e3018fe81152fc21d4b", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/Xdqep7WgWvDrjTyFO4VLx5duD7jhOoLXZ4V1Bf2dq_Q.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=094dfa2f251997fc4ae484a354771ebf6dc12e94", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/Xdqep7WgWvDrjTyFO4VLx5duD7jhOoLXZ4V1Bf2dq_Q.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=3ce392b06536f60258db86bdd26f12f48438294d", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/Xdqep7WgWvDrjTyFO4VLx5duD7jhOoLXZ4V1Bf2dq_Q.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c66ff8454874aff670e6f8bfd922a7cfb52d0cc2", "width": 320, "height": 320}], "variants": {}, "id": "CMZCMn9qkLRs8TfbAOj7QG3ERxrzmj7vms0-qck_8aY"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jcdie9", "is_robot_indexable": true, "report_reasons": null, "author": "benwainwright212", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jcdie9/swc_with_jest_vs_swc_with_babel/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jcdie9/swc_with_jest_vs_swc_with_babel/", "subreddit_subscribers": 50634, "created_utc": 1602867205.0, "num_crossposts": 2, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have two entities:\n\n    @Entity({ name: 'problem' })\n    export class Problem {\n      @PrimaryGeneratedColumn('uuid')\n      id: string;\n       \n      @Column({ type: 'boolean', default: false })\n      isSolved: boolean;\n    \n      @ManyToOne(() =&gt; Student, student =&gt; student.problems,  { nullable: true })\n      student: Student;\n    }\n    \n    @Entity({ name: 'student' })\n    export class Student {\n      @PrimaryGeneratedColumn('uuid')\n      id: string;\n    \n      @OneToMany(() =&gt; Problem, problem =&gt; problem.student, { cascade: ['insert', 'update'], nullable: true }) \n      problems: Problem[];\n    }\n\nEach student and problem can exist independently; when creating a new problem, I want to update the student relationship 'problems':\n\n \n\n    const students :\u00a0Student[]\u00a0=\u00a0await getConnection().\n getRepository(Student).find({\u00a0relations:\u00a0['problems']\u00a0});\n    \n        students.forEach(async function (student, index) {\n          // Student is free can solve problems\n          if (student.problems === undefined || student.problems.length == 0) {        \n            newProblem.student = student;\n            // RELATIONSHIP NOT UPDATED TO STUDENT EVEN IF A PROBLEM WAS ASSIGNED\n            await getConnection().getRepository(Problem).save(newProblem).then(e =&gt; ProblemDTO.fromEntity(e));\n            return newProblem;\n          }\n\nHow can I update both sides (student + problem)?", "author_fullname": "t2_5onmsz79", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Updating relationship objects (using typeorm)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jcct5w", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602893797.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have two entities:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;@Entity({ name: &amp;#39;problem&amp;#39; })\nexport class Problem {\n  @PrimaryGeneratedColumn(&amp;#39;uuid&amp;#39;)\n  id: string;\n\n  @Column({ type: &amp;#39;boolean&amp;#39;, default: false })\n  isSolved: boolean;\n\n  @ManyToOne(() =&amp;gt; Student, student =&amp;gt; student.problems,  { nullable: true })\n  student: Student;\n}\n\n@Entity({ name: &amp;#39;student&amp;#39; })\nexport class Student {\n  @PrimaryGeneratedColumn(&amp;#39;uuid&amp;#39;)\n  id: string;\n\n  @OneToMany(() =&amp;gt; Problem, problem =&amp;gt; problem.student, { cascade: [&amp;#39;insert&amp;#39;, &amp;#39;update&amp;#39;], nullable: true }) \n  problems: Problem[];\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Each student and problem can exist independently; when creating a new problem, I want to update the student relationship &amp;#39;problems&amp;#39;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const students :\u00a0Student[]\u00a0=\u00a0await getConnection().\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;getRepository(Student).find({\u00a0relations:\u00a0[&amp;#39;problems&amp;#39;]\u00a0});&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    students.forEach(async function (student, index) {\n      // Student is free can solve problems\n      if (student.problems === undefined || student.problems.length == 0) {        \n        newProblem.student = student;\n        // RELATIONSHIP NOT UPDATED TO STUDENT EVEN IF A PROBLEM WAS ASSIGNED\n        await getConnection().getRepository(Problem).save(newProblem).then(e =&amp;gt; ProblemDTO.fromEntity(e));\n        return newProblem;\n      }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How can I update both sides (student + problem)?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jcct5w", "is_robot_indexable": true, "report_reasons": null, "author": "0xdeadbeefx16", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jcct5w/updating_relationship_objects_using_typeorm/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jcct5w/updating_relationship_objects_using_typeorm/", "subreddit_subscribers": 50634, "created_utc": 1602864997.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_3cl7e290", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Bringing TypeScript types at runtime with TypeOnly", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jbpbnp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 28, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 28, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1602803333.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/@paleo.said/c317e9dd8880", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jbpbnp", "is_robot_indexable": true, "report_reasons": null, "author": "EvoNext", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jbpbnp/bringing_typescript_types_at_runtime_with_typeonly/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@paleo.said/c317e9dd8880", "subreddit_subscribers": 50634, "created_utc": 1602774533.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_jbpbnp", "before": null}}