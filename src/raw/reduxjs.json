{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I am trying to make an app in which the state is a little bit complex so I have to make it be like a normalized client side database as suggested in the redux docs  \\[[1](https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/)\\] .\n\nIt would be extremely helpful for me if there is any kind of tool/app that allows me to create a client side normalized database diagram , like for example [this](https://erdplus.com/standalone) tool .\n\nUnfortunately this tool does not provide me with types that exists in JS (array for example). I want the tool to allow me to define types like I do in typescript .\n\nSince my database is a single object it would be nice for that tool to make a d.ts file for that object .\n\nAlso it would be extremely helpful if that tool would allow me to save my work .\n\nIt really feel painful defining my normalized client side database in a d.ts file , I think a tool like the one I described will boost productivity .\n\nI am really noob regarding all that database thing , so sorry what I am asking sounds stupid .", "author_fullname": "t2_1ihbqq55", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Tools for creating a client side database diagram .", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g0n3zg", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586826638.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am trying to make an app in which the state is a little bit complex so I have to make it be like a normalized client side database as suggested in the redux docs  [&lt;a href=\"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/\"&gt;1&lt;/a&gt;] .&lt;/p&gt;\n\n&lt;p&gt;It would be extremely helpful for me if there is any kind of tool/app that allows me to create a client side normalized database diagram , like for example &lt;a href=\"https://erdplus.com/standalone\"&gt;this&lt;/a&gt; tool .&lt;/p&gt;\n\n&lt;p&gt;Unfortunately this tool does not provide me with types that exists in JS (array for example). I want the tool to allow me to define types like I do in typescript .&lt;/p&gt;\n\n&lt;p&gt;Since my database is a single object it would be nice for that tool to make a d.ts file for that object .&lt;/p&gt;\n\n&lt;p&gt;Also it would be extremely helpful if that tool would allow me to save my work .&lt;/p&gt;\n\n&lt;p&gt;It really feel painful defining my normalized client side database in a d.ts file , I think a tool like the one I described will boost productivity .&lt;/p&gt;\n\n&lt;p&gt;I am really noob regarding all that database thing , so sorry what I am asking sounds stupid .&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g0n3zg", "is_robot_indexable": true, "report_reasons": null, "author": "liaguris", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/g0n3zg/tools_for_creating_a_client_side_database_diagram/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/g0n3zg/tools_for_creating_a_client_side_database_diagram/", "subreddit_subscribers": 3375, "created_utc": 1586797838.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_1ih5n2bn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Modern React Redux Tutorials with Redux toolkit - 2020", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fzx905", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1586728947.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "cloudnweb.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fzx905", "is_robot_indexable": true, "report_reasons": null, "author": "GaneshMani", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/fzx905/modern_react_redux_tutorials_with_redux_toolkit/", "parent_whitelist_status": null, "stickied": false, "url": "https://cloudnweb.dev/2020/04/modern-react-redux-tutotials-redux-toolkit/", "subreddit_subscribers": 3375, "created_utc": 1586700147.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "This is mentioned [here](https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/#designing-a-normalized-state) . What I do not understand is :\n\n1. why arrays of ids should indicate ordering for the ids ? why cant the ids themselves represent ordering ?\n2. what is the profit/best practice that we get from creating one more nest in the state to just add the `allIds` property ?\n3. how are the unique ids produced ?", "author_fullname": "t2_1ihbqq55", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Designing a normalized state : Arrays of ids should be used to indicate ordering .", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fz6fyl", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1586616613.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586644406.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This is mentioned &lt;a href=\"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/#designing-a-normalized-state\"&gt;here&lt;/a&gt; . What I do not understand is :&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;why arrays of ids should indicate ordering for the ids ? why cant the ids themselves represent ordering ?&lt;/li&gt;\n&lt;li&gt;what is the profit/best practice that we get from creating one more nest in the state to just add the &lt;code&gt;allIds&lt;/code&gt; property ?&lt;/li&gt;\n&lt;li&gt;how are the unique ids produced ?&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fz6fyl", "is_robot_indexable": true, "report_reasons": null, "author": "liaguris", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/fz6fyl/designing_a_normalized_state_arrays_of_ids_should/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/fz6fyl/designing_a_normalized_state_arrays_of_ids_should/", "subreddit_subscribers": 3375, "created_utc": 1586615606.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Totally new to react and redux, so please excuse my dumb questions.\nI already managed to write a component, that opens a webcam and displays it, I also managed to add a button in this component to grab an image and send it to a handler function outside of this component.\n\nNow I would like to do the following: I would like to write a page, that grabs a pic from the webcam, sends it via fetch to a server - waits for the reply and after the reply came does the same again. I\u2019m currently still lost how to do that within the React - redux(-toolkit) framework.\n\nWould love to get hints on it.", "author_fullname": "t2_1jch4bon", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Constantly updating in background", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fyb1pz", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586532928.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Totally new to react and redux, so please excuse my dumb questions.\nI already managed to write a component, that opens a webcam and displays it, I also managed to add a button in this component to grab an image and send it to a handler function outside of this component.&lt;/p&gt;\n\n&lt;p&gt;Now I would like to do the following: I would like to write a page, that grabs a pic from the webcam, sends it via fetch to a server - waits for the reply and after the reply came does the same again. I\u2019m currently still lost how to do that within the React - redux(-toolkit) framework.&lt;/p&gt;\n\n&lt;p&gt;Would love to get hints on it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fyb1pz", "is_robot_indexable": true, "report_reasons": null, "author": "diyroka", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/fyb1pz/constantly_updating_in_background/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/fyb1pz/constantly_updating_in_background/", "subreddit_subscribers": 3375, "created_utc": 1586504128.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I currently have an application using redux and I have it set that every time the app loads it checks the JWT token is valid and adds the user data to the state.\n\nI was wondering what the differences are between calling the api and then storing data in the state every reload or storing the data once in `localStorage`? \n\nHow the code is setup with calling the api and storing with redux. \n\nCHECK TOKEN\n```\nconst token = localStorage.UserIdToken;\nif (token) {\n  const decodedToken = jwtDecode(token);\n\n  if (decodedToken.exp * 1000 &lt; Date.now()) {\n    store.dispatch(logoutUser());\n  } else {\n    store.dispatch({ type: SET_AUTHENTICATED });\n    axios.defaults.headers.common['Authorization'] = token;\n    store.dispatch(getUserData());\n  }\n}\n```\n`getUserData()`\n```\nexport const getUserData = () =&gt; async dispatch =&gt; {\n  try {\n    const res = await axios.get('/user');\n    dispatch({\n      type: SET_USER,\n      payload: res.data,\n    });\n  } \n  ...\n};\n```", "author_fullname": "t2_53ahvmsq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Difference between storing data in localStorage vs the state", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fy14l4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586496717.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I currently have an application using redux and I have it set that every time the app loads it checks the JWT token is valid and adds the user data to the state.&lt;/p&gt;\n\n&lt;p&gt;I was wondering what the differences are between calling the api and then storing data in the state every reload or storing the data once in &lt;code&gt;localStorage&lt;/code&gt;? &lt;/p&gt;\n\n&lt;p&gt;How the code is setup with calling the api and storing with redux. &lt;/p&gt;\n\n&lt;p&gt;CHECK TOKEN\n```\nconst token = localStorage.UserIdToken;\nif (token) {\n  const decodedToken = jwtDecode(token);&lt;/p&gt;\n\n&lt;p&gt;if (decodedToken.exp * 1000 &amp;lt; Date.now()) {\n    store.dispatch(logoutUser());\n  } else {\n    store.dispatch({ type: SET_AUTHENTICATED });\n    axios.defaults.headers.common[&amp;#39;Authorization&amp;#39;] = token;\n    store.dispatch(getUserData());\n  }\n}\n&lt;code&gt;\n`getUserData()`\n&lt;/code&gt;\nexport const getUserData = () =&amp;gt; async dispatch =&amp;gt; {\n  try {\n    const res = await axios.get(&amp;#39;/user&amp;#39;);\n    dispatch({\n      type: SET_USER,\n      payload: res.data,\n    });\n  } \n  ...\n};\n```&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fy14l4", "is_robot_indexable": true, "report_reasons": null, "author": "LurelinVillage", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/fy14l4/difference_between_storing_data_in_localstorage/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/fy14l4/difference_between_storing_data_in_localstorage/", "subreddit_subscribers": 3375, "created_utc": 1586467917.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "What are the pros and cons of these saga effects?", "author_fullname": "t2_38odc2ji", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is there any difference b/w these two redux saga effects takeEvery() and while(true) { take() } ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fsd1cn", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585690624.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;What are the pros and cons of these saga effects?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsd1cn", "is_robot_indexable": true, "report_reasons": null, "author": "ramiz_ahmed", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/fsd1cn/is_there_any_difference_bw_these_two_redux_saga/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/fsd1cn/is_there_any_difference_bw_these_two_redux_saga/", "subreddit_subscribers": 3375, "created_utc": 1585661824.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Hello fellows\n\nI have created a new alternative to the Redux library. It is much simpler and powerful. [https://github.com/aneldev/dynadux](https://github.com/aneldev/dynadux)\n\nI would appreciate having your feedback!", "author_fullname": "t2_5v1dhldv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Dynadux, an alternative to Redux, simpler and powerful", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_frlhpu", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585577498.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello fellows&lt;/p&gt;\n\n&lt;p&gt;I have created a new alternative to the Redux library. It is much simpler and powerful. &lt;a href=\"https://github.com/aneldev/dynadux\"&gt;https://github.com/aneldev/dynadux&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I would appreciate having your feedback!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "frlhpu", "is_robot_indexable": true, "report_reasons": null, "author": "dennisfed", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/frlhpu/dynadux_an_alternative_to_redux_simpler_and/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/frlhpu/dynadux_an_alternative_to_redux_simpler_and/", "subreddit_subscribers": 3375, "created_utc": 1585548698.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_x30x82e", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "React, Redux and a little bit of math.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fozpe4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1585204204.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fozpe4", "is_robot_indexable": true, "report_reasons": null, "author": "Happycodeine", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/fozpe4/react_redux_and_a_little_bit_of_math/", "parent_whitelist_status": null, "stickied": false, "url": "https://medium.com/@dmitriykharchenko/react-redux-and-a-little-bit-of-math-fe2c9a4a477c?source=friends_link&amp;sk=a826809258bc807c0919cdf63e49c766", "subreddit_subscribers": 3375, "created_utc": 1585175404.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Are there any best practices, guides, or libraries out there to simplify/standardize how caching is handled in Redux?\n\nFor now, I'm keeping a boolean in my reducers. If that value is false and I try to fetch data, it'll just no-op.", "author_fullname": "t2_8v11p", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Are there any good caching solutions or libraries for Redux?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fojgse", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585136285.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Are there any best practices, guides, or libraries out there to simplify/standardize how caching is handled in Redux?&lt;/p&gt;\n\n&lt;p&gt;For now, I&amp;#39;m keeping a boolean in my reducers. If that value is false and I try to fetch data, it&amp;#39;ll just no-op.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fojgse", "is_robot_indexable": true, "report_reasons": null, "author": "ipoopfool", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/fojgse/are_there_any_good_caching_solutions_or_libraries/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/fojgse/are_there_any_good_caching_solutions_or_libraries/", "subreddit_subscribers": 3375, "created_utc": 1585107485.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_13yf9nl6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Tricks you never knew about Redux DevTool", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fkyd85", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584598523.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.logrocket.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fkyd85", "is_robot_indexable": true, "report_reasons": null, "author": "zsajjad", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/fkyd85/tricks_you_never_knew_about_redux_devtool/", "parent_whitelist_status": null, "stickied": false, "url": "https://blog.logrocket.com/redux-devtools-tips-tricks-for-faster-debugging/", "subreddit_subscribers": 3375, "created_utc": 1584569723.0, "num_crossposts": 1, "media": null, "is_video": false}}], "after": "t3_fkyd85", "before": null}}