{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - September", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ik9rft", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1598947533.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ik9rft", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 2, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ik9rft/whos_hiring_typescript_developers_september/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/ik9rft/whos_hiring_typescript_developers_september/", "subreddit_subscribers": 48184, "created_utc": 1598918733.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_qtig0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Building a Game With TypeScript. Drawing Grid 5/5", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iqn5nn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.78, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1599844611.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/gregsolo/building-a-game-with-typescript-drawing-grid-5-5-49454917b3af?source=friends_link&amp;sk=84924dff6c15ff16f3a01f6d35fe48d1", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iqn5nn", "is_robot_indexable": true, "report_reasons": null, "author": "Fewthp", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iqn5nn/building_a_game_with_typescript_drawing_grid_55/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/gregsolo/building-a-game-with-typescript-drawing-grid-5-5-49454917b3af?source=friends_link&amp;sk=84924dff6c15ff16f3a01f6d35fe48d1", "subreddit_subscribers": 48184, "created_utc": 1599815811.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have read sentiment on here that Enums may have been a directional misfit. \n\nAnd because I tend to use string Enums to avoid string arguments, I think I may do what one poster said and revert to `Object.freeze` again. \n\nThey are essentially the same right? Or is there a strong case for one over the other?", "author_fullname": "t2_3ob6osi0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Enums vs Object.freeze", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iqc2av", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1599799942.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have read sentiment on here that Enums may have been a directional misfit. &lt;/p&gt;\n\n&lt;p&gt;And because I tend to use string Enums to avoid string arguments, I think I may do what one poster said and revert to &lt;code&gt;Object.freeze&lt;/code&gt; again. &lt;/p&gt;\n\n&lt;p&gt;They are essentially the same right? Or is there a strong case for one over the other?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iqc2av", "is_robot_indexable": true, "report_reasons": null, "author": "embar5", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iqc2av/enums_vs_objectfreeze/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iqc2av/enums_vs_objectfreeze/", "subreddit_subscribers": 48184, "created_utc": 1599771142.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I had an issue with some library not long ago, and I was wondering if there were any other libraries that may become a pain in the ass because it's not well integrated with Typescript, or it's poorly designed and doesn't really use Typescript's features very well at all.", "author_fullname": "t2_7btel9dg", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Any React libraries you would recommend avoiding when working with Typescript?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iqfq41", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1599812059.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I had an issue with some library not long ago, and I was wondering if there were any other libraries that may become a pain in the ass because it&amp;#39;s not well integrated with Typescript, or it&amp;#39;s poorly designed and doesn&amp;#39;t really use Typescript&amp;#39;s features very well at all.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iqfq41", "is_robot_indexable": true, "report_reasons": null, "author": "jadesalad", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iqfq41/any_react_libraries_you_would_recommend_avoiding/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iqfq41/any_react_libraries_you_would_recommend_avoiding/", "subreddit_subscribers": 48184, "created_utc": 1599783259.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_9or2f", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Avoid Export Default", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 73, "top_awarded_type": null, "hide_score": false, "name": "t3_ipou7q", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 124, "total_awards_received": 1, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 124, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/J2zZ7qFxWsfHEQ25QoxwxqC7onnPl63cVjX3JT2IYtw.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1599713370.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "basarat.gitbook.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://basarat.gitbook.io/typescript/main-1/defaultisbad", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/DPHLo2Ev7SKjaHRmBhnsBA4s-WDPRe9SiTj5Zi9Zmfc.jpg?auto=webp&amp;s=67bd41dbc89cf5282cda70a1fc254c46d93bc4dd", "width": 1200, "height": 630}, "resolutions": [{"url": "https://external-preview.redd.it/DPHLo2Ev7SKjaHRmBhnsBA4s-WDPRe9SiTj5Zi9Zmfc.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=828bb19f077b9594c4918c8a62bc70c8908803d9", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/DPHLo2Ev7SKjaHRmBhnsBA4s-WDPRe9SiTj5Zi9Zmfc.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=3e7a79e2c4d4876c8102400e63bc313e5e13ba20", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/DPHLo2Ev7SKjaHRmBhnsBA4s-WDPRe9SiTj5Zi9Zmfc.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2cc1ee4a39fd1f1242ff167963183aa500f65f77", "width": 320, "height": 168}, {"url": "https://external-preview.redd.it/DPHLo2Ev7SKjaHRmBhnsBA4s-WDPRe9SiTj5Zi9Zmfc.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b782007e600af2d59eab55e2c588fb283fb29a21", "width": 640, "height": 336}, {"url": "https://external-preview.redd.it/DPHLo2Ev7SKjaHRmBhnsBA4s-WDPRe9SiTj5Zi9Zmfc.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=f5c6834e1d08ef98654bfe92cc5d8078159e3a87", "width": 960, "height": 504}, {"url": "https://external-preview.redd.it/DPHLo2Ev7SKjaHRmBhnsBA4s-WDPRe9SiTj5Zi9Zmfc.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=a5e76568cc7dd1bd1091ac6f623b623170825ffe", "width": 1080, "height": 567}], "variants": {}, "id": "EqKcbV6nflet2L7BexIy5cQgVozk_j84baB4DN75Gmw"}], "enabled": false}, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 50, "id": "award_02d9ab2c-162e-4c01-8438-317a016ed3d9", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=16&amp;height=16&amp;auto=webp&amp;s=92e96be1dbd278dc987fbd9acc1bd5078566f254", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=32&amp;height=32&amp;auto=webp&amp;s=83e14655f2b162b295f7d2c7058b9ad94cf8b73c", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=48&amp;height=48&amp;auto=webp&amp;s=83038a4d6181d3c8f5107dbca4ddb735ca6c2231", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=64&amp;height=64&amp;auto=webp&amp;s=3c4e39a7664d799ff50f32e9a3f96c3109d2e266", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=128&amp;height=128&amp;auto=webp&amp;s=390bf9706b8e1a6215716ebcf6363373f125c339", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "I'm in this with you.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Take My Energy", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=16&amp;height=16&amp;auto=webp&amp;s=92e96be1dbd278dc987fbd9acc1bd5078566f254", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=32&amp;height=32&amp;auto=webp&amp;s=83e14655f2b162b295f7d2c7058b9ad94cf8b73c", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=48&amp;height=48&amp;auto=webp&amp;s=83038a4d6181d3c8f5107dbca4ddb735ca6c2231", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=64&amp;height=64&amp;auto=webp&amp;s=3c4e39a7664d799ff50f32e9a3f96c3109d2e266", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=128&amp;height=128&amp;auto=webp&amp;s=390bf9706b8e1a6215716ebcf6363373f125c339", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ipou7q", "is_robot_indexable": true, "report_reasons": null, "author": "olouv", "discussion_type": null, "num_comments": 77, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ipou7q/avoid_export_default/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://basarat.gitbook.io/typescript/main-1/defaultisbad", "subreddit_subscribers": 48184, "created_utc": 1599684570.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi,\n\nIn python I can write the following code:\n\n\tclass Schema(dict):\n\t\ttable = \n\t\tschema = {}\n\n\t\tdef __init__(self, **kwargs):\n\t\t\tsuper().__init__()\n\n\t\t\tif not isinstance(self.table, str):\n\t\t\t\traise TypeError('Table should be a string name')\n\n\t\t\tif not isinstance(self.schema, dict):\n\t\t\t\traise TypeError('Malformed schema.')\n\t\t\t// Write schema validation here\n\n\t\t\tfor key, keyProps in self.schema.items():\n\n\t\t\t\tif key in kwargs:\n\t\t\t\t\tif isinstance(kwargs[key], keyProps['type']):\n\t\t\t\t\t\tself[key] = kwargs[key]\n\t\t\t\t\telse:\n\t\t\t\t\t\traise TypeError(f\"Mismatched type for key '{key}': Expected '{keyProps['type']}' Got '{type(kwargs[key])}'\")\n\t\t\t\telse:\n\t\t\t\t\tif keyProps['required'] or keyProps['default']:\n\t\t\t\t\t\tself[key] = keyProps.get('default') or keyProps['type']()\n\n\tclass Entity(dict):\n\t\tschema = {\n\t\t\t'name': {\n\t\t\t\t'type': str,\n\t\t\t\t'required': True,\n\t\t\t},\n\t\t\t'count': {\n\t\t\t\t'type': int,\n\t\t\t\t'required': True,\n\t\t\t\t'default': 10\n\t\t\t},\n\t\t}\n\nThis allows me to model various entities as per some well defined schema, as well as ensure that the schema is followed by all instances of entities. Additionally, I can add helper functions to reuse functionality for reading/writing to databases/streams/event queues etc\n\nHow do I achieve something similar in typescript while leveraging type checking at compile time?\n\n\tinterface GlobalSchema {\n\t\tname: string, \n\t\ttable: string, \n\t\tattributes: {[key: string]: {\n\t\t\ttype: string | number | boolean,\n\t\t\trequired?: boolean,\n\t\t\tdefault?: string | number | boolean,\n\t\t}\n\t}; \n\n\tconst SampleSchema: GlobalSchema = {\n\t\tname: \"Sample\",\n\t\ttable: \"commonTable\",\n\t\tattributes: {\n\t\t\tid: {\n\t\t\t\ttype: string,\n\t\t\t},\n\t\t\tfname: {\n\t\t\t\ttype: string,\n\t\t\t\trequired: false,\n\t\t\t}, \n\t\t\tlname: {\n\t\t\t\ttype: string,\n\t\t\t\tdefault: \"someName\",\n\t\t\t}, \n\t\t\tactive: {\n\t\t\t\ttype: boolean,\n\t\t\t\tdefault: true\n\t\t\t}\n\t\t}\n\t}\n\n\tconst sampleEntity: SampleSchema.attributes = {\n\t\tid: \"10\", \n\t\tfname: \"John\", \n\t\tlname: \"Doe\", \n\t\tactive: true\n\t}", "author_fullname": "t2_7cpii", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Writing a schema parser in typescript", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iq003l", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1599758664.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;In python I can write the following code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Schema(dict):\n    table = \n    schema = {}\n\n    def __init__(self, **kwargs):\n        super().__init__()\n\n        if not isinstance(self.table, str):\n            raise TypeError(&amp;#39;Table should be a string name&amp;#39;)\n\n        if not isinstance(self.schema, dict):\n            raise TypeError(&amp;#39;Malformed schema.&amp;#39;)\n        // Write schema validation here\n\n        for key, keyProps in self.schema.items():\n\n            if key in kwargs:\n                if isinstance(kwargs[key], keyProps[&amp;#39;type&amp;#39;]):\n                    self[key] = kwargs[key]\n                else:\n                    raise TypeError(f&amp;quot;Mismatched type for key &amp;#39;{key}&amp;#39;: Expected &amp;#39;{keyProps[&amp;#39;type&amp;#39;]}&amp;#39; Got &amp;#39;{type(kwargs[key])}&amp;#39;&amp;quot;)\n            else:\n                if keyProps[&amp;#39;required&amp;#39;] or keyProps[&amp;#39;default&amp;#39;]:\n                    self[key] = keyProps.get(&amp;#39;default&amp;#39;) or keyProps[&amp;#39;type&amp;#39;]()\n\nclass Entity(dict):\n    schema = {\n        &amp;#39;name&amp;#39;: {\n            &amp;#39;type&amp;#39;: str,\n            &amp;#39;required&amp;#39;: True,\n        },\n        &amp;#39;count&amp;#39;: {\n            &amp;#39;type&amp;#39;: int,\n            &amp;#39;required&amp;#39;: True,\n            &amp;#39;default&amp;#39;: 10\n        },\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This allows me to model various entities as per some well defined schema, as well as ensure that the schema is followed by all instances of entities. Additionally, I can add helper functions to reuse functionality for reading/writing to databases/streams/event queues etc&lt;/p&gt;\n\n&lt;p&gt;How do I achieve something similar in typescript while leveraging type checking at compile time?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface GlobalSchema {\n    name: string, \n    table: string, \n    attributes: {[key: string]: {\n        type: string | number | boolean,\n        required?: boolean,\n        default?: string | number | boolean,\n    }\n}; \n\nconst SampleSchema: GlobalSchema = {\n    name: &amp;quot;Sample&amp;quot;,\n    table: &amp;quot;commonTable&amp;quot;,\n    attributes: {\n        id: {\n            type: string,\n        },\n        fname: {\n            type: string,\n            required: false,\n        }, \n        lname: {\n            type: string,\n            default: &amp;quot;someName&amp;quot;,\n        }, \n        active: {\n            type: boolean,\n            default: true\n        }\n    }\n}\n\nconst sampleEntity: SampleSchema.attributes = {\n    id: &amp;quot;10&amp;quot;, \n    fname: &amp;quot;John&amp;quot;, \n    lname: &amp;quot;Doe&amp;quot;, \n    active: true\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iq003l", "is_robot_indexable": true, "report_reasons": null, "author": "cleArlYambiguousmaN", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iq003l/writing_a_schema_parser_in_typescript/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iq003l/writing_a_schema_parser_in_typescript/", "subreddit_subscribers": 48184, "created_utc": 1599729864.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "    import * as enzyme from 'enzyme';\n    import Adapter from 'enzyme-adapter-react-16';\n    import { act } from 'react-dom/test-utils';\n    import wait from 'waait';\n    \n    enzyme.configure({ adapter: new Adapter() });\n    \n    declare module 'enzyme' {\n      interface ReactWrapper {\n        waitForUpdate: () =&gt; void;\n      }\n    }\n    \n    enzyme.ReactWrapper.prototype.waitForUpdate = async function waitForUpdate() {\n      return act(async () =&gt; {\n        await wait(0);\n        this.setProps({});\n      });\n    };\n    \n\nand in test\n\n    it('should', async() =&gt; {\n    //do something\n    await wrapper.waitForUpdate()\n    //assert\n    ))\n\nany problem with this approach ?", "author_fullname": "t2_7szkh6tf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Extending enzyme to support wait", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ipzqwl", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1599757271.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;import * as enzyme from &amp;#39;enzyme&amp;#39;;\nimport Adapter from &amp;#39;enzyme-adapter-react-16&amp;#39;;\nimport { act } from &amp;#39;react-dom/test-utils&amp;#39;;\nimport wait from &amp;#39;waait&amp;#39;;\n\nenzyme.configure({ adapter: new Adapter() });\n\ndeclare module &amp;#39;enzyme&amp;#39; {\n  interface ReactWrapper {\n    waitForUpdate: () =&amp;gt; void;\n  }\n}\n\nenzyme.ReactWrapper.prototype.waitForUpdate = async function waitForUpdate() {\n  return act(async () =&amp;gt; {\n    await wait(0);\n    this.setProps({});\n  });\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and in test&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;it(&amp;#39;should&amp;#39;, async() =&amp;gt; {\n//do something\nawait wrapper.waitForUpdate()\n//assert\n))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;any problem with this approach ?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ipzqwl", "is_robot_indexable": true, "report_reasons": null, "author": "Presence-Organic", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ipzqwl/extending_enzyme_to_support_wait/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ipzqwl/extending_enzyme_to_support_wait/", "subreddit_subscribers": 48184, "created_utc": 1599728471.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "So I have some Typescript I want to use to create DOM-Elements easily but I just can't get the Type Inference to do the Correct thing I would be happy for Ideas what I could change.\n\n[https://gist.github.com/mio991/c54e940e4ae599edec79488d30846db7](https://gist.github.com/mio991/c54e940e4ae599edec79488d30846db7)\n\nThe End usage should look like this:\n\n    const templateFactory = div({})(\n        div({})(\n            h1({innerText: \"title\"})()\n            h3({innerText: \"subtitle\"})()\n        ),\n        div({})(\n            p({innerText: \"article\"})()\n        )\n    )\n    \n    // templateFactory should have the type: (context:{title:string; subtitle:string; article:string;})=&gt; HTMLDivElement", "author_fullname": "t2_kfrhk", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Need a \"little\" help with some Typings", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ipm5sn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1599705573.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I have some Typescript I want to use to create DOM-Elements easily but I just can&amp;#39;t get the Type Inference to do the Correct thing I would be happy for Ideas what I could change.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/mio991/c54e940e4ae599edec79488d30846db7\"&gt;https://gist.github.com/mio991/c54e940e4ae599edec79488d30846db7&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The End usage should look like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const templateFactory = div({})(\n    div({})(\n        h1({innerText: &amp;quot;title&amp;quot;})()\n        h3({innerText: &amp;quot;subtitle&amp;quot;})()\n    ),\n    div({})(\n        p({innerText: &amp;quot;article&amp;quot;})()\n    )\n)\n\n// templateFactory should have the type: (context:{title:string; subtitle:string; article:string;})=&amp;gt; HTMLDivElement\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?auto=webp&amp;s=079a7260ec149880c73263d64811698adb22760a", "width": 1280, "height": 640}, "resolutions": [{"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d5811c5bda5fece1040636a6af8702ba790f0fd4", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=eee576fd4da7535eb53ceb88dd8b52f073048441", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=72872d880460efa723918c000adca0ed259cf775", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=f3545b9335d763c9da9c16bf7bf9a3f907dbd6f6", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=2d241ace0f1c07088fac3f8469dbad3b05d2d419", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=9055f11bdc00beb0b3589e1cae5817d6070d83bc", "width": 1080, "height": 540}], "variants": {}, "id": "OAXSl8SY6T3JK9MGQyKxkoYbqZ71HQRYXLeB8CV0NXg"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ipm5sn", "is_robot_indexable": true, "report_reasons": null, "author": "mio991", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ipm5sn/need_a_little_help_with_some_typings/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ipm5sn/need_a_little_help_with_some_typings/", "subreddit_subscribers": 48184, "created_utc": 1599676773.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I got it working but it's not pretty. Any improvements welcome. I especially want to get rid of that empty string `''`\n\n    interface myInt {\n      \"p1\": string;\n      \"p2\": string; \n    } \n    \n    export default class X {\n      private myMethod &lt;Record extends { [key in keyof myInt]: string }&gt;(matchPattern: RegExp, record: Record): boolean {\n        const matchFound: boolean = matchPattern.test(record['' as keyof myInt]);\n        return matchFound;\n      }", "author_fullname": "t2_3ob6osi0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Cleaning up this mapped type", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ipqaj6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1599689360.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1599717897.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I got it working but it&amp;#39;s not pretty. Any improvements welcome. I especially want to get rid of that empty string &lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface myInt {\n  &amp;quot;p1&amp;quot;: string;\n  &amp;quot;p2&amp;quot;: string; \n} \n\nexport default class X {\n  private myMethod &amp;lt;Record extends { [key in keyof myInt]: string }&amp;gt;(matchPattern: RegExp, record: Record): boolean {\n    const matchFound: boolean = matchPattern.test(record[&amp;#39;&amp;#39; as keyof myInt]);\n    return matchFound;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ipqaj6", "is_robot_indexable": true, "report_reasons": null, "author": "embar5", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ipqaj6/cleaning_up_this_mapped_type/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ipqaj6/cleaning_up_this_mapped_type/", "subreddit_subscribers": 48184, "created_utc": 1599689097.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Is this a carryover from Java, or some older language? Or is there a good reason to differentiate the default return `undefined` from `void`?", "author_fullname": "t2_3ob6osi0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why does TS have a return type for void instead of using undefined?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ipowhp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1599713558.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is this a carryover from Java, or some older language? Or is there a good reason to differentiate the default return &lt;code&gt;undefined&lt;/code&gt; from &lt;code&gt;void&lt;/code&gt;?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ipowhp", "is_robot_indexable": true, "report_reasons": null, "author": "embar5", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ipowhp/why_does_ts_have_a_return_type_for_void_instead/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ipowhp/why_does_ts_have_a_return_type_for_void_instead/", "subreddit_subscribers": 48184, "created_utc": 1599684758.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "In Typescript do the angle brackets before and after the parameter definitions repesent different things?\n\n    async function a&lt;g extends {}&gt;(objs: Array&lt;g&gt;): Promise&lt;g&gt; {...}\n\nIn the first angle brackets I see a generic type argument declaration\n\nIn the 2nd and third angle brackets i see type constructors acting on a type argument `g`\n\nI think these have about the same level of connection as the {} that represents an object literal and the {} that represents a function body. Basically none. Correct?", "author_fullname": "t2_3ob6osi0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Angle syntax before and after the parameter definitions", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iposqh", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1599713243.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In Typescript do the angle brackets before and after the parameter definitions repesent different things?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;async function a&amp;lt;g extends {}&amp;gt;(objs: Array&amp;lt;g&amp;gt;): Promise&amp;lt;g&amp;gt; {...}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the first angle brackets I see a generic type argument declaration&lt;/p&gt;\n\n&lt;p&gt;In the 2nd and third angle brackets i see type constructors acting on a type argument &lt;code&gt;g&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I think these have about the same level of connection as the {} that represents an object literal and the {} that represents a function body. Basically none. Correct?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iposqh", "is_robot_indexable": true, "report_reasons": null, "author": "embar5", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iposqh/angle_syntax_before_and_after_the_parameter/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iposqh/angle_syntax_before_and_after_the_parameter/", "subreddit_subscribers": 48184, "created_utc": 1599684443.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_iposqh", "before": null}}