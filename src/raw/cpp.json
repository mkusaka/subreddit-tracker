{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Rules For Individuals\n---------------------\n\n* **Don't** create top-level comments - those are for employers.\n* Feel free to reply to top-level comments with **on-topic** questions.\n* I will create one top-level comment for **meta** discussion.\n* I will create another top-level comment for **individuals looking for work** and **community groups looking for sponsors**.\n\nRules For Employers\n---------------------\n\n* You must be hiring **directly**. No third-party recruiters.\n* **One** top-level comment per employer. If you have multiple job openings, that's great, but please consolidate their descriptions or mention them in replies to your own top-level comment.\n* **Don't** use URL shorteners. [reddiquette](https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette) forbids them because they're opaque to the spam filter.\n* Templates are awesome. Please **use** the following template. As the \"formatting help\" says, use \\*\\*two stars\\*\\* to **bold text**. Use empty lines to separate sections.\n* **Proofread** your comment after posting it, and edit any formatting mistakes.\n\n---\n\n\\*\\*Company:\\*\\* [Company name; also, use the \"formatting help\" to make it a link to your company's website, or a specific careers page if you have one.]\n\n&amp;nbsp;\n\n\\*\\*Type:\\*\\* [Full time, part time, internship, contract, etc.]\n\n&amp;nbsp;\n\n\\*\\*Description:\\*\\* [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]\n\n&amp;nbsp;\n\n\\*\\*Location:\\*\\* [Where's your office - or if you're hiring at multiple offices, list them. If your workplace language isn't English, please specify it.]\n\n&amp;nbsp;\n\n\\*\\*Remote:\\*\\* [Do you offer the option of working remotely? If so, do you require employees to live in certain areas or time zones?]\n\n&amp;nbsp;\n\n\\*\\*Visa Sponsorship:\\*\\* [Does your company sponsor visas?]\n\n&amp;nbsp;\n\n\\*\\*Technologies:\\*\\* [Required: do you mainly use C++98/03, C++11, C++14, C++17, or the C++20 working draft? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]\n\n&amp;nbsp;\n\n\\*\\*Contact:\\*\\* [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]\n\n---\n\nPrevious Post\n--------------\n\n* [C++ Jobs - Q4 2019](https://www.reddit.com/r/cpp/comments/dbqgbw/c_jobs_q4_2019/)", "author_fullname": "t2_21c1y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++ Jobs - Q1 2020", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eiila4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 204, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 204, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": 1579038018.0, "author_flair_css_class": "", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1577915953.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;Rules For Individuals&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; create top-level comments - those are for employers.&lt;/li&gt;\n&lt;li&gt;Feel free to reply to top-level comments with &lt;strong&gt;on-topic&lt;/strong&gt; questions.&lt;/li&gt;\n&lt;li&gt;I will create one top-level comment for &lt;strong&gt;meta&lt;/strong&gt; discussion.&lt;/li&gt;\n&lt;li&gt;I will create another top-level comment for &lt;strong&gt;individuals looking for work&lt;/strong&gt; and &lt;strong&gt;community groups looking for sponsors&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Rules For Employers&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You must be hiring &lt;strong&gt;directly&lt;/strong&gt;. No third-party recruiters.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;One&lt;/strong&gt; top-level comment per employer. If you have multiple job openings, that&amp;#39;s great, but please consolidate their descriptions or mention them in replies to your own top-level comment.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; use URL shorteners. &lt;a href=\"https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette\"&gt;reddiquette&lt;/a&gt; forbids them because they&amp;#39;re opaque to the spam filter.&lt;/li&gt;\n&lt;li&gt;Templates are awesome. Please &lt;strong&gt;use&lt;/strong&gt; the following template. As the &amp;quot;formatting help&amp;quot; says, use **two stars** to &lt;strong&gt;bold text&lt;/strong&gt;. Use empty lines to separate sections.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Proofread&lt;/strong&gt; your comment after posting it, and edit any formatting mistakes.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;**Company:** [Company name; also, use the &amp;quot;formatting help&amp;quot; to make it a link to your company&amp;#39;s website, or a specific careers page if you have one.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Type:** [Full time, part time, internship, contract, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Description:** [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Location:** [Where&amp;#39;s your office - or if you&amp;#39;re hiring at multiple offices, list them. If your workplace language isn&amp;#39;t English, please specify it.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Remote:** [Do you offer the option of working remotely? If so, do you require employees to live in certain areas or time zones?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Visa Sponsorship:** [Does your company sponsor visas?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Technologies:** [Required: do you mainly use C++98/03, C++11, C++14, C++17, or the C++20 working draft? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Contact:** [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Previous Post&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.reddit.com/r/cpp/comments/dbqgbw/c_jobs_q4_2019/\"&gt;C++ Jobs - Q4 2019&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "MSVC STL Dev", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eiila4", "is_robot_indexable": true, "report_reasons": null, "author": "STL", "discussion_type": null, "num_comments": 88, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/eiila4/c_jobs_q1_2020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/cpp/comments/eiila4/c_jobs_q1_2020/", "subreddit_subscribers": 125129, "created_utc": 1577887153.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_11pe86", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A common C/C++ core specification", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ffaato", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1583688402.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "gustedt.wordpress.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ffaato", "is_robot_indexable": true, "report_reasons": null, "author": "vormestrand", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/ffaato/a_common_cc_core_specification/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://gustedt.wordpress.com/2020/03/08/a-common-c-c-core-specification/", "subreddit_subscribers": 125129, "created_utc": 1583659602.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_enhni", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Software optimization resources. C++ and assembly. Windows, Linux, BSD, Mac OS X", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fev58b", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 155, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 155, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1583616652.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "agner.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fev58b", "is_robot_indexable": true, "report_reasons": null, "author": "dgellow", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fev58b/software_optimization_resources_c_and_assembly/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.agner.org/optimize/", "subreddit_subscribers": 125129, "created_utc": 1583587852.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "*Edit: as per this [comment](https://www.reddit.com/r/cpp/comments/feuhzr/psa_gslspan_iterators_are_not_just_pointers/fjwnv3e) from the current GSL maintainer, `gsl::span` iterators will soon be more pointer-like.*\n\n*Edit: as per comments in the thread, `gslite::span` iterators are pointers, and `std::span` iterators will be pointer-like in the upcoming MSVC release.*\n\n---\n\nA colleague stumbled upon a weird optimization in our application; a reduced example is:\n\n    auto index = /*...*/;\n    gsl::span&lt;T&gt; view = container.get_view();\n\n    assert(view.size() == 1);\n    assert(index == 0);\n\n    view[index] // triggers `Ensure` about the index being without bounds.\n\nAfter some digging around, it turned out that *later down*, we had a loop:\n\n    for (auto pair : zip(/*...*/, container.get_view())) {\n    }\n\nWhere `zip` is defined as:\n\n    template &lt;typename... Cs&gt;\n    auto zip(Cs const&amp;... containers) { /*...*/ }\n\nWhich instantiates two zip iterators (Boost) and returns a range.\n\nNotice that `container.get_view()` returns a `gsl::span` *by value*. Lifetime extension then kicks in so that it lives for as long as `zip(/*...*/, container.get_view())` takes to evaluate, **and no longer**.\n\nWhy do we care, though, when the *actual container* lives long enough? Well, it turns out that a `span_iterator&lt;T&gt;` is NOT `T*`, instead it is:\n\n    template &lt;typename T&gt;\n    class span_iterator&lt;T&gt; {\n         span&lt;T&gt;* __span;\n         std::ptrdiff_t __index;\n    };\n\nWhich is necessary to validate for the `Ensure` machinery used to ensure that only legal operations are applied. This has a number of implications, along which:\n\n - Iterators of `gsl::span` are only valid as long as their underlying `gsl::span` lives *and* the underlying container lives.\n - By default, `++`, `*`, ... are all **checked**.\n - Even if checks are turned off, `span_iterator` are still twice as heavy as regular `T*`.\n\nIt's unclear whether the `std::span` version will take the same approach; if so, we'll likely re-implement `span` ourselves to avoid the overhead and the surprising lifetime implications.", "author_fullname": "t2_5ij2c", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "PSA: gsl::span iterators are not just pointers", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_feuhzr", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 24, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 24, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1583668044.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1583612851.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;em&gt;Edit: as per this &lt;a href=\"https://www.reddit.com/r/cpp/comments/feuhzr/psa_gslspan_iterators_are_not_just_pointers/fjwnv3e\"&gt;comment&lt;/a&gt; from the current GSL maintainer, &lt;code&gt;gsl::span&lt;/code&gt; iterators will soon be more pointer-like.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Edit: as per comments in the thread, &lt;code&gt;gslite::span&lt;/code&gt; iterators are pointers, and &lt;code&gt;std::span&lt;/code&gt; iterators will be pointer-like in the upcoming MSVC release.&lt;/em&gt;&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;A colleague stumbled upon a weird optimization in our application; a reduced example is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;auto index = /*...*/;\ngsl::span&amp;lt;T&amp;gt; view = container.get_view();\n\nassert(view.size() == 1);\nassert(index == 0);\n\nview[index] // triggers `Ensure` about the index being without bounds.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;After some digging around, it turned out that &lt;em&gt;later down&lt;/em&gt;, we had a loop:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;for (auto pair : zip(/*...*/, container.get_view())) {\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where &lt;code&gt;zip&lt;/code&gt; is defined as:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;template &amp;lt;typename... Cs&amp;gt;\nauto zip(Cs const&amp;amp;... containers) { /*...*/ }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which instantiates two zip iterators (Boost) and returns a range.&lt;/p&gt;\n\n&lt;p&gt;Notice that &lt;code&gt;container.get_view()&lt;/code&gt; returns a &lt;code&gt;gsl::span&lt;/code&gt; &lt;em&gt;by value&lt;/em&gt;. Lifetime extension then kicks in so that it lives for as long as &lt;code&gt;zip(/*...*/, container.get_view())&lt;/code&gt; takes to evaluate, &lt;strong&gt;and no longer&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;Why do we care, though, when the &lt;em&gt;actual container&lt;/em&gt; lives long enough? Well, it turns out that a &lt;code&gt;span_iterator&amp;lt;T&amp;gt;&lt;/code&gt; is NOT &lt;code&gt;T*&lt;/code&gt;, instead it is:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;template &amp;lt;typename T&amp;gt;\nclass span_iterator&amp;lt;T&amp;gt; {\n     span&amp;lt;T&amp;gt;* __span;\n     std::ptrdiff_t __index;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Which is necessary to validate for the &lt;code&gt;Ensure&lt;/code&gt; machinery used to ensure that only legal operations are applied. This has a number of implications, along which:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Iterators of &lt;code&gt;gsl::span&lt;/code&gt; are only valid as long as their underlying &lt;code&gt;gsl::span&lt;/code&gt; lives &lt;em&gt;and&lt;/em&gt; the underlying container lives.&lt;/li&gt;\n&lt;li&gt;By default, &lt;code&gt;++&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, ... are all &lt;strong&gt;checked&lt;/strong&gt;.&lt;/li&gt;\n&lt;li&gt;Even if checks are turned off, &lt;code&gt;span_iterator&lt;/code&gt; are still twice as heavy as regular &lt;code&gt;T*&lt;/code&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It&amp;#39;s unclear whether the &lt;code&gt;std::span&lt;/code&gt; version will take the same approach; if so, we&amp;#39;ll likely re-implement &lt;code&gt;span&lt;/code&gt; ourselves to avoid the overhead and the surprising lifetime implications.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "feuhzr", "is_robot_indexable": true, "report_reasons": null, "author": "matthieum", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/feuhzr/psa_gslspan_iterators_are_not_just_pointers/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/feuhzr/psa_gslspan_iterators_are_not_just_pointers/", "subreddit_subscribers": 125129, "created_utc": 1583584051.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_6gkbb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Analyze your builds programmatically with the C++ Build Insights SDK | Visual C++ Team Blog", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fegtup", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 97, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 97, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1583544440.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "devblogs.microsoft.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fegtup", "is_robot_indexable": true, "report_reasons": null, "author": "mttd", "discussion_type": null, "num_comments": 12, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fegtup/analyze_your_builds_programmatically_with_the_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://devblogs.microsoft.com/cppblog/analyze-your-builds-programmatically-with-the-c-build-insights-sdk/", "subreddit_subscribers": 125129, "created_utc": 1583515640.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_760lw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A few experimental features for C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fef2d0", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 102, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": "7bf857c8-4dcc-11e6-b84d-0e5fbba92363", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 102, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1583537456.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "cor3ntin.github.io", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "B2 | Predef | Lyra | WG21 | C++ Alliance | Bincrafters", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fef2d0", "is_robot_indexable": true, "report_reasons": null, "author": "grafikrobot", "discussion_type": null, "num_comments": 36, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/fef2d0/a_few_experimental_features_for_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://cor3ntin.github.io/posts/qol23/", "subreddit_subscribers": 125129, "created_utc": 1583508656.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_mu4nm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Tortellini: A really, really stupid INI file format for C++11 and above", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_feaul5", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 132, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 132, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1583513943.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "feaul5", "is_robot_indexable": true, "report_reasons": null, "author": "i-am-qix", "discussion_type": null, "num_comments": 55, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/feaul5/tortellini_a_really_really_stupid_ini_file_format/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/Qix-/tortellini", "subreddit_subscribers": 125129, "created_utc": 1583485143.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_5oijbbd2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Field-testing \u201cDown with lifetime extension!\u201d", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fefk20", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1583539471.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "quuxplusone.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fefk20", "is_robot_indexable": true, "report_reasons": null, "author": "Small_Marionberry", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fefk20/fieldtesting_down_with_lifetime_extension/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://quuxplusone.github.io/blog/2020/03/04/field-report-on-lifetime-extension/", "subreddit_subscribers": 125129, "created_utc": 1583510671.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Previous post: https://www.reddit.com/r/cpp/comments/avcalo/a_proposal_to_add_stdbytebased_io_to_the_c/\n\nDirect link to PDF: https://github.com/Lyberta/cpp-io/raw/master/generated/Paper.pdf\n\nPaper repository: https://github.com/Lyberta/cpp-io\n\nReference implementation: https://github.com/Lyberta/cpp-io-impl\n\nThis paper proposes fundamental IO concepts, customization points for serialization and deserialization and streams for memory and file IO.\n\nIt's been a year since the last post and quite a few things have changed:\n\n* IO and serialization are separate now. You can use `std::io::read_raw` and `std::io::write_raw` for raw IO. They have much less overloads and will take less time to compile. `std::io::read` and `std::io::write` are more heavy because they support endianness/floating-point-format conversion as well as dispatch to custom serialization functions.\n* Concepts instead of inheritance + virtual functions. You no longer need to pay the cost of virtual function calls in generic code.\n* Custom serialization functions can now be variadic.\n* IO contexts as a way to not have format as part of the stream as well as providing local format support during nested [de]serialization.\n* File streams now support buffering.\n* Added type erased streams for cases where you need dynamic polymorphism.\n* `std::io::in()`, `std::io::out()` and `std::io::err()` for byte IO with standard streams. The objects are type erased so you can redirect them to any stream you want. This is similar to `std::cout` et al.\n\n## It is faster than both `&lt;iostream&gt;` and `&lt;stdio&gt;`\n\nDuring benchmarking of sequential file IO on Linux proposed `std::io::input_file_stream` was found to be ~30% faster than `std::FILE` and ~45% faster than `std::ifstream` while proposed `std::io::output_file_stream` was found to be ~38% faster than `std::FILE` and ~60% faster than `std::ofstream`. Raw numbers can be found in the paper.\n\nThis post was made to gather a round of feedback before I publish R0 targeted for Varna. I'm also looking for a champion to present this proposal in Varna.", "author_fullname": "t2_iun2spt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Modern std::byte stream IO for C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fe72kp", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 69, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 69, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1583492378.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Previous post: &lt;a href=\"https://www.reddit.com/r/cpp/comments/avcalo/a_proposal_to_add_stdbytebased_io_to_the_c/\"&gt;https://www.reddit.com/r/cpp/comments/avcalo/a_proposal_to_add_stdbytebased_io_to_the_c/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Direct link to PDF: &lt;a href=\"https://github.com/Lyberta/cpp-io/raw/master/generated/Paper.pdf\"&gt;https://github.com/Lyberta/cpp-io/raw/master/generated/Paper.pdf&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Paper repository: &lt;a href=\"https://github.com/Lyberta/cpp-io\"&gt;https://github.com/Lyberta/cpp-io&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Reference implementation: &lt;a href=\"https://github.com/Lyberta/cpp-io-impl\"&gt;https://github.com/Lyberta/cpp-io-impl&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This paper proposes fundamental IO concepts, customization points for serialization and deserialization and streams for memory and file IO.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s been a year since the last post and quite a few things have changed:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;IO and serialization are separate now. You can use &lt;code&gt;std::io::read_raw&lt;/code&gt; and &lt;code&gt;std::io::write_raw&lt;/code&gt; for raw IO. They have much less overloads and will take less time to compile. &lt;code&gt;std::io::read&lt;/code&gt; and &lt;code&gt;std::io::write&lt;/code&gt; are more heavy because they support endianness/floating-point-format conversion as well as dispatch to custom serialization functions.&lt;/li&gt;\n&lt;li&gt;Concepts instead of inheritance + virtual functions. You no longer need to pay the cost of virtual function calls in generic code.&lt;/li&gt;\n&lt;li&gt;Custom serialization functions can now be variadic.&lt;/li&gt;\n&lt;li&gt;IO contexts as a way to not have format as part of the stream as well as providing local format support during nested [de]serialization.&lt;/li&gt;\n&lt;li&gt;File streams now support buffering.&lt;/li&gt;\n&lt;li&gt;Added type erased streams for cases where you need dynamic polymorphism.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;std::io::in()&lt;/code&gt;, &lt;code&gt;std::io::out()&lt;/code&gt; and &lt;code&gt;std::io::err()&lt;/code&gt; for byte IO with standard streams. The objects are type erased so you can redirect them to any stream you want. This is similar to &lt;code&gt;std::cout&lt;/code&gt; et al.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;It is faster than both &lt;code&gt;&amp;lt;iostream&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;stdio&amp;gt;&lt;/code&gt;&lt;/h2&gt;\n\n&lt;p&gt;During benchmarking of sequential file IO on Linux proposed &lt;code&gt;std::io::input_file_stream&lt;/code&gt; was found to be ~30% faster than &lt;code&gt;std::FILE&lt;/code&gt; and ~45% faster than &lt;code&gt;std::ifstream&lt;/code&gt; while proposed &lt;code&gt;std::io::output_file_stream&lt;/code&gt; was found to be ~38% faster than &lt;code&gt;std::FILE&lt;/code&gt; and ~60% faster than &lt;code&gt;std::ofstream&lt;/code&gt;. Raw numbers can be found in the paper.&lt;/p&gt;\n\n&lt;p&gt;This post was made to gather a round of feedback before I publish R0 targeted for Varna. I&amp;#39;m also looking for a champion to present this proposal in Varna.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fe72kp", "is_robot_indexable": true, "report_reasons": null, "author": "Lyberta", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fe72kp/modern_stdbyte_stream_io_for_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/fe72kp/modern_stdbyte_stream_io_for_c/", "subreddit_subscribers": 125129, "created_utc": 1583463578.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_e8dv1b", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Fluent {C++}: How to Pass Class Member Functions to STL Algorithms", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_febn53", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": "7bf857c8-4dcc-11e6-b84d-0e5fbba92363", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1583519505.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "fluentcpp.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "C++ Dev", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "febn53", "is_robot_indexable": true, "report_reasons": null, "author": "zowersap", "discussion_type": null, "num_comments": 29, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/febn53/fluent_c_how_to_pass_class_member_functions_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.fluentcpp.com/2020/03/06/how-to-pass-class-member-functions-to-stl-algorithms/", "subreddit_subscribers": 125129, "created_utc": 1583490705.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "If I understand correctly the specifier `constinit` forces initialization of a variable (declared with constinit) at compile time. The value of the variable can be changed later and is not const. I just find that naming the specifier \"constinit\" could be misunderstood or is misleading in the sense that the variable specified with it isn't const. Perhaps, complinit or staticinit is a better choice for what constinit does.", "author_fullname": "t2_2kau45tc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++20: Why the word \"constinit\"? Why not name the specifier complinit or staticinit?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_feb67q", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1583516246.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;If I understand correctly the specifier &lt;code&gt;constinit&lt;/code&gt; forces initialization of a variable (declared with constinit) at compile time. The value of the variable can be changed later and is not const. I just find that naming the specifier &amp;quot;constinit&amp;quot; could be misunderstood or is misleading in the sense that the variable specified with it isn&amp;#39;t const. Perhaps, complinit or staticinit is a better choice for what constinit does.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "feb67q", "is_robot_indexable": true, "report_reasons": null, "author": "vishalkenchan", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/feb67q/c20_why_the_word_constinit_why_not_name_the/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/feb67q/c20_why_the_word_constinit_why_not_name_the/", "subreddit_subscribers": 125129, "created_utc": 1583487446.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_feb67q", "before": null}}