{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once. If you want your code reviewed or review other's code, there's a [codereview stackexchange](https://codereview.stackexchange.com/questions/tagged/rust), too. If you need to test your code, maybe [the Rust playground](https://play.rust-lang.org) is for you.\n\nHere are some other venues where help may be found:\n\n[/r/learnrust](https://www.reddit.com/r/learnrust) is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/).\n\nThe official Rust Programming Language Discord: [https://discord.gg/rust-lang](https://discord.gg/rust-lang)\n\nThe unofficial Rust community Discord: [https://bit.ly/rust-community](https://bit.ly/rust-community)\n\nAlso check out [last week's thread](https://reddit.com/r/rust/comments/fnfky9/hey_rustaceans_got_an_easy_question_ask_here/) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nAlso if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hey Rustaceans! Got an easy question? Ask here (14/2020)!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_frfduy", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 25, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 25, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1585552086.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven&amp;#39;t been written yet.&lt;/p&gt;\n\n&lt;p&gt;If you have a &lt;a href=\"http://stackoverflow.com/\"&gt;StackOverflow&lt;/a&gt; account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it &lt;a href=\"http://stackoverflow.com/questions/tagged/rust\"&gt;the &amp;quot;Rust&amp;quot; tag&lt;/a&gt; for maximum visibility). Note that this site is very interested in question quality. I&amp;#39;ve been asked to read a RFC I authored once. If you want your code reviewed or review other&amp;#39;s code, there&amp;#39;s a &lt;a href=\"https://codereview.stackexchange.com/questions/tagged/rust\"&gt;codereview stackexchange&lt;/a&gt;, too. If you need to test your code, maybe &lt;a href=\"https://play.rust-lang.org\"&gt;the Rust playground&lt;/a&gt; is for you.&lt;/p&gt;\n\n&lt;p&gt;Here are some other venues where help may be found:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/learnrust\"&gt;/r/learnrust&lt;/a&gt; is a subreddit to share your questions and epiphanies learning Rust programming.&lt;/p&gt;\n\n&lt;p&gt;The official Rust user forums: &lt;a href=\"https://users.rust-lang.org/\"&gt;https://users.rust-lang.org/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The official Rust Programming Language Discord: &lt;a href=\"https://discord.gg/rust-lang\"&gt;https://discord.gg/rust-lang&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The unofficial Rust community Discord: &lt;a href=\"https://bit.ly/rust-community\"&gt;https://bit.ly/rust-community&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also check out &lt;a href=\"https://reddit.com/r/rust/comments/fnfky9/hey_rustaceans_got_an_easy_question_ask_here/\"&gt;last week&amp;#39;s thread&lt;/a&gt; with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.&lt;/p&gt;\n\n&lt;p&gt;Also if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "frfduy", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 136, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/frfduy/hey_rustaceans_got_an_easy_question_ask_here/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/frfduy/hey_rustaceans_got_an_easy_question_ask_here/", "subreddit_subscribers": 95558, "created_utc": 1585523286.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_pmcr0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "This Week in Rust 332", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ftl9l3", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 95, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 95, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1585858351.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "this-week-in-rust.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "twir", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ftl9l3", "is_robot_indexable": true, "report_reasons": null, "author": "nasa42", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/ftl9l3/this_week_in_rust_332/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://this-week-in-rust.org/blog/2020/03/31/this-week-in-rust-332/", "subreddit_subscribers": 95558, "created_utc": 1585829551.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_5kj5ec4k", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "State machines with const-generics", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_fvciq3", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 29, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 29, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1586115684.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "play.rust-lang.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvciq3", "is_robot_indexable": true, "report_reasons": null, "author": "adwhit2", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fvciq3/state_machines_with_constgenerics/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://play.rust-lang.org/?version=nightly&amp;mode=debug&amp;edition=2018&amp;gist=e957af6f8ba26b8f496366182178a9d2", "subreddit_subscribers": 95558, "created_utc": 1586086884.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "[https://medium.com/@niklasbuechner/implementing-base64-in-rust-34ef6db1e73a](https://medium.com/@niklasbuechner/implementing-base64-in-rust-34ef6db1e73a)", "author_fullname": "t2_4r50zk1g", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "To learn how base64 works I implemented it with Rust", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_fvcouv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586116604.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://medium.com/@niklasbuechner/implementing-base64-in-rust-34ef6db1e73a\"&gt;https://medium.com/@niklasbuechner/implementing-base64-in-rust-34ef6db1e73a&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvcouv", "is_robot_indexable": true, "report_reasons": null, "author": "niklasbuechner", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fvcouv/to_learn_how_base64_works_i_implemented_it_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fvcouv/to_learn_how_base64_works_i_implemented_it_with/", "subreddit_subscribers": 95558, "created_utc": 1586087804.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_3dqpyxf9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Dirscan: A high performance tool for summarising large directories or drives", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fv2czk", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 140, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 140, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1586066897.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fv2czk", "is_robot_indexable": true, "report_reasons": null, "author": "Big_badBlobby_mofo", "discussion_type": null, "num_comments": 18, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fv2czk/dirscan_a_high_performance_tool_for_summarising/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/orf/dirscan", "subreddit_subscribers": 95558, "created_utc": 1586038097.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I'm writing libraries and was wondering what the panic message convention is.\n\nI looked around but there's no posts about this, so I looked at the rust compiler source, here are my findings:\n\n&amp;#x200B;\n\n* Lots of panics are lower-case without final punctuation: **(\"overflow when converting float to duration\")**\n* Panics in tests tend to have an uppercase start: **(\"Unexpected value {:?}\")**\n* Bootstrap panics include newlines: **(\"\\\\n\\\\nfailed to specify \\`dist.sign-folder\\` in \\`config.toml\\`\\\\n\\\\n\")**\n* liballoc tests contain exclamation marks at the end **(\"usize::MAX should trigger an overflow!\")**\n* Some panics include their logical domain of interest designated before a colon: **(\"align\\_offset: align is not a power-of-two\")**\n* Some panics put printed data between backticks: **(\"invalid format arg \\`{:?}\\`\")**\n* Some panics put argument data after the final colon: **(\"rustc didn't succeed: {}\")**\n\n&amp;#x200B;\n\n**My question is:** what is generally the \"best\" format for panic messages?", "author_fullname": "t2_frp24", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Panic message conventions?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fv7830", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 26, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 26, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586086708.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m writing libraries and was wondering what the panic message convention is.&lt;/p&gt;\n\n&lt;p&gt;I looked around but there&amp;#39;s no posts about this, so I looked at the rust compiler source, here are my findings:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Lots of panics are lower-case without final punctuation: &lt;strong&gt;(&amp;quot;overflow when converting float to duration&amp;quot;)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Panics in tests tend to have an uppercase start: &lt;strong&gt;(&amp;quot;Unexpected value {:?}&amp;quot;)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Bootstrap panics include newlines: &lt;strong&gt;(&amp;quot;\\n\\nfailed to specify `dist.sign-folder` in `config.toml`\\n\\n&amp;quot;)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;liballoc tests contain exclamation marks at the end &lt;strong&gt;(&amp;quot;usize::MAX should trigger an overflow!&amp;quot;)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Some panics include their logical domain of interest designated before a colon: &lt;strong&gt;(&amp;quot;align_offset: align is not a power-of-two&amp;quot;)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Some panics put printed data between backticks: &lt;strong&gt;(&amp;quot;invalid format arg `{:?}`&amp;quot;)&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;Some panics put argument data after the final colon: &lt;strong&gt;(&amp;quot;rustc didn&amp;#39;t succeed: {}&amp;quot;)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;My question is:&lt;/strong&gt; what is generally the &amp;quot;best&amp;quot; format for panic messages?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fv7830", "is_robot_indexable": true, "report_reasons": null, "author": "Bourgond_Aries", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fv7830/panic_message_conventions/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fv7830/panic_message_conventions/", "subreddit_subscribers": 95558, "created_utc": 1586057908.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_1l00itno", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust Dataframe: Update 1", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fv11ir", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 70, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 70, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1586062128.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fv11ir", "is_robot_indexable": true, "report_reasons": null, "author": "nevi-me", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fv11ir/rust_dataframe_update_1/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/nevi-me/rust-dataframe/blob/master/notes/update-01__04-04-2020.md", "subreddit_subscribers": 95558, "created_utc": 1586033328.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I need to have two of BTreeMaps&lt;i64, Data&gt;, one sorted ascending and the other sorted descending (different data in each). Performance is very, very important. I'm already paying up in the Ordering enum (I cannot just subtract like I would in C++), so I'm trying not to pay up more with extra Options and stuff like I would by having to implement PartialOrd.\n\nMy first attempt was to create `struct IncVal(i64)` and `struct DecVal(i64)` but that was a lot of biolerplate and had to go though the Option with PartialEq. There has to be a better way.\n\nThis is a somewhat simplified example. There key is a user defined class that holds a more complex number, but just getting it to work with an i128 right now would be a small win.", "author_fullname": "t2_dobfu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Help sorting BTreeMap in different order", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fv96yi", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1586069594.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586096382.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I need to have two of BTreeMaps&amp;lt;i64, Data&amp;gt;, one sorted ascending and the other sorted descending (different data in each). Performance is very, very important. I&amp;#39;m already paying up in the Ordering enum (I cannot just subtract like I would in C++), so I&amp;#39;m trying not to pay up more with extra Options and stuff like I would by having to implement PartialOrd.&lt;/p&gt;\n\n&lt;p&gt;My first attempt was to create &lt;code&gt;struct IncVal(i64)&lt;/code&gt; and &lt;code&gt;struct DecVal(i64)&lt;/code&gt; but that was a lot of biolerplate and had to go though the Option with PartialEq. There has to be a better way.&lt;/p&gt;\n\n&lt;p&gt;This is a somewhat simplified example. There key is a user defined class that holds a more complex number, but just getting it to work with an i128 right now would be a small win.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fv96yi", "is_robot_indexable": true, "report_reasons": null, "author": "jnordwick", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fv96yi/help_sorting_btreemap_in_different_order/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fv96yi/help_sorting_btreemap_in_different_order/", "subreddit_subscribers": 95558, "created_utc": 1586067582.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I have the following pattern in my code:\n\n```\nstruct Data {};\n\nfn x(input: &amp;mut Vec&lt;Data&gt;) -&gt; Option&lt;&amp;Data&gt; {\n    let (idx, data) = input.iter().enumerate().next()?;\n    if false { // some condition\n        Some(data)\n    } else {\n        input.remove(idx);\n        x(input)\n    }\n}\n```\n\nI get the following error from the borrow checker:\n\n```\ncannot borrow `*input` as mutable because it is also borrowed as immutable\n```\n\nHow does one make this work?\n\nEDIT: I've simplified the problem to the following:\n\n```rust\nstruct Data {}\n\nfn condition(data: &amp;Data) -&gt; bool {\n    true\n}\n\nfn x(input: &amp;mut Vec&lt;Data&gt;) -&gt; &amp;Data {\n    let data = &amp;input[0];\n    if condition(data) {\n        data\n    } else {\n        y(input)\n    }\n}\n\nfn y(input: &amp;mut Vec&lt;Data&gt;) -&gt; &amp;Data {\n    todo!()\n}\n```", "author_fullname": "t2_4hsplpq2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How does one mutably borrow a value after conditionally returning an immutable reference to it?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fv9yke", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1586079934.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586100727.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have the following pattern in my code:&lt;/p&gt;\n\n&lt;p&gt;```\nstruct Data {};&lt;/p&gt;\n\n&lt;p&gt;fn x(input: &amp;amp;mut Vec&amp;lt;Data&amp;gt;) -&amp;gt; Option&amp;lt;&amp;amp;Data&amp;gt; {\n    let (idx, data) = input.iter().enumerate().next()?;\n    if false { // some condition\n        Some(data)\n    } else {\n        input.remove(idx);\n        x(input)\n    }\n}\n```&lt;/p&gt;\n\n&lt;p&gt;I get the following error from the borrow checker:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\ncannot borrow `*input` as mutable because it is also borrowed as immutable\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;How does one make this work?&lt;/p&gt;\n\n&lt;p&gt;EDIT: I&amp;#39;ve simplified the problem to the following:&lt;/p&gt;\n\n&lt;p&gt;```rust\nstruct Data {}&lt;/p&gt;\n\n&lt;p&gt;fn condition(data: &amp;amp;Data) -&amp;gt; bool {\n    true\n}&lt;/p&gt;\n\n&lt;p&gt;fn x(input: &amp;amp;mut Vec&amp;lt;Data&amp;gt;) -&amp;gt; &amp;amp;Data {\n    let data = &amp;amp;input[0];\n    if condition(data) {\n        data\n    } else {\n        y(input)\n    }\n}&lt;/p&gt;\n\n&lt;p&gt;fn y(input: &amp;amp;mut Vec&amp;lt;Data&amp;gt;) -&amp;gt; &amp;amp;Data {\n    todo!()\n}\n```&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fv9yke", "is_robot_indexable": true, "report_reasons": null, "author": "Miserable_Newspaper", "discussion_type": null, "num_comments": 15, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fv9yke/how_does_one_mutably_borrow_a_value_after/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fv9yke/how_does_one_mutably_borrow_a_value_after/", "subreddit_subscribers": 95558, "created_utc": 1586071927.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_tssbo", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Error recovery with parser combinators (using nom)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fvc7hy", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1586113907.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "eyalkalderon.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "amethyst", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvc7hy", "is_robot_indexable": true, "report_reasons": null, "author": "ebkalderon", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/fvc7hy/error_recovery_with_parser_combinators_using_nom/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.eyalkalderon.com/nom-error-recovery/", "subreddit_subscribers": 95558, "created_utc": 1586085107.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hey!\n\nIt seems that a lot of companies started adopting [Rust](https://www.rust-lang.org/production) , and more traditional companies [do as well](https://twitter.com/steveklabnik/status/1246510586416050179). However, I would like to check some products or startup's work built on top of Rust Stack and how it serves Mobile app or large-scale website as a backend.\n\nFor learning purposes, I would like to check real-world open-source Rust stack, and how teams orchestrate different services. Do you know of any repositories like that?", "author_fullname": "t2_kc2bd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Question] What are some of real-world open-source Rust product?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_fvdr7y", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586121962.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey!&lt;/p&gt;\n\n&lt;p&gt;It seems that a lot of companies started adopting &lt;a href=\"https://www.rust-lang.org/production\"&gt;Rust&lt;/a&gt; , and more traditional companies &lt;a href=\"https://twitter.com/steveklabnik/status/1246510586416050179\"&gt;do as well&lt;/a&gt;. However, I would like to check some products or startup&amp;#39;s work built on top of Rust Stack and how it serves Mobile app or large-scale website as a backend.&lt;/p&gt;\n\n&lt;p&gt;For learning purposes, I would like to check real-world open-source Rust stack, and how teams orchestrate different services. Do you know of any repositories like that?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvdr7y", "is_robot_indexable": true, "report_reasons": null, "author": "__Julia", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fvdr7y/question_what_are_some_of_realworld_opensource/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fvdr7y/question_what_are_some_of_realworld_opensource/", "subreddit_subscribers": 95558, "created_utc": 1586093162.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "New to rust here.\n\nWhen I have \\`use std::cmp::Ordering\\` in my source code file, how can I see what is inside that module/trait? I tried \"gf\" in vim but it didn't work.", "author_fullname": "t2_cgaw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "vim - How can I see source code for a module/trait I have imported?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fvb8or", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586108366.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;New to rust here.&lt;/p&gt;\n\n&lt;p&gt;When I have `use std::cmp::Ordering` in my source code file, how can I see what is inside that module/trait? I tried &amp;quot;gf&amp;quot; in vim but it didn&amp;#39;t work.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvb8or", "is_robot_indexable": true, "report_reasons": null, "author": "somebody314", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/fvb8or/vim_how_can_i_see_source_code_for_a_moduletrait_i/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/fvb8or/vim_how_can_i_see_source_code_for_a_moduletrait_i/", "subreddit_subscribers": 95558, "created_utc": 1586079566.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_fvb8or", "before": null}}