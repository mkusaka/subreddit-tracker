{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_5a6qivyp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Micro In Action, part3: Calling a Service", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f26gdr", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1581445088.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f26gdr", "is_robot_indexable": true, "report_reasons": null, "author": "dche423", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/f26gdr/micro_in_action_part3_calling_a_service/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@dche423/micro-in-action-part-3-calling-a-service-55d865928f11", "subreddit_subscribers": 102417, "created_utc": 1581416288.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "[CurlyQ](https://github.com/mcmathja/curlyq) provides a simple, easy-to-use interface for performing background processing in Go. It supports scheduled jobs, job deduplication, and configurable concurrent execution out of the box.\n\nI started writing CurlyQ after experimenting with other Redis-backed task queues and finding that none of them had quite what I was looking for in terms of API design and feature mix. CurlyQ aims to be as straightforward as possible for common use cases while exposing a variety of options for fine-tuning and advanced configuration.\n\nI'm nearing a 1.0 release and would love feedback and contributions before locking in the current behavior. Thanks all!", "author_fullname": "t2_4hhk9peu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "CurlyQ - Simple, efficient, and reliable task queue for Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f1wy28", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 67, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 67, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581397683.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/mcmathja/curlyq\"&gt;CurlyQ&lt;/a&gt; provides a simple, easy-to-use interface for performing background processing in Go. It supports scheduled jobs, job deduplication, and configurable concurrent execution out of the box.&lt;/p&gt;\n\n&lt;p&gt;I started writing CurlyQ after experimenting with other Redis-backed task queues and finding that none of them had quite what I was looking for in terms of API design and feature mix. CurlyQ aims to be as straightforward as possible for common use cases while exposing a variety of options for fine-tuning and advanced configuration.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m nearing a 1.0 release and would love feedback and contributions before locking in the current behavior. Thanks all!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"count": 1, "is_enabled": true, "subreddit_id": null, "description": "When you come across a feel-good thing.", "end_date": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png", "days_of_premium": 0, "is_new": false, "id": "award_5f123e3d-4f48-42f4-9c11-e98b566d5897", "icon_height": 2048, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=16&amp;height=16&amp;auto=webp&amp;s=92932f465d58e4c16b12b6eac4ca07d27e3d11c0", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=32&amp;height=32&amp;auto=webp&amp;s=d11484a208d68a318bf9d4fcf371171a1cb6a7ef", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=48&amp;height=48&amp;auto=webp&amp;s=febdf28b6f39f7da7eb1365325b85e0bb49a9f63", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=64&amp;height=64&amp;auto=webp&amp;s=b4406a2d88bf86fa3dc8a45aacf7e0c7bdccc4fb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/5izbv4fn0md41_Wholesome.png?width=128&amp;height=128&amp;auto=webp&amp;s=19555b13e3e196b62eeb9160d1ac1d1b372dcb0b", "width": 128, "height": 128}], "days_of_drip_extension": 0, "award_type": "global", "start_date": null, "coin_price": 150, "icon_width": 2048, "subreddit_coin_reward": 0, "name": "Wholesome"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f1wy28", "is_robot_indexable": true, "report_reasons": null, "author": "mcmathja", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/f1wy28/curlyq_simple_efficient_and_reliable_task_queue/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/f1wy28/curlyq_simple_efficient_and_reliable_task_queue/", "subreddit_subscribers": 102417, "created_utc": 1581368883.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey , \n\nI want to host my own proxy server for go modules. \n\nI've seen several projects that acts as a proxy/cache server and have some questions-\n\n1. When using GOPROXY environment variable to set a proxy , and the module is not in the proxy , will it go get it from a VCS? \n\nI've tried to set it up, but it's seems to not work like that and just got an error. There is any extra setup need to be done? \n\n2. How can I \"fill\" my proxy cache with popular modules so I'll have it \"ready\" . \n\n3. How does the proxy differs from the cache found locally on GOPATH/pkg/mod ? \n\nExcept the fact it can be accessed by multiple people on the network\n\nThanks!", "author_fullname": "t2_y2jz7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go modules proxy", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f243lc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581429413.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey , &lt;/p&gt;\n\n&lt;p&gt;I want to host my own proxy server for go modules. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve seen several projects that acts as a proxy/cache server and have some questions-&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;When using GOPROXY environment variable to set a proxy , and the module is not in the proxy , will it go get it from a VCS? &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I&amp;#39;ve tried to set it up, but it&amp;#39;s seems to not work like that and just got an error. There is any extra setup need to be done? &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;How can I &amp;quot;fill&amp;quot; my proxy cache with popular modules so I&amp;#39;ll have it &amp;quot;ready&amp;quot; . &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;How does the proxy differs from the cache found locally on GOPATH/pkg/mod ? &lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Except the fact it can be accessed by multiple people on the network&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f243lc", "is_robot_indexable": true, "report_reasons": null, "author": "liad344", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/f243lc/go_modules_proxy/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/f243lc/go_modules_proxy/", "subreddit_subscribers": 102417, "created_utc": 1581400613.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Distributed simple and robust release management and monitoring system.\n\n\\*\\**This project on going work.*\n\n### \n\n[Agente](https://preview.redd.it/1mzjievfl9g41.png?width=512&amp;format=png&amp;auto=webp&amp;s=5ee0e2e48cca5b2e05d81d2aca83c9ba748248e3)\n\n### Road map\n\n* Core system\n* First worker agent\n* Management dashboard\n* Jenkins vs CI tool extensions\n* Management dashboard\n* First master agent\n* All relevant third-party system integrations (version control, CI, database, queuing etc.)\n\n## Requirements\n\n* Go &gt; 1.11\n* Redis or RabbitMQ\n* PostgreSQL\n\n## Docker Environment\n\nFor PostgreSQL\n\n`docker run --name agente_PostgreSQL -e POSTGRES_PASSWORD=123456 -e POSTGRES_USER=agente -p 5432:5432 -d postgres  docker exec agente_PostgreSQL psql --username=agente -c 'create database agente_dev;'`\n\nFor RabbitMQ\n\n`docker run --hostname my-rabbit --name agente_RabbitMQ -e RABBITMQ_DEFAULT_USER=local -e RABBITMQ_DEFAULT_PASS=local -p 5672:5672 -d rabbitmq:3-management`\n\nDevelopment\n\n`git clone -b develop` [`https://github.com/streetbyters/agente`](https://github.com/streetbyters/agente)\n\n`go mod vendor`  \n\n`# Development Mode`\n\n `go run ./cmd -mode dev -migrate -reset` \n\n`go run ./cmd -mode dev`  \n\n`# Test Mode` \n\n`go run ./cmd -mode test -migrate -reset` \n\n`go run ./cmd -mode test`\n\n## Build\n\nWe will release firstly Agente for Linux environment.  \n [See detail](https://github.com/streetbyters/agente/blob/master/docs/build.md)\n\n&amp;#x200B;\n\nGitHub : [https://github.com/streetbyters/agente](https://github.com/streetbyters/agente)", "author_fullname": "t2_rkihx", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Agente - Distributed simple and robust release management and monitoring system.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "media_metadata": {"1mzjievfl9g41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 108, "x": 108, "u": "https://external-preview.redd.it/1mzjievfl9g41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=9e6a2f45a40440660d1790a1476458ec60e55760"}, {"y": 216, "x": 216, "u": "https://external-preview.redd.it/1mzjievfl9g41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=47bb86f6f5215728bf471471cb9b59de2c5210c2"}, {"y": 320, "x": 320, "u": "https://external-preview.redd.it/1mzjievfl9g41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=f9449c9ab236981a99118f830ebe424dd11f83b3"}], "s": {"y": 512, "x": 512, "u": "https://preview.redd.it/1mzjievfl9g41.png?width=512&amp;format=png&amp;auto=webp&amp;s=5ee0e2e48cca5b2e05d81d2aca83c9ba748248e3"}, "id": "1mzjievfl9g41"}}, "name": "t3_f2639c", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581442556.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Distributed simple and robust release management and monitoring system.&lt;/p&gt;\n\n&lt;p&gt;**&lt;em&gt;This project on going work.&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/1mzjievfl9g41.png?width=512&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=5ee0e2e48cca5b2e05d81d2aca83c9ba748248e3\"&gt;Agente&lt;/a&gt;&lt;/p&gt;\n\n&lt;h3&gt;Road map&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Core system&lt;/li&gt;\n&lt;li&gt;First worker agent&lt;/li&gt;\n&lt;li&gt;Management dashboard&lt;/li&gt;\n&lt;li&gt;Jenkins vs CI tool extensions&lt;/li&gt;\n&lt;li&gt;Management dashboard&lt;/li&gt;\n&lt;li&gt;First master agent&lt;/li&gt;\n&lt;li&gt;All relevant third-party system integrations (version control, CI, database, queuing etc.)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Requirements&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Go &amp;gt; 1.11&lt;/li&gt;\n&lt;li&gt;Redis or RabbitMQ&lt;/li&gt;\n&lt;li&gt;PostgreSQL&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Docker Environment&lt;/h2&gt;\n\n&lt;p&gt;For PostgreSQL&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;docker run --name agente_PostgreSQL -e POSTGRES_PASSWORD=123456 -e POSTGRES_USER=agente -p 5432:5432 -d postgres  docker exec agente_PostgreSQL psql --username=agente -c &amp;#39;create database agente_dev;&amp;#39;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;For RabbitMQ&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;docker run --hostname my-rabbit --name agente_RabbitMQ -e RABBITMQ_DEFAULT_USER=local -e RABBITMQ_DEFAULT_PASS=local -p 5672:5672 -d rabbitmq:3-management&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Development&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;git clone -b develop&lt;/code&gt; &lt;a href=\"https://github.com/streetbyters/agente\"&gt;&lt;code&gt;https://github.com/streetbyters/agente&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;go mod vendor&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;# Development Mode&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;go run ./cmd -mode dev -migrate -reset&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;go run ./cmd -mode dev&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;# Test Mode&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;go run ./cmd -mode test -migrate -reset&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;go run ./cmd -mode test&lt;/code&gt;&lt;/p&gt;\n\n&lt;h2&gt;Build&lt;/h2&gt;\n\n&lt;p&gt;We will release firstly Agente for Linux environment.&lt;br/&gt;\n &lt;a href=\"https://github.com/streetbyters/agente/blob/master/docs/build.md\"&gt;See detail&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;GitHub : &lt;a href=\"https://github.com/streetbyters/agente\"&gt;https://github.com/streetbyters/agente&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2639c", "is_robot_indexable": true, "report_reasons": null, "author": "ismailtasdelen", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/f2639c/agente_distributed_simple_and_robust_release/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/f2639c/agente_distributed_simple_and_robust_release/", "subreddit_subscribers": 102417, "created_utc": 1581413756.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello there,\n\nIn my first baby steps with golang I kept the any new project in the /src directory of my $GOPATH. It was all set inside the directory of the go source code, as i had first downloaded it. Just like most blogposts recommend.\n\nNo  I am setting up a new workstation and I thught that maybe I could use different directories for my $GOROOT to keep the source code of the language and another $GOPATH for my projects. I thought that maybe this would help me keep it all clean and nitty, and maybe ease possible back ups in the future ( besides having it all on a git repo). I also added the $GOBIN environmental variable, but I came up with permission errors.\n\nAnyway, do you think that it even worth the mess? Is what I'm doing a good practice or is it totally misguiding? Should I just follow the default practice?", "author_fullname": "t2_4biyx5en", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Can $GOROOT be a totally different directory than $GOPATH?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f26of5", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581446616.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello there,&lt;/p&gt;\n\n&lt;p&gt;In my first baby steps with golang I kept the any new project in the /src directory of my $GOPATH. It was all set inside the directory of the go source code, as i had first downloaded it. Just like most blogposts recommend.&lt;/p&gt;\n\n&lt;p&gt;No  I am setting up a new workstation and I thught that maybe I could use different directories for my $GOROOT to keep the source code of the language and another $GOPATH for my projects. I thought that maybe this would help me keep it all clean and nitty, and maybe ease possible back ups in the future ( besides having it all on a git repo). I also added the $GOBIN environmental variable, but I came up with permission errors.&lt;/p&gt;\n\n&lt;p&gt;Anyway, do you think that it even worth the mess? Is what I&amp;#39;m doing a good practice or is it totally misguiding? Should I just follow the default practice?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f26of5", "is_robot_indexable": true, "report_reasons": null, "author": "7scifi", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/f26of5/can_goroot_be_a_totally_different_directory_than/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/f26of5/can_goroot_be_a_totally_different_directory_than/", "subreddit_subscribers": 102417, "created_utc": 1581417816.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I have a project with some boilerplates related to handling pointers so I've decided to make them into a library named [goptr](https://github.com/noamt/goptr) with the purpose of becoming a utility library.\n\nThe first feature is a collection of methods for resolving pointers of primitives or falling back to a default value. For example:\n\n    import \"github.com/noamt/goptr\"\n    \n    goptr.String(nil) // Returns an empty string\n    goptr.String(\"foo\") // Returns \"foo\" \n    goptr.StringOrDefault(nil, \"foo\") // Returns \"foo\" \n    \n    s := \"bar\"\n    goptr.StringOrDefault(&amp;s, \"foo\") // Returns \"bar\"", "author_fullname": "t2_3cc70u0n", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Just released a library - goptr", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_f28726", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581455927.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a project with some boilerplates related to handling pointers so I&amp;#39;ve decided to make them into a library named &lt;a href=\"https://github.com/noamt/goptr\"&gt;goptr&lt;/a&gt; with the purpose of becoming a utility library.&lt;/p&gt;\n\n&lt;p&gt;The first feature is a collection of methods for resolving pointers of primitives or falling back to a default value. For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/noamt/goptr&amp;quot;\n\ngoptr.String(nil) // Returns an empty string\ngoptr.String(&amp;quot;foo&amp;quot;) // Returns &amp;quot;foo&amp;quot; \ngoptr.StringOrDefault(nil, &amp;quot;foo&amp;quot;) // Returns &amp;quot;foo&amp;quot; \n\ns := &amp;quot;bar&amp;quot;\ngoptr.StringOrDefault(&amp;amp;s, &amp;quot;foo&amp;quot;) // Returns &amp;quot;bar&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f28726", "is_robot_indexable": true, "report_reasons": null, "author": "beerdappel", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/f28726/just_released_a_library_goptr/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/f28726/just_released_a_library_goptr/", "subreddit_subscribers": 102417, "created_utc": 1581427127.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_qtig0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Micro In Action, Part 3\uff1aCalling a Service", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_f27zd9", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1581454812.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f27zd9", "is_robot_indexable": true, "report_reasons": null, "author": "Fewthp", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/f27zd9/micro_in_action_part_3calling_a_service/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com//micro-in-action-part-3-calling-a-service-55d865928f11?source=friends_link&amp;sk=b763ed6cc10dd14132da4191387fcaa4", "subreddit_subscribers": 102417, "created_utc": 1581426012.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_bps00s8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Build a simple GraphQL API in Golang with MySQL and GORM using Gqlgen", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f20nfw", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1581412882.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "soberkoder.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f20nfw", "is_robot_indexable": true, "report_reasons": null, "author": "rajkumar90", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/f20nfw/build_a_simple_graphql_api_in_golang_with_mysql/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.soberkoder.com/go-graphql-api-mysql-gorm/", "subreddit_subscribers": 102417, "created_utc": 1581384082.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi everyone :)\n\nI developed a CLI tool that can show which docker containers are attached to which veth interfaces.\n\nIt can be used in combination with other commands.  \ne.g. Capture any container's packets with termshark.\n\n```sh\nsudo termshark -i $(dockerveth -p | fzf | awk \"{print \\$2}\")\n```\n\n[https://github.com/skanehira/go-dockerveth](https://github.com/skanehira/go-dockerveth)", "author_fullname": "t2_2vye4x64", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Show which docker containers are attached to which veth interfaces CLI", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_f27gqn", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581451831.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone :)&lt;/p&gt;\n\n&lt;p&gt;I developed a CLI tool that can show which docker containers are attached to which veth interfaces.&lt;/p&gt;\n\n&lt;p&gt;It can be used in combination with other commands.&lt;br/&gt;\ne.g. Capture any container&amp;#39;s packets with termshark.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;sh\nsudo termshark -i $(dockerveth -p | fzf | awk &amp;quot;{print \\$2}&amp;quot;)\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/skanehira/go-dockerveth\"&gt;https://github.com/skanehira/go-dockerveth&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f27gqn", "is_robot_indexable": true, "report_reasons": null, "author": "gorilla0513", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/f27gqn/show_which_docker_containers_are_attached_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/f27gqn/show_which_docker_containers_are_attached_to/", "subreddit_subscribers": 102417, "created_utc": 1581423031.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I come from the world of Ruby and Rails and I'm trying to build some things in Go. \n\nIt seems like packages are a way of grouping functional code in Go? But I'm trying to wrap my head around \n\n- how and when to include files in a package? Are all files in a package accessible to each other? \n- Is my package always called `main`? Is that just a convention?\n- When to break code into multiple packages? If I'm building a CLI tool, would each main subcommand in the CLI get it's own package and subfolder grouping? \n\nI've taken a look at the usual getting started docs but I just feel like I'm stumbling here for some reason. Hoping that someone can explain it better.\n\nThanks!", "author_fullname": "t2_ted1e", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Having trouble understanding the concept of a \"package\" in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f1xwrs", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581401407.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I come from the world of Ruby and Rails and I&amp;#39;m trying to build some things in Go. &lt;/p&gt;\n\n&lt;p&gt;It seems like packages are a way of grouping functional code in Go? But I&amp;#39;m trying to wrap my head around &lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;how and when to include files in a package? Are all files in a package accessible to each other? &lt;/li&gt;\n&lt;li&gt;Is my package always called &lt;code&gt;main&lt;/code&gt;? Is that just a convention?&lt;/li&gt;\n&lt;li&gt;When to break code into multiple packages? If I&amp;#39;m building a CLI tool, would each main subcommand in the CLI get it&amp;#39;s own package and subfolder grouping? &lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;I&amp;#39;ve taken a look at the usual getting started docs but I just feel like I&amp;#39;m stumbling here for some reason. Hoping that someone can explain it better.&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f1xwrs", "is_robot_indexable": true, "report_reasons": null, "author": "UnderwaterPenguin", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/f1xwrs/having_trouble_understanding_the_concept_of_a/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/f1xwrs/having_trouble_understanding_the_concept_of_a/", "subreddit_subscribers": 102417, "created_utc": 1581372607.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_f1xwrs", "before": null}}