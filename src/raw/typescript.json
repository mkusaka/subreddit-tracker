{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - January", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_eib2jh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 30, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 30, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1577865929.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "908dba50-143b-11ea-8541-0e435e5ea9e1", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eib2jh", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 8, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/eib2jh/whos_hiring_typescript_developers_january/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/eib2jh/whos_hiring_typescript_developers_january/", "subreddit_subscribers": 30130, "created_utc": 1577837129.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_432e5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Announcing TypeScript 3.8 Beta", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 87, "hide_score": false, "name": "t3_emxvdn", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 76, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 76, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/io8j9padLKtPGIc_IflAbs92Q5OQO5lLgiiqwaOi5h4.jpg", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1578722084.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "devblogs.microsoft.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/RfnVYnVd1OdKDWgZjnJe40-JZpsSLqamQ7SN0iBmLGA.jpg?auto=webp&amp;s=14e2ac4563a760db74d10febfe85290fec246ef5", "width": 562, "height": 350}, "resolutions": [{"url": "https://external-preview.redd.it/RfnVYnVd1OdKDWgZjnJe40-JZpsSLqamQ7SN0iBmLGA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=aa2799b11813bc3150ec85fdc02198d51cc7de02", "width": 108, "height": 67}, {"url": "https://external-preview.redd.it/RfnVYnVd1OdKDWgZjnJe40-JZpsSLqamQ7SN0iBmLGA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=51391b8547d45c0aa3521161a9751727540c159d", "width": 216, "height": 134}, {"url": "https://external-preview.redd.it/RfnVYnVd1OdKDWgZjnJe40-JZpsSLqamQ7SN0iBmLGA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=03bbf25230c304c077428f6ef7a72413c8f7b203", "width": 320, "height": 199}], "variants": {}, "id": "VuFaSjtlPcLuMYjdwW1UjzANI4RMUDx4F8fNjZsRS3c"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emxvdn", "is_robot_indexable": true, "report_reasons": null, "author": "DanielRosenwasser", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emxvdn/announcing_typescript_38_beta/", "parent_whitelist_status": null, "stickied": false, "url": "https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta/", "subreddit_subscribers": 30130, "created_utc": 1578693284.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_363qe", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Diagram of every possible TypeScript type", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 70, "hide_score": false, "name": "t3_emxi8j", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 36, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 36, "approved_by": null, "author_premium": true, "thumbnail": "https://b.thumbs.redditmedia.com/PUoA8NsqFPYS2-2CQTiGzUFaZjz9vXuzFCTxkeSJWEE.jpg", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1578720509.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "gist.github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?auto=webp&amp;s=079a7260ec149880c73263d64811698adb22760a", "width": 1280, "height": 640}, "resolutions": [{"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d5811c5bda5fece1040636a6af8702ba790f0fd4", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=eee576fd4da7535eb53ceb88dd8b52f073048441", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=72872d880460efa723918c000adca0ed259cf775", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=f3545b9335d763c9da9c16bf7bf9a3f907dbd6f6", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=2d241ace0f1c07088fac3f8469dbad3b05d2d419", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/4-DxLM-C2Ve3tHmVL5ITI6GRtMVG8PzzdBuCKiaabfE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=9055f11bdc00beb0b3589e1cae5817d6070d83bc", "width": 1080, "height": 540}], "variants": {}, "id": "OAXSl8SY6T3JK9MGQyKxkoYbqZ71HQRYXLeB8CV0NXg"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emxi8j", "is_robot_indexable": true, "report_reasons": null, "author": "Selfmadecelo", "discussion_type": null, "num_comments": 2, "send_replies": false, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emxi8j/diagram_of_every_possible_typescript_type/", "parent_whitelist_status": null, "stickied": false, "url": "https://gist.github.com/laughinghan/31e02b3f3b79a4b1d58138beff1a2a89", "subreddit_subscribers": 30130, "created_utc": 1578691709.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_lbzwa", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Collection of resources related to Typescript internals", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emrdkq", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1578694084.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "typescript.tools", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emrdkq", "is_robot_indexable": true, "report_reasons": null, "author": "btr_", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emrdkq/collection_of_resources_related_to_typescript/", "parent_whitelist_status": null, "stickied": false, "url": "https://typescript.tools/", "subreddit_subscribers": 30130, "created_utc": 1578665284.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hello, I'm trying to define a field in an interface where values are slightly different. An example:\n\n    export interface HelloWorld {\n      aField: firstType | secondType;\n      ...\n    }\n    \n    export type firstType = 'hello' | 'world';\n    export type secondType = 'hello' | 'another' | 'world';\n\nI recently had to create \\`firstType\\` where I don't want its value to be a string value of \"another\". The definition of the 2 different types and use of a union was my attempt at getting this to work, but I get a Type error code TS2322. Example error msg:\n\n    Types of property 'aField' are incompatible.\n      Type '\"hello\" | \"another\" | \"world\"' is not assignable to type '\"hello\" | \"world\"'.\n        Type '\"another\"' is not assignable to type '\"hello\" | \"world\"'.\n\nIf I were to just define the interface using type \\`firstType\\`, tests will pass, no error. But this is incorrect for me because this field can have a value of \"another\" in certain cases.\n\nAny help is appreciated! Thank you", "author_fullname": "t2_4t9d6e5v", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How can I define a field in an interface that can be one of 2 slightly different values?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emy5td", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578723328.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I&amp;#39;m trying to define a field in an interface where values are slightly different. An example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export interface HelloWorld {\n  aField: firstType | secondType;\n  ...\n}\n\nexport type firstType = &amp;#39;hello&amp;#39; | &amp;#39;world&amp;#39;;\nexport type secondType = &amp;#39;hello&amp;#39; | &amp;#39;another&amp;#39; | &amp;#39;world&amp;#39;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I recently had to create `firstType` where I don&amp;#39;t want its value to be a string value of &amp;quot;another&amp;quot;. The definition of the 2 different types and use of a union was my attempt at getting this to work, but I get a Type error code TS2322. Example error msg:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Types of property &amp;#39;aField&amp;#39; are incompatible.\n  Type &amp;#39;&amp;quot;hello&amp;quot; | &amp;quot;another&amp;quot; | &amp;quot;world&amp;quot;&amp;#39; is not assignable to type &amp;#39;&amp;quot;hello&amp;quot; | &amp;quot;world&amp;quot;&amp;#39;.\n    Type &amp;#39;&amp;quot;another&amp;quot;&amp;#39; is not assignable to type &amp;#39;&amp;quot;hello&amp;quot; | &amp;quot;world&amp;quot;&amp;#39;.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If I were to just define the interface using type `firstType`, tests will pass, no error. But this is incorrect for me because this field can have a value of &amp;quot;another&amp;quot; in certain cases.&lt;/p&gt;\n\n&lt;p&gt;Any help is appreciated! Thank you&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emy5td", "is_robot_indexable": true, "report_reasons": null, "author": "browsingagain10", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emy5td/how_can_i_define_a_field_in_an_interface_that_can/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/emy5td/how_can_i_define_a_field_in_an_interface_that_can/", "subreddit_subscribers": 30130, "created_utc": 1578694528.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Been staring at this one for 20 minutes and I guess I must not fully understand TS inside classes. Anyone know what's causing it? Setting the property to 'any' I thought would allow it to be set to anything.\n\n    export default class OAuth {\n      protected keys: Keys;\n      protected req: Request;\n      protected res: Response;\n      \n      public ctxSession: any;\n      \n      constructor(req: Request, res: Response, keys: Keys) {\n        this.keys = keys;\n        this.req = req;\n        this.res = res;\n      }\n      \n      public authenticateThenCaptureContext() {\n        shopifyAuth({\n          prefix : \"/shopify\"\n          , apiKey : this.keys.SHOPIFY_API_KEY\n          , secret : this.keys.SHOPIFY_API_SECRET\n          , scopes : this.keys.SCOPES\n          , afterAuth(ctx: any): void {\n            this.ctxSession = ctx.session // title error\n          }\n        })\n      }", "author_fullname": "t2_3dgvi4uq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "TS2339: Property 'ctxSession' does not exist on type 'OAuthStartOptions'.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emteem", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578702927.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Been staring at this one for 20 minutes and I guess I must not fully understand TS inside classes. Anyone know what&amp;#39;s causing it? Setting the property to &amp;#39;any&amp;#39; I thought would allow it to be set to anything.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export default class OAuth {\n  protected keys: Keys;\n  protected req: Request;\n  protected res: Response;\n\n  public ctxSession: any;\n\n  constructor(req: Request, res: Response, keys: Keys) {\n    this.keys = keys;\n    this.req = req;\n    this.res = res;\n  }\n\n  public authenticateThenCaptureContext() {\n    shopifyAuth({\n      prefix : &amp;quot;/shopify&amp;quot;\n      , apiKey : this.keys.SHOPIFY_API_KEY\n      , secret : this.keys.SHOPIFY_API_SECRET\n      , scopes : this.keys.SCOPES\n      , afterAuth(ctx: any): void {\n        this.ctxSession = ctx.session // title error\n      }\n    })\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emteem", "is_robot_indexable": true, "report_reasons": null, "author": "javascript_dev", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emteem/ts2339_property_ctxsession_does_not_exist_on_type/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/emteem/ts2339_property_ctxsession_does_not_exist_on_type/", "subreddit_subscribers": 30130, "created_utc": 1578674127.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Also since it's a superset of js", "author_fullname": "t2_3h5id", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Since most companies have united behind TS is possible that it will replace JS in the browsers in the future?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emupty", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578708464.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Also since it&amp;#39;s a superset of js&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emupty", "is_robot_indexable": true, "report_reasons": null, "author": "pure_x01", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emupty/since_most_companies_have_united_behind_ts_is/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/emupty/since_most_companies_have_united_behind_ts_is/", "subreddit_subscribers": 30130, "created_utc": 1578679664.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Given some type and an extension of that type:\n\n```\ninterface Item {\n  type: string\n}\n\ninterface ItemTypeA extends Item {\n  valA: number\n}\n```\n\nSometimes I need to take a variable of the type and cast it to the more specific type via the `as` keyword:\n```\nfunction fn1(item: Item) {\n  if (item.type === 'A') {\n    const itemA = item as ItemTypeA;\n    const { valA } = itemA\n    // ...\n  }\n}\n```\n\nAlternatively, it can be done via a type checking function:\n\n```\nconst itemIsA = (item: Item): item is ItemTypeA =&gt; item.type === 'A';\n\nfunction fn2(item: Item) {\n  if (itemIsA(item)) {\n    const { valA } = item;\n    // ...\n  }\n}\n```\n\nThe first way seems more convenient, explicit, and doesn't require an extra function. With the second way, even though the compiler knows that the item has been casted to a new type, a human reader must either infer by the checker-function name or see what the checker returns.", "author_fullname": "t2_19ekjgby", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "casting a variable from a type to a subtype", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emnzj9", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578672471.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Given some type and an extension of that type:&lt;/p&gt;\n\n&lt;p&gt;```\ninterface Item {\n  type: string\n}&lt;/p&gt;\n\n&lt;p&gt;interface ItemTypeA extends Item {\n  valA: number\n}\n```&lt;/p&gt;\n\n&lt;p&gt;Sometimes I need to take a variable of the type and cast it to the more specific type via the &lt;code&gt;as&lt;/code&gt; keyword:\n&lt;code&gt;\nfunction fn1(item: Item) {\n  if (item.type === &amp;#39;A&amp;#39;) {\n    const itemA = item as ItemTypeA;\n    const { valA } = itemA\n    // ...\n  }\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Alternatively, it can be done via a type checking function:&lt;/p&gt;\n\n&lt;p&gt;```\nconst itemIsA = (item: Item): item is ItemTypeA =&amp;gt; item.type === &amp;#39;A&amp;#39;;&lt;/p&gt;\n\n&lt;p&gt;function fn2(item: Item) {\n  if (itemIsA(item)) {\n    const { valA } = item;\n    // ...\n  }\n}\n```&lt;/p&gt;\n\n&lt;p&gt;The first way seems more convenient, explicit, and doesn&amp;#39;t require an extra function. With the second way, even though the compiler knows that the item has been casted to a new type, a human reader must either infer by the checker-function name or see what the checker returns.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emnzj9", "is_robot_indexable": true, "report_reasons": null, "author": "wagonn", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emnzj9/casting_a_variable_from_a_type_to_a_subtype/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/emnzj9/casting_a_variable_from_a_type_to_a_subtype/", "subreddit_subscribers": 30130, "created_utc": 1578643671.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'd like to do this:\n\n    type Predicate&lt;T&gt; =\n         ['ANY', ...Array&lt;Predicate&lt;T&gt;&gt;]\n        | ['ALL', ...Array&lt;Predicate&lt;T&gt;&gt;]\n        | [keyof T, '=', number]\n        | [keyof T, '&gt;', number]\n        | [keyof T, '&gt;=', number]\n        | [keyof T, '&lt;', number]\n        | [keyof T, '&lt;=', number]\n        | [keyof T, '&lt;&gt;', number]\n    ;\n\ntsc complains that Predicate circularly references itself\n\nOddly vscode correctly hints the creation of instances of Predicate&lt;T&gt;\n\nIs there some other way to do this?", "author_fullname": "t2_54q92", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to implement Hierarchical types", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emu4ox", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578705970.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d like to do this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Predicate&amp;lt;T&amp;gt; =\n     [&amp;#39;ANY&amp;#39;, ...Array&amp;lt;Predicate&amp;lt;T&amp;gt;&amp;gt;]\n    | [&amp;#39;ALL&amp;#39;, ...Array&amp;lt;Predicate&amp;lt;T&amp;gt;&amp;gt;]\n    | [keyof T, &amp;#39;=&amp;#39;, number]\n    | [keyof T, &amp;#39;&amp;gt;&amp;#39;, number]\n    | [keyof T, &amp;#39;&amp;gt;=&amp;#39;, number]\n    | [keyof T, &amp;#39;&amp;lt;&amp;#39;, number]\n    | [keyof T, &amp;#39;&amp;lt;=&amp;#39;, number]\n    | [keyof T, &amp;#39;&amp;lt;&amp;gt;&amp;#39;, number]\n;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;tsc complains that Predicate circularly references itself&lt;/p&gt;\n\n&lt;p&gt;Oddly vscode correctly hints the creation of instances of Predicate&amp;lt;T&amp;gt;&lt;/p&gt;\n\n&lt;p&gt;Is there some other way to do this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emu4ox", "is_robot_indexable": true, "report_reasons": null, "author": "7Geordi", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emu4ox/how_to_implement_hierarchical_types/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/emu4ox/how_to_implement_hierarchical_types/", "subreddit_subscribers": 30130, "created_utc": 1578677170.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Current situation is I'm developing a shopify app on Node/Koa.js. It returns a context object with some important details such as the store name and other things. \n\nI could tell Typescript `ctx.session` is `any` to turn off type checking. But then what is the point of TS, and also it's good for me as a developer to actually learn the shape of what I'm resolving for clarity.\n\nDocumentation on ctx.session is lacking:\n\n[https://github.com/koajs/session](https://github.com/koajs/session)\n\n[https://www.npmjs.com/package/@shopify/koa-shopify-auth](https://www.npmjs.com/package/@shopify/koa-shopify-auth)\n\nFaced with this situation how do you guys proceed? I am thinking I should just run a test to see what comes back, log it and write an interface based on that.\n\nIf this is a situation you guys would just mark as `any` I am open to that advice too.", "author_fullname": "t2_3dgvi4uq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Dealing with values you don't know the shape of (from being undocumented)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emqpks", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1578690590.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Current situation is I&amp;#39;m developing a shopify app on Node/Koa.js. It returns a context object with some important details such as the store name and other things. &lt;/p&gt;\n\n&lt;p&gt;I could tell Typescript &lt;code&gt;ctx.session&lt;/code&gt; is &lt;code&gt;any&lt;/code&gt; to turn off type checking. But then what is the point of TS, and also it&amp;#39;s good for me as a developer to actually learn the shape of what I&amp;#39;m resolving for clarity.&lt;/p&gt;\n\n&lt;p&gt;Documentation on ctx.session is lacking:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/koajs/session\"&gt;https://github.com/koajs/session&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.npmjs.com/package/@shopify/koa-shopify-auth\"&gt;https://www.npmjs.com/package/@shopify/koa-shopify-auth&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Faced with this situation how do you guys proceed? I am thinking I should just run a test to see what comes back, log it and write an interface based on that.&lt;/p&gt;\n\n&lt;p&gt;If this is a situation you guys would just mark as &lt;code&gt;any&lt;/code&gt; I am open to that advice too.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/mxihVlLkD2G1ftJHV7GOlpb0yGj_c0CgVUmNt_pKH7Q.jpg?auto=webp&amp;s=59487cabc482f5ae30f77d40c40ad55043211136", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/mxihVlLkD2G1ftJHV7GOlpb0yGj_c0CgVUmNt_pKH7Q.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c20e6b7fb79c5e2a397f2300f8d7b054f65bd6e8", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/mxihVlLkD2G1ftJHV7GOlpb0yGj_c0CgVUmNt_pKH7Q.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=7249bed0cc81817ae92cf68a32457fe3af04e3ba", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/mxihVlLkD2G1ftJHV7GOlpb0yGj_c0CgVUmNt_pKH7Q.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=62b7f58854b9b1bb863830d6362e54bb50909c86", "width": 320, "height": 320}], "variants": {}, "id": "_MxRGo01f19STv4QGxJVm7wQd8YZYuHOFX3VFePtMpE"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emqpks", "is_robot_indexable": true, "report_reasons": null, "author": "javascript_dev", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emqpks/dealing_with_values_you_dont_know_the_shape_of/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/emqpks/dealing_with_values_you_dont_know_the_shape_of/", "subreddit_subscribers": 30130, "created_utc": 1578661790.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "EDIT: If the formatting is messed up, here is a paste of JUST the code: [https://paste.ofcode.org/MqUSEq5cyyUgX9wHednJkm](https://paste.ofcode.org/MqUSEq5cyyUgX9wHednJkm)\n\n&amp;#x200B;\n\nI am using the library easy-peasy for a project at work. Most of my requests follow a similar form (data, status, a thunk to call the api, and listeners to update status based on the thunk), so in js, I used a function to generate most of it. I am trying to convert this to typescript now, but I am having issues. My code looks like this (some additional properties omitted until I figure out my problem):\n\n    import { actionOn, ActionOn, Thunk, thunk, TargetResolver, ActionTypes } from 'easy-peasy';\n    import RequestState from 'utils/request_states';\n    import { StoreModel } from 'store/store_root';\n    import RequestResponses, {PickResponse, Stub} from 'interfaces/request_responses';\n    \n    \n     interface RequestModel&lt;T&gt;{\n        status: RequestState;\n        data: T | null;\n        error: null | Error;\n        api_request: Thunk&lt;RequestModel&lt;T&gt;, any, any, StoreModel, Promise&lt;Stub&gt;&gt;;\n        onStart: ActionOn&lt;RequestModel&lt;T&gt;, StoreModel&gt;\n      };\n    \n    \n    export function StandardRequestGenerator&lt;T&gt;(init: T, api_req: any): RequestModel&lt;T&gt; {\n    \treturn {\n    \t\tstatus: RequestState.VOID,\n    \t\tdata: init,\n    \t\terror: null,\n    \t\tapi_request: thunk(async (actions, payloads, helpers) =&gt; {\n                \n                return api_req;\n            }),\n    \t\tonStart: actionOn(\n    \t\t\t(actions) =&gt; {\n            return actions.api_request.startType;\n          }\n    \t\t\t(state) =&gt; {\n    \t\t\t\tstate.status = RequestState.LOADING;\n    \t\t\t}\n    \t\t)\n    \t};\n    }\n\nThe idea being that the generic would be the type of the data returned from the API request. I think that the issue is that  since the type is unknown, what easy-peasy uses to map state and actions doesn't know what to do with it. This appears to be backed up the fact that if I remove the generic and use something like number, it works fine. Anyways, I get the following error:\n\n    Property 'api_request' does not exist on type 'ActionMapper&lt;Pick&lt;{ [P in \"error\" | \"api_request\" | \"onStart\" | (\"status\" &amp; { 1: \"data\"; 0: never; }[Extends&lt;T | null, object&gt;]) | (\"data\" &amp; { 1: \"data\"; 0: never; }[Extends&lt;T | null, object&gt;]) | (\"error\" &amp; { ...; }[Extends&lt;...&gt;]) | (\"api_request\" &amp; { ...; }[Extends&lt;...&gt;]) | (\"onStart\" &amp; { ...; }[Extends&lt;...&gt;])]: Re...'.ts(233\n\nVSCode shows the shape of actions as:\n\n    (parameter) actions: ActionMapper&lt;Pick&lt;{ [P in \"error\" | \"api_request\" | \"onStart\" | (\"status\" &amp; {\n        1: \"data\";\n        0: never;\n    }[Extends&lt;T | null, object&gt;]) | (\"data\" &amp; {\n        1: \"data\";\n        0: never;\n    }[Extends&lt;T | null, object&gt;]) | (\"error\" &amp; {\n        ...;\n    }[Extends&lt;...&gt;]) | (\"api_request\" &amp; {\n        ...;\n    }[Extends&lt;...&gt;]) | (\"onStart\" &amp; {\n        ...;\n    }[Extends&lt;...&gt;])]: RequestModel&lt;...&gt;[P]; }, FilterKeys&lt;...&gt;&gt;, \"1\"&gt;\n\nThe following is easy-peasy's action mapper, which is unfortunately gibberish to me.\n\n    type ActionMapper&lt;ActionsModel extends object, Depth extends string&gt; = {\n      [P in keyof ActionsModel]: ActionsModel[P] extends Action&lt;any, any&gt;\n        ? ActionCreator&lt;ActionsModel[P]['payload']&gt;\n        : ActionsModel[P] extends Thunk&lt;any, any, any, any, any&gt;\n        ? ActionsModel[P]['payload'] extends void\n          ? ThunkCreator&lt;void, ActionsModel[P]['result']&gt;\n          : ThunkCreator&lt;ActionsModel[P]['payload'], ActionsModel[P]['result']&gt;\n        : ActionsModel[P] extends object\n        ? RecursiveActions&lt;\n            ActionsModel[P],\n            Depth extends '1'\n              ? '2'\n              : Depth extends '2'\n              ? '3'\n              : Depth extends '3'\n              ? '4'\n              : Depth extends '4'\n              ? '5'\n              : '6'\n          &gt;\n        : unknown;\n    };\n    \n    type RecursiveActions&lt;\n      Model extends object,\n      Depth extends string\n    &gt; = Depth extends '6'\n      ? Model\n      : ActionMapper&lt;\n          O.Filter&lt;\n            O.Select&lt;Model, object&gt;,\n            | Array&lt;any&gt;\n            | RegExp\n            | Date\n            | string\n            | Reducer&lt;any, any&gt;\n            | Computed&lt;any, any, any&gt;\n            | ActionOn&lt;any, any&gt;\n            | ThunkOn&lt;any, any, any&gt;\n          &gt;,\n          Depth\n        &gt;;\n\nI am completely stuck on what to do here to get around this and would really appreciate it if someone could help me out. Thanks.", "author_fullname": "t2_i6ghc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Request] Fairly new to TS, need help with a problem involving generics", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emrryl", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1578672914.0, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578695903.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;EDIT: If the formatting is messed up, here is a paste of JUST the code: &lt;a href=\"https://paste.ofcode.org/MqUSEq5cyyUgX9wHednJkm\"&gt;https://paste.ofcode.org/MqUSEq5cyyUgX9wHednJkm&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I am using the library easy-peasy for a project at work. Most of my requests follow a similar form (data, status, a thunk to call the api, and listeners to update status based on the thunk), so in js, I used a function to generate most of it. I am trying to convert this to typescript now, but I am having issues. My code looks like this (some additional properties omitted until I figure out my problem):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import { actionOn, ActionOn, Thunk, thunk, TargetResolver, ActionTypes } from &amp;#39;easy-peasy&amp;#39;;\nimport RequestState from &amp;#39;utils/request_states&amp;#39;;\nimport { StoreModel } from &amp;#39;store/store_root&amp;#39;;\nimport RequestResponses, {PickResponse, Stub} from &amp;#39;interfaces/request_responses&amp;#39;;\n\n\n interface RequestModel&amp;lt;T&amp;gt;{\n    status: RequestState;\n    data: T | null;\n    error: null | Error;\n    api_request: Thunk&amp;lt;RequestModel&amp;lt;T&amp;gt;, any, any, StoreModel, Promise&amp;lt;Stub&amp;gt;&amp;gt;;\n    onStart: ActionOn&amp;lt;RequestModel&amp;lt;T&amp;gt;, StoreModel&amp;gt;\n  };\n\n\nexport function StandardRequestGenerator&amp;lt;T&amp;gt;(init: T, api_req: any): RequestModel&amp;lt;T&amp;gt; {\n    return {\n        status: RequestState.VOID,\n        data: init,\n        error: null,\n        api_request: thunk(async (actions, payloads, helpers) =&amp;gt; {\n\n            return api_req;\n        }),\n        onStart: actionOn(\n            (actions) =&amp;gt; {\n        return actions.api_request.startType;\n      }\n            (state) =&amp;gt; {\n                state.status = RequestState.LOADING;\n            }\n        )\n    };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The idea being that the generic would be the type of the data returned from the API request. I think that the issue is that  since the type is unknown, what easy-peasy uses to map state and actions doesn&amp;#39;t know what to do with it. This appears to be backed up the fact that if I remove the generic and use something like number, it works fine. Anyways, I get the following error:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Property &amp;#39;api_request&amp;#39; does not exist on type &amp;#39;ActionMapper&amp;lt;Pick&amp;lt;{ [P in &amp;quot;error&amp;quot; | &amp;quot;api_request&amp;quot; | &amp;quot;onStart&amp;quot; | (&amp;quot;status&amp;quot; &amp;amp; { 1: &amp;quot;data&amp;quot;; 0: never; }[Extends&amp;lt;T | null, object&amp;gt;]) | (&amp;quot;data&amp;quot; &amp;amp; { 1: &amp;quot;data&amp;quot;; 0: never; }[Extends&amp;lt;T | null, object&amp;gt;]) | (&amp;quot;error&amp;quot; &amp;amp; { ...; }[Extends&amp;lt;...&amp;gt;]) | (&amp;quot;api_request&amp;quot; &amp;amp; { ...; }[Extends&amp;lt;...&amp;gt;]) | (&amp;quot;onStart&amp;quot; &amp;amp; { ...; }[Extends&amp;lt;...&amp;gt;])]: Re...&amp;#39;.ts(233\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;VSCode shows the shape of actions as:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;(parameter) actions: ActionMapper&amp;lt;Pick&amp;lt;{ [P in &amp;quot;error&amp;quot; | &amp;quot;api_request&amp;quot; | &amp;quot;onStart&amp;quot; | (&amp;quot;status&amp;quot; &amp;amp; {\n    1: &amp;quot;data&amp;quot;;\n    0: never;\n}[Extends&amp;lt;T | null, object&amp;gt;]) | (&amp;quot;data&amp;quot; &amp;amp; {\n    1: &amp;quot;data&amp;quot;;\n    0: never;\n}[Extends&amp;lt;T | null, object&amp;gt;]) | (&amp;quot;error&amp;quot; &amp;amp; {\n    ...;\n}[Extends&amp;lt;...&amp;gt;]) | (&amp;quot;api_request&amp;quot; &amp;amp; {\n    ...;\n}[Extends&amp;lt;...&amp;gt;]) | (&amp;quot;onStart&amp;quot; &amp;amp; {\n    ...;\n}[Extends&amp;lt;...&amp;gt;])]: RequestModel&amp;lt;...&amp;gt;[P]; }, FilterKeys&amp;lt;...&amp;gt;&amp;gt;, &amp;quot;1&amp;quot;&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The following is easy-peasy&amp;#39;s action mapper, which is unfortunately gibberish to me.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type ActionMapper&amp;lt;ActionsModel extends object, Depth extends string&amp;gt; = {\n  [P in keyof ActionsModel]: ActionsModel[P] extends Action&amp;lt;any, any&amp;gt;\n    ? ActionCreator&amp;lt;ActionsModel[P][&amp;#39;payload&amp;#39;]&amp;gt;\n    : ActionsModel[P] extends Thunk&amp;lt;any, any, any, any, any&amp;gt;\n    ? ActionsModel[P][&amp;#39;payload&amp;#39;] extends void\n      ? ThunkCreator&amp;lt;void, ActionsModel[P][&amp;#39;result&amp;#39;]&amp;gt;\n      : ThunkCreator&amp;lt;ActionsModel[P][&amp;#39;payload&amp;#39;], ActionsModel[P][&amp;#39;result&amp;#39;]&amp;gt;\n    : ActionsModel[P] extends object\n    ? RecursiveActions&amp;lt;\n        ActionsModel[P],\n        Depth extends &amp;#39;1&amp;#39;\n          ? &amp;#39;2&amp;#39;\n          : Depth extends &amp;#39;2&amp;#39;\n          ? &amp;#39;3&amp;#39;\n          : Depth extends &amp;#39;3&amp;#39;\n          ? &amp;#39;4&amp;#39;\n          : Depth extends &amp;#39;4&amp;#39;\n          ? &amp;#39;5&amp;#39;\n          : &amp;#39;6&amp;#39;\n      &amp;gt;\n    : unknown;\n};\n\ntype RecursiveActions&amp;lt;\n  Model extends object,\n  Depth extends string\n&amp;gt; = Depth extends &amp;#39;6&amp;#39;\n  ? Model\n  : ActionMapper&amp;lt;\n      O.Filter&amp;lt;\n        O.Select&amp;lt;Model, object&amp;gt;,\n        | Array&amp;lt;any&amp;gt;\n        | RegExp\n        | Date\n        | string\n        | Reducer&amp;lt;any, any&amp;gt;\n        | Computed&amp;lt;any, any, any&amp;gt;\n        | ActionOn&amp;lt;any, any&amp;gt;\n        | ThunkOn&amp;lt;any, any, any&amp;gt;\n      &amp;gt;,\n      Depth\n    &amp;gt;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I am completely stuck on what to do here to get around this and would really appreciate it if someone could help me out. Thanks.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emrryl", "is_robot_indexable": true, "report_reasons": null, "author": "foe_to", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emrryl/request_fairly_new_to_ts_need_help_with_a_problem/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/emrryl/request_fairly_new_to_ts_need_help_with_a_problem/", "subreddit_subscribers": 30130, "created_utc": 1578667103.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_emrryl", "before": null}}