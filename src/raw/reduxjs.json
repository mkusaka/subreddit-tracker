{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_8c9xw2qv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "pain free form validator that does not stand in your way", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j4wszk", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1601835944.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/euvoor/form", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j4wszk", "is_robot_indexable": true, "report_reasons": null, "author": "euvoor-dev", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/j4wszk/pain_free_form_validator_that_does_not_stand_in/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/euvoor/form", "subreddit_subscribers": 3687, "created_utc": 1601807144.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "    export const fetchPost = () =&gt;async (dispatch) =&gt;{\n    const resp = await jsonPlaceholder.get('/posts');\n    \u00a0 \u00a0 dispatch({type:'FETCH_POST',payload:resp.data})\n    }", "author_fullname": "t2_53c594hv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why does async action creator in redux-thunk dispatches an action with payload rather than just returning returning an action object with payload ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iysrov", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600961789.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;export const fetchPost = () =&amp;gt;async (dispatch) =&amp;gt;{\nconst resp = await jsonPlaceholder.get(&amp;#39;/posts&amp;#39;);\n\u00a0 \u00a0 dispatch({type:&amp;#39;FETCH_POST&amp;#39;,payload:resp.data})\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iysrov", "is_robot_indexable": true, "report_reasons": null, "author": "dumbstrucker", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/iysrov/why_does_async_action_creator_in_reduxthunk/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/iysrov/why_does_async_action_creator_in_reduxthunk/", "subreddit_subscribers": 3687, "created_utc": 1600932989.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I am new to redux and really need some resources on learning dynamic injection of reducers and sagas. I saw a few articles but I didn't understand anything. Please help! Thank you.", "author_fullname": "t2_tn9xqzn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Dynamically injecting reducers and sagas", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iy5wuz", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600876515.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am new to redux and really need some resources on learning dynamic injection of reducers and sagas. I saw a few articles but I didn&amp;#39;t understand anything. Please help! Thank you.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iy5wuz", "is_robot_indexable": true, "report_reasons": null, "author": "hd3adpool", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/iy5wuz/dynamically_injecting_reducers_and_sagas/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/iy5wuz/dynamically_injecting_reducers_and_sagas/", "subreddit_subscribers": 3687, "created_utc": 1600847715.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_5ufblgaq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "React Native With Redux In Expo", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iuhd55", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/MiJayg1eZvk?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "React Native With Redux In Expo", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/MiJayg1eZvk?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "codingwithshreya", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/MiJayg1eZvk/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UC9uyhh7gmhZqs1vvYyNReaQ"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/MiJayg1eZvk?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/iuhd55", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1600369829.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=MiJayg1eZvk&amp;feature=share", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iuhd55", "is_robot_indexable": true, "report_reasons": null, "author": "codingwithshreya", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/iuhd55/react_native_with_redux_in_expo/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=MiJayg1eZvk&amp;feature=share", "subreddit_subscribers": 3687, "created_utc": 1600341029.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "React Native With Redux In Expo", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/MiJayg1eZvk?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "codingwithshreya", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/MiJayg1eZvk/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UC9uyhh7gmhZqs1vvYyNReaQ"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_dvss8mq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Visualize The Power Of Redux and Memoization In React", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iu3z0v", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.78, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/KypVn6vGFWg?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"oembed": {"provider_url": "https://www.youtube.com/", "title": "Visualize The Power Of Redux and Memoization In React", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/KypVn6vGFWg?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "height": 338, "width": 600, "version": "1.0", "author_name": "Nathan Foster", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/KypVn6vGFWg/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/NathanHughFoster"}, "type": "youtube.com"}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/KypVn6vGFWg?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/iu3z0v", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1600316985.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=KypVn6vGFWg&amp;feature=share", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iu3z0v", "is_robot_indexable": true, "report_reasons": null, "author": "strap8", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/iu3z0v/visualize_the_power_of_redux_and_memoization_in/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=KypVn6vGFWg&amp;feature=share", "subreddit_subscribers": 3687, "created_utc": 1600288185.0, "num_crossposts": 0, "media": {"oembed": {"provider_url": "https://www.youtube.com/", "title": "Visualize The Power Of Redux and Memoization In React", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/KypVn6vGFWg?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "height": 338, "width": 600, "version": "1.0", "author_name": "Nathan Foster", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/KypVn6vGFWg/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/NathanHughFoster"}, "type": "youtube.com"}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_7wokxlle", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Advanced Express JS REST API [#1] Introduction | Building REST API Node JS | Full Course - Please subscribe", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_itgx6u", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.63, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fvideoseries%3Flist%3DPLs1waz0ZKTGO7agN0cntpe6ro6TIka0ow%26start%3D0&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCLdkGgv9Miw&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FCLdkGgv9Miw%2Fhqdefault.jpg&amp;key=ed8fa8699ce04833838e66ce79ba05f1&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"oembed": {"provider_url": "https://www.youtube.com/", "description": "In this episode I'm introducing you this upcoming series about developing advanced Express JS REST APIs. We will implement JWT authentication, refresh Tokens...", "title": "Advanced Express JS REST API [#1] Introduction | Building REST API Node JS | Full Course", "url": "https://www.youtube.com/watch?v=CLdkGgv9Miw", "author_name": "Fullstack Programmer", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fvideoseries%3Flist%3DPLs1waz0ZKTGO7agN0cntpe6ro6TIka0ow%26start%3D0&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCLdkGgv9Miw&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FCLdkGgv9Miw%2Fhqdefault.jpg&amp;key=ed8fa8699ce04833838e66ce79ba05f1&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/CLdkGgv9Miw/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCwxudOFLBo3nG_6cziCD76w"}, "type": "m.youtube.com"}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fvideoseries%3Flist%3DPLs1waz0ZKTGO7agN0cntpe6ro6TIka0ow%26start%3D0&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCLdkGgv9Miw&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FCLdkGgv9Miw%2Fhqdefault.jpg&amp;key=ed8fa8699ce04833838e66ce79ba05f1&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/itgx6u", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1600230334.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "m.youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://m.youtube.com/watch?v=CLdkGgv9Miw&amp;list=PLs1waz0ZKTGO7agN0cntpe6ro6TIka0ow&amp;index=2&amp;t=0s", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "itgx6u", "is_robot_indexable": true, "report_reasons": null, "author": "honorman1", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/itgx6u/advanced_express_js_rest_api_1_introduction/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://m.youtube.com/watch?v=CLdkGgv9Miw&amp;list=PLs1waz0ZKTGO7agN0cntpe6ro6TIka0ow&amp;index=2&amp;t=0s", "subreddit_subscribers": 3687, "created_utc": 1600201534.0, "num_crossposts": 0, "media": {"oembed": {"provider_url": "https://www.youtube.com/", "description": "In this episode I'm introducing you this upcoming series about developing advanced Express JS REST APIs. We will implement JWT authentication, refresh Tokens...", "title": "Advanced Express JS REST API [#1] Introduction | Building REST API Node JS | Full Course", "url": "https://www.youtube.com/watch?v=CLdkGgv9Miw", "author_name": "Fullstack Programmer", "height": 338, "width": 600, "html": "&lt;iframe class=\"embedly-embed\" src=\"https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.youtube.com%2Fembed%2Fvideoseries%3Flist%3DPLs1waz0ZKTGO7agN0cntpe6ro6TIka0ow%26start%3D0&amp;display_name=YouTube&amp;url=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DCLdkGgv9Miw&amp;image=https%3A%2F%2Fi.ytimg.com%2Fvi%2FCLdkGgv9Miw%2Fhqdefault.jpg&amp;key=ed8fa8699ce04833838e66ce79ba05f1&amp;type=text%2Fhtml&amp;schema=youtube\" width=\"600\" height=\"338\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "version": "1.0", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/CLdkGgv9Miw/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCwxudOFLBo3nG_6cziCD76w"}, "type": "m.youtube.com"}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I like to have my redux state slices small and focused on specific parts of the interface.\n\nBut at the same time, I am feeling a growing resistance from the library to splitting the state, because some slice reducers end up wanting information from other slices of the state in order to decide how to update their portion of the state.\n\nI've examined the [docs](https://redux.js.org/recipes/structuring-reducers/beyond-combinereducers#sharing-data-between-slice-reducers) to see what they advise. The first suggestion (passing parent state as the third argument) [does not seem to be supported by the typescript definitions](https://github.com/reduxjs/redux/pull/3465). The second suggestion \u2014 just use thunks \u2014 is something I am currently doing, but this both feels like a hack (thunks were intended to handle async code; that's why they are called thunks, or long-running computations), and ruins most of the elegance of redux-toolkit.\n\nWhat has your experience been? How large are your state slices? Do you often need to look up data from other slices? How do you manage this?", "author_fullname": "t2_dkk2r", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What's your approach to the size of redux state slices?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iswhn1", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1600129429.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600153816.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I like to have my redux state slices small and focused on specific parts of the interface.&lt;/p&gt;\n\n&lt;p&gt;But at the same time, I am feeling a growing resistance from the library to splitting the state, because some slice reducers end up wanting information from other slices of the state in order to decide how to update their portion of the state.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve examined the &lt;a href=\"https://redux.js.org/recipes/structuring-reducers/beyond-combinereducers#sharing-data-between-slice-reducers\"&gt;docs&lt;/a&gt; to see what they advise. The first suggestion (passing parent state as the third argument) &lt;a href=\"https://github.com/reduxjs/redux/pull/3465\"&gt;does not seem to be supported by the typescript definitions&lt;/a&gt;. The second suggestion \u2014 just use thunks \u2014 is something I am currently doing, but this both feels like a hack (thunks were intended to handle async code; that&amp;#39;s why they are called thunks, or long-running computations), and ruins most of the elegance of redux-toolkit.&lt;/p&gt;\n\n&lt;p&gt;What has your experience been? How large are your state slices? Do you often need to look up data from other slices? How do you manage this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iswhn1", "is_robot_indexable": true, "report_reasons": null, "author": "azangru", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/iswhn1/whats_your_approach_to_the_size_of_redux_state/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/iswhn1/whats_your_approach_to_the_size_of_redux_state/", "subreddit_subscribers": 3687, "created_utc": 1600125016.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "**My Goal:**\n\nI'm trying to sign up a user for the first time after setting up the \\`required attributes\\` in the AWS Amplify/Cognito console. However, I'm getting an error (See Below) when trying to add attributes when using `Auth.signUp` when using Redux Saga. The docs state that it can be done (See Below), but I think I'm missing some sort of syntax with Redux Saga.\n\n&amp;#x200B;\n\n**What I've tried:**\n\nI'm passing all of the attributes in `yield call([Auth, 'signUp'], email, password, email, phone_number, given_name, family_name, updated_at);`, but the error is still coming up.\n\nIs this the correct way to pass the attributes in the saga or does it need to be passed in an attributes object??\n\n&amp;#x200B;\n\n**AWS Amplify Console:**\n\nhttps://preview.redd.it/gs1yb9r8h8n51.png?width=1376&amp;format=png&amp;auto=webp&amp;s=bfb1d1b6a0dd874ddc8015a1fec95821b2f548c1\n\n**Error:**\n\n    Attributes did not conform to the schema:\n    given_name: The attribute is required.\n    family_name: The attribute is required.\n    updated_at: The attribute is required.\n\n&amp;#x200B;\n\n**The AWS Amplify Docs:**\n\nLink: [https://docs.amplify.aws/lib/auth/emailpassword/q/platform/js#sign-up](https://docs.amplify.aws/lib/auth/emailpassword/q/platform/js#sign-up)\n\n**The docs state that it can be done such as the following**, but I can't get the saga to work by passing the each attribute or also trying to pass an attributes object with each attribute as the key/values.\n\n    async function signUp() {\n        try {\n            const { user } = await Auth.signUp({\n                username,\n                password,\n                attributes: {\n                    email,          // optional\n                    phone_number,   // optional - E.164 number convention\n                    // other custom attributes \n                }\n            });\n            console.log(user);\n        } catch (error) {\n            console.log('error signing up:', error);\n        }\n    }\n\n&amp;#x200B;\n\n**Redux Saga (Sign Up):**\n\n&amp;#x200B;\n\n          try {\n            // Credentials\n            const { email, password, given_name, family_name } : Credentials = action.credentials;\n            let { phone_number } : Credentials = action.credentials;\n        \n            // Updated At\n            const updatedAt: Date = new Date();\n        \n            // Format Phone Number For AWS To E.164 Standard ('(949) 123-4567' To '+19491234567890')\n            // Remove Characters From Phone Number\n            phone_number = phone_number.replace(/\\D/g,'');\n        \n            // Add +1 To Beginning To Phone Number\n            phone_number = ('+1').concat(phone_number);\n        \n            // AWS: Sign Up\n            yield call([Auth, 'signUp'], email, password, email, phone_number, given_name, family_name, updated_at);\n        \n            // Redux: Sign Up Success\n            yield put(signUpSuccess());\n        \n            // React Navigation: Sign Up Confirm\n            yield ReactNavigation.navigate('Sign Up Confirm');\n          }", "author_fullname": "t2_cdjg8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "AWS Amplify + Redux Saga: Adding Amazon Cognito Attributes on Auth.signUp?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "media_metadata": {"gs1yb9r8h8n51": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 57, "x": 108, "u": "https://preview.redd.it/gs1yb9r8h8n51.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=482284c371bf4a89977a6de4fff2d41765a6b071"}, {"y": 115, "x": 216, "u": "https://preview.redd.it/gs1yb9r8h8n51.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=1bf0b2c37e9dfaef9b02cc7185771dbcaf60891d"}, {"y": 170, "x": 320, "u": "https://preview.redd.it/gs1yb9r8h8n51.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=9427f7fde35679d173ef6a2e1cea958b3773f624"}, {"y": 341, "x": 640, "u": "https://preview.redd.it/gs1yb9r8h8n51.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=e488bfea4d1b89251a7d87163b7a723497dc68f7"}, {"y": 512, "x": 960, "u": "https://preview.redd.it/gs1yb9r8h8n51.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=d38b866a91c12ff64677ee8081d2b184e0ded95e"}, {"y": 576, "x": 1080, "u": "https://preview.redd.it/gs1yb9r8h8n51.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=5c24cbc929444c5a2a467e1a9f334e995a9620ec"}], "s": {"y": 734, "x": 1376, "u": "https://preview.redd.it/gs1yb9r8h8n51.png?width=1376&amp;format=png&amp;auto=webp&amp;s=bfb1d1b6a0dd874ddc8015a1fec95821b2f548c1"}, "id": "gs1yb9r8h8n51"}}, "name": "t3_it14y6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600170639.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;My Goal:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m trying to sign up a user for the first time after setting up the `required attributes` in the AWS Amplify/Cognito console. However, I&amp;#39;m getting an error (See Below) when trying to add attributes when using &lt;code&gt;Auth.signUp&lt;/code&gt; when using Redux Saga. The docs state that it can be done (See Below), but I think I&amp;#39;m missing some sort of syntax with Redux Saga.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What I&amp;#39;ve tried:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m passing all of the attributes in &lt;code&gt;yield call([Auth, &amp;#39;signUp&amp;#39;], email, password, email, phone_number, given_name, family_name, updated_at);&lt;/code&gt;, but the error is still coming up.&lt;/p&gt;\n\n&lt;p&gt;Is this the correct way to pass the attributes in the saga or does it need to be passed in an attributes object??&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;AWS Amplify Console:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/gs1yb9r8h8n51.png?width=1376&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=bfb1d1b6a0dd874ddc8015a1fec95821b2f548c1\"&gt;https://preview.redd.it/gs1yb9r8h8n51.png?width=1376&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=bfb1d1b6a0dd874ddc8015a1fec95821b2f548c1&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Error:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Attributes did not conform to the schema:\ngiven_name: The attribute is required.\nfamily_name: The attribute is required.\nupdated_at: The attribute is required.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The AWS Amplify Docs:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Link: &lt;a href=\"https://docs.amplify.aws/lib/auth/emailpassword/q/platform/js#sign-up\"&gt;https://docs.amplify.aws/lib/auth/emailpassword/q/platform/js#sign-up&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;The docs state that it can be done such as the following&lt;/strong&gt;, but I can&amp;#39;t get the saga to work by passing the each attribute or also trying to pass an attributes object with each attribute as the key/values.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;async function signUp() {\n    try {\n        const { user } = await Auth.signUp({\n            username,\n            password,\n            attributes: {\n                email,          // optional\n                phone_number,   // optional - E.164 number convention\n                // other custom attributes \n            }\n        });\n        console.log(user);\n    } catch (error) {\n        console.log(&amp;#39;error signing up:&amp;#39;, error);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Redux Saga (Sign Up):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;      try {\n        // Credentials\n        const { email, password, given_name, family_name } : Credentials = action.credentials;\n        let { phone_number } : Credentials = action.credentials;\n\n        // Updated At\n        const updatedAt: Date = new Date();\n\n        // Format Phone Number For AWS To E.164 Standard (&amp;#39;(949) 123-4567&amp;#39; To &amp;#39;+19491234567890&amp;#39;)\n        // Remove Characters From Phone Number\n        phone_number = phone_number.replace(/\\D/g,&amp;#39;&amp;#39;);\n\n        // Add +1 To Beginning To Phone Number\n        phone_number = (&amp;#39;+1&amp;#39;).concat(phone_number);\n\n        // AWS: Sign Up\n        yield call([Auth, &amp;#39;signUp&amp;#39;], email, password, email, phone_number, given_name, family_name, updated_at);\n\n        // Redux: Sign Up Success\n        yield put(signUpSuccess());\n\n        // React Navigation: Sign Up Confirm\n        yield ReactNavigation.navigate(&amp;#39;Sign Up Confirm&amp;#39;);\n      }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "it14y6", "is_robot_indexable": true, "report_reasons": null, "author": "Jeffylew77", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/it14y6/aws_amplify_redux_saga_adding_amazon_cognito/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/it14y6/aws_amplify_redux_saga_adding_amazon_cognito/", "subreddit_subscribers": 3687, "created_utc": 1600141839.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I am trying to use some data that will come from my `useSelector()` hook in a network API call. However, with the code below, I get the error `TypeError: cannot read property 'query' of undefined.`\n\nI understand this is because the query has not come back from the `useSelector()` yet. Is there a way I can wait for that data THEN call the API?\n\n&amp;#x200B;\n\n`const pageContent = useSelector(getPageContent);`  \n  `useEffect(() =&gt; {`  \n `axios`  \n `.get('https://www.googleapis.com/youtube/v3/search', {`  \n `params: {`  \n `key: process.env.API_KEY,`  \n `part: 'snippet',`  \n `type: 'video',`  \n `q: pageContent.data.query,`  \n `},`  \n `})`  \n `.then((res) =&gt; res)`  \n `.then((data) =&gt; console.log(data));`  \n `}, []);`", "author_fullname": "t2_2dpdq4m", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How can I run an API call AFTER the results from my useSelector() hook?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iry4g4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600031928.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am trying to use some data that will come from my &lt;code&gt;useSelector()&lt;/code&gt; hook in a network API call. However, with the code below, I get the error &lt;code&gt;TypeError: cannot read property &amp;#39;query&amp;#39; of undefined.&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I understand this is because the query has not come back from the &lt;code&gt;useSelector()&lt;/code&gt; yet. Is there a way I can wait for that data THEN call the API?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const pageContent = useSelector(getPageContent);&lt;/code&gt;&lt;br/&gt;\n  &lt;code&gt;useEffect(() =&amp;gt; {&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;axios&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;.get(&amp;#39;https://www.googleapis.com/youtube/v3/search&amp;#39;, {&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;params: {&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;key: process.env.API_KEY,&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;part: &amp;#39;snippet&amp;#39;,&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;type: &amp;#39;video&amp;#39;,&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;q: pageContent.data.query,&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;},&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;})&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;.then((res) =&amp;gt; res)&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;.then((data) =&amp;gt; console.log(data));&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;}, []);&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iry4g4", "is_robot_indexable": true, "report_reasons": null, "author": "rjshoemaker55", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/iry4g4/how_can_i_run_an_api_call_after_the_results_from/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/iry4g4/how_can_i_run_an_api_call_after_the_results_from/", "subreddit_subscribers": 3687, "created_utc": 1600003128.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I am developing an app for recording and editing paths on a map. These paths can be large (up to 20000 {x, y} points), and they can be edited by dragging these points and applying automatic pathfinding. Custom info can be attached to any point, and the sidebar computes some statistics on the fly. While I don't need to show all the points simultaneously, the user should be able to view and edit at least 1000-2000 at the same time.\n\nMy code for working with just one path currently looks like this (greatly simplified):\n\n    function pathDataReducer(pathData, action) {\n        switch(action.type) {\n            case 'ADD_POINT':\n            case' EDIT_POINT':\n                return {...pathData, [action.payload.id]: action.payload};\n            case 'DELETE_POINT':\n                return deleteKeyImmutably(pathData, action.payload.id);            \n        }\n        return pathData;\n    }\n\n    function pathPointIds(ids, action) {\n        switch(action.type) {\n            case 'ADD_POINT': return [...ids, action.payload.id];\n            case 'DELETE_POINT': return ids.filter(id =&gt; id !== action.payload.id);\n        }\n        return ids;\n    }\n\n    const getPoints = createSelector(\n        [state =&gt; state.pathPointIds, state =&gt; state.pathData],\n        (ids, data) =&gt; ids.map(id =&gt; data[id])\n    );\n\n    funtion Point({x, y}) {\n        return &lt;Circle x={x} y={y} /&gt;;\n    }\n\n    function Path() {\n        const points = useSelector(getPoints);\n        return points.map(point =&gt; &lt;Point key={point.id} x={point.x} y={point.y} /&gt;);\n    }\n\nAnd the app is pretty much unusable. Adding or moving any point (via EDIT_POINT action) causes the whole `Path` to be re-rendered. This, in turn, causes 2000 virtualDOM comparisons (or an equivalent amount of prop checks, when using `React.memo`), which causes a 0.5-1 second lag. It seems impossible to achieve a smooth dragging experience (moving just the DOM node directly is not enough, because the point may also affect its neighbors - so the dragging should affect the data in Redux store).\n\nI tried using MobX as an alternative, which gave acceptable performance out of the box, but it has another problem. MobX expects a deeply nested object graph (as opposed to normalized Redux store), and discourages referencing object fields directly. This is an issue for me, because I need to compute a lot of different statistics for paths, and working with denormalized data is a hassle.\n\nI fell like an ideal solution would be a normalized Redux-like store, but without immutability, so that I could reasonably mutate just one object in a huge array and automatically subscribe to its updates. But I don't know of a popular battle-tested library that achieves this.\n\nIs there a way to achieve acceptable performance using Redux in my case? Or is there an alternative state management solution suitable for working with large datasets?\n\nAny help is appreciated!", "author_fullname": "t2_sss3a", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Using Redux with very large flat arrays", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_irzdsw", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600036759.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am developing an app for recording and editing paths on a map. These paths can be large (up to 20000 {x, y} points), and they can be edited by dragging these points and applying automatic pathfinding. Custom info can be attached to any point, and the sidebar computes some statistics on the fly. While I don&amp;#39;t need to show all the points simultaneously, the user should be able to view and edit at least 1000-2000 at the same time.&lt;/p&gt;\n\n&lt;p&gt;My code for working with just one path currently looks like this (greatly simplified):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function pathDataReducer(pathData, action) {\n    switch(action.type) {\n        case &amp;#39;ADD_POINT&amp;#39;:\n        case&amp;#39; EDIT_POINT&amp;#39;:\n            return {...pathData, [action.payload.id]: action.payload};\n        case &amp;#39;DELETE_POINT&amp;#39;:\n            return deleteKeyImmutably(pathData, action.payload.id);            \n    }\n    return pathData;\n}\n\nfunction pathPointIds(ids, action) {\n    switch(action.type) {\n        case &amp;#39;ADD_POINT&amp;#39;: return [...ids, action.payload.id];\n        case &amp;#39;DELETE_POINT&amp;#39;: return ids.filter(id =&amp;gt; id !== action.payload.id);\n    }\n    return ids;\n}\n\nconst getPoints = createSelector(\n    [state =&amp;gt; state.pathPointIds, state =&amp;gt; state.pathData],\n    (ids, data) =&amp;gt; ids.map(id =&amp;gt; data[id])\n);\n\nfuntion Point({x, y}) {\n    return &amp;lt;Circle x={x} y={y} /&amp;gt;;\n}\n\nfunction Path() {\n    const points = useSelector(getPoints);\n    return points.map(point =&amp;gt; &amp;lt;Point key={point.id} x={point.x} y={point.y} /&amp;gt;);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And the app is pretty much unusable. Adding or moving any point (via EDIT_POINT action) causes the whole &lt;code&gt;Path&lt;/code&gt; to be re-rendered. This, in turn, causes 2000 virtualDOM comparisons (or an equivalent amount of prop checks, when using &lt;code&gt;React.memo&lt;/code&gt;), which causes a 0.5-1 second lag. It seems impossible to achieve a smooth dragging experience (moving just the DOM node directly is not enough, because the point may also affect its neighbors - so the dragging should affect the data in Redux store).&lt;/p&gt;\n\n&lt;p&gt;I tried using MobX as an alternative, which gave acceptable performance out of the box, but it has another problem. MobX expects a deeply nested object graph (as opposed to normalized Redux store), and discourages referencing object fields directly. This is an issue for me, because I need to compute a lot of different statistics for paths, and working with denormalized data is a hassle.&lt;/p&gt;\n\n&lt;p&gt;I fell like an ideal solution would be a normalized Redux-like store, but without immutability, so that I could reasonably mutate just one object in a huge array and automatically subscribe to its updates. But I don&amp;#39;t know of a popular battle-tested library that achieves this.&lt;/p&gt;\n\n&lt;p&gt;Is there a way to achieve acceptable performance using Redux in my case? Or is there an alternative state management solution suitable for working with large datasets?&lt;/p&gt;\n\n&lt;p&gt;Any help is appreciated!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "irzdsw", "is_robot_indexable": true, "report_reasons": null, "author": "smthamazing", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/irzdsw/using_redux_with_very_large_flat_arrays/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/irzdsw/using_redux_with_very_large_flat_arrays/", "subreddit_subscribers": 3687, "created_utc": 1600007959.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_irzdsw", "before": null}}