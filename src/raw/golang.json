{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I've started this project to learn GO and to learn how web browsers work.\n\nhttps://preview.redd.it/rnf59t1ktfw41.png?width=614&amp;format=png&amp;auto=webp&amp;s=0641365d5fdcfd349a9d0569a96be4badfa9014d\n\nThis is the project link:\n\n[https://github.com/danfragoso/thdwb](https://github.com/danfragoso/thdwb)\n\nI tried to not use any dependency on this project, and write everything myself.\n\nI wrote the following components:\n\n* ketchup (html parser and DOM Tree builder)\n* mayo (css parser and Render Tree builder)\n* mustard (UI Toolkit, events and OpenGL)\n* sauce (requests, cache and filesystem)\n* bun (css layout calculator)\n\nThe dependencies are:\n\n* [https://github.com/fogleman/gg](https://github.com/fogleman/gg) (fork)\n* [https://github.com/go-gl/gl](https://github.com/go-gl/gl)\n* [https://github.com/go-gl/glfw](https://github.com/go-gl/glfw)\n\nIt builds and runs on Linux and macOS.\n\nIt's is for the most part completely broken. But I would love any kind of feedback and suggestions on the features I should work next.", "author_fullname": "t2_f869x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A (toy) web browser written from scratch entirely in golang", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "media_metadata": {"rnf59t1ktfw41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 122, "x": 108, "u": "https://external-preview.redd.it/rnf59t1ktfw41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=093aee1aad294cc666ab270c91a0afc6527d45de"}, {"y": 244, "x": 216, "u": "https://external-preview.redd.it/rnf59t1ktfw41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=fd405c97fbe7c0410d82c989950dae8828c7218b"}, {"y": 362, "x": 320, "u": "https://external-preview.redd.it/rnf59t1ktfw41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=46867e320a47999492a13400160c04261963fe87"}], "s": {"y": 696, "x": 614, "u": "https://preview.redd.it/rnf59t1ktfw41.png?width=614&amp;format=png&amp;auto=webp&amp;s=0641365d5fdcfd349a9d0569a96be4badfa9014d"}, "id": "rnf59t1ktfw41"}}, "name": "t3_gcge4k", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 161, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 161, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1588465060.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588491530.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve started this project to learn GO and to learn how web browsers work.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/rnf59t1ktfw41.png?width=614&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=0641365d5fdcfd349a9d0569a96be4badfa9014d\"&gt;https://preview.redd.it/rnf59t1ktfw41.png?width=614&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=0641365d5fdcfd349a9d0569a96be4badfa9014d&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is the project link:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/danfragoso/thdwb\"&gt;https://github.com/danfragoso/thdwb&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I tried to not use any dependency on this project, and write everything myself.&lt;/p&gt;\n\n&lt;p&gt;I wrote the following components:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;ketchup (html parser and DOM Tree builder)&lt;/li&gt;\n&lt;li&gt;mayo (css parser and Render Tree builder)&lt;/li&gt;\n&lt;li&gt;mustard (UI Toolkit, events and OpenGL)&lt;/li&gt;\n&lt;li&gt;sauce (requests, cache and filesystem)&lt;/li&gt;\n&lt;li&gt;bun (css layout calculator)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;The dependencies are:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/fogleman/gg\"&gt;https://github.com/fogleman/gg&lt;/a&gt; (fork)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/go-gl/gl\"&gt;https://github.com/go-gl/gl&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/go-gl/glfw\"&gt;https://github.com/go-gl/glfw&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;It builds and runs on Linux and macOS.&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s is for the most part completely broken. But I would love any kind of feedback and suggestions on the features I should work next.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 150, "id": "award_77ba55a2-c33c-4351-ac49-807455a80148", "penny_donate": null, "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png", "days_of_premium": 0, "icon_height": 2048, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=16&amp;height=16&amp;auto=webp&amp;s=7a2f2b927be72d2b46ebd95bab8c072c3be0fbab", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=32&amp;height=32&amp;auto=webp&amp;s=6e42b7095bcc331e53202438613aa827addf70c3", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=48&amp;height=48&amp;auto=webp&amp;s=c740f7ef642fd2042d62c2bcba98734d08dfae6c", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=64&amp;height=64&amp;auto=webp&amp;s=74e630f1072bb2423034ae48aefa241d834d7186", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/trfv6ems1md41_BlessUp.png?width=128&amp;height=128&amp;auto=webp&amp;s=0a89cd8011c8210315ee60441eefd77b973a0c82", "width": 128, "height": 128}], "icon_width": 2048, "start_date": null, "is_enabled": true, "description": "Prayers up for the blessed.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "name": "Bless Up", "icon_format": null, "award_sub_type": "GLOBAL", "penny_price": null, "award_type": "global"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gcge4k", "is_robot_indexable": true, "report_reasons": null, "author": "danfragoso", "discussion_type": null, "num_comments": 36, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gcge4k/a_toy_web_browser_written_from_scratch_entirely/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gcge4k/a_toy_web_browser_written_from_scratch_entirely/", "subreddit_subscribers": 111177, "created_utc": 1588462730.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_146xxl4f", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Beginners Guide to gRPC in Go!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gc9k6s", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "public", "ups": 117, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BdzYdN_Zd9Q?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Beginners Guide to gRPC in Go!", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BdzYdN_Zd9Q?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "TutorialEdge", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/BdzYdN_Zd9Q/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCwFl9Y49sWChrddQTD9QhRA"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BdzYdN_Zd9Q?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/gc9k6s", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 117, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588466721.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtu.be", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gc9k6s", "is_robot_indexable": true, "report_reasons": null, "author": "elliotforbes", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gc9k6s/beginners_guide_to_grpc_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://youtu.be/BdzYdN_Zd9Q", "subreddit_subscribers": 111177, "created_utc": 1588437921.0, "num_crossposts": 1, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Beginners Guide to gRPC in Go!", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BdzYdN_Zd9Q?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "TutorialEdge", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/BdzYdN_Zd9Q/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCwFl9Y49sWChrddQTD9QhRA"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_55ohyji7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Building a REST API with Go Gin - Part 1", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gci9nf", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 21, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/CzxEUDq9xiQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 459, "scrolling": false, "height": 344}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Building a REST API With Go Gin - Part 1", "type": "video", "thumbnail_width": 480, "height": 344, "width": 459, "html": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/CzxEUDq9xiQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Vulcan Technologies", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/CzxEUDq9xiQ/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCNtgPk6KqgKG4n-6nBqyJng"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/CzxEUDq9xiQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 459, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/gci9nf", "height": 344}, "link_flair_text": null, "can_mod_post": false, "score": 21, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588498932.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtu.be", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gci9nf", "is_robot_indexable": true, "report_reasons": null, "author": "vulcantechnologies", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gci9nf/building_a_rest_api_with_go_gin_part_1/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://youtu.be/CzxEUDq9xiQ", "subreddit_subscribers": 111177, "created_utc": 1588470132.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Building a REST API With Go Gin - Part 1", "type": "video", "thumbnail_width": 480, "height": 344, "width": 459, "html": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/CzxEUDq9xiQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Vulcan Technologies", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/CzxEUDq9xiQ/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCNtgPk6KqgKG4n-6nBqyJng"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4hxpx", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A nice simple thread-safe progress bar / spinner (v3)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gc7j0a", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 75, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 75, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588459205.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gc7j0a", "is_robot_indexable": true, "report_reasons": null, "author": "qrv3w", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gc7j0a/a_nice_simple_threadsafe_progress_bar_spinner_v3/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/schollz/progressbar", "subreddit_subscribers": 111177, "created_utc": 1588430405.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_pqnhn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to check whether a struct implements an interface in GoLang", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_gcqhby", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588540849.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "pixelstech.net", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gcqhby", "is_robot_indexable": true, "report_reasons": null, "author": "stackoverflooooooow", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gcqhby/how_to_check_whether_a_struct_implements_an/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.pixelstech.net/article/1588481241-How-to-check-whether-a-struct-implements-an-interface-in-GoLang", "subreddit_subscribers": 111177, "created_utc": 1588512049.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I was struggling with how slow my laptop gets when I run Docker with a lot of microservices, so I built a Docker Compose alternative that runs in the cloud rather than on my local machine. It's called Blimp: [https://kelda.io/blimp/](https://kelda.io/blimp/)\n\n* Written entirely in Go: we took advantage of the recently released [Go Docker-Compose spec](https://github.com/compose-spec/compose-go)\n* Runs on Kubernetes under the hood. I thought we could just use Kompose, but ends up there\u2019s tons of subtle differences between Kube and Docker Compose that aren't captured in the yaml\n* We use an encrypted GRPC tunnel to forward localhost to the cloud environment. It was important to us that it *just worked* without having to change the workflow at all.\n* For most volumes, we just use standard Kube volumes. But for bind mounts [we automatically use Syncthing](https://kelda.io/blimp/docs/compose-diff/#syncthing). Traditional volume mounts don't perform well over the WAN, and aren't necessary anyways.\n\nWould love feedback, what do you think??", "author_fullname": "t2_pbeen", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Blimp: Cloud Docker Compose Written in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gcczf5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588478969.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was struggling with how slow my laptop gets when I run Docker with a lot of microservices, so I built a Docker Compose alternative that runs in the cloud rather than on my local machine. It&amp;#39;s called Blimp: &lt;a href=\"https://kelda.io/blimp/\"&gt;https://kelda.io/blimp/&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Written entirely in Go: we took advantage of the recently released &lt;a href=\"https://github.com/compose-spec/compose-go\"&gt;Go Docker-Compose spec&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Runs on Kubernetes under the hood. I thought we could just use Kompose, but ends up there\u2019s tons of subtle differences between Kube and Docker Compose that aren&amp;#39;t captured in the yaml&lt;/li&gt;\n&lt;li&gt;We use an encrypted GRPC tunnel to forward localhost to the cloud environment. It was important to us that it &lt;em&gt;just worked&lt;/em&gt; without having to change the workflow at all.&lt;/li&gt;\n&lt;li&gt;For most volumes, we just use standard Kube volumes. But for bind mounts &lt;a href=\"https://kelda.io/blimp/docs/compose-diff/#syncthing\"&gt;we automatically use Syncthing&lt;/a&gt;. Traditional volume mounts don&amp;#39;t perform well over the WAN, and aren&amp;#39;t necessary anyways.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Would love feedback, what do you think??&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gcczf5", "is_robot_indexable": true, "report_reasons": null, "author": "EthanJJackson", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gcczf5/blimp_cloud_docker_compose_written_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gcczf5/blimp_cloud_docker_compose_written_in_go/", "subreddit_subscribers": 111177, "created_utc": 1588450169.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_asqbq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "OpenCodenames: a Jackbox-style version of Codenames made with React &amp; Go!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gcbgig", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 18, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 18, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588473543.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gcbgig", "is_robot_indexable": true, "report_reasons": null, "author": "ArtyomR", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gcbgig/opencodenames_a_jackboxstyle_version_of_codenames/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/rodohanna/OpenCodenames", "subreddit_subscribers": 111177, "created_utc": 1588444743.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_5fv3o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Four Steps to Daemonize Your Go Programs", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gcgzwo", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.73, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588493854.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "ieftimov.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gcgzwo", "is_robot_indexable": true, "report_reasons": null, "author": "fteem", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gcgzwo/four_steps_to_daemonize_your_go_programs/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://ieftimov.com/post/daemonizing-golang-programs-by-example/", "subreddit_subscribers": 111177, "created_utc": 1588465054.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am attempting to use ZeroMQ ([https://github.com/pebbe/zmq4](https://github.com/pebbe/zmq4)) within ECS running on Fargate in awsvpc mode. I have 2 different services, each running its own task and service discovery enabled.\n\nI create my Router and Dealer in a microservice called broker.\n\n        front, _ := zmq.NewSocket(zmq.ROUTER)\n        defer front.Close()\n        front.Bind(\"tcp://*:4070\")\n        \n        back, _ := zmq.NewSocket(zmq.DEALER)\n        defer back.Close()\n        back.Bind(\"tcp://*:4080\")\n\nI then add these 2 sockets to a poller and have a for loop that waits for messages. \n\nI have a separate microservice that connects to the socket and attempts to send a message to the dealer. I have set service discovery so I assume the address I connect to would be: \n\n&amp;#x200B;\n\n    &gt; \"tcp://broker:4070\"\n    \n    Below is the code from 'serviceA'\n    \n        func New(ZMQ models.ZMQ) *Requester {\n        \ts, err := zmq.NewSocket(zmq.REQ)\n        \tif err != nil {\n        \t\tlog.Fatalln(\"shareholder/requester zmq.NewSocket\", err)\n        \t}\n        \tp := zmq.NewPoller()\n        \tp.Add(s, zmq.POLLIN)\n        \n        \tlog.Println(\"Requester\", ZMQ.Req)\n        \terr = s.Connect(\"tcp://broker:4070\")\n        \tif err != nil {\n        \t\tlog.Print(fmt.Errorf(\"err is %w\", err))\n        \t}\n        \n        \treq := &amp;Requester{\n        \t\tPoller:  p,\n        \t\tRetries: 2,\n        \t\tSocket:  s,\n        \t\tTimeout: time.Duration(time.Minute),\n        \t}\n        \truntime.SetFinalizer(req, (*Requester).Close)\n        \treturn req\n        }\n\nI then use the above code to send a message with my socket connection\n\n        _, err := r.Socket.SendMessage(req)\n\nHowever, my message is never received within my broker service. I can hit my REST APIs on the network with their hostnames I register during service discovery, is there something I am missing here with Fargate/ECS/ZeroMQ???", "author_fullname": "t2_12624y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Connecting ZMQ microservices within AWS using Fargate", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gcnn6d", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588526291.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am attempting to use ZeroMQ (&lt;a href=\"https://github.com/pebbe/zmq4\"&gt;https://github.com/pebbe/zmq4&lt;/a&gt;) within ECS running on Fargate in awsvpc mode. I have 2 different services, each running its own task and service discovery enabled.&lt;/p&gt;\n\n&lt;p&gt;I create my Router and Dealer in a microservice called broker.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    front, _ := zmq.NewSocket(zmq.ROUTER)\n    defer front.Close()\n    front.Bind(&amp;quot;tcp://*:4070&amp;quot;)\n\n    back, _ := zmq.NewSocket(zmq.DEALER)\n    defer back.Close()\n    back.Bind(&amp;quot;tcp://*:4080&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I then add these 2 sockets to a poller and have a for loop that waits for messages. &lt;/p&gt;\n\n&lt;p&gt;I have a separate microservice that connects to the socket and attempts to send a message to the dealer. I have set service discovery so I assume the address I connect to would be: &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;&amp;gt; &amp;quot;tcp://broker:4070&amp;quot;\n\nBelow is the code from &amp;#39;serviceA&amp;#39;\n\n    func New(ZMQ models.ZMQ) *Requester {\n        s, err := zmq.NewSocket(zmq.REQ)\n        if err != nil {\n            log.Fatalln(&amp;quot;shareholder/requester zmq.NewSocket&amp;quot;, err)\n        }\n        p := zmq.NewPoller()\n        p.Add(s, zmq.POLLIN)\n\n        log.Println(&amp;quot;Requester&amp;quot;, ZMQ.Req)\n        err = s.Connect(&amp;quot;tcp://broker:4070&amp;quot;)\n        if err != nil {\n            log.Print(fmt.Errorf(&amp;quot;err is %w&amp;quot;, err))\n        }\n\n        req := &amp;amp;Requester{\n            Poller:  p,\n            Retries: 2,\n            Socket:  s,\n            Timeout: time.Duration(time.Minute),\n        }\n        runtime.SetFinalizer(req, (*Requester).Close)\n        return req\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I then use the above code to send a message with my socket connection&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    _, err := r.Socket.SendMessage(req)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, my message is never received within my broker service. I can hit my REST APIs on the network with their hostnames I register during service discovery, is there something I am missing here with Fargate/ECS/ZeroMQ???&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gcnn6d", "is_robot_indexable": true, "report_reasons": null, "author": "nippyeyes", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gcnn6d/connecting_zmq_microservices_within_aws_using/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gcnn6d/connecting_zmq_microservices_within_aws_using/", "subreddit_subscribers": 111177, "created_utc": 1588497491.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi. I have made a small repository with a bunch of code sample showcasing Go. Personally sometimes when I want to learn something new, I just want to see a bunch of code samples and compare them to what I already know, from other languages I have mastered. The link is right here: [https://github.com/TopSwagCode/Go.CheatRepo](https://github.com/TopSwagCode/Go.CheatRepo) \n\nI would love all the feedback that I can get. I am totally new to Go myself and just wanted to make this CheatRepo public, so others also could benefit it. I already have a Roadmap with some ideas to grow the repository with more content.", "author_fullname": "t2_licxd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go Cheatsheet / repo", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gch6ov", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588494568.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi. I have made a small repository with a bunch of code sample showcasing Go. Personally sometimes when I want to learn something new, I just want to see a bunch of code samples and compare them to what I already know, from other languages I have mastered. The link is right here: &lt;a href=\"https://github.com/TopSwagCode/Go.CheatRepo\"&gt;https://github.com/TopSwagCode/Go.CheatRepo&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;I would love all the feedback that I can get. I am totally new to Go myself and just wanted to make this CheatRepo public, so others also could benefit it. I already have a Roadmap with some ideas to grow the repository with more content.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gch6ov", "is_robot_indexable": true, "report_reasons": null, "author": "kiksen1987", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gch6ov/go_cheatsheet_repo/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gch6ov/go_cheatsheet_repo/", "subreddit_subscribers": 111177, "created_utc": 1588465768.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_gch6ov", "before": null}}