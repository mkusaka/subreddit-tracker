{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Built with React / Redux on the Frontend and Django Rest on the backend. I have been keeping a journal since I was a kid. Sheltering in place has afforded me some extra time to develop an app to support my hobby of journaling. You don't have to sign up to start using it. I use the localStorage API to cache things locally. If you want to use the Django backend to sync journal entries between devices then that will require you to sign up. I hope you guys / gals enjoy! Stay safe out there!\n\nFrontend Source Code: [https://github.com/strap8/llexicon](https://github.com/strap8/llexicon)\n\nBackend Source Code: [https://github.com/strap8/llexicon-db](https://github.com/strap8/llexicon-db)\n\nProduction link: [https://www.astraltree.com](https://www.astraltree.com/)", "author_fullname": "t2_dvss8mq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Fully Offline Progressive Web App Journal", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g5pdlv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587537510.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Built with React / Redux on the Frontend and Django Rest on the backend. I have been keeping a journal since I was a kid. Sheltering in place has afforded me some extra time to develop an app to support my hobby of journaling. You don&amp;#39;t have to sign up to start using it. I use the localStorage API to cache things locally. If you want to use the Django backend to sync journal entries between devices then that will require you to sign up. I hope you guys / gals enjoy! Stay safe out there!&lt;/p&gt;\n\n&lt;p&gt;Frontend Source Code: &lt;a href=\"https://github.com/strap8/llexicon\"&gt;https://github.com/strap8/llexicon&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Backend Source Code: &lt;a href=\"https://github.com/strap8/llexicon-db\"&gt;https://github.com/strap8/llexicon-db&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Production link: &lt;a href=\"https://www.astraltree.com/\"&gt;https://www.astraltree.com&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g5pdlv", "is_robot_indexable": true, "report_reasons": null, "author": "strap8", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/g5pdlv/fully_offline_progressive_web_app_journal/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/g5pdlv/fully_offline_progressive_web_app_journal/", "subreddit_subscribers": 3388, "created_utc": 1587508710.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "It is now the standard for writing redux logic.\n\nI've been using redux-toolkit for 3 months and I am enjoying it so much! it simply boosts the productivity \ud83d\udd25\n\nIt makes your code shorter and easier to understand and enforces you to follow best practice (normalizing, selectors, typing, etc\u2026 )\n\n\ud83d\udc47\ud83c\udffdYou'll find concrete examples and code in the article below \ud83d\udc47\ud83c\udffd[https://blog.theodo.com/2020/01/reduce-redux-boilerplate/](https://blog.theodo.com/2020/01/reduce-redux-boilerplate/)", "author_fullname": "t2_58qz85mr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Redux-toolkit is the quickest and easiest way to write reducers and keep store state I\u2019ve found so far", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g4tdqe", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587420338.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;It is now the standard for writing redux logic.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been using redux-toolkit for 3 months and I am enjoying it so much! it simply boosts the productivity \ud83d\udd25&lt;/p&gt;\n\n&lt;p&gt;It makes your code shorter and easier to understand and enforces you to follow best practice (normalizing, selectors, typing, etc\u2026 )&lt;/p&gt;\n\n&lt;p&gt;\ud83d\udc47\ud83c\udffdYou&amp;#39;ll find concrete examples and code in the article below \ud83d\udc47\ud83c\udffd&lt;a href=\"https://blog.theodo.com/2020/01/reduce-redux-boilerplate/\"&gt;https://blog.theodo.com/2020/01/reduce-redux-boilerplate/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g4tdqe", "is_robot_indexable": true, "report_reasons": null, "author": "PopOut237", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/g4tdqe/reduxtoolkit_is_the_quickest_and_easiest_way_to/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/g4tdqe/reduxtoolkit_is_the_quickest_and_easiest_way_to/", "subreddit_subscribers": 3388, "created_utc": 1587391538.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_4a40lahj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Decoupled State Interface", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g4nxu4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587394495.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g4nxu4", "is_robot_indexable": true, "report_reasons": null, "author": "gactleaks", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/g4nxu4/decoupled_state_interface/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/gactjs/store/blob/master/docs/decoupled-state-interface.md", "subreddit_subscribers": 3388, "created_utc": 1587365695.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "[**Normalized Reducer**](https://github.com/brietsparks/normalized-reducer) helps you manage normalized relational state without requiring any reducer/action boilerplate.\n\nYou simply feed in a schema of the relationships, and it gives you the reducers, actions, and selectors to read and write state according to that schema. The [**docs quick start**](https://github.com/brietsparks/normalized-reducer#quick-start) shows how easy it is to set up and use. Check out the [**demo app**](https://brietsparks.github.io/normalized-reducer-demo/) to see its features in action.\n\nAdditionally, it integrates with Normalizr. First denormalize your data with Normalizr's [`normalize`](https://github.com/paularmstrong/normalizr/blob/master/docs/api.md#normalizedata-schema), and then pass that output into Normalized Reducer's [`fromNormalizr`](https://github.com/brietsparks/normalized-reducer#normalizr-integration). The final result will be normalized state that the reducer can handle. See the demo's Normalizr example to see shapes of the transformation.\n\nTo help decide whether this library is right for you, there is a [comparison to Redux ORM and Redux Toolkit's entity adapter](https://github.com/brietsparks/normalized-reducer#comparison-to-alternatives). Key points: Relational Reducer is lighter, zero dep, framework agnostic, and covers some important use-cases the others are missing. However, it (currently) has fewer selector features than Redux ORM and is less mature than both.\n\nThanks for reading, and I hope this helps build stuff faster!", "author_fullname": "t2_19ekjgby", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Normalized Reducer: an easier way to read and write normalized relational reducer state", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g3jdjv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1587194275.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587222494.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/brietsparks/normalized-reducer\"&gt;&lt;strong&gt;Normalized Reducer&lt;/strong&gt;&lt;/a&gt; helps you manage normalized relational state without requiring any reducer/action boilerplate.&lt;/p&gt;\n\n&lt;p&gt;You simply feed in a schema of the relationships, and it gives you the reducers, actions, and selectors to read and write state according to that schema. The &lt;a href=\"https://github.com/brietsparks/normalized-reducer#quick-start\"&gt;&lt;strong&gt;docs quick start&lt;/strong&gt;&lt;/a&gt; shows how easy it is to set up and use. Check out the &lt;a href=\"https://brietsparks.github.io/normalized-reducer-demo/\"&gt;&lt;strong&gt;demo app&lt;/strong&gt;&lt;/a&gt; to see its features in action.&lt;/p&gt;\n\n&lt;p&gt;Additionally, it integrates with Normalizr. First denormalize your data with Normalizr&amp;#39;s &lt;a href=\"https://github.com/paularmstrong/normalizr/blob/master/docs/api.md#normalizedata-schema\"&gt;&lt;code&gt;normalize&lt;/code&gt;&lt;/a&gt;, and then pass that output into Normalized Reducer&amp;#39;s &lt;a href=\"https://github.com/brietsparks/normalized-reducer#normalizr-integration\"&gt;&lt;code&gt;fromNormalizr&lt;/code&gt;&lt;/a&gt;. The final result will be normalized state that the reducer can handle. See the demo&amp;#39;s Normalizr example to see shapes of the transformation.&lt;/p&gt;\n\n&lt;p&gt;To help decide whether this library is right for you, there is a &lt;a href=\"https://github.com/brietsparks/normalized-reducer#comparison-to-alternatives\"&gt;comparison to Redux ORM and Redux Toolkit&amp;#39;s entity adapter&lt;/a&gt;. Key points: Relational Reducer is lighter, zero dep, framework agnostic, and covers some important use-cases the others are missing. However, it (currently) has fewer selector features than Redux ORM and is less mature than both.&lt;/p&gt;\n\n&lt;p&gt;Thanks for reading, and I hope this helps build stuff faster!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g3jdjv", "is_robot_indexable": true, "report_reasons": null, "author": "wagonn", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/g3jdjv/normalized_reducer_an_easier_way_to_read_and/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/g3jdjv/normalized_reducer_an_easier_way_to_read_and/", "subreddit_subscribers": 3388, "created_utc": 1587193694.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_4a40lahj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Gact Store White Paper", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g3q2lj", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587255291.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g3q2lj", "is_robot_indexable": true, "report_reasons": null, "author": "gactleaks", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/g3q2lj/gact_store_white_paper/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/gactjs/store/blob/master/docs/white-paper.md", "subreddit_subscribers": 3388, "created_utc": 1587226491.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "So, I've defined userActions and I see the same pattern over and over again. So, just wanted to know if that's the correct way of writing action creators and thunks. Also, I've defined all the actions in a single file and wondering if I should separate them or not. The code works fine but clean code is always better. \n\n**userActions.js**\n\n```js\nimport axios from \"axios\"\n\nexport const registerUser = (registrationData) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch({ type: \"REGISTRATION_STARTS\" })\n    try {\n      const res = await axios.post(\n        \"http://localhost:3000/api/v1/users/register\",\n        registrationData\n      )\n      dispatch({\n        type: \"REGISTRATION_SUCCESS\",\n        data: { user: res.data.user },\n      })\n    } catch (err) {\n      dispatch({\n        type: \"REGISTRATION_ERROR\",\n        data: { error: \"Something went wrong\" },\n      })\n    }\n  }\n}\n\nexport const loginUser = (loginData, redirect) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch({ type: \"AUTH_STARTS\" })\n    try {\n      const res = await axios.post(\n        \"http://localhost:3000/api/v1/users/login\",\n        loginData\n      )\n      dispatch({\n        type: \"AUTH_SUCCESS\",\n        data: { user: res.data.user },\n      })\n      localStorage.setItem(\"authToken\", res.data.token)\n      redirect()\n    } catch (err) {\n      dispatch({\n        type: \"AUTH_ERROR\",\n        data: { error: \"Something went wrong\" },\n      })\n    }\n  }\n}\n\nexport const getCurrentUser = (token) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch({ type: \"AUTH_STARTS\" })\n    try {\n      const res = await axios.get(\"http://localhost:3000/api/v1/users/me\", {\n        headers: {\n          Authorization: token,\n        },\n      })\n      dispatch({\n        type: \"AUTH_SUCCESS\",\n        data: { user: res.data.user },\n      })\n    } catch (err) {\n      dispatch({\n        type: \"AUTH_ERROR\",\n        data: { error: \"Something went wrong\" },\n      })\n    }\n  }\n}\n\nexport const logoutUser = () =&gt; {\n  return (dispatch) =&gt; {\n    dispatch({ type: \"LOGOUT_USER\" })\n  }\n}\n\nexport const addPost = (postData, redirect) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch({\n      type: \"ADD_POST_STARTS\",\n    })\n    try {\n      const res = await axios.post(\n        \"http://localhost:3000/api/v1/posts/new\",\n        postData,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n            Authorization: `${localStorage.authToken}`,\n          },\n        }\n      )\n      dispatch({\n        type: \"ADD_POST_SUCCESS\",\n        data: { post: res.data.post },\n      })\n      redirect()\n    } catch (err) {\n      dispatch({\n        type: \"ADD_POST_ERROR\",\n        data: { error: \"Something went wrong\" },\n      })\n    }\n  }\n}\n\nexport const getPost = (id) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch({ type: \"FETCHING_POST_START\" })\n    try {\n      const res = await axios.get(`http://localhost:3000/api/v1/posts/${id}`)\n      dispatch({\n        type: \"FETCHING_POST_SUCCESS\",\n        data: res.data.post,\n      })\n    } catch (error) {\n      dispatch({\n        type: \"FETCHING_POST_FAILURE\",\n        data: { error: \"Something went wrong\" },\n      })\n    }\n  }\n}\n\nexport const updatePost = (id, postData, redirect) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch({ type: \"UPDATING_POST_START\" })\n    try {\n      const res = await axios.put(\n        `http://localhost:3000/api/v1/posts/${id}/edit`,\n        postData\n      )\n      dispatch({\n        type: \"UPDATING_POST_SUCCESS\",\n        data: res.data,\n      })\n      redirect()\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: \"UPDATING_POST_FAILURE\",\n        data: { error: res.data.error },\n      })\n    }\n  }\n}\n\nexport const deletePost = (id) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch({ type: \"DELETING_POST_START\" })\n    try {\n      const res = await axios.delete(\n        `http://localhost:3000/api/v1/posts/${id}/delete`\n      )\n      dispatch({\n        type: \"DELETING_POST_SUCCESS\",\n        data: res.data.post,\n      })\n    } catch (error) {\n      dispatch({\n        type: \"DELETING_POST_ERROR\",\n        data: { error: error },\n      })\n    }\n  }\n}\n\nexport const getListOfPosts = () =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch({\n      type: \"FETCHING_POSTS_START\",\n    })\n    try {\n      const res = await axios.get(\"http://localhost:3000/api/v1/posts/list\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n      dispatch({\n        type: \"FETCHING_POSTS_SUCCESS\",\n        data: { posts: res.data.posts },\n      })\n    } catch (err) {\n      dispatch({\n        type: \"FETCHING_POSTS_ERROR\",\n        data: { error: \"Something went wrong\" },\n      })\n    }\n  }\n}\n\nexport const getUserPosts = (id) =&gt; {\n  return async (dispatch) =&gt; {\n    dispatch({\n      type: \"FETCHING_USER_POSTS_START\",\n    })\n    try {\n      const res = await axios.get(\n        `http://localhost:3000/api/v1/users/posts/${id}`,\n        {\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        }\n      )\n      dispatch({\n        type: \"FETCHING_USER_POSTS_SUCCESS\",\n        data: res.data.userPosts,\n      })\n    } catch (err) {\n      dispatch({\n        type: \"FETCHING_USER_POSTS_ERROR\",\n        data: { error: \"Something went wrong\" },\n      })\n    }\n  }\n}\n```", "author_fullname": "t2_67pkwkyu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Keeping the userActions DRY in redux", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g2wey8", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1587115493.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587133273.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So, I&amp;#39;ve defined userActions and I see the same pattern over and over again. So, just wanted to know if that&amp;#39;s the correct way of writing action creators and thunks. Also, I&amp;#39;ve defined all the actions in a single file and wondering if I should separate them or not. The code works fine but clean code is always better. &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;userActions.js&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;```js\nimport axios from &amp;quot;axios&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;export const registerUser = (registrationData) =&amp;gt; {\n  return async (dispatch) =&amp;gt; {\n    dispatch({ type: &amp;quot;REGISTRATION_STARTS&amp;quot; })\n    try {\n      const res = await axios.post(\n        &amp;quot;http://localhost:3000/api/v1/users/register&amp;quot;,\n        registrationData\n      )\n      dispatch({\n        type: &amp;quot;REGISTRATION_SUCCESS&amp;quot;,\n        data: { user: res.data.user },\n      })\n    } catch (err) {\n      dispatch({\n        type: &amp;quot;REGISTRATION_ERROR&amp;quot;,\n        data: { error: &amp;quot;Something went wrong&amp;quot; },\n      })\n    }\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export const loginUser = (loginData, redirect) =&amp;gt; {\n  return async (dispatch) =&amp;gt; {\n    dispatch({ type: &amp;quot;AUTH_STARTS&amp;quot; })\n    try {\n      const res = await axios.post(\n        &amp;quot;http://localhost:3000/api/v1/users/login&amp;quot;,\n        loginData\n      )\n      dispatch({\n        type: &amp;quot;AUTH_SUCCESS&amp;quot;,\n        data: { user: res.data.user },\n      })\n      localStorage.setItem(&amp;quot;authToken&amp;quot;, res.data.token)\n      redirect()\n    } catch (err) {\n      dispatch({\n        type: &amp;quot;AUTH_ERROR&amp;quot;,\n        data: { error: &amp;quot;Something went wrong&amp;quot; },\n      })\n    }\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export const getCurrentUser = (token) =&amp;gt; {\n  return async (dispatch) =&amp;gt; {\n    dispatch({ type: &amp;quot;AUTH_STARTS&amp;quot; })\n    try {\n      const res = await axios.get(&amp;quot;http://localhost:3000/api/v1/users/me&amp;quot;, {\n        headers: {\n          Authorization: token,\n        },\n      })\n      dispatch({\n        type: &amp;quot;AUTH_SUCCESS&amp;quot;,\n        data: { user: res.data.user },\n      })\n    } catch (err) {\n      dispatch({\n        type: &amp;quot;AUTH_ERROR&amp;quot;,\n        data: { error: &amp;quot;Something went wrong&amp;quot; },\n      })\n    }\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export const logoutUser = () =&amp;gt; {\n  return (dispatch) =&amp;gt; {\n    dispatch({ type: &amp;quot;LOGOUT_USER&amp;quot; })\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export const addPost = (postData, redirect) =&amp;gt; {\n  return async (dispatch) =&amp;gt; {\n    dispatch({\n      type: &amp;quot;ADD_POST_STARTS&amp;quot;,\n    })\n    try {\n      const res = await axios.post(\n        &amp;quot;http://localhost:3000/api/v1/posts/new&amp;quot;,\n        postData,\n        {\n          headers: {\n            &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,\n            Authorization: &lt;code&gt;${localStorage.authToken}&lt;/code&gt;,\n          },\n        }\n      )\n      dispatch({\n        type: &amp;quot;ADD_POST_SUCCESS&amp;quot;,\n        data: { post: res.data.post },\n      })\n      redirect()\n    } catch (err) {\n      dispatch({\n        type: &amp;quot;ADD_POST_ERROR&amp;quot;,\n        data: { error: &amp;quot;Something went wrong&amp;quot; },\n      })\n    }\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export const getPost = (id) =&amp;gt; {\n  return async (dispatch) =&amp;gt; {\n    dispatch({ type: &amp;quot;FETCHING_POST_START&amp;quot; })\n    try {\n      const res = await axios.get(&lt;code&gt;http://localhost:3000/api/v1/posts/${id}&lt;/code&gt;)\n      dispatch({\n        type: &amp;quot;FETCHING_POST_SUCCESS&amp;quot;,\n        data: res.data.post,\n      })\n    } catch (error) {\n      dispatch({\n        type: &amp;quot;FETCHING_POST_FAILURE&amp;quot;,\n        data: { error: &amp;quot;Something went wrong&amp;quot; },\n      })\n    }\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export const updatePost = (id, postData, redirect) =&amp;gt; {\n  return async (dispatch) =&amp;gt; {\n    dispatch({ type: &amp;quot;UPDATING_POST_START&amp;quot; })\n    try {\n      const res = await axios.put(\n        &lt;code&gt;http://localhost:3000/api/v1/posts/${id}/edit&lt;/code&gt;,\n        postData\n      )\n      dispatch({\n        type: &amp;quot;UPDATING_POST_SUCCESS&amp;quot;,\n        data: res.data,\n      })\n      redirect()\n    } catch (error) {\n      console.log(error)\n      dispatch({\n        type: &amp;quot;UPDATING_POST_FAILURE&amp;quot;,\n        data: { error: res.data.error },\n      })\n    }\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export const deletePost = (id) =&amp;gt; {\n  return async (dispatch) =&amp;gt; {\n    dispatch({ type: &amp;quot;DELETING_POST_START&amp;quot; })\n    try {\n      const res = await axios.delete(\n        &lt;code&gt;http://localhost:3000/api/v1/posts/${id}/delete&lt;/code&gt;\n      )\n      dispatch({\n        type: &amp;quot;DELETING_POST_SUCCESS&amp;quot;,\n        data: res.data.post,\n      })\n    } catch (error) {\n      dispatch({\n        type: &amp;quot;DELETING_POST_ERROR&amp;quot;,\n        data: { error: error },\n      })\n    }\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export const getListOfPosts = () =&amp;gt; {\n  return async (dispatch) =&amp;gt; {\n    dispatch({\n      type: &amp;quot;FETCHING_POSTS_START&amp;quot;,\n    })\n    try {\n      const res = await axios.get(&amp;quot;http://localhost:3000/api/v1/posts/list&amp;quot;, {\n        headers: {\n          &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,\n        },\n      })\n      dispatch({\n        type: &amp;quot;FETCHING_POSTS_SUCCESS&amp;quot;,\n        data: { posts: res.data.posts },\n      })\n    } catch (err) {\n      dispatch({\n        type: &amp;quot;FETCHING_POSTS_ERROR&amp;quot;,\n        data: { error: &amp;quot;Something went wrong&amp;quot; },\n      })\n    }\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export const getUserPosts = (id) =&amp;gt; {\n  return async (dispatch) =&amp;gt; {\n    dispatch({\n      type: &amp;quot;FETCHING_USER_POSTS_START&amp;quot;,\n    })\n    try {\n      const res = await axios.get(\n        &lt;code&gt;http://localhost:3000/api/v1/users/posts/${id}&lt;/code&gt;,\n        {\n          headers: {\n            &amp;quot;Content-Type&amp;quot;: &amp;quot;application/json&amp;quot;,\n          },\n        }\n      )\n      dispatch({\n        type: &amp;quot;FETCHING_USER_POSTS_SUCCESS&amp;quot;,\n        data: res.data.userPosts,\n      })\n    } catch (err) {\n      dispatch({\n        type: &amp;quot;FETCHING_USER_POSTS_ERROR&amp;quot;,\n        data: { error: &amp;quot;Something went wrong&amp;quot; },\n      })\n    }\n  }\n}\n```&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g2wey8", "is_robot_indexable": true, "report_reasons": null, "author": "wackenadoVI", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/g2wey8/keeping_the_useractions_dry_in_redux/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/g2wey8/keeping_the_useractions_dry_in_redux/", "subreddit_subscribers": 3388, "created_utc": 1587104473.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "The problem is when I bring the data from backend, There will be undefined under streams reducer, but if I same data and act as fake backend, I wont get undefined.\n\n[When fetching from real backend](https://preview.redd.it/m4jjwmzw4dt41.png?width=1768&amp;format=png&amp;auto=webp&amp;s=bf950010545e4fa108e579c8125f4f7316766e5e)\n\n&amp;#x200B;\n\n[When bringing data from fake backend](https://preview.redd.it/h8ayi9705dt41.png?width=1192&amp;format=png&amp;auto=webp&amp;s=63e32e08a66f8e725e1b7b555b2b29a51eb31356)", "author_fullname": "t2_nu33ylq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How do we try to get data directly under streams? why does it has undefined and data?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "media_metadata": {"m4jjwmzw4dt41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 74, "x": 108, "u": "https://external-preview.redd.it/m4jjwmzw4dt41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=48925d33dd94d15bfe9612d9ca6f74bb1e8b86e7"}, {"y": 149, "x": 216, "u": "https://external-preview.redd.it/m4jjwmzw4dt41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=9a696efca712dc70ca4ebc5d922d24a57ccf1fc0"}, {"y": 221, "x": 320, "u": "https://external-preview.redd.it/m4jjwmzw4dt41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=3f6eacf2fcc792c08d7fc0d8061dc77e51f4d582"}, {"y": 443, "x": 640, "u": "https://external-preview.redd.it/m4jjwmzw4dt41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=5c63460495fce8d1a4b8b1c912903f429963ec42"}, {"y": 665, "x": 960, "u": "https://external-preview.redd.it/m4jjwmzw4dt41.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=cc6078fd862015af5bd77f4743237c7b44b9de8e"}, {"y": 748, "x": 1080, "u": "https://external-preview.redd.it/m4jjwmzw4dt41.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=639b5534a9ac2fd56784bb31bbb4cefeef091083"}], "s": {"y": 1226, "x": 1768, "u": "https://preview.redd.it/m4jjwmzw4dt41.png?width=1768&amp;format=png&amp;auto=webp&amp;s=bf950010545e4fa108e579c8125f4f7316766e5e"}, "id": "m4jjwmzw4dt41"}, "h8ayi9705dt41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 52, "x": 108, "u": "https://external-preview.redd.it/h8ayi9705dt41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=5a35b3ab17c58a5abd90490fdc7be5ca8bf5032a"}, {"y": 104, "x": 216, "u": "https://external-preview.redd.it/h8ayi9705dt41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=c5b5b75de19be28cea0a642bb6cdb8ee9b83d426"}, {"y": 155, "x": 320, "u": "https://external-preview.redd.it/h8ayi9705dt41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=9ccce00cebcd6bf5de0bdda9cdaf89acdb1bdec5"}, {"y": 310, "x": 640, "u": "https://external-preview.redd.it/h8ayi9705dt41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=6feae4993808f51e6502c6a4d065f08a497fb205"}, {"y": 465, "x": 960, "u": "https://external-preview.redd.it/h8ayi9705dt41.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=cd98084a6b54eaad40ec196629ab1e7acb198d72"}, {"y": 523, "x": 1080, "u": "https://external-preview.redd.it/h8ayi9705dt41.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=3b79ea738ee2207a8750ea04b2eb90d6c2d37cde"}], "s": {"y": 578, "x": 1192, "u": "https://preview.redd.it/h8ayi9705dt41.png?width=1192&amp;format=png&amp;auto=webp&amp;s=63e32e08a66f8e725e1b7b555b2b29a51eb31356"}, "id": "h8ayi9705dt41"}}, "name": "t3_g304ob", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587151392.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The problem is when I bring the data from backend, There will be undefined under streams reducer, but if I same data and act as fake backend, I wont get undefined.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/m4jjwmzw4dt41.png?width=1768&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=bf950010545e4fa108e579c8125f4f7316766e5e\"&gt;When fetching from real backend&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/h8ayi9705dt41.png?width=1192&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=63e32e08a66f8e725e1b7b555b2b29a51eb31356\"&gt;When bringing data from fake backend&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g304ob", "is_robot_indexable": true, "report_reasons": null, "author": "Codeater7", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/g304ob/how_do_we_try_to_get_data_directly_under_streams/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/g304ob/how_do_we_try_to_get_data_directly_under_streams/", "subreddit_subscribers": 3388, "created_utc": 1587122592.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Is time travel just capturing a whole snapshot of the state just for debugging purposes during development stage ?\n\nIs undo/redo functionality a more efficient (cpu and RAM wise) version of time traveling that is supposed to be used by users ?", "author_fullname": "t2_1ihbqq55", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What is the difference between time travel and undo/redo functionality ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g2qf27", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587108833.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is time travel just capturing a whole snapshot of the state just for debugging purposes during development stage ?&lt;/p&gt;\n\n&lt;p&gt;Is undo/redo functionality a more efficient (cpu and RAM wise) version of time traveling that is supposed to be used by users ?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g2qf27", "is_robot_indexable": true, "report_reasons": null, "author": "liaguris", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/g2qf27/what_is_the_difference_between_time_travel_and/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/g2qf27/what_is_the_difference_between_time_travel_and/", "subreddit_subscribers": 3388, "created_utc": 1587080033.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I am trying to make an app in which the state is a little bit complex so I have to make it be like a normalized client side database as suggested in the redux docs  \\[[1](https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/)\\] .\n\nIt would be extremely helpful for me if there is any kind of tool/app that allows me to create a client side normalized database diagram , like for example [this](https://erdplus.com/standalone) tool .\n\nUnfortunately this tool does not provide me with types that exists in JS (array for example). I want the tool to allow me to define types like I do in typescript .\n\nSince my database is a single object it would be nice for that tool to make a d.ts file for that object .\n\nAlso it would be extremely helpful if that tool would allow me to save my work .\n\nIt really feel painful defining my normalized client side database in a d.ts file , I think a tool like the one I described will boost productivity .\n\nI am really noob regarding all that database thing , so sorry what I am asking sounds stupid .", "author_fullname": "t2_1ihbqq55", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Tools for creating a client side database diagram .", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g0n3zg", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586826638.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am trying to make an app in which the state is a little bit complex so I have to make it be like a normalized client side database as suggested in the redux docs  [&lt;a href=\"https://redux.js.org/recipes/structuring-reducers/normalizing-state-shape/\"&gt;1&lt;/a&gt;] .&lt;/p&gt;\n\n&lt;p&gt;It would be extremely helpful for me if there is any kind of tool/app that allows me to create a client side normalized database diagram , like for example &lt;a href=\"https://erdplus.com/standalone\"&gt;this&lt;/a&gt; tool .&lt;/p&gt;\n\n&lt;p&gt;Unfortunately this tool does not provide me with types that exists in JS (array for example). I want the tool to allow me to define types like I do in typescript .&lt;/p&gt;\n\n&lt;p&gt;Since my database is a single object it would be nice for that tool to make a d.ts file for that object .&lt;/p&gt;\n\n&lt;p&gt;Also it would be extremely helpful if that tool would allow me to save my work .&lt;/p&gt;\n\n&lt;p&gt;It really feel painful defining my normalized client side database in a d.ts file , I think a tool like the one I described will boost productivity .&lt;/p&gt;\n\n&lt;p&gt;I am really noob regarding all that database thing , so sorry what I am asking sounds stupid .&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g0n3zg", "is_robot_indexable": true, "report_reasons": null, "author": "liaguris", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/g0n3zg/tools_for_creating_a_client_side_database_diagram/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/g0n3zg/tools_for_creating_a_client_side_database_diagram/", "subreddit_subscribers": 3388, "created_utc": 1586797838.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_1ih5n2bn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Modern React Redux Tutorials with Redux toolkit - 2020", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fzx905", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1586728947.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "cloudnweb.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fzx905", "is_robot_indexable": true, "report_reasons": null, "author": "GaneshMani", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/fzx905/modern_react_redux_tutorials_with_redux_toolkit/", "parent_whitelist_status": null, "stickied": false, "url": "https://cloudnweb.dev/2020/04/modern-react-redux-tutotials-redux-toolkit/", "subreddit_subscribers": 3388, "created_utc": 1586700147.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_fzx905", "before": null}}