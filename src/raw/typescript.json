{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - April", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_fsojx3", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 30, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 30, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1585728331.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsojx3", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 3, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fsojx3/whos_hiring_typescript_developers_april/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/fsojx3/whos_hiring_typescript_developers_april/", "subreddit_subscribers": 38140, "created_utc": 1585699531.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I am just started learning typescript and I want to know if this is the correct way to write the interface for a curried function\n\n    interface Add {\n      (a: number): (b: number) =&gt; number;\n    }\n    const add: Add = (a) =&gt; (b) =&gt; a + b\n    console.log(add(1)(2))\n\nOr do I have to explicitly add a return type to the function even though I already added it to the interface\n\n    interface Add {\n      (a: number): (b: number) =&gt; number;\n    }\n    const add: Add = (a) =&gt; (b): number =&gt; a + b\n    console.log(add(1)(2))\n    \n\nMy linter is warning me about not having the return type on the function. Should I add the return type twice (that feels like double work)? Also should I be using interfaces or types, or something else entirely that I don't know about?\n\nThis is my linter message btw *Missing return type on function.eslint*[*@typescript-eslint/explicit-function-return-type*](https://github.com/typescript-eslint/typescript-eslint/blob/v2.28.0/packages/eslint-plugin/docs/rules/explicit-function-return-type.md)\n\nThanks y'all", "author_fullname": "t2_x4shk", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How should I write an interface for a curried function?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g5c8pe", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1587490798.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am just started learning typescript and I want to know if this is the correct way to write the interface for a curried function&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface Add {\n  (a: number): (b: number) =&amp;gt; number;\n}\nconst add: Add = (a) =&amp;gt; (b) =&amp;gt; a + b\nconsole.log(add(1)(2))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or do I have to explicitly add a return type to the function even though I already added it to the interface&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface Add {\n  (a: number): (b: number) =&amp;gt; number;\n}\nconst add: Add = (a) =&amp;gt; (b): number =&amp;gt; a + b\nconsole.log(add(1)(2))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My linter is warning me about not having the return type on the function. Should I add the return type twice (that feels like double work)? Also should I be using interfaces or types, or something else entirely that I don&amp;#39;t know about?&lt;/p&gt;\n\n&lt;p&gt;This is my linter message btw &lt;em&gt;Missing return type on function.eslint&lt;/em&gt;&lt;a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/v2.28.0/packages/eslint-plugin/docs/rules/explicit-function-return-type.md\"&gt;&lt;em&gt;@typescript-eslint/explicit-function-return-type&lt;/em&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Thanks y&amp;#39;all&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/39ErySAtawwYBhApsFZEbEFMdHy7TFLrSMWb7INHkNI.jpg?auto=webp&amp;s=12a59667a07a6234eb179a62037989ff0b306dda", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/39ErySAtawwYBhApsFZEbEFMdHy7TFLrSMWb7INHkNI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c06264ace3761372e7790e8479c1da36adc911ee", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/39ErySAtawwYBhApsFZEbEFMdHy7TFLrSMWb7INHkNI.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f730da904312773548eacf58c92917a34338f905", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/39ErySAtawwYBhApsFZEbEFMdHy7TFLrSMWb7INHkNI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=87644d5ac854d803f280deab8fedb9d6ac1db18a", "width": 320, "height": 320}], "variants": {}, "id": "9hPlBp-1WJVS34g_GxQR_Z0mSmhZoKiT8OxUbCXUPvA"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g5c8pe", "is_robot_indexable": true, "report_reasons": null, "author": "ronbarrantes", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g5c8pe/how_should_i_write_an_interface_for_a_curried/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g5c8pe/how_should_i_write_an_interface_for_a_curried/", "subreddit_subscribers": 38140, "created_utc": 1587461998.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "In the Go library [sqlc](https://github.com/kyleconroy/sqlc), you write SQL queries, annotate it in certain way, and the library generates typesafe functions based on the queries and the annotations. I was wondering if anyone knows of a TypeScript library that does exactly this", "author_fullname": "t2_19ekjgby", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "generate TypeScript functions from SQL queries?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g57odt", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1587468299.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In the Go library &lt;a href=\"https://github.com/kyleconroy/sqlc\"&gt;sqlc&lt;/a&gt;, you write SQL queries, annotate it in certain way, and the library generates typesafe functions based on the queries and the annotations. I was wondering if anyone knows of a TypeScript library that does exactly this&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/vgtrtaD6orDplS9OhlVLQU40x1z1MJxGq2r83x7hzSU.jpg?auto=webp&amp;s=9a15445e692fe499ca9712814c88e830bf69a0a0", "width": 200, "height": 200}, "resolutions": [{"url": "https://external-preview.redd.it/vgtrtaD6orDplS9OhlVLQU40x1z1MJxGq2r83x7hzSU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=458038ecf719f76c4665282b5c872986ae7d772c", "width": 108, "height": 108}], "variants": {}, "id": "TksR4gks0CMrct9_fzkPzgBQkDlfBmZGIy0-hjiX5Us"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g57odt", "is_robot_indexable": true, "report_reasons": null, "author": "wagonn", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g57odt/generate_typescript_functions_from_sql_queries/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g57odt/generate_typescript_functions_from_sql_queries/", "subreddit_subscribers": 38140, "created_utc": 1587439499.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "[Myzod](https://www.npmjs.com/package/myzod) is a runtime validation library who's goal is to use only typescript concepts to build type infer-able schemas.  The purpose of [myzod](https://www.npmjs.com/package/myzod) is to no longer have to match declared typescript types to the result of separately maintained validation logic, and in so doing minimise discrepancies between runtime  and the compile time types. Myzod is also inspired by [@hapi/joi](https://www.npmjs.com/package/@hapi/joi) and offers a similar validation api.  \n\n\nAt this time I am about ready to release version 1.0.0 but I am hoping to get more eyes on it before I do. Any feedback, issues, feature requests, or PRs would be extremely valuable.\n\nThanks in advance.", "author_fullname": "t2_zr27l", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Myzod v1.0.0-alphar release - Schema Validation and Type Inference", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": true, "name": "t3_g5eybi", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1587503491.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://www.npmjs.com/package/myzod\"&gt;Myzod&lt;/a&gt; is a runtime validation library who&amp;#39;s goal is to use only typescript concepts to build type infer-able schemas.  The purpose of &lt;a href=\"https://www.npmjs.com/package/myzod\"&gt;myzod&lt;/a&gt; is to no longer have to match declared typescript types to the result of separately maintained validation logic, and in so doing minimise discrepancies between runtime  and the compile time types. Myzod is also inspired by &lt;a href=\"https://www.npmjs.com/package/@hapi/joi\"&gt;@hapi/joi&lt;/a&gt; and offers a similar validation api.  &lt;/p&gt;\n\n&lt;p&gt;At this time I am about ready to release version 1.0.0 but I am hoping to get more eyes on it before I do. Any feedback, issues, feature requests, or PRs would be extremely valuable.&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/WaI7ci8y_BucxfTyRMw9rEGVoXvk-w3erN7z645l-H8.jpg?auto=webp&amp;s=dc9f3722e4f26a0d394e974bdc658bd002ee6f3d", "width": 1200, "height": 630}, "resolutions": [{"url": "https://external-preview.redd.it/WaI7ci8y_BucxfTyRMw9rEGVoXvk-w3erN7z645l-H8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=29849972d1063666bb20bfca982ed849dbab0739", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/WaI7ci8y_BucxfTyRMw9rEGVoXvk-w3erN7z645l-H8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=c2e78155bcf431bc82859db1b9cc141779445961", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/WaI7ci8y_BucxfTyRMw9rEGVoXvk-w3erN7z645l-H8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7b8fc1121ee3f0761b7c5ec9e306f65c99c715db", "width": 320, "height": 168}, {"url": "https://external-preview.redd.it/WaI7ci8y_BucxfTyRMw9rEGVoXvk-w3erN7z645l-H8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=18cce76337e2ca3f939805374b20a68b0a1671af", "width": 640, "height": 336}, {"url": "https://external-preview.redd.it/WaI7ci8y_BucxfTyRMw9rEGVoXvk-w3erN7z645l-H8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=940123d8c0b4043a88a028062a5a195676254f4d", "width": 960, "height": 504}, {"url": "https://external-preview.redd.it/WaI7ci8y_BucxfTyRMw9rEGVoXvk-w3erN7z645l-H8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=70f261d64e65120035e417a634c19726e4e3576d", "width": 1080, "height": 567}], "variants": {}, "id": "3CAm7f2euOP7diXidheIHavSdc1loh3U46B-FOssKu4"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g5eybi", "is_robot_indexable": true, "report_reasons": null, "author": "davidmdm", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g5eybi/myzod_v100alphar_release_schema_validation_and/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g5eybi/myzod_v100alphar_release_schema_validation_and/", "subreddit_subscribers": 38140, "created_utc": 1587474691.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_131798", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Deonify: For NPM module authors that would like to support Deno but do not want to write and maintain a port.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 70, "hide_score": false, "name": "t3_g4op75", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 66, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 66, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/tUCJwDjK-m88I2AOak7ufQ5hCzhZgr5r3yM1ypXXicw.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1587398403.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/n0asNCzTkmsg3zvQLSDkSrjL3hu7HXc2Fk7a42b7h90.jpg?auto=webp&amp;s=468026d2f4be761e91c8ebf636a04b6e554056d7", "width": 1280, "height": 640}, "resolutions": [{"url": "https://external-preview.redd.it/n0asNCzTkmsg3zvQLSDkSrjL3hu7HXc2Fk7a42b7h90.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f83cf62947f107c66663277a6aeeaa3ba0ca2711", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/n0asNCzTkmsg3zvQLSDkSrjL3hu7HXc2Fk7a42b7h90.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a93a17d0248a9dbbbc3ea8794ffc93b3693da1d5", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/n0asNCzTkmsg3zvQLSDkSrjL3hu7HXc2Fk7a42b7h90.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=67bef3d428b7eb993c89811ed372f9ed0ef932b0", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/n0asNCzTkmsg3zvQLSDkSrjL3hu7HXc2Fk7a42b7h90.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=fc578d34d0a0986c1a756630d4636d32cae52495", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/n0asNCzTkmsg3zvQLSDkSrjL3hu7HXc2Fk7a42b7h90.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=9c8a507ccee9052d22bb56591988783ffd9d1488", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/n0asNCzTkmsg3zvQLSDkSrjL3hu7HXc2Fk7a42b7h90.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=8b039623a434c1f9c42d163cbf148d57f343d5b9", "width": 1080, "height": 540}], "variants": {}, "id": "Ugr6A5Wd5qS8DDILYYXvcCrHa1y_k7s0-6q8sBzZdaw"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g4op75", "is_robot_indexable": true, "report_reasons": null, "author": "garronej", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g4op75/deonify_for_npm_module_authors_that_would_like_to/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/garronej/denoify", "subreddit_subscribers": 38140, "created_utc": 1587369603.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_4l3aq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Type Tetris - a typescript clone of Tetris, remix it!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_g50g2e", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": true, "thumbnail": "https://b.thumbs.redditmedia.com/yx6zdNExcF0OkVS1hRZBFBoK-9ymaECAYp2dv9yLmyM.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1587442985.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "glitch.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/K2iq-2RjnMiYQPptX_dNmL_cllM2YExNIUMXeyG695A.jpg?auto=webp&amp;s=05fb7f6d41c5d72c1c23943189fe5beae36de0eb", "width": 250, "height": 250}, "resolutions": [{"url": "https://external-preview.redd.it/K2iq-2RjnMiYQPptX_dNmL_cllM2YExNIUMXeyG695A.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=ff1467ce105d47dbfc0e12fd1709de8ab4272f9c", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/K2iq-2RjnMiYQPptX_dNmL_cllM2YExNIUMXeyG695A.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=3c97edc4fc137f3c0f5f66716d5519d8f0c5c9e4", "width": 216, "height": 216}], "variants": {}, "id": "BOBhkOXb2SETOYE4hUZwnZYeP_2XpdrP21Xk11_IUvk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g50g2e", "is_robot_indexable": true, "report_reasons": null, "author": "davidwhitney", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g50g2e/type_tetris_a_typescript_clone_of_tetris_remix_it/", "parent_whitelist_status": null, "stickied": false, "url": "https://glitch.com/~type-tetris", "subreddit_subscribers": 38140, "created_utc": 1587414185.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_d1ois", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I made a template to help you make new Google Apps Script projects using TypeScript and Webpack", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_g4t9ba", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/-PrF0ROKIMgDY4c49br424COi6VlrF19JT6s4sSxuF0.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1587419915.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/dzRQYK3SO5ipyRfp6D87iCpN627MgjqZgbH-blGjft4.jpg?auto=webp&amp;s=28189f54e6325496eb2643053ffb54952f9597d3", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/dzRQYK3SO5ipyRfp6D87iCpN627MgjqZgbH-blGjft4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=3143382b749e7094240fa1f89be5bde74ed3726c", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/dzRQYK3SO5ipyRfp6D87iCpN627MgjqZgbH-blGjft4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1026b14ada3c045196bb747f4112932e37e46348", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/dzRQYK3SO5ipyRfp6D87iCpN627MgjqZgbH-blGjft4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ff5f940b91c18ee624e867cc8b340f3d9f00779a", "width": 320, "height": 320}], "variants": {}, "id": "Lqr04jio0cjakc8NbTUNvaRWmGXCDbBltmCEFQItS50"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g4t9ba", "is_robot_indexable": true, "report_reasons": null, "author": "IanSan5653", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g4t9ba/i_made_a_template_to_help_you_make_new_google/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/iansan5653/gas-ts-template", "subreddit_subscribers": 38140, "created_utc": 1587391115.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_2t1xamic", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "JSCasts ep17 - build an entire startup in Node.js part2 - hooks and authentication", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g4z79l", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587438957.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtu.be", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g4z79l", "is_robot_indexable": true, "report_reasons": null, "author": "hotcto", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g4z79l/jscasts_ep17_build_an_entire_startup_in_nodejs/", "parent_whitelist_status": null, "stickied": false, "url": "https://youtu.be/wOSPDtvJcyQ", "subreddit_subscribers": 38140, "created_utc": 1587410157.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi I am trying to use a generic  factory like class to create 1 type many times with the same passed in  arguments. My issue is that the passed in arguments don't seem to be  type checked against the generic type's constructor that is being  created. I tried to boil it down to as simple as possible example:\n\n&amp;#x200B;\n\n    abstract class SharedBaseClass {\n        constructor(public name: string) {}\n        abstract sayHi(): void;\n    }\n    interface IConstructor&lt;T&gt;\n    {\n        new (...args: any[]): T;\n    }\n    class Creator&lt;InputType extends SharedBaseClass&gt; extends SharedBaseClass\n    {\n        inputs: Array&lt;InputType&gt;;\n    \n        constructor(private inputNames: string[],\n                    inputConstructor: IConstructor&lt;InputType&gt;,\n                    ...params: ConstructorParameters&lt;IConstructor&lt;InputType&gt;&gt;) {\n            super(\"Creator\");\n            this.inputs = new Array&lt;InputType&gt;(this.inputNames.length);\n            this.inputNames.forEach((name: string, idx: number) =&gt; {\n                this.inputs[idx] = new inputConstructor(name, ...params);\n            });\n        }\n        runAll() {\n            this.inputs.forEach((input: InputType, idx: number) =&gt; {\n                input.sayHi();\n            });\n        }\n        sayHi() {\n            console.log(\"Hi from Creator\");\n        }\n    }\n    \n    class Input1 extends SharedBaseClass {\n        constructor(name: string, public age: number, public otherArg: number) {\n            super(name);\n        }\n        sayHi() {\n            console.log(\"Hi from \", this.name, \" \", this.age, \" \", this.otherArg);\n        }\n    }\n\nAllowed invocations:\n\n&amp;#x200B;\n\n     let c = new Creator&lt;Input1&gt;([\"a\", \"b\", \"c\"], Input1); // no args\n     let c = new Creator&lt;Input1&gt;([\"a\", \"b\", \"c\"], Input1, 11); // too few args\n     let c = new Creator&lt;Input1&gt;([\"a\", \"b\", \"c\"], Input1, 11, 14); // correct # args\n     let c = new Creator&lt;Input1&gt;([\"a\", \"b\", \"c\"], Input1, 11, 14, 15); // too many args \n    \n     c.runAll();\n\n \n\nIs there anyway I can have the generic type's constructor arguments actually validated correctly here?\n\nThanks!", "author_fullname": "t2_49085mkn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why does this generic constructor not seem to get type checked at all? Can it be?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g4wyt7", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587431973.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi I am trying to use a generic  factory like class to create 1 type many times with the same passed in  arguments. My issue is that the passed in arguments don&amp;#39;t seem to be  type checked against the generic type&amp;#39;s constructor that is being  created. I tried to boil it down to as simple as possible example:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;abstract class SharedBaseClass {\n    constructor(public name: string) {}\n    abstract sayHi(): void;\n}\ninterface IConstructor&amp;lt;T&amp;gt;\n{\n    new (...args: any[]): T;\n}\nclass Creator&amp;lt;InputType extends SharedBaseClass&amp;gt; extends SharedBaseClass\n{\n    inputs: Array&amp;lt;InputType&amp;gt;;\n\n    constructor(private inputNames: string[],\n                inputConstructor: IConstructor&amp;lt;InputType&amp;gt;,\n                ...params: ConstructorParameters&amp;lt;IConstructor&amp;lt;InputType&amp;gt;&amp;gt;) {\n        super(&amp;quot;Creator&amp;quot;);\n        this.inputs = new Array&amp;lt;InputType&amp;gt;(this.inputNames.length);\n        this.inputNames.forEach((name: string, idx: number) =&amp;gt; {\n            this.inputs[idx] = new inputConstructor(name, ...params);\n        });\n    }\n    runAll() {\n        this.inputs.forEach((input: InputType, idx: number) =&amp;gt; {\n            input.sayHi();\n        });\n    }\n    sayHi() {\n        console.log(&amp;quot;Hi from Creator&amp;quot;);\n    }\n}\n\nclass Input1 extends SharedBaseClass {\n    constructor(name: string, public age: number, public otherArg: number) {\n        super(name);\n    }\n    sayHi() {\n        console.log(&amp;quot;Hi from &amp;quot;, this.name, &amp;quot; &amp;quot;, this.age, &amp;quot; &amp;quot;, this.otherArg);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Allowed invocations:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; let c = new Creator&amp;lt;Input1&amp;gt;([&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;], Input1); // no args\n let c = new Creator&amp;lt;Input1&amp;gt;([&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;], Input1, 11); // too few args\n let c = new Creator&amp;lt;Input1&amp;gt;([&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;], Input1, 11, 14); // correct # args\n let c = new Creator&amp;lt;Input1&amp;gt;([&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;], Input1, 11, 14, 15); // too many args \n\n c.runAll();\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is there anyway I can have the generic type&amp;#39;s constructor arguments actually validated correctly here?&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g4wyt7", "is_robot_indexable": true, "report_reasons": null, "author": "enTiCALf", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g4wyt7/why_does_this_generic_constructor_not_seem_to_get/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g4wyt7/why_does_this_generic_constructor_not_seem_to_get/", "subreddit_subscribers": 38140, "created_utc": 1587403173.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have a bunch of functions that I want to batch together with Promise.all, but I want each individual function to manage its own error/loading states.\n\nHow would you write the following code in such a way that \"x\" is of the type \"SomeType\"? Right now, since the catch block doesn't return anything, the compiler is unhappy. I would like to avoid having to give \"x\" the type \"SomeType | null\" if possible.  \n\n&amp;#x200B;\n\n`getSomePromise():\u00a0Promise&lt;SomeType&gt;\u00a0{`  \n `let promise\u00a0=\u00a0new Promise();`  \n `this.setState({\u00a0isLoading: true,\u00a0isError: false\u00a0});`  \n `try\u00a0{`  \n `promise\u00a0=\u00a0someHTTPcallFunction();`  \n\u00a0`}\u00a0catch\u00a0(err)\u00a0{`  \n `this.setState({\u00a0isError: true\u00a0});`  \n\u00a0`}`  \n `return promise;`  \n\u00a0\u00a0`}`\n\n`const x = await getSomePromise();`\n\n`const [xData, otherPromiseDataHere] = await Promise.all([x, otherPromisesHere])`", "author_fullname": "t2_j7qsn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to keep types intact when returning Promise from try-catch?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g4vn2d", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587427865.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a bunch of functions that I want to batch together with Promise.all, but I want each individual function to manage its own error/loading states.&lt;/p&gt;\n\n&lt;p&gt;How would you write the following code in such a way that &amp;quot;x&amp;quot; is of the type &amp;quot;SomeType&amp;quot;? Right now, since the catch block doesn&amp;#39;t return anything, the compiler is unhappy. I would like to avoid having to give &amp;quot;x&amp;quot; the type &amp;quot;SomeType | null&amp;quot; if possible.  &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;getSomePromise():\u00a0Promise&amp;lt;SomeType&amp;gt;\u00a0{&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;let promise\u00a0=\u00a0new Promise();&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;this.setState({\u00a0isLoading: true,\u00a0isError: false\u00a0});&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;try\u00a0{&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;promise\u00a0=\u00a0someHTTPcallFunction();&lt;/code&gt;&lt;br/&gt;\n\u00a0&lt;code&gt;}\u00a0catch\u00a0(err)\u00a0{&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;this.setState({\u00a0isError: true\u00a0});&lt;/code&gt;&lt;br/&gt;\n\u00a0&lt;code&gt;}&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;return promise;&lt;/code&gt;&lt;br/&gt;\n\u00a0\u00a0&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const x = await getSomePromise();&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;const [xData, otherPromiseDataHere] = await Promise.all([x, otherPromisesHere])&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g4vn2d", "is_robot_indexable": true, "report_reasons": null, "author": "restful_end_point", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g4vn2d/how_to_keep_types_intact_when_returning_promise/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g4vn2d/how_to_keep_types_intact_when_returning_promise/", "subreddit_subscribers": 38140, "created_utc": 1587399065.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_yudcnl6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hydro-SDK - Author native Flutter experiences in Typescript and deliver updates directly to users over the air and out of band", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_g4vcel", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/NCYWalMa4GUYdNscGrnAWRDCVp-9EaKgJ74BUisJJ8I.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1587426949.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/Z-8BIXT8-P9UG5WqDIM8-xI28xMScY0OwX9QFEOu248.jpg?auto=webp&amp;s=56813be5c157f0dccfeaa9e21d054d342983437f", "width": 200, "height": 200}, "resolutions": [{"url": "https://external-preview.redd.it/Z-8BIXT8-P9UG5WqDIM8-xI28xMScY0OwX9QFEOu248.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=56478310184f926b1436b2e4ab78d682471b461f", "width": 108, "height": 108}], "variants": {}, "id": "dd87A79VMNAbQj8FPEpSZwZUAmIkQtaoNAamWxwPD4k"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g4vcel", "is_robot_indexable": true, "report_reasons": null, "author": "chgibb", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g4vcel/hydrosdk_author_native_flutter_experiences_in/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/chgibb/hydro-sdk", "subreddit_subscribers": 38140, "created_utc": 1587398149.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_g4vcel", "before": null}}