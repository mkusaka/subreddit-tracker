{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Rules For Individuals\n---------------------\n\n* **Don't** create top-level comments - those are for employers.\n* Feel free to reply to top-level comments with **on-topic** questions.\n* I will create top-level comments for **meta** discussion and **individuals looking for work**.\n\nRules For Employers\n---------------------\n\n* You must be hiring **directly**. No third-party recruiters.\n* **One** top-level comment per employer. If you have multiple job openings, that's great, but please consolidate their descriptions or mention them in replies to your own top-level comment.\n* **Don't** use URL shorteners. [reddiquette](https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette) forbids them because they're opaque to the spam filter.\n* Templates are awesome. Please **use** the following template. As the \"formatting help\" says, use \\*\\*two stars\\*\\* to **bold text**. Use empty lines to separate sections.\n* **Proofread** your comment after posting it, and edit any formatting mistakes.\n\n---\n\n\\*\\*Company:\\*\\* [Company name; also, use the \"formatting help\" to make it a link to your company's website, or a specific careers page if you have one.]\n\n&amp;nbsp;\n\n\\*\\*Type:\\*\\* [Full time, part time, internship, contract, etc.]\n\n&amp;nbsp;\n\n\\*\\*Description:\\*\\* [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]\n\n&amp;nbsp;\n\n\\*\\*Location:\\*\\* [Where's your office - or if you're hiring at multiple offices, list them. If your workplace language isn't English, please specify it.]\n\n&amp;nbsp;\n\n\\*\\*Remote:\\*\\* [Do you offer the option of working remotely (permanently, or for the duration of the pandemic)? If so, do you require employees to live in certain areas or time zones?]\n\n&amp;nbsp;\n\n\\*\\*Visa Sponsorship:\\*\\* [Does your company sponsor visas?]\n\n&amp;nbsp;\n\n\\*\\*Technologies:\\*\\* [Required: do you mainly use C++98/03, C++11, C++14, C++17, or C++20? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]\n\n&amp;nbsp;\n\n\\*\\*Contact:\\*\\* [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]\n\n---\n\nPrevious Post\n--------------\n\n* [C++ Jobs - Q3 2020](https://www.reddit.com/r/cpp/comments/hjnaf2/c_jobs_q3_2020/)", "author_fullname": "t2_21c1y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++ Jobs - Q4 2020", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j3qems", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": "", "subreddit_type": "public", "ups": 59, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 59, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": "", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1601653452.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;Rules For Individuals&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; create top-level comments - those are for employers.&lt;/li&gt;\n&lt;li&gt;Feel free to reply to top-level comments with &lt;strong&gt;on-topic&lt;/strong&gt; questions.&lt;/li&gt;\n&lt;li&gt;I will create top-level comments for &lt;strong&gt;meta&lt;/strong&gt; discussion and &lt;strong&gt;individuals looking for work&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Rules For Employers&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You must be hiring &lt;strong&gt;directly&lt;/strong&gt;. No third-party recruiters.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;One&lt;/strong&gt; top-level comment per employer. If you have multiple job openings, that&amp;#39;s great, but please consolidate their descriptions or mention them in replies to your own top-level comment.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; use URL shorteners. &lt;a href=\"https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette\"&gt;reddiquette&lt;/a&gt; forbids them because they&amp;#39;re opaque to the spam filter.&lt;/li&gt;\n&lt;li&gt;Templates are awesome. Please &lt;strong&gt;use&lt;/strong&gt; the following template. As the &amp;quot;formatting help&amp;quot; says, use **two stars** to &lt;strong&gt;bold text&lt;/strong&gt;. Use empty lines to separate sections.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Proofread&lt;/strong&gt; your comment after posting it, and edit any formatting mistakes.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;**Company:** [Company name; also, use the &amp;quot;formatting help&amp;quot; to make it a link to your company&amp;#39;s website, or a specific careers page if you have one.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Type:** [Full time, part time, internship, contract, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Description:** [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Location:** [Where&amp;#39;s your office - or if you&amp;#39;re hiring at multiple offices, list them. If your workplace language isn&amp;#39;t English, please specify it.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Remote:** [Do you offer the option of working remotely (permanently, or for the duration of the pandemic)? If so, do you require employees to live in certain areas or time zones?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Visa Sponsorship:** [Does your company sponsor visas?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Technologies:** [Required: do you mainly use C++98/03, C++11, C++14, C++17, or C++20? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Contact:** [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Previous Post&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.reddit.com/r/cpp/comments/hjnaf2/c_jobs_q3_2020/\"&gt;C++ Jobs - Q3 2020&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "MSVC STL Dev", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j3qems", "is_robot_indexable": true, "report_reasons": null, "author": "STL", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/j3qems/c_jobs_q4_2020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/cpp/comments/j3qems/c_jobs_q4_2020/", "subreddit_subscribers": 156696, "created_utc": 1601624652.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Once again there is a question \"Does anyone know what is the status of XXX proposal?\" posted on this subreddit. Myself, I had such a question about different proposals many times, and always found it hard to answer. The information seems to be all over the place - reddit posts, meeting reports, mailing lists... I think there is a dire need for system, where one can find all ongoing / closed proposals with their statuses, current revisions, and links to all the previous revisions. One could argue, that papers on http://www.open-std.org/ have all the information, but it is impossible to:\n- find the newest revision of given paper,\n- search for any particular paper, without knowing the year it was published,\n- filter papers by subgroups / topics,\n- there is no easy to find information, that the paper got rejected, abandoned etc. there only is an information, if the paper got adopted.\n\nI think there is a need for website (maybe community-driven/created?) with all that information. Maybe also as a forum for discussion on certain proposals, rather than obscure mailing lists. Is it only me, or do anyone else thinks the same?", "author_fullname": "t2_qddo9fp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "There is a need for more organized, open system with standard proposals", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j6nl77", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 43, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 43, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602090309.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Once again there is a question &amp;quot;Does anyone know what is the status of XXX proposal?&amp;quot; posted on this subreddit. Myself, I had such a question about different proposals many times, and always found it hard to answer. The information seems to be all over the place - reddit posts, meeting reports, mailing lists... I think there is a dire need for system, where one can find all ongoing / closed proposals with their statuses, current revisions, and links to all the previous revisions. One could argue, that papers on &lt;a href=\"http://www.open-std.org/\"&gt;http://www.open-std.org/&lt;/a&gt; have all the information, but it is impossible to:\n- find the newest revision of given paper,\n- search for any particular paper, without knowing the year it was published,\n- filter papers by subgroups / topics,\n- there is no easy to find information, that the paper got rejected, abandoned etc. there only is an information, if the paper got adopted.&lt;/p&gt;\n\n&lt;p&gt;I think there is a need for website (maybe community-driven/created?) with all that information. Maybe also as a forum for discussion on certain proposals, rather than obscure mailing lists. Is it only me, or do anyone else thinks the same?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j6nl77", "is_robot_indexable": true, "report_reasons": null, "author": "KaznovX", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/j6nl77/there_is_a_need_for_more_organized_open_system/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/j6nl77/there_is_a_need_for_more_organized_open_system/", "subreddit_subscribers": 156696, "created_utc": 1602061509.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_11pe86", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "The Community", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j6oc4q", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.62, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1602094650.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "thephd.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://thephd.github.io/the-community", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j6oc4q", "is_robot_indexable": true, "report_reasons": null, "author": "vormestrand", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/j6oc4q/the_community/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://thephd.github.io/the-community", "subreddit_subscribers": 156696, "created_utc": 1602065850.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "I am currently looking into what seems like a memory leak with a multithreaded C++ 11 application. The weird part about this is that when I use Valgrind Massif or Heaptrack I do not see a leak in the heap. The heap memory stays at about 15 MB but what I am noticing is that when I continue to use the application, I see that the RSS memory keeps increasing. I have also analyzed the number of threads to see if there is a thread leak, but the total number of threads does remain constant ( though the application does create and join threads a bunch of times)\n\nCould someone give me pointers on how I can go about exploring this leak. I have used pmap to list out the pages and I do see few blocks marked as [anon] that are contributing for the increased RSS. But I am not sure how to track them back to the corresponding code. Is there a way to set break points for these blocks or is there some other way of analyzing what is contributing to this?\n\nI read that fragmentation could cause this or that this could happen when malloc does not release memory back to the system. I would like to track down which function calls cause these bumps so that I can work on optimizing those.\n\nPlease forgive me if this is too obvious but would love to know more about this.", "author_fullname": "t2_8dkq92fb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Analyzing RSS memory leak for a C++ application", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j6m1xn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.79, "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602081391.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am currently looking into what seems like a memory leak with a multithreaded C++ 11 application. The weird part about this is that when I use Valgrind Massif or Heaptrack I do not see a leak in the heap. The heap memory stays at about 15 MB but what I am noticing is that when I continue to use the application, I see that the RSS memory keeps increasing. I have also analyzed the number of threads to see if there is a thread leak, but the total number of threads does remain constant ( though the application does create and join threads a bunch of times)&lt;/p&gt;\n\n&lt;p&gt;Could someone give me pointers on how I can go about exploring this leak. I have used pmap to list out the pages and I do see few blocks marked as [anon] that are contributing for the increased RSS. But I am not sure how to track them back to the corresponding code. Is there a way to set break points for these blocks or is there some other way of analyzing what is contributing to this?&lt;/p&gt;\n\n&lt;p&gt;I read that fragmentation could cause this or that this could happen when malloc does not release memory back to the system. I would like to track down which function calls cause these bumps so that I can work on optimizing those.&lt;/p&gt;\n\n&lt;p&gt;Please forgive me if this is too obvious but would love to know more about this.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j6m1xn", "is_robot_indexable": true, "report_reasons": null, "author": "Electrical_One6141", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/j6m1xn/analyzing_rss_memory_leak_for_a_c_application/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/j6m1xn/analyzing_rss_memory_leak_for_a_c_application/", "subreddit_subscribers": 156696, "created_utc": 1602052591.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": " [https://gist.github.com/Hamondorf/5e227ae6c204321842a4b0138630e76c](https://gist.github.com/Hamondorf/5e227ae6c204321842a4b0138630e76c) \n\nFeedback and opinions welcome! Examples are given towards the bottom of the gist.\n\nEdit:\nI realized if a class has a reference member you can\u2019t for a pointer to member to it, but what you can do instead is have either a member or free function (taking the class reference as an argument) that just acts an accessory for the reference. Glad the way I wrote it allows for that without changing anything :P", "author_fullname": "t2_42jxrg6y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Tuplify, std::tie but cooler (I hope). Structured bindings to specific members using their names or their getters.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j6d3s6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 65, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 65, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1602037253.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602045532.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://gist.github.com/Hamondorf/5e227ae6c204321842a4b0138630e76c\"&gt;https://gist.github.com/Hamondorf/5e227ae6c204321842a4b0138630e76c&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;Feedback and opinions welcome! Examples are given towards the bottom of the gist.&lt;/p&gt;\n\n&lt;p&gt;Edit:\nI realized if a class has a reference member you can\u2019t for a pointer to member to it, but what you can do instead is have either a member or free function (taking the class reference as an argument) that just acts an accessory for the reference. Glad the way I wrote it allows for that without changing anything :P&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j6d3s6", "is_robot_indexable": true, "report_reasons": null, "author": "Hamondorf", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/j6d3s6/tuplify_stdtie_but_cooler_i_hope_structured/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/j6d3s6/tuplify_stdtie_but_cooler_i_hope_structured/", "subreddit_subscribers": 156696, "created_utc": 1602016732.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_1g4rysz2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Does anyone know what the status of TartanLlama's p0798R3: Monadic operations for std::optional is?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j6i82o", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 21, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 21, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1602064077.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "open-std.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0798r3.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j6i82o", "is_robot_indexable": true, "report_reasons": null, "author": "pratikpc", "discussion_type": null, "num_comments": 20, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/j6i82o/does_anyone_know_what_the_status_of_tartanllamas/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2019/p0798r3.html", "subreddit_subscribers": 156696, "created_utc": 1602035277.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "I posted to cpp_questions and got answers about what coroutines do: split a thread\u2019s *execution* from its *state*. But I still don\u2019t understand when they are the right tool.\n\nI wrote a chess engine. I have an alpha-beta pruned minimax tree. I don\u2019t need a full list of child nodes (chess moves) at every depth (board), only a few up to an alpha-beta cutoff. Generators solve this problem elegantly.\n\nI\u2019m struggling to come up with any other situations where coroutines are the right tool. When is polling, std::async, a thread-pool, a functor, or a thread-safe container a not a more performant or simple option?\n\nIn other words, co_yield is great. But why co_await?", "author_fullname": "t2_1x23d82m", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Other than generators, what do coroutines solve better?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_j6pi07", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602100729.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I posted to cpp_questions and got answers about what coroutines do: split a thread\u2019s &lt;em&gt;execution&lt;/em&gt; from its &lt;em&gt;state&lt;/em&gt;. But I still don\u2019t understand when they are the right tool.&lt;/p&gt;\n\n&lt;p&gt;I wrote a chess engine. I have an alpha-beta pruned minimax tree. I don\u2019t need a full list of child nodes (chess moves) at every depth (board), only a few up to an alpha-beta cutoff. Generators solve this problem elegantly.&lt;/p&gt;\n\n&lt;p&gt;I\u2019m struggling to come up with any other situations where coroutines are the right tool. When is polling, std::async, a thread-pool, a functor, or a thread-safe container a not a more performant or simple option?&lt;/p&gt;\n\n&lt;p&gt;In other words, co_yield is great. But why co_await?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j6pi07", "is_robot_indexable": true, "report_reasons": null, "author": "XiPingTing", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/j6pi07/other_than_generators_what_do_coroutines_solve/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/j6pi07/other_than_generators_what_do_coroutines_solve/", "subreddit_subscribers": 156696, "created_utc": 1602071929.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_auae5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Announcing the closing keynote of Meeting C++ 2020", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": "meetingcpp", "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j6o72y", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": "", "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Meeting C++", "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1602093874.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "meetingcpp.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.meetingcpp.com/meetingcpp/news/items/Announcing-the-closing-keynote-of-Meeting-Cpp-2020.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "Meeting C++ | C++ Evangelist", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j6o72y", "is_robot_indexable": true, "report_reasons": null, "author": "meetingcpp", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/j6o72y/announcing_the_closing_keynote_of_meeting_c_2020/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.meetingcpp.com/meetingcpp/news/items/Announcing-the-closing-keynote-of-Meeting-Cpp-2020.html", "subreddit_subscribers": 156696, "created_utc": 1602065074.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "    int main(int,char*[]) {\n        int c=0;\n        if(c&gt;c++)\n            std::cout &lt;&lt; \"Ooops UB!\" &lt;&lt;std::endl;\n        return 1;\n    }\n   \nSo much for c++ being bigger than c.\n\nPetition to rename c++ to ++c.\n\nEdit: It has been pointed out to me that this is UB based on the [order of evaluation](https://en.cppreference.com/w/cpp/language/eval_order) rules. However, I'll leave the post so others can learn from my shame. (Thank you to /u/HappyFruitTree  and /u/TheSuperWig)", "author_fullname": "t2_gf7c2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Showerthought] c&gt;c++ is actually true.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j6onz5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.31, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1602070017.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602096466.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;int main(int,char*[]) {\n    int c=0;\n    if(c&amp;gt;c++)\n        std::cout &amp;lt;&amp;lt; &amp;quot;Ooops UB!&amp;quot; &amp;lt;&amp;lt;std::endl;\n    return 1;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So much for c++ being bigger than c.&lt;/p&gt;\n\n&lt;p&gt;Petition to rename c++ to ++c.&lt;/p&gt;\n\n&lt;p&gt;Edit: It has been pointed out to me that this is UB based on the &lt;a href=\"https://en.cppreference.com/w/cpp/language/eval_order\"&gt;order of evaluation&lt;/a&gt; rules. However, I&amp;#39;ll leave the post so others can learn from my shame. (Thank you to &lt;a href=\"/u/HappyFruitTree\"&gt;/u/HappyFruitTree&lt;/a&gt;  and &lt;a href=\"/u/TheSuperWig\"&gt;/u/TheSuperWig&lt;/a&gt;)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j6onz5", "is_robot_indexable": true, "report_reasons": null, "author": "chillhelm", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/j6onz5/showerthought_cc_is_actually_true/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/j6onz5/showerthought_cc_is_actually_true/", "subreddit_subscribers": 156696, "created_utc": 1602067666.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "[https://github.com/HO-COOH/SugarPP](https://github.com/HO-COOH/SugarPP) \n\nI made the project \"SugarPP\" as my self-made C++ syntactic sugar collection. As a side project, it aims to port some nice features from other languages to C++ (as intuitive as it can possibly get). And I have great fun doing it XD.\n\nCurrently, the undocumented code is the part I am still working on ~~but somehow get committed~~.\n\nI am humbly looking for advices/new ideas/suggestions/bug reviews/contributions. As I only have a little more than 1 year of C++ experience, the code may be extremely buggy. Please be specific about any issues that I have.", "author_fullname": "t2_zq927m2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "SugarPP: My C++ syntactic sugar collection", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j5sqbw", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 135, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 135, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1601963491.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/HO-COOH/SugarPP\"&gt;https://github.com/HO-COOH/SugarPP&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;I made the project &amp;quot;SugarPP&amp;quot; as my self-made C++ syntactic sugar collection. As a side project, it aims to port some nice features from other languages to C++ (as intuitive as it can possibly get). And I have great fun doing it XD.&lt;/p&gt;\n\n&lt;p&gt;Currently, the undocumented code is the part I am still working on &lt;del&gt;but somehow get committed&lt;/del&gt;.&lt;/p&gt;\n\n&lt;p&gt;I am humbly looking for advices/new ideas/suggestions/bug reviews/contributions. As I only have a little more than 1 year of C++ experience, the code may be extremely buggy. Please be specific about any issues that I have.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j5sqbw", "is_robot_indexable": true, "report_reasons": null, "author": "HO-COOH", "discussion_type": null, "num_comments": 48, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/j5sqbw/sugarpp_my_c_syntactic_sugar_collection/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/j5sqbw/sugarpp_my_c_syntactic_sugar_collection/", "subreddit_subscribers": 156696, "created_utc": 1601934691.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_auae5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Meeting C++ plans an online C++ job fair on October 20th", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": "meetingcpp", "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_j61y8q", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.72, "author_flair_background_color": "", "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Meeting C++", "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1602004770.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "meetingcpp.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://meetingcpp.com/meetingcpp/news/items/An-online-Cpp-job-fair-on-October-20th.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "Meeting C++ | C++ Evangelist", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j61y8q", "is_robot_indexable": true, "report_reasons": null, "author": "meetingcpp", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/j61y8q/meeting_c_plans_an_online_c_job_fair_on_october/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://meetingcpp.com/meetingcpp/news/items/An-online-Cpp-job-fair-on-October-20th.html", "subreddit_subscribers": 156696, "created_utc": 1601975970.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_j61y8q", "before": null}}