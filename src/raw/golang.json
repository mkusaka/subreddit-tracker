{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_57uz3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Announcing the 2020 Go Developer Survey", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jeuosg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 158, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 158, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603245041.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.golang.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://blog.golang.org/survey2020", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jeuosg", "is_robot_indexable": true, "report_reasons": null, "author": "spf13", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jeuosg/announcing_the_2020_go_developer_survey/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://blog.golang.org/survey2020", "subreddit_subscribers": 128243, "created_utc": 1603216241.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I thought it would be good if I share some of my CLI based utility for tracing **NSQ** messages built with Golang here. In case someone needs it.\n\n&amp;#x200B;\n\n[Github Preview](https://preview.redd.it/lmhfnnmpveu51.png?width=1113&amp;format=png&amp;auto=webp&amp;s=2f4ef1bb502b17fa578c46a6fa9933eaa17c394c)\n\n[https://github.com/slaveofcode/nsqtracer](https://github.com/slaveofcode/nsqtracer)", "author_fullname": "t2_21m4toey", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "NSQTracer to watch published NSQ messages", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "media_metadata": {"lmhfnnmpveu51": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 76, "x": 108, "u": "https://preview.redd.it/lmhfnnmpveu51.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=7856850ae661730aca9f0ff29790653565bc457d"}, {"y": 152, "x": 216, "u": "https://preview.redd.it/lmhfnnmpveu51.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=612de3868eba740d555560efd8d3b0aa3f9d47ca"}, {"y": 226, "x": 320, "u": "https://preview.redd.it/lmhfnnmpveu51.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=c5afec46c01812089fdc5992050e9cdc670b49db"}, {"y": 453, "x": 640, "u": "https://preview.redd.it/lmhfnnmpveu51.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=6c3df839d88b86c16a24c05aa9fdf5a6de50762e"}, {"y": 679, "x": 960, "u": "https://preview.redd.it/lmhfnnmpveu51.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=7dc696707b4f2e604b6747159768d7f1b1543eaf"}, {"y": 764, "x": 1080, "u": "https://preview.redd.it/lmhfnnmpveu51.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=2f0eeddf79cb45328fe7ff1931b018826b02bc58"}], "s": {"y": 788, "x": 1113, "u": "https://preview.redd.it/lmhfnnmpveu51.png?width=1113&amp;format=png&amp;auto=webp&amp;s=2f4ef1bb502b17fa578c46a6fa9933eaa17c394c"}, "id": "lmhfnnmpveu51"}}, "name": "t3_jf97h3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603298799.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I thought it would be good if I share some of my CLI based utility for tracing &lt;strong&gt;NSQ&lt;/strong&gt; messages built with Golang here. In case someone needs it.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/lmhfnnmpveu51.png?width=1113&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=2f4ef1bb502b17fa578c46a6fa9933eaa17c394c\"&gt;Github Preview&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/slaveofcode/nsqtracer\"&gt;https://github.com/slaveofcode/nsqtracer&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jf97h3", "is_robot_indexable": true, "report_reasons": null, "author": "zeandcode", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jf97h3/nsqtracer_to_watch_published_nsq_messages/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jf97h3/nsqtracer_to_watch_published_nsq_messages/", "subreddit_subscribers": 128243, "created_utc": 1603269999.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Am doing integration with a third party and the communication is being done over TCP sockets. They have this requirement(**Message variable length indicator**) where am supposed to represent the XML message length as a 2 binary byte message length.\n\nFor example, my message is 1024 in length. How do I represent 1024 as binary two-bytes?\n\n&amp;#x200B;\n\nHere is a similar issue in ruby [https://stackoverflow.com/questions/13794817/ruby-how-to-represent-message-length-as-2-binary-bytes](https://stackoverflow.com/questions/13794817/ruby-how-to-represent-message-length-as-2-binary-bytes)", "author_fullname": "t2_8dnup56e", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Represent Message Length as a 2-byte binary", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jf9xkk", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603302870.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Am doing integration with a third party and the communication is being done over TCP sockets. They have this requirement(&lt;strong&gt;Message variable length indicator&lt;/strong&gt;) where am supposed to represent the XML message length as a 2 binary byte message length.&lt;/p&gt;\n\n&lt;p&gt;For example, my message is 1024 in length. How do I represent 1024 as binary two-bytes?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Here is a similar issue in ruby &lt;a href=\"https://stackoverflow.com/questions/13794817/ruby-how-to-represent-message-length-as-2-binary-bytes\"&gt;https://stackoverflow.com/questions/13794817/ruby-how-to-represent-message-length-as-2-binary-bytes&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jf9xkk", "is_robot_indexable": true, "report_reasons": null, "author": "nixoncodes", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jf9xkk/represent_message_length_as_a_2byte_binary/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jf9xkk/represent_message_length_as_a_2byte_binary/", "subreddit_subscribers": 128243, "created_utc": 1603274070.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Helps k8s-less provisioning and updating to the newer version of a stateless container without pains of recalling the command-line options used to start the container.\n\n[https://github.com/jdevelop/repull](https://github.com/jdevelop/repull)", "author_fullname": "t2_6wjzg", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A simple helper to restart Docker containers with newer versions of images pulled from registry.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jfcus1", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603315939.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Helps k8s-less provisioning and updating to the newer version of a stateless container without pains of recalling the command-line options used to start the container.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/jdevelop/repull\"&gt;https://github.com/jdevelop/repull&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jfcus1", "is_robot_indexable": true, "report_reasons": null, "author": "jdevelop", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jfcus1/a_simple_helper_to_restart_docker_containers_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jfcus1/a_simple_helper_to_restart_docker_containers_with/", "subreddit_subscribers": 128243, "created_utc": 1603287139.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello everyone, I'm new to golang. The question is in the title. Right now I settled on the Iris framework [https://www.iris-go.com/](https://www.iris-go.com/) because it is the newest and seems to be powerful. What do you use in commercial projects and what do you like the most?", "author_fullname": "t2_599n9l0o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best golang framework for REST API?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jf9ih7", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.63, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603300543.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everyone, I&amp;#39;m new to golang. The question is in the title. Right now I settled on the Iris framework &lt;a href=\"https://www.iris-go.com/\"&gt;https://www.iris-go.com/&lt;/a&gt; because it is the newest and seems to be powerful. What do you use in commercial projects and what do you like the most?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jf9ih7", "is_robot_indexable": true, "report_reasons": null, "author": "LilKsta", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jf9ih7/best_golang_framework_for_rest_api/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jf9ih7/best_golang_framework_for_rest_api/", "subreddit_subscribers": 128243, "created_utc": 1603271743.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I'm toying with the idea of writing a GUI for a terminal application I've created in the past year - what are the best current options for creating a GUI with Go today?", "author_fullname": "t2_3dpp1hci", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go and GUI, what to do?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jeywfv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603257575.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m toying with the idea of writing a GUI for a terminal application I&amp;#39;ve created in the past year - what are the best current options for creating a GUI with Go today?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jeywfv", "is_robot_indexable": true, "report_reasons": null, "author": "down-house", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jeywfv/go_and_gui_what_to_do/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jeywfv/go_and_gui_what_to_do/", "subreddit_subscribers": 128243, "created_utc": 1603228775.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_3i8ybf1x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A golang tool \u2014- for fast generating icon for MacOS App", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jf9hu9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.6, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603300441.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/scott-x/icns", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jf9hu9", "is_robot_indexable": true, "report_reasons": null, "author": "Slimz89", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jf9hu9/a_golang_tool_for_fast_generating_icon_for_macos/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/scott-x/icns", "subreddit_subscribers": 128243, "created_utc": 1603271641.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ewto0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Learn Go test-first with 'For the Love of Go: Fundamentals'", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jelx8o", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 71, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 71, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603213880.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "bitfieldconsulting.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://bitfieldconsulting.com/books/fundamentals", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jelx8o", "is_robot_indexable": true, "report_reasons": null, "author": "bitfieldconsulting", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jelx8o/learn_go_testfirst_with_for_the_love_of_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://bitfieldconsulting.com/books/fundamentals", "subreddit_subscribers": 128243, "created_utc": 1603185080.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_68joj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "hashicorp/waypoint: A tool to build, deploy, and release any application on any platform", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jeq7c6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.85, "author_flair_background_color": null, "subreddit_type": "public", "ups": 29, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 29, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603231739.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/hashicorp/waypoint", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jeq7c6", "is_robot_indexable": true, "report_reasons": null, "author": "juanpabloaj", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jeq7c6/hashicorpwaypoint_a_tool_to_build_deploy_and/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/hashicorp/waypoint", "subreddit_subscribers": 128243, "created_utc": 1603202939.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi folks,\n\nI would like to present my project that I was working on for the last couple of months. Luks.go - a pure-Golang library to manage partitions encrypted with LUKS [https://github.com/anatol/luks.go](https://github.com/anatol/luks.go)\n\nIf you need to deal with LUKS partition in your golang application then luks.go is your friend. Luks.go allows you to unlock a LUKS partition without using system dynamic libraries or standalone tools like cryptsetup. Pulling such system dependencies is a PITA especially if your tool needs to work across different OS versions.\n\nCurrently luks.go supports unlocking only. In the future it might contain operations that modify luks metadata (e.g. adding/removing keyslots). Though this functionality is more dangerous and requires more time for development and testing.\n\nThis work has been sponsored by my employer - Twitter. The project has been started as a part of Twitter hackathon week. I want to say thanks to my company and my manager for supporting me in my open-source work.", "author_fullname": "t2_5mpmfybw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Luks.go: pure-Golang implementation of LUKS partition manager", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jey9fq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603255644.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi folks,&lt;/p&gt;\n\n&lt;p&gt;I would like to present my project that I was working on for the last couple of months. Luks.go - a pure-Golang library to manage partitions encrypted with LUKS &lt;a href=\"https://github.com/anatol/luks.go\"&gt;https://github.com/anatol/luks.go&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you need to deal with LUKS partition in your golang application then luks.go is your friend. Luks.go allows you to unlock a LUKS partition without using system dynamic libraries or standalone tools like cryptsetup. Pulling such system dependencies is a PITA especially if your tool needs to work across different OS versions.&lt;/p&gt;\n\n&lt;p&gt;Currently luks.go supports unlocking only. In the future it might contain operations that modify luks metadata (e.g. adding/removing keyslots). Though this functionality is more dangerous and requires more time for development and testing.&lt;/p&gt;\n\n&lt;p&gt;This work has been sponsored by my employer - Twitter. The project has been started as a part of Twitter hackathon week. I want to say thanks to my company and my manager for supporting me in my open-source work.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jey9fq", "is_robot_indexable": true, "report_reasons": null, "author": "anatol-pomozov", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jey9fq/luksgo_puregolang_implementation_of_luks/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jey9fq/luksgo_puregolang_implementation_of_luks/", "subreddit_subscribers": 128243, "created_utc": 1603226844.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "[https://github.com/zix99/rare](https://github.com/zix99/rare)\n\nThis is a golang project I've been working on off-and-on for a while.  Originally, it was to help suite my needs to analyze massive amounts of log files (gigabytes+) and get incremental output, rather than waiting for something like \\`zcat | uniq\\` to run.  I still use it from time to time, but wanted to share with you all\n\nHere's an example of analyzing nginx log files for statuses:\n\n    ./rare histo -m '\" (\\d{3})' -e \"{bucket {1} 100}\" -xz testdata/*\n    400                 5,807,761  [69.4%] ||||||||||||||||||||||||||\n    200                 2,565,032  [30.6%] |||||||||||\n    300                 535        [ 0.0%] \n    \n    \n    Matched: 8,373,328 / 8,383,717 (Groups: 3)\n\nIt supports a range of features similar to other programs you're already used to: gunzipping, regex search, simple handlebars-like expressions, ignore patterns, etc.\n\nHope you like my project.  Always happy to take feedback!  I went through great pains to optimize this, and learned a lot about go in the process.", "author_fullname": "t2_e36m2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rare realtime log aggregator released 0.1.27 with bug fixes and better histogram support", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jf482g", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603275517.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/zix99/rare\"&gt;https://github.com/zix99/rare&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is a golang project I&amp;#39;ve been working on off-and-on for a while.  Originally, it was to help suite my needs to analyze massive amounts of log files (gigabytes+) and get incremental output, rather than waiting for something like `zcat | uniq` to run.  I still use it from time to time, but wanted to share with you all&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s an example of analyzing nginx log files for statuses:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;./rare histo -m &amp;#39;&amp;quot; (\\d{3})&amp;#39; -e &amp;quot;{bucket {1} 100}&amp;quot; -xz testdata/*\n400                 5,807,761  [69.4%] ||||||||||||||||||||||||||\n200                 2,565,032  [30.6%] |||||||||||\n300                 535        [ 0.0%] \n\n\nMatched: 8,373,328 / 8,383,717 (Groups: 3)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It supports a range of features similar to other programs you&amp;#39;re already used to: gunzipping, regex search, simple handlebars-like expressions, ignore patterns, etc.&lt;/p&gt;\n\n&lt;p&gt;Hope you like my project.  Always happy to take feedback!  I went through great pains to optimize this, and learned a lot about go in the process.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jf482g", "is_robot_indexable": true, "report_reasons": null, "author": "zix99", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jf482g/rare_realtime_log_aggregator_released_0127_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jf482g/rare_realtime_log_aggregator_released_0127_with/", "subreddit_subscribers": 128243, "created_utc": 1603246717.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_jf482g", "before": null}}