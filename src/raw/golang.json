{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I posted a draft design today for updating the // +build lines to fix some usability problems. \n\nVideo: [https://golang.org/s/go-build-video](https://golang.org/s/go-build-video)\\\nDesign: [https://golang.org/s/go-build-design](https://golang.org/s/go-build-design)\n\nAs an experiment, let's try doing Q&amp;A about the design here in Reddit.\nMy hope is that the threading support will help keep questions and answers matched.\n\n**Please start a new top-level comment for each new question.**", "author_fullname": "t2_2jha", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Q&amp;A] //go:build draft design", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hitexe", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 115, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 115, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593571451.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I posted a draft design today for updating the // +build lines to fix some usability problems. &lt;/p&gt;\n\n&lt;p&gt;Video: &lt;a href=\"https://golang.org/s/go-build-video\"&gt;https://golang.org/s/go-build-video&lt;/a&gt;\\\nDesign: &lt;a href=\"https://golang.org/s/go-build-design\"&gt;https://golang.org/s/go-build-design&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;As an experiment, let&amp;#39;s try doing Q&amp;amp;A about the design here in Reddit.\nMy hope is that the threading support will help keep questions and answers matched.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Please start a new top-level comment for each new question.&lt;/strong&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hitexe", "is_robot_indexable": true, "report_reasons": null, "author": "rsc", "discussion_type": null, "num_comments": 75, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hitexe/qa_gobuild_draft_design/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/golang/comments/hitexe/qa_gobuild_draft_design/", "subreddit_subscribers": 117819, "created_utc": 1593542651.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_72kvpm6b", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Github-like calendar heatmap in plain Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hkgcz9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 33, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 33, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593799063.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/nikolaydubina/calendarheatmap", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hkgcz9", "is_robot_indexable": true, "report_reasons": null, "author": "nikolay123sdf12eas", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hkgcz9/githublike_calendar_heatmap_in_plain_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/nikolaydubina/calendarheatmap", "subreddit_subscribers": 117819, "created_utc": 1593770263.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "My [Go Programming Language](https://www.gopl.io/) book mentions the use of GOPATH as a means to store Go code related to source files, packages and a bin directory. I'm slightly confused about this, does that mean that the only place I can write go code would be in the $GOPATH ?\n\nAlso, [go w/tests](https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/install-go#go-modules) states that GOPATH will be deprecated soon. So should I just forget about this concept and move on with Go modules?\n\nTruth be told, I haven't researched into the benefits of Go modules too much as of yet as I'm just trying to set up my local Go environment before I start coding. It seems that I should just forget about GOPATH and just get cracking with code. Would anyone be able to ease my mind off this issue?\n\nMuch appreciated :)", "author_fullname": "t2_52tw4wtc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Started learning Go today. Is my understanding correct that GOPATH is no longer required in favour of Go modules?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hkishj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593810656.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;My &lt;a href=\"https://www.gopl.io/\"&gt;Go Programming Language&lt;/a&gt; book mentions the use of GOPATH as a means to store Go code related to source files, packages and a bin directory. I&amp;#39;m slightly confused about this, does that mean that the only place I can write go code would be in the $GOPATH ?&lt;/p&gt;\n\n&lt;p&gt;Also, &lt;a href=\"https://quii.gitbook.io/learn-go-with-tests/go-fundamentals/install-go#go-modules\"&gt;go w/tests&lt;/a&gt; states that GOPATH will be deprecated soon. So should I just forget about this concept and move on with Go modules?&lt;/p&gt;\n\n&lt;p&gt;Truth be told, I haven&amp;#39;t researched into the benefits of Go modules too much as of yet as I&amp;#39;m just trying to set up my local Go environment before I start coding. It seems that I should just forget about GOPATH and just get cracking with code. Would anyone be able to ease my mind off this issue?&lt;/p&gt;\n\n&lt;p&gt;Much appreciated :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hkishj", "is_robot_indexable": true, "report_reasons": null, "author": "sonjpaul", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hkishj/started_learning_go_today_is_my_understanding/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hkishj/started_learning_go_today_is_my_understanding/", "subreddit_subscribers": 117819, "created_utc": 1593781856.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_2km3968m", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Size doesn't matter", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hjuyfv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 525, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 525, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593716407.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://i.redd.it/m5tjssbydf851.jpg", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hjuyfv", "is_robot_indexable": true, "report_reasons": null, "author": "commo64dor", "discussion_type": null, "num_comments": 100, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hjuyfv/size_doesnt_matter/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://i.redd.it/m5tjssbydf851.jpg", "subreddit_subscribers": 117819, "created_utc": 1593687607.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "What are people doing for private dependencies these days in your CI?\n\nVendoring? Do you put credentials into your builder nodes? SSH key? Access token?\n\nWhat's considered standard these days?", "author_fullname": "t2_5woosh8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How do you deal with private dependencies in CI?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hkiyfo", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "author_cakeday": true, "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593811323.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;What are people doing for private dependencies these days in your CI?&lt;/p&gt;\n\n&lt;p&gt;Vendoring? Do you put credentials into your builder nodes? SSH key? Access token?&lt;/p&gt;\n\n&lt;p&gt;What&amp;#39;s considered standard these days?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hkiyfo", "is_robot_indexable": true, "report_reasons": null, "author": "_a9o_", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hkiyfo/how_do_you_deal_with_private_dependencies_in_ci/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hkiyfo/how_do_you_deal_with_private_dependencies_in_ci/", "subreddit_subscribers": 117819, "created_utc": 1593782523.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello everyone, I asked the following question on StackOverflow too but did not receive a response. I was wondering if anyone here could help me.\n\nSuppose I have a given bucket name `bucket` and a slice of (string) item keys `keys`. I can get the tags for all of these objects by doing the following:\n\n    sess, _ := session.NewSession(&amp;aws.Config{\n    \tRegion: aws.String(\"eu-west-2\"),\n    })\n    \n    svc := s3.New(sess)\n    \n    for _, key := range(keys) {\n        response, _ := svc.GetObjectTagging(\n            &amp;s3.GetObjectTaggingInput{\n    \t        Bucket: aws.String(bucket),\n    \t        Key:    aws.String(key),\n    \t    }\n        )\n    \tfmt.Println(response.TagSet)\n    }\n\nIn my program, I am finding this quite slow. Is there a way to get all the tags in one go, instead of calling this multiple times?\n\nAny help would be much appreciated, thank you.", "author_fullname": "t2_7qvm8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is it possible to get multiple AWS S3 object tags in batch using Go?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hkipr3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593810360.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everyone, I asked the following question on StackOverflow too but did not receive a response. I was wondering if anyone here could help me.&lt;/p&gt;\n\n&lt;p&gt;Suppose I have a given bucket name &lt;code&gt;bucket&lt;/code&gt; and a slice of (string) item keys &lt;code&gt;keys&lt;/code&gt;. I can get the tags for all of these objects by doing the following:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sess, _ := session.NewSession(&amp;amp;aws.Config{\n    Region: aws.String(&amp;quot;eu-west-2&amp;quot;),\n})\n\nsvc := s3.New(sess)\n\nfor _, key := range(keys) {\n    response, _ := svc.GetObjectTagging(\n        &amp;amp;s3.GetObjectTaggingInput{\n            Bucket: aws.String(bucket),\n            Key:    aws.String(key),\n        }\n    )\n    fmt.Println(response.TagSet)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In my program, I am finding this quite slow. Is there a way to get all the tags in one go, instead of calling this multiple times?&lt;/p&gt;\n\n&lt;p&gt;Any help would be much appreciated, thank you.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hkipr3", "is_robot_indexable": true, "report_reasons": null, "author": "MarkFluffalo", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hkipr3/is_it_possible_to_get_multiple_aws_s3_object_tags/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hkipr3/is_it_possible_to_get_multiple_aws_s3_object_tags/", "subreddit_subscribers": 117819, "created_utc": 1593781560.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_y55m37h", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "WaitGroup in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hkibg3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.33, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593808638.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "chenpy.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://chenpy.com/article/87235493714501274", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hkibg3", "is_robot_indexable": true, "report_reasons": null, "author": "chenpeiyuan", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hkibg3/waitgroup_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://chenpy.com/article/87235493714501274", "subreddit_subscribers": 117819, "created_utc": 1593779838.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_17jq8f", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A Journey building a fast JSON parser and full JSONPath, Oj for Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hk1hm6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 21, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 21, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593740238.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/ohler55/ojg/blob/master/design.md", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hk1hm6", "is_robot_indexable": true, "report_reasons": null, "author": "peteohler", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hk1hm6/a_journey_building_a_fast_json_parser_and_full/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/ohler55/ojg/blob/master/design.md", "subreddit_subscribers": 117819, "created_utc": 1593711438.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I wanted to pass an `io.Reader` to a function to replace `os.Stdin` for testing. Unfortunately my function started behaving differently when using `strings.NewReader()`. Below is a simplified reproduction.\n\nThe first line of `INPUT` gives the number of records I want to read from stdin. Each record consists of two lines: the number of integers and the integers separated by spaces.\n\n    package main\n    \n    import (\n    \t\"fmt\"\n    \t\"io\"\n    \t\"os\"\n    \t\"strings\"\n    )\n    \n    func main() {\n    \tINPUT := `2\n    2\n    1 2\n    3\n    1 2 3\n    `\n    \tfmt.Println(ReadInput(strings.NewReader(INPUT)))\n    \tfmt.Println(ReadInput(os.Stdin))\n    }\n    \n    func ReadInput(reader io.Reader) [][]int {\n    \tvar countRecords int\n    \t_, _ = fmt.Fscanln(reader, &amp;countRecords)\n    \n    \trecords := make([][]int, countRecords)\n    \tfor i := 0; i &lt; countRecords; i++ {\n    \t\tvar countNumbers int\n    \t\t_, _ = fmt.Fscanln(reader, &amp;countNumbers)\n    \n    \t\tnumbers := make([]int, countNumbers)\n    \t\tfor j := 0; j &lt; countNumbers; j++ {\n    \t\t\tfmt.Fscan(reader, &amp;numbers[j])\n    \t\t}\n    \n    \t\trecords[i] = numbers\n    \t\t// fmt.Fscanln(reader) // FIXME\n    \t}\n    \treturn records\n    }\n\nIf I `go run` this code, I get the following:\n\n    [[1 2] []]\n    ... [copy INPUT to Stdin]\n    [[1 2] [1 2 3]]\n\nHere I get the expected result (`[[1 2] [1 2 3]]`) when reading from `os.Stdin` but not from `strings.NewReader`.\n\nIf I uncomment the last `Fscanln` marked with FIXME, I get the opposite:\n\n    [[1 2] [1 2 3]]\n    ... [copy INPUT to Stdin]\n    [[1 2] []]\n\nI would have expected this code to produce the same result with both `strings.NewReader` and `os.Stdin`. What is happening here?\n\nWhat can I substitute for `os.Stdin` in my test function?", "author_fullname": "t2_121ula", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to substitute io.Reader for os.Stdin", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hkgahy", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.33, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593798686.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I wanted to pass an &lt;code&gt;io.Reader&lt;/code&gt; to a function to replace &lt;code&gt;os.Stdin&lt;/code&gt; for testing. Unfortunately my function started behaving differently when using &lt;code&gt;strings.NewReader()&lt;/code&gt;. Below is a simplified reproduction.&lt;/p&gt;\n\n&lt;p&gt;The first line of &lt;code&gt;INPUT&lt;/code&gt; gives the number of records I want to read from stdin. Each record consists of two lines: the number of integers and the integers separated by spaces.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;io&amp;quot;\n    &amp;quot;os&amp;quot;\n    &amp;quot;strings&amp;quot;\n)\n\nfunc main() {\n    INPUT := `2\n2\n1 2\n3\n1 2 3\n`\n    fmt.Println(ReadInput(strings.NewReader(INPUT)))\n    fmt.Println(ReadInput(os.Stdin))\n}\n\nfunc ReadInput(reader io.Reader) [][]int {\n    var countRecords int\n    _, _ = fmt.Fscanln(reader, &amp;amp;countRecords)\n\n    records := make([][]int, countRecords)\n    for i := 0; i &amp;lt; countRecords; i++ {\n        var countNumbers int\n        _, _ = fmt.Fscanln(reader, &amp;amp;countNumbers)\n\n        numbers := make([]int, countNumbers)\n        for j := 0; j &amp;lt; countNumbers; j++ {\n            fmt.Fscan(reader, &amp;amp;numbers[j])\n        }\n\n        records[i] = numbers\n        // fmt.Fscanln(reader) // FIXME\n    }\n    return records\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If I &lt;code&gt;go run&lt;/code&gt; this code, I get the following:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[[1 2] []]\n... [copy INPUT to Stdin]\n[[1 2] [1 2 3]]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here I get the expected result (&lt;code&gt;[[1 2] [1 2 3]]&lt;/code&gt;) when reading from &lt;code&gt;os.Stdin&lt;/code&gt; but not from &lt;code&gt;strings.NewReader&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;If I uncomment the last &lt;code&gt;Fscanln&lt;/code&gt; marked with FIXME, I get the opposite:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[[1 2] [1 2 3]]\n... [copy INPUT to Stdin]\n[[1 2] []]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I would have expected this code to produce the same result with both &lt;code&gt;strings.NewReader&lt;/code&gt; and &lt;code&gt;os.Stdin&lt;/code&gt;. What is happening here?&lt;/p&gt;\n\n&lt;p&gt;What can I substitute for &lt;code&gt;os.Stdin&lt;/code&gt; in my test function?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hkgahy", "is_robot_indexable": true, "report_reasons": null, "author": "want2wind", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hkgahy/how_to_substitute_ioreader_for_osstdin/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hkgahy/how_to_substitute_ioreader_for_osstdin/", "subreddit_subscribers": 117819, "created_utc": 1593769886.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_o66hd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go driven rpc code generation tool for right now.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hk6u9a", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593757268.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/pacedotdev/oto", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hk6u9a", "is_robot_indexable": true, "report_reasons": null, "author": "BitPhinix", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hk6u9a/go_driven_rpc_code_generation_tool_for_right_now/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/pacedotdev/oto", "subreddit_subscribers": 117819, "created_utc": 1593728468.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "There are some solutions:\n\n1. stringValue = string(intValue)\n\n1. stringValue = strconv.Itoa(intValue)\n\n1. stringValue = fmt.Sprintf(\"%d\", intValue)\n\nI checked a project by a Guru at Google Engineers (link below), they use the third one. Could someone explain why ?\n\n[https://github.com/google/exposure-notifications-server/blob/main/internal/database/connection.go](https://github.com/google/exposure-notifications-server/blob/main/internal/database/connection.go)", "author_fullname": "t2_5rysmluk", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Which is the best way to convert int to string in golang ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hkcgms", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.63, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593778601.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;There are some solutions:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;stringValue = string(intValue)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;stringValue = strconv.Itoa(intValue)&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;stringValue = fmt.Sprintf(&amp;quot;%d&amp;quot;, intValue)&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;I checked a project by a Guru at Google Engineers (link below), they use the third one. Could someone explain why ?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/google/exposure-notifications-server/blob/main/internal/database/connection.go\"&gt;https://github.com/google/exposure-notifications-server/blob/main/internal/database/connection.go&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hkcgms", "is_robot_indexable": true, "report_reasons": null, "author": "thai-nguyen", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hkcgms/which_is_the_best_way_to_convert_int_to_string_in/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hkcgms/which_is_the_best_way_to_convert_int_to_string_in/", "subreddit_subscribers": 117819, "created_utc": 1593749801.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_hkcgms", "before": null}}