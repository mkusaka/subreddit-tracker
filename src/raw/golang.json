{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Why does Go not support const reference parameters similar to C++? Passing by value has overhead in making a copy and passing by pointer sacrifices the benefits of immutability. For a language that prides itself on performance and concurrency, const reference seems like such an obviously needed feature.\n\n    // Simple Go struct\n    type Player struct {\n    \tName            string\n    \tTeam            string\n    \tAge             int\n    \tPointsPerGame   float64\n    \tAssistsPerGame  float64\n    \tReboundsPerGame float64\n    }\n    \n    // An entire new Player Struct is created everytime function is called\n    func (p Player) SomeFunction() string {\n        return fmt.Sprintf(\"%s is %d years old.\", p.Name, p.Age)\n    }\n    \n    // Vs pointer where copy is avoided but now allowing function to alter the struct\n    // when that's not necessary.\n    func (p *Player) SomeFunction() string {\n        return fmt.Sprintf(\"%s is %d years old.\", p.Name, p.Age)\n    }\n    \n    // Why not have the best of both worlds with something like\n    func (p const *Player) SomeFunction() string {\n        return fmt.Sprintf(\"%s is %d years old.\", p.Name, p.Age)\n    }\n\nMaybe I am overestimating the amount of resources spent on making a copy. But even in cases where the struct is small, it bothers me to think that anytime at all is being spent on making an unnecessary copy. Do you guys find yourselves using predominantly pointers (even when the function doesn't modify the struct) or is worrying about this just me trying to prematurely optimize?\n\nAny input is appreciated, I come from a Java and C++ background so the idea of pass by value for anything outside of primitive variable types is foreign to me.", "author_fullname": "t2_r0y7u", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "The absence of const reference parameters in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hikq9s", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.71, "author_flair_background_color": null, "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593541483.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Why does Go not support const reference parameters similar to C++? Passing by value has overhead in making a copy and passing by pointer sacrifices the benefits of immutability. For a language that prides itself on performance and concurrency, const reference seems like such an obviously needed feature.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Simple Go struct\ntype Player struct {\n    Name            string\n    Team            string\n    Age             int\n    PointsPerGame   float64\n    AssistsPerGame  float64\n    ReboundsPerGame float64\n}\n\n// An entire new Player Struct is created everytime function is called\nfunc (p Player) SomeFunction() string {\n    return fmt.Sprintf(&amp;quot;%s is %d years old.&amp;quot;, p.Name, p.Age)\n}\n\n// Vs pointer where copy is avoided but now allowing function to alter the struct\n// when that&amp;#39;s not necessary.\nfunc (p *Player) SomeFunction() string {\n    return fmt.Sprintf(&amp;quot;%s is %d years old.&amp;quot;, p.Name, p.Age)\n}\n\n// Why not have the best of both worlds with something like\nfunc (p const *Player) SomeFunction() string {\n    return fmt.Sprintf(&amp;quot;%s is %d years old.&amp;quot;, p.Name, p.Age)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Maybe I am overestimating the amount of resources spent on making a copy. But even in cases where the struct is small, it bothers me to think that anytime at all is being spent on making an unnecessary copy. Do you guys find yourselves using predominantly pointers (even when the function doesn&amp;#39;t modify the struct) or is worrying about this just me trying to prematurely optimize?&lt;/p&gt;\n\n&lt;p&gt;Any input is appreciated, I come from a Java and C++ background so the idea of pass by value for anything outside of primitive variable types is foreign to me.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hikq9s", "is_robot_indexable": true, "report_reasons": null, "author": "Reddit_Randall", "discussion_type": null, "num_comments": 18, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hikq9s/the_absence_of_const_reference_parameters_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hikq9s/the_absence_of_const_reference_parameters_in_go/", "subreddit_subscribers": 117493, "created_utc": 1593512683.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am writing a multi-coroutine task processing engine. Anyone want with me together.\n\nI have 2+ years experience with golang, but i am just like a beginner. Maybe this is the philosophy of golang.\n\nhttps://github.com/90634/gotaskengine\n\nThis is my first post. Is this correct behavior?", "author_fullname": "t2_bjg175f", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A sample task engine", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hifopt", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593517811.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am writing a multi-coroutine task processing engine. Anyone want with me together.&lt;/p&gt;\n\n&lt;p&gt;I have 2+ years experience with golang, but i am just like a beginner. Maybe this is the philosophy of golang.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/90634/gotaskengine\"&gt;https://github.com/90634/gotaskengine&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This is my first post. Is this correct behavior?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hifopt", "is_robot_indexable": true, "report_reasons": null, "author": "dafsic", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hifopt/a_sample_task_engine/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hifopt/a_sample_task_engine/", "subreddit_subscribers": 117493, "created_utc": 1593489011.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_2ztajdv7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What are the limits of channels, and just how 'fast' are they?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hilolk", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593545792.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "tpaschalis.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://tpaschalis.github.io/channels-limitations-speed/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hilolk", "is_robot_indexable": true, "report_reasons": null, "author": "hyperTrashPanda", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hilolk/what_are_the_limits_of_channels_and_just_how_fast/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://tpaschalis.github.io/channels-limitations-speed/", "subreddit_subscribers": 117493, "created_utc": 1593516992.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi, I am learning Go and I have the following example\n\n    package main\n    import (\n    \t\"fmt\"\n    \t\"sync\"\n    )\n    var wg = sync.WaitGroup{}\n    func main() {\n    \tch := make(chan int)\n    \tcounter := 0\n    \tfor j := 0; j &lt; 5; j++ {\n    \t\twg.Add(2)\n    \t\tgo func() {\n    \t\t\ti := &lt;-ch\n    \t\t\tfmt.Println(i)\n    \t\t\twg.Done()\n    \t\t}()\n    \t\tgo func() {\n    \t\t\tch &lt;- counter\n    \t\t\tcounter++\n    \t\t\twg.Done()\n    \t\t}()\n    \t}\n    \twg.Wait()\n    }\n\nthe output is   \n\n\n    0\n    1\n    1\n    0\n    2\n\nHow can the output contain two 0's and two 1's, because numbers 0,1,2,3,4 enter the channel exactly once and after receiving a number from the channel the channel becomes empty. Thanks in advance.", "author_fullname": "t2_2k1wgkju", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Question about Go channels.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hikks9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593540778.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I am learning Go and I have the following example&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\nimport (\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;sync&amp;quot;\n)\nvar wg = sync.WaitGroup{}\nfunc main() {\n    ch := make(chan int)\n    counter := 0\n    for j := 0; j &amp;lt; 5; j++ {\n        wg.Add(2)\n        go func() {\n            i := &amp;lt;-ch\n            fmt.Println(i)\n            wg.Done()\n        }()\n        go func() {\n            ch &amp;lt;- counter\n            counter++\n            wg.Done()\n        }()\n    }\n    wg.Wait()\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the output is   &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;0\n1\n1\n0\n2\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How can the output contain two 0&amp;#39;s and two 1&amp;#39;s, because numbers 0,1,2,3,4 enter the channel exactly once and after receiving a number from the channel the channel becomes empty. Thanks in advance.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hikks9", "is_robot_indexable": true, "report_reasons": null, "author": "squirtle634", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hikks9/question_about_go_channels/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hikks9/question_about_go_channels/", "subreddit_subscribers": 117493, "created_utc": 1593511978.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_w036ujr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Senior Remote Golang Job", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hil0ox", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.64, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593542825.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "works-hub.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.works-hub.com/jobs/remote-senior-go-engineer-e69?utm_source=Linkedin&amp;utm_medium=Recruiter_Social&amp;utm_campaign=p.gubbey", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hil0ox", "is_robot_indexable": true, "report_reasons": null, "author": "Pmgubbey1", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hil0ox/senior_remote_golang_job/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.works-hub.com/jobs/remote-senior-go-engineer-e69?utm_source=Linkedin&amp;utm_medium=Recruiter_Social&amp;utm_campaign=p.gubbey", "subreddit_subscribers": 117493, "created_utc": 1593514025.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_7ykpoan", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Multi-Select Facet with Solr, Vue and Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hijv8c", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593537318.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "stevenferrer.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://stevenferrer.github.io/posts/multi-select-facet-solr-vue-go", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hijv8c", "is_robot_indexable": true, "report_reasons": null, "author": "srxf", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hijv8c/multiselect_facet_with_solr_vue_and_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://stevenferrer.github.io/posts/multi-select-facet-solr-vue-go", "subreddit_subscribers": 117493, "created_utc": 1593508518.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I've come across a project with files ending with _debug.go. For example there are two files in a folder. One is called security.go, the other is security_debug.go. Both these files have the same function signatures, so I'm not sure how the package even compiles The debug file has slightly modified function definitions.   \n\nI can't really find a reference to this. Are _debug files a golang feature similar to _test.go, or am I looking at some in-house solution, maybe an IDE feature?", "author_fullname": "t2_8hmph", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Q] files with _debug.go suffix", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hikygn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593542528.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve come across a project with files ending with _debug.go. For example there are two files in a folder. One is called security.go, the other is security_debug.go. Both these files have the same function signatures, so I&amp;#39;m not sure how the package even compiles The debug file has slightly modified function definitions.   &lt;/p&gt;\n\n&lt;p&gt;I can&amp;#39;t really find a reference to this. Are _debug files a golang feature similar to _test.go, or am I looking at some in-house solution, maybe an IDE feature?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hikygn", "is_robot_indexable": true, "report_reasons": null, "author": "greenkiweez", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hikygn/q_files_with_debuggo_suffix/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hikygn/q_files_with_debuggo_suffix/", "subreddit_subscribers": 117493, "created_utc": 1593513728.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4mww", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "The How and Why of Go, Part 1: Tooling", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hin7sn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593552013.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "okigiveup.net", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "http://okigiveup.net/the-how-and-why-of-go-part-1-tooling/", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hin7sn", "is_robot_indexable": true, "report_reasons": null, "author": "afroisalreadyinu", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hin7sn/the_how_and_why_of_go_part_1_tooling/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://okigiveup.net/the-how-and-why-of-go-part-1-tooling/", "subreddit_subscribers": 117493, "created_utc": 1593523213.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": " I have an api project using go-chi/chi and one of the calls is registering a user by inserting into a table. The performance is quite poor about 20 users/sec and the hosting vendor suggested we use concurrency libraries to fix this issue because the app is not using more memory available on the machine. Maybe I'm missing something but I've not seen concurrency for simple api calls and such usage on the interwebs.", "author_fullname": "t2_ulvfi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Vendor is suggesting concurrency for api calls", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hin4ke", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593551679.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have an api project using go-chi/chi and one of the calls is registering a user by inserting into a table. The performance is quite poor about 20 users/sec and the hosting vendor suggested we use concurrency libraries to fix this issue because the app is not using more memory available on the machine. Maybe I&amp;#39;m missing something but I&amp;#39;ve not seen concurrency for simple api calls and such usage on the interwebs.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hin4ke", "is_robot_indexable": true, "report_reasons": null, "author": "aot2002", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hin4ke/vendor_is_suggesting_concurrency_for_api_calls/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hin4ke/vendor_is_suggesting_concurrency_for_api_calls/", "subreddit_subscribers": 117493, "created_utc": 1593522879.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Check out [https://github.com/FarzamAlam/short-url](https://github.com/FarzamAlam/short-url) \n\nThank you golang community for making such amazing libraries and learning content free and opensource.", "author_fullname": "t2_3t8e8rkj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "My second golang project.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_himyba", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593551041.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Check out &lt;a href=\"https://github.com/FarzamAlam/short-url\"&gt;https://github.com/FarzamAlam/short-url&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;Thank you golang community for making such amazing libraries and learning content free and opensource.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "himyba", "is_robot_indexable": true, "report_reasons": null, "author": "astrologer11", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/himyba/my_second_golang_project/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/himyba/my_second_golang_project/", "subreddit_subscribers": 117493, "created_utc": 1593522241.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_himyba", "before": null}}