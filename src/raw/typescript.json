{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - April", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_fsojx3", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 33, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 33, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1585728331.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsojx3", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fsojx3/whos_hiring_typescript_developers_april/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/fsojx3/whos_hiring_typescript_developers_april/", "subreddit_subscribers": 37181, "created_utc": 1585699531.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_9olnu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Common JSON patterns in Haskell, Rust and TypeScript", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_fvwm3o", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1586198850.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "codetalk.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvwm3o", "is_robot_indexable": true, "report_reasons": null, "author": "Tehnix", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fvwm3o/common_json_patterns_in_haskell_rust_and/", "parent_whitelist_status": null, "stickied": false, "url": "https://codetalk.io/posts/2020-04-05-common-json-patterns-in-haskell-rust-and-javascript.html", "subreddit_subscribers": 37181, "created_utc": 1586170050.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_yxiyfgt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "RFC - TypeScript Mixin Pattern", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 95, "hide_score": true, "name": "t3_fvyklu", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/SHSiSI_l3kRjb1-pIG_Ca3r2ejiACyNVsarC4FOEXIY.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1586207840.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "bryntum.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/afF4IMDpeO0vH_bRBYNsHAEqzH0GXkpAWnl27GIZzf8.jpg?auto=webp&amp;s=d603508ce74f2cafe4c2223cd94533e3363050c7", "width": 973, "height": 666}, "resolutions": [{"url": "https://external-preview.redd.it/afF4IMDpeO0vH_bRBYNsHAEqzH0GXkpAWnl27GIZzf8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=06b428699802d888d95cb0d87d61746fa859a63d", "width": 108, "height": 73}, {"url": "https://external-preview.redd.it/afF4IMDpeO0vH_bRBYNsHAEqzH0GXkpAWnl27GIZzf8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f525c259876ad12fc3a482bc3b5070a39b09a8db", "width": 216, "height": 147}, {"url": "https://external-preview.redd.it/afF4IMDpeO0vH_bRBYNsHAEqzH0GXkpAWnl27GIZzf8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ac28e0ba806901c994bf83bfe2858f8570c659c6", "width": 320, "height": 219}, {"url": "https://external-preview.redd.it/afF4IMDpeO0vH_bRBYNsHAEqzH0GXkpAWnl27GIZzf8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3823733a6f041ed16f1beb906751ae0b3611b043", "width": 640, "height": 438}, {"url": "https://external-preview.redd.it/afF4IMDpeO0vH_bRBYNsHAEqzH0GXkpAWnl27GIZzf8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=d0973e9ffae85865f69dddb1861615715bac69df", "width": 960, "height": 657}], "variants": {}, "id": "aYD-nmkbrwDo3D6lPelDAl3Cc0dNuItVCYhEviSdr7E"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvyklu", "is_robot_indexable": true, "report_reasons": null, "author": "mats-bryntse", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fvyklu/rfc_typescript_mixin_pattern/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.bryntum.com/blog/the-mixin-pattern-in-typescript-all-you-need-to-know-part-2/", "subreddit_subscribers": 37181, "created_utc": 1586179040.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I am a little confused by these definitions, I saw the official typescript documentation and I don't understand the most adequate definition of `ambient` and how it affects when the word module (`ambient module` and `ambient module declaration`) is used together.", "author_fullname": "t2_64xn5tht", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "what is the diference between ambient declaration, ambient module and ambient module declaration?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": true, "name": "t3_fvxbu6", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586202424.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am a little confused by these definitions, I saw the official typescript documentation and I don&amp;#39;t understand the most adequate definition of &lt;code&gt;ambient&lt;/code&gt; and how it affects when the word module (&lt;code&gt;ambient module&lt;/code&gt; and &lt;code&gt;ambient module declaration&lt;/code&gt;) is used together.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvxbu6", "is_robot_indexable": true, "report_reasons": null, "author": "crisf_design", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fvxbu6/what_is_the_diference_between_ambient_declaration/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/fvxbu6/what_is_the_diference_between_ambient_declaration/", "subreddit_subscribers": 37181, "created_utc": 1586173624.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "in typescript if you don't define a type for an object, you get intellisense out of the box. \n\n```\nconst container = {\n  row: { flexDirection: \"row\" },\n  ...\n}\n```\n\nhow ever if you provide typing for the inner objects you lose typing on the outer one \n\n```\nconst container: Record&lt;string, ViewStyle&gt; = {\n  row: { flexDirection: \"row\" },\n  ...\n}\n```\n\nis there a way to get both such that when u are using the `container` in the snippet above you get `row` as intellisense", "author_fullname": "t2_ygw13", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "typing for dynamic objects ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_fvt2w8", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586180643.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;in typescript if you don&amp;#39;t define a type for an object, you get intellisense out of the box. &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nconst container = {\n  row: { flexDirection: &amp;quot;row&amp;quot; },\n  ...\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;how ever if you provide typing for the inner objects you lose typing on the outer one &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nconst container: Record&amp;lt;string, ViewStyle&amp;gt; = {\n  row: { flexDirection: &amp;quot;row&amp;quot; },\n  ...\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;is there a way to get both such that when u are using the &lt;code&gt;container&lt;/code&gt; in the snippet above you get &lt;code&gt;row&lt;/code&gt; as intellisense&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvt2w8", "is_robot_indexable": true, "report_reasons": null, "author": "eid-a", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fvt2w8/typing_for_dynamic_objects/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/fvt2w8/typing_for_dynamic_objects/", "subreddit_subscribers": 37181, "created_utc": 1586151843.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have this interface :\n\n    interface myInterface {\n    \tstate?: { [x: string]: any },\n    \t[x: string]: Function\n    }\n    \n    let myObj : myInterface = {\n        state : {\n            query : \"hello\",\n            color : \"#666666\",\n        },\n        method() {\n            console.log(this.query);\n        }\n    }\n\n1. How do I define that the `Function` is supposed to be non arrow function ?\n2. The `[x:string]: Function` will shadow the `state?:{[x:string]:any}` , that means that vs code will except every property to have a type `Function` and will show an error when I will define a `state` property that is of type different from `Function`. How do I prevent the shadowing?\n3. Is there any way to make vs code understand that `state` property has type `{[x:string]: infer the type}` . I am asking that because in my example it is clear that `this.query` is supposed to have `string` type but vs code shows `any` .", "author_fullname": "t2_1ihbqq55", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Some questions regarding defining types with an interface .", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_fvi102", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": 1586111414.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586138211.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have this interface :&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface myInterface {\n    state?: { [x: string]: any },\n    [x: string]: Function\n}\n\nlet myObj : myInterface = {\n    state : {\n        query : &amp;quot;hello&amp;quot;,\n        color : &amp;quot;#666666&amp;quot;,\n    },\n    method() {\n        console.log(this.query);\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;ol&gt;\n&lt;li&gt;How do I define that the &lt;code&gt;Function&lt;/code&gt; is supposed to be non arrow function ?&lt;/li&gt;\n&lt;li&gt;The &lt;code&gt;[x:string]: Function&lt;/code&gt; will shadow the &lt;code&gt;state?:{[x:string]:any}&lt;/code&gt; , that means that vs code will except every property to have a type &lt;code&gt;Function&lt;/code&gt; and will show an error when I will define a &lt;code&gt;state&lt;/code&gt; property that is of type different from &lt;code&gt;Function&lt;/code&gt;. How do I prevent the shadowing?&lt;/li&gt;\n&lt;li&gt;Is there any way to make vs code understand that &lt;code&gt;state&lt;/code&gt; property has type &lt;code&gt;{[x:string]: infer the type}&lt;/code&gt; . I am asking that because in my example it is clear that &lt;code&gt;this.query&lt;/code&gt; is supposed to have &lt;code&gt;string&lt;/code&gt; type but vs code shows &lt;code&gt;any&lt;/code&gt; .&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvi102", "is_robot_indexable": true, "report_reasons": null, "author": "liaguris", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fvi102/some_questions_regarding_defining_types_with_an/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/fvi102/some_questions_regarding_defining_types_with_an/", "subreddit_subscribers": 37181, "created_utc": 1586109411.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi.\n\nI've been trying to write tests that assert that the type my generics evaluate to are assignable to the type I expect it to be.\n\n\nI've run into a really weird problem. This is my assertion type (in reality it goes both ways but lets keep it simple here):  \n\n```\ntype Assert&lt;T, k&gt; = T extends K ? true : never\n```\n\nThis is how I test that the generic of the type some variable should be a string type:\n\n```\nconst dummyVariableName: Assert&lt;MyGeneric&lt;typeof someVariable&gt;, string&gt; = true;\ndummyVariableName; // No Unused variables check\n```\n\nIf it compiles that means it works.\n\nHowever I am getting an issue with Union types.\n\n```\n// Expected is true, as I expect since I can assign string to string | undefined\ntype Expected = Assert&lt;string, string | undefined&gt; \n\n// WhatTheHell is also true, which I really didn't expect.\ntype WhatTheHell = Assert&lt;string | undefined, string&gt;;\n```\n\nMy reasoning is that this shouldn't work because string | undefined cant be assigned to string:\n\n```\nconst optionalValue: string | undefined = 'some string' as any;\nconst value: string = optionalValue;\n```\nProduces:\n\n```\nType 'string | undefined' is not assignable to type 'string'.\n  Type 'undefined' is not assignable to type 'string'.\n```\n\nIs this a tsconfig issue? This is really weird type behaviour, and I cannot test whether my Generic type evaluates to a string or to string | undefined.\n\nAny insight would be much appreciated.", "author_fullname": "t2_zr27l", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Should a union extend one of its subtypes?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_fvj90u", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586142308.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been trying to write tests that assert that the type my generics evaluate to are assignable to the type I expect it to be.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve run into a really weird problem. This is my assertion type (in reality it goes both ways but lets keep it simple here):  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\ntype Assert&amp;lt;T, k&amp;gt; = T extends K ? true : never\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This is how I test that the generic of the type some variable should be a string type:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nconst dummyVariableName: Assert&amp;lt;MyGeneric&amp;lt;typeof someVariable&amp;gt;, string&amp;gt; = true;\ndummyVariableName; // No Unused variables check\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;If it compiles that means it works.&lt;/p&gt;\n\n&lt;p&gt;However I am getting an issue with Union types.&lt;/p&gt;\n\n&lt;p&gt;```\n// Expected is true, as I expect since I can assign string to string | undefined\ntype Expected = Assert&amp;lt;string, string | undefined&amp;gt; &lt;/p&gt;\n\n&lt;p&gt;// WhatTheHell is also true, which I really didn&amp;#39;t expect.\ntype WhatTheHell = Assert&amp;lt;string | undefined, string&amp;gt;;\n```&lt;/p&gt;\n\n&lt;p&gt;My reasoning is that this shouldn&amp;#39;t work because string | undefined cant be assigned to string:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nconst optionalValue: string | undefined = &amp;#39;some string&amp;#39; as any;\nconst value: string = optionalValue;\n&lt;/code&gt;\nProduces:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nType &amp;#39;string | undefined&amp;#39; is not assignable to type &amp;#39;string&amp;#39;.\n  Type &amp;#39;undefined&amp;#39; is not assignable to type &amp;#39;string&amp;#39;.\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Is this a tsconfig issue? This is really weird type behaviour, and I cannot test whether my Generic type evaluates to a string or to string | undefined.&lt;/p&gt;\n\n&lt;p&gt;Any insight would be much appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fvj90u", "is_robot_indexable": true, "report_reasons": null, "author": "davidmdm", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fvj90u/should_a_union_extend_one_of_its_subtypes/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/fvj90u/should_a_union_extend_one_of_its_subtypes/", "subreddit_subscribers": 37181, "created_utc": 1586113508.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "example;\n\n    type Item {\n        title: string,\n        price: number\n    }\n    \n    type State { \n        items: Item[]\n    } \n    \n    let state: State = { \n        items: []\n    }\n    \n    function foo&lt;T, U&gt;(state: T, fn: (v: T) =&gt; U): U {}\n    \n    let totalPrice = foo(state, ({ items }) =&gt; items.reduce((acc, next) =&gt; acc + next.price, 0));\n    \n    let mostExpensive = foo(state, ({ items }) =&gt; Math.max(...items.map(item =&gt; item.price)));\n    \n    let firstItem = foo(state, ({ items }) =&gt; items[0]);\n\nHow do you guys call such function like \\`foo\\`.", "author_fullname": "t2_4f32ij9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Question: Is there a generic name for this type function: (state, fn) =&gt; fn(state)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_fuxfwc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 29, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 29, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586049482.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;example;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Item {\n    title: string,\n    price: number\n}\n\ntype State { \n    items: Item[]\n} \n\nlet state: State = { \n    items: []\n}\n\nfunction foo&amp;lt;T, U&amp;gt;(state: T, fn: (v: T) =&amp;gt; U): U {}\n\nlet totalPrice = foo(state, ({ items }) =&amp;gt; items.reduce((acc, next) =&amp;gt; acc + next.price, 0));\n\nlet mostExpensive = foo(state, ({ items }) =&amp;gt; Math.max(...items.map(item =&amp;gt; item.price)));\n\nlet firstItem = foo(state, ({ items }) =&amp;gt; items[0]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How do you guys call such function like `foo`.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fuxfwc", "is_robot_indexable": true, "report_reasons": null, "author": "enesTufekci", "discussion_type": null, "num_comments": 18, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fuxfwc/question_is_there_a_generic_name_for_this_type/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/fuxfwc/question_is_there_a_generic_name_for_this_type/", "subreddit_subscribers": 37181, "created_utc": 1586020682.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "It would be cool if there was a CLI of some sort that accepted a file and converted each of its exports into a bundled, portable module.\n\nI was wishing something like this existed recently when I was migrating a single API endpoint (written in TypeScript) from an AWS instance (I'll call this Repo #1) to Google Cloud Functions (Repo #2). Even though all the code was written and working in Repo #1, it was a huge chore to move it to Repo #2 because the endpoint code used a few classes and utility functions that were scattered throughout my codebase. All said and done, I ended up copying and pasting a dozen files (mostly containing simple util functions) over to Repo #2 and having to do a lot of manual rewriting of \\`import\\` statements to account for the changes in project structure. It was very annoying and dumb.\n\nSo I was wishing I could have just exported the endpoint from Repo #1 to a bundled, single-file module that I could drop into Repo #2. Ideally it would do tree shaking so it only imports the code from Repo #1 that it actually needs to run. Everything was implemented in strict TypeScript so it was all types and there were no weird global variables or what have you.\n\nDoes anyone have a sense of how difficult this would be to do? I don't have a good grasp of the inner workings of the TS engine or parser.", "author_fullname": "t2_z4obfzp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Idea: exporting \"function bundles\"", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_fumqcz", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586000459.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;It would be cool if there was a CLI of some sort that accepted a file and converted each of its exports into a bundled, portable module.&lt;/p&gt;\n\n&lt;p&gt;I was wishing something like this existed recently when I was migrating a single API endpoint (written in TypeScript) from an AWS instance (I&amp;#39;ll call this Repo #1) to Google Cloud Functions (Repo #2). Even though all the code was written and working in Repo #1, it was a huge chore to move it to Repo #2 because the endpoint code used a few classes and utility functions that were scattered throughout my codebase. All said and done, I ended up copying and pasting a dozen files (mostly containing simple util functions) over to Repo #2 and having to do a lot of manual rewriting of `import` statements to account for the changes in project structure. It was very annoying and dumb.&lt;/p&gt;\n\n&lt;p&gt;So I was wishing I could have just exported the endpoint from Repo #1 to a bundled, single-file module that I could drop into Repo #2. Ideally it would do tree shaking so it only imports the code from Repo #1 that it actually needs to run. Everything was implemented in strict TypeScript so it was all types and there were no weird global variables or what have you.&lt;/p&gt;\n\n&lt;p&gt;Does anyone have a sense of how difficult this would be to do? I don&amp;#39;t have a good grasp of the inner workings of the TS engine or parser.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fumqcz", "is_robot_indexable": true, "report_reasons": null, "author": "vriad", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fumqcz/idea_exporting_function_bundles/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/fumqcz/idea_exporting_function_bundles/", "subreddit_subscribers": 37181, "created_utc": 1585971659.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_5llno", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Variant: More advanced discriminated unions in TypeScript", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_fu9wkk", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 51, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 51, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/T_JKU3quEIaEzAH8sxYzgFxVga4xekHoCOu9vurZrMM.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1585954848.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/nYuIlPqk8lP0SBNFGYv7YF4clHiNSNmHKnF0FGuzUQA.jpg?auto=webp&amp;s=358c94d02abfd618c4011867878829d6ae7cba52", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/nYuIlPqk8lP0SBNFGYv7YF4clHiNSNmHKnF0FGuzUQA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=69fb735c3f90df33ca2e3564c16e6638c9a09d1e", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/nYuIlPqk8lP0SBNFGYv7YF4clHiNSNmHKnF0FGuzUQA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=ed151c4ae80cd510fbf4cc17b7660fc68fd2f5c9", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/nYuIlPqk8lP0SBNFGYv7YF4clHiNSNmHKnF0FGuzUQA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=07f1c9d9e3e65fea206b7c82444d8b46c61231a1", "width": 320, "height": 320}], "variants": {}, "id": "A3jNvsgwlV9dnecHiFhRKqyDggO__h2mX3mXa-JOcBM"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fu9wkk", "is_robot_indexable": true, "report_reasons": null, "author": "SidewaysGate", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fu9wkk/variant_more_advanced_discriminated_unions_in/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/paarthenon/variant", "subreddit_subscribers": 37181, "created_utc": 1585926048.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_x4ckw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Humpf: Damped Spring motion as a function of time", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_fu74v8", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/2mck9614aEwreSQZKLAqDLbU5ORibmJ7_pjrpN8e-fk.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1585943957.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/e7CVQ0mZvNFKi6Cfqhf6sO6rkshf8Y80-DSUeitNBuY.jpg?auto=webp&amp;s=a74fec5f9615be1b60f0913060179158e8fd4e44", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/e7CVQ0mZvNFKi6Cfqhf6sO6rkshf8Y80-DSUeitNBuY.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=09b8180cedb64145535d45f5f57cba43e3ed563a", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/e7CVQ0mZvNFKi6Cfqhf6sO6rkshf8Y80-DSUeitNBuY.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=9e4b18788dc687b7ded94932d6c5d534fbcd64fb", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/e7CVQ0mZvNFKi6Cfqhf6sO6rkshf8Y80-DSUeitNBuY.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=85ebff8d7e9812feda7c4b6da1f4f745cdcc6cf4", "width": 320, "height": 320}], "variants": {}, "id": "jp-P1zHyhhorthzzzpvR4oy93GNJnPPO3tO0ed1I3oE"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fu74v8", "is_robot_indexable": true, "report_reasons": null, "author": "etienne-dldc", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fu74v8/humpf_damped_spring_motion_as_a_function_of_time/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/etienne-dldc/humpf", "subreddit_subscribers": 37181, "created_utc": 1585915157.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_fu74v8", "before": null}}