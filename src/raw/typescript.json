{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - July", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hizg5z", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 38, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 38, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1593590733.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hizg5z", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 6, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hizg5z/whos_hiring_typescript_developers_july/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/hizg5z/whos_hiring_typescript_developers_july/", "subreddit_subscribers": 43821, "created_utc": 1593561933.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "It\u2019s compile time only. If you use compiled code in vanilla JavaScript, you can access the private instance properties like any other property.\n\nIt could compile classes down to old function style classes, and put all the private members inside the function, and then not attach them to the instance.\n\nIs it because typescript would then have to also \u201cadjust\u201d all this.&lt;private-thing&gt; references? That seems... arbitrary as a blocker.\n\nWhat other problems would their be?", "author_fullname": "t2_5w8ml", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Q: Why aren\u2019t TS private methods, actually private?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hoctyy", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.66, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594362462.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;It\u2019s compile time only. If you use compiled code in vanilla JavaScript, you can access the private instance properties like any other property.&lt;/p&gt;\n\n&lt;p&gt;It could compile classes down to old function style classes, and put all the private members inside the function, and then not attach them to the instance.&lt;/p&gt;\n\n&lt;p&gt;Is it because typescript would then have to also \u201cadjust\u201d all this.&amp;lt;private-thing&amp;gt; references? That seems... arbitrary as a blocker.&lt;/p&gt;\n\n&lt;p&gt;What other problems would their be?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hoctyy", "is_robot_indexable": true, "report_reasons": null, "author": "BlueJeansAndRain", "discussion_type": null, "num_comments": 33, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hoctyy/q_why_arent_ts_private_methods_actually_private/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hoctyy/q_why_arent_ts_private_methods_actually_private/", "subreddit_subscribers": 43821, "created_utc": 1594333662.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Not exactly mentor, but I guess more of a guide. I am fairly capable of learning by myself but there are times where I don\u2019t understand a concept and it would be easier to have someone walk me thru and explain to me. I\u2019m not looking for someone for me to ask questions 24/7 but rather someone who is willing to answer the questions I have from time to time. The TS discord is great but I often get ignored when I ask a question", "author_fullname": "t2_5c90xjh5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Anyone willing to mentor?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ho63g6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.87, "author_flair_background_color": null, "subreddit_type": "public", "ups": 22, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 22, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594340707.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Not exactly mentor, but I guess more of a guide. I am fairly capable of learning by myself but there are times where I don\u2019t understand a concept and it would be easier to have someone walk me thru and explain to me. I\u2019m not looking for someone for me to ask questions 24/7 but rather someone who is willing to answer the questions I have from time to time. The TS discord is great but I often get ignored when I ask a question&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ho63g6", "is_robot_indexable": true, "report_reasons": null, "author": "__merc", "discussion_type": null, "num_comments": 22, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ho63g6/anyone_willing_to_mentor/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ho63g6/anyone_willing_to_mentor/", "subreddit_subscribers": 43821, "created_utc": 1594311907.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "       protected combineAndSave(\n          audiosAndPauseFiles: Array&lt;string&gt;\n          , savePath: string\n          , filePrefix?: string\n          , fileName?: string\n       ): void {\n\nI noticed when calling this, I had to specify `undefined` on the 3rd arg (4th will be implicitly undefined if not specified). Is that the best way to do it? In general I think `null` is more explicit but maybe that does apply for this case.\n\nAlso if anyone knows a way to more tightly constrain this method so that one of the last two params must be specifed, I appreciate any further advice on that front.", "author_fullname": "t2_3ob6osi0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Optional parameters, specifying undefined vs null", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ho736x", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594343897.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;   protected combineAndSave(\n      audiosAndPauseFiles: Array&amp;lt;string&amp;gt;\n      , savePath: string\n      , filePrefix?: string\n      , fileName?: string\n   ): void {\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I noticed when calling this, I had to specify &lt;code&gt;undefined&lt;/code&gt; on the 3rd arg (4th will be implicitly undefined if not specified). Is that the best way to do it? In general I think &lt;code&gt;null&lt;/code&gt; is more explicit but maybe that does apply for this case.&lt;/p&gt;\n\n&lt;p&gt;Also if anyone knows a way to more tightly constrain this method so that one of the last two params must be specifed, I appreciate any further advice on that front.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ho736x", "is_robot_indexable": true, "report_reasons": null, "author": "embar5", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ho736x/optional_parameters_specifying_undefined_vs_null/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ho736x/optional_parameters_specifying_undefined_vs_null/", "subreddit_subscribers": 43821, "created_utc": 1594315097.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I am trying to make an API and TS looks like a good way to do it as it's sort of self-documenting.  \n\nHowever, when I try to test whether the compiled JS throws an error when the user does not include a required param/property, it does not and just gives it a value of undefined.\n\n1. Is there a way to force the compiled JS to throw errors if the user is using the API incorrectly?\n2. Is there a better 'standard' way to enforce correct usage of the API by the user rather than throwing errors?\n\n&amp;#x200B;\n\nExample code:\n\n    // index.ts\n    class Example {\n      req1: string;\n      req2: string;\n    \n      constructor(req1: string, req2: string) {\n        this.req1 = req1;\n        this.req2 = req2;\n      }\n    }\n    \n    module.exports = Example;\n    \n    /** ts file is compiled into index.js */\n    \n    // JS User that consumes index.js\n    const Example = require('index');\n    \n    const ex1 = new Example(\"Hello\"); // Expect API to throw error here as req2 was not passed\n    console.log(ex1); // Actual: Example { req1: \"Hello\", req2: undefined }\n    \n    const ex2 = new Example(\"Hello\", 2); // Expect API to throw error here as req2 is an incorrect type\n    console.log(ex2); // Actual: Example { req1: \"Hello\", req2: 2 }\n\n&amp;#x200B;\n\nThe only way I've found to enforce error throwing is doing type checks, etc. and throwing my own errors in the constructor, but then that's like regular JS, isn't it?", "author_fullname": "t2_546z9ztf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to make compiled JS enforce required properties?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ho69ir", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.79, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594341246.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am trying to make an API and TS looks like a good way to do it as it&amp;#39;s sort of self-documenting.  &lt;/p&gt;\n\n&lt;p&gt;However, when I try to test whether the compiled JS throws an error when the user does not include a required param/property, it does not and just gives it a value of undefined.&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Is there a way to force the compiled JS to throw errors if the user is using the API incorrectly?&lt;/li&gt;\n&lt;li&gt;Is there a better &amp;#39;standard&amp;#39; way to enforce correct usage of the API by the user rather than throwing errors?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Example code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// index.ts\nclass Example {\n  req1: string;\n  req2: string;\n\n  constructor(req1: string, req2: string) {\n    this.req1 = req1;\n    this.req2 = req2;\n  }\n}\n\nmodule.exports = Example;\n\n/** ts file is compiled into index.js */\n\n// JS User that consumes index.js\nconst Example = require(&amp;#39;index&amp;#39;);\n\nconst ex1 = new Example(&amp;quot;Hello&amp;quot;); // Expect API to throw error here as req2 was not passed\nconsole.log(ex1); // Actual: Example { req1: &amp;quot;Hello&amp;quot;, req2: undefined }\n\nconst ex2 = new Example(&amp;quot;Hello&amp;quot;, 2); // Expect API to throw error here as req2 is an incorrect type\nconsole.log(ex2); // Actual: Example { req1: &amp;quot;Hello&amp;quot;, req2: 2 }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;The only way I&amp;#39;ve found to enforce error throwing is doing type checks, etc. and throwing my own errors in the constructor, but then that&amp;#39;s like regular JS, isn&amp;#39;t it?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ho69ir", "is_robot_indexable": true, "report_reasons": null, "author": "DopaminePurveyor", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ho69ir/how_to_make_compiled_js_enforce_required/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ho69ir/how_to_make_compiled_js_enforce_required/", "subreddit_subscribers": 43821, "created_utc": 1594312446.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I know the utility type constructors are, but not these two.\n\nIf so, what other notable ones are there?", "author_fullname": "t2_3ob6osi0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Are Promise and Array type constructors?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hobm5f", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594358470.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I know the utility type constructors are, but not these two.&lt;/p&gt;\n\n&lt;p&gt;If so, what other notable ones are there?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hobm5f", "is_robot_indexable": true, "report_reasons": null, "author": "embar5", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hobm5f/are_promise_and_array_type_constructors/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hobm5f/are_promise_and_array_type_constructors/", "subreddit_subscribers": 43821, "created_utc": 1594329670.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I've used it a couple times when the docs and google searches just couldn't identify the obscure type being returned from some method (I'm looking at you, Google Cloud).\n\n       tempFolder: ReturnType&lt;typeof tmp.dirSync&gt;\n\nI feel like it's a good fallback, a \"You tell me what it is, Typescript\". On the other hand it's less insightful from a quick glance compared to an explicit type declaration.\n\nDo you guys use this one often? Why or why not? I'm curious what others consider the boundary to be between acceptable use and overuse.", "author_fullname": "t2_4w51o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is ReturnType a good utility when you're not sure about the return type?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hobs51", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.66, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594358981.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve used it a couple times when the docs and google searches just couldn&amp;#39;t identify the obscure type being returned from some method (I&amp;#39;m looking at you, Google Cloud).&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;   tempFolder: ReturnType&amp;lt;typeof tmp.dirSync&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I feel like it&amp;#39;s a good fallback, a &amp;quot;You tell me what it is, Typescript&amp;quot;. On the other hand it&amp;#39;s less insightful from a quick glance compared to an explicit type declaration.&lt;/p&gt;\n\n&lt;p&gt;Do you guys use this one often? Why or why not? I&amp;#39;m curious what others consider the boundary to be between acceptable use and overuse.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hobs51", "is_robot_indexable": true, "report_reasons": null, "author": "fpuen", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hobs51/is_returntype_a_good_utility_when_youre_not_sure/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hobs51/is_returntype_a_good_utility_when_youre_not_sure/", "subreddit_subscribers": 43821, "created_utc": 1594330181.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_2stz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Moving from TypeScript to Rust / WebAssembly", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hnw5v6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.55, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1594295565.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "nicolodavis.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://nicolodavis.com/blog/typescript-to-rust/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hnw5v6", "is_robot_indexable": true, "report_reasons": null, "author": "koavf", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hnw5v6/moving_from_typescript_to_rust_webassembly/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://nicolodavis.com/blog/typescript-to-rust/", "subreddit_subscribers": 43821, "created_utc": 1594266765.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_6bq779u6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Extracting and Hashing Lazy-Loaded CSS in Angular", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_hnz6r0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/SB4mvfwISad8GgSDAMBbRN71fmbpD7sp7xRwUIn2niw.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1594310503.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "volosoft.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://volosoft.com/blog/Extracting-and-Hashing-Lazy-Loaded-CSS-in-Angular", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/3so8bb2Nji2CsCwudA42cyfbw3BKlmi7P7UfRT9p6FU.jpg?auto=webp&amp;s=9bb106b3e2d31ebad7cb7a4ad0214e83b7f81157", "width": 1066, "height": 1066}, "resolutions": [{"url": "https://external-preview.redd.it/3so8bb2Nji2CsCwudA42cyfbw3BKlmi7P7UfRT9p6FU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d24f2c86281ca814783abf1b6b573227becd7c78", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/3so8bb2Nji2CsCwudA42cyfbw3BKlmi7P7UfRT9p6FU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=cf505837e0a9828826223c68256591fbb25ea723", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/3so8bb2Nji2CsCwudA42cyfbw3BKlmi7P7UfRT9p6FU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=afecd661fb2cbe5117cf3bb426607e3211b7e1b0", "width": 320, "height": 320}, {"url": "https://external-preview.redd.it/3so8bb2Nji2CsCwudA42cyfbw3BKlmi7P7UfRT9p6FU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=bc4edbac133b578e3dcbff2f748a2ff74b66a988", "width": 640, "height": 640}, {"url": "https://external-preview.redd.it/3so8bb2Nji2CsCwudA42cyfbw3BKlmi7P7UfRT9p6FU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=ff1ec25ff3334c53c903f8cdf4785cc4729d4489", "width": 960, "height": 960}], "variants": {}, "id": "KKOasHjB0FTs-ov5JJTt3xJiixzs1Xel1NgysYjBUGA"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hnz6r0", "is_robot_indexable": true, "report_reasons": null, "author": "Volosoft", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hnz6r0/extracting_and_hashing_lazyloaded_css_in_angular/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://volosoft.com/blog/Extracting-and-Hashing-Lazy-Loaded-CSS-in-Angular", "subreddit_subscribers": 43821, "created_utc": 1594281703.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The TypeScript documentation includes lots of examples of typing arrow functions, but is it possible to use type when using the `function` keyword?\n\n```js\ntype T = (n: string) =&gt; string\n\nconst arrowGreet: T = (name) =&gt; `Hello ${name}`\n\n// How can I type fnGreet as T?\nfunction fnGreet(name) {\n    return `Hello ${name}`\n}\n```", "author_fullname": "t2_r7rt7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is it possible to type a function that has been declared with the function keyword?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hnodve", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594267470.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The TypeScript documentation includes lots of examples of typing arrow functions, but is it possible to use type when using the &lt;code&gt;function&lt;/code&gt; keyword?&lt;/p&gt;\n\n&lt;p&gt;```js\ntype T = (n: string) =&amp;gt; string&lt;/p&gt;\n\n&lt;p&gt;const arrowGreet: T = (name) =&amp;gt; &lt;code&gt;Hello ${name}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;// How can I type fnGreet as T?\nfunction fnGreet(name) {\n    return &lt;code&gt;Hello ${name}&lt;/code&gt;\n}\n```&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hnodve", "is_robot_indexable": true, "report_reasons": null, "author": "sean_mcp", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hnodve/is_it_possible_to_type_a_function_that_has_been/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hnodve/is_it_possible_to_type_a_function_that_has_been/", "subreddit_subscribers": 43821, "created_utc": 1594238670.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "For example, let's say my app allow users to do CRUD operation on country resources.\nMy GET response would be an array of Countries, typed like this:\n        \n    interface Country {\n      states: State[];\n      name: string;\n      id: number;\n      abbreviation: string;\n    }\n    \n    interface State {\n      name: string;\n      id: number;\n      abbreviation: string;\n      cities: City[];\n    }\n    \n    interface City {\n      name: string;\n      id: number;\n      abbreviation: string;\n    }\n\n\nLet's assume that creating a Country involves the user sending States and Cities in the same payload.\n\nSince we're creating resources, they wouldn't have an id assigned to them yet, it doesn't make sense for the POST payload to contain ids. To adequately type my POST payload, I'd have to duplicate Country, State, City, and remove Id or make it an optional field.\n\n    interface PostCountry {\n      states: State[];\n      name: string;\n      abbreviation: string;\n    }\n    \n    interface PostState {\n      name: string;\n      abbreviation: string;\n      cities: City[];\n    }\n    \n    interface PostCity {\n      name: string;\n      abbreviation: string;\n    }\n\n\nI'm new to Typescript and is currently converting an app to Typescript. How do you guys manage something like this? Is it inevitable to have multiple type definitions for each REST operation?", "author_fullname": "t2_ac6xo", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How should I manage type definition for REST calls?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hnbrrf", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 25, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 25, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594217414.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For example, let&amp;#39;s say my app allow users to do CRUD operation on country resources.\nMy GET response would be an array of Countries, typed like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface Country {\n  states: State[];\n  name: string;\n  id: number;\n  abbreviation: string;\n}\n\ninterface State {\n  name: string;\n  id: number;\n  abbreviation: string;\n  cities: City[];\n}\n\ninterface City {\n  name: string;\n  id: number;\n  abbreviation: string;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Let&amp;#39;s assume that creating a Country involves the user sending States and Cities in the same payload.&lt;/p&gt;\n\n&lt;p&gt;Since we&amp;#39;re creating resources, they wouldn&amp;#39;t have an id assigned to them yet, it doesn&amp;#39;t make sense for the POST payload to contain ids. To adequately type my POST payload, I&amp;#39;d have to duplicate Country, State, City, and remove Id or make it an optional field.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface PostCountry {\n  states: State[];\n  name: string;\n  abbreviation: string;\n}\n\ninterface PostState {\n  name: string;\n  abbreviation: string;\n  cities: City[];\n}\n\ninterface PostCity {\n  name: string;\n  abbreviation: string;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m new to Typescript and is currently converting an app to Typescript. How do you guys manage something like this? Is it inevitable to have multiple type definitions for each REST operation?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hnbrrf", "is_robot_indexable": true, "report_reasons": null, "author": "-odin", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/hnbrrf/how_should_i_manage_type_definition_for_rest_calls/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/hnbrrf/how_should_i_manage_type_definition_for_rest_calls/", "subreddit_subscribers": 43821, "created_utc": 1594188614.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_hnbrrf", "before": null}}