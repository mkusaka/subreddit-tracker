{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "So currently I have an event called ITEM\\_DELETED.\n\nWhen this happens, I update the items part of the state to filter out the item that was deleted.\n\nBut I also want to reset a variable (in **another** part of the state) to 0, IF the item that was deleted is currently selected\n\nWhat's the best practice to do this when I'm using **combineReducers** and the state is separated out, so the reducer doesn't necessarily know if the item was originally selected.\n\nI'm currently thinking:\n\n1. Probably best, the action creator puts a boolean in the payload if the item deleted was selected, that way the reducers can still respond to the same action type.\n2. I can update the action creator to use thunk and dispatch two actions, the second with a different type and only being if the item was currently selected\n3. Something else? Make the state combined so one reducer can handle the action?\n\nThanks!", "author_fullname": "t2_jnlwhi0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Conditional update in reducer based on other state. Best Practices?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f05rab", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581081132.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So currently I have an event called ITEM_DELETED.&lt;/p&gt;\n\n&lt;p&gt;When this happens, I update the items part of the state to filter out the item that was deleted.&lt;/p&gt;\n\n&lt;p&gt;But I also want to reset a variable (in &lt;strong&gt;another&lt;/strong&gt; part of the state) to 0, IF the item that was deleted is currently selected&lt;/p&gt;\n\n&lt;p&gt;What&amp;#39;s the best practice to do this when I&amp;#39;m using &lt;strong&gt;combineReducers&lt;/strong&gt; and the state is separated out, so the reducer doesn&amp;#39;t necessarily know if the item was originally selected.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m currently thinking:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Probably best, the action creator puts a boolean in the payload if the item deleted was selected, that way the reducers can still respond to the same action type.&lt;/li&gt;\n&lt;li&gt;I can update the action creator to use thunk and dispatch two actions, the second with a different type and only being if the item was currently selected&lt;/li&gt;\n&lt;li&gt;Something else? Make the state combined so one reducer can handle the action?&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f05rab", "is_robot_indexable": true, "report_reasons": null, "author": "kcilc1", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/f05rab/conditional_update_in_reducer_based_on_other/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/f05rab/conditional_update_in_reducer_based_on_other/", "subreddit_subscribers": 3229, "created_utc": 1581052332.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "As you know, you can use object destructuring for an object to extract values with the same name:\n\n    const values = { 'name': 'John', 'age': 20, 'country': 'USA' }\n    const { name, age } = values\n\nBut when using Redux's useSelector hook, is it better to have them in their own calls or use the same logic?\n\nFor example, let's look at the initial state which is part of a reducer that will eventually be called userInfo in a combineReducers call:\n\n    const initialState = { 'name': '', 'age': 0, 'country': '' }\n\nIf I am in a component, is it better to do\n\n    const { name, age } = useSelector(state =&gt; state.userInfo)\n\nor\n\n    const name = useSelector(state =&gt; state.name)\n    const age = useSelector(state =&gt; state.age)\n    \nThe reason I ask is that the first example is one call but may initially bring in all the values for that userInfo state while the second example is more direct, but then also calls useSelector an additional time.\n\nTo be more performant and cut down on re-renders on data change, which one is the better method?", "author_fullname": "t2_atnwc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Which is more performant for useSelector hook with multiple values?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ezsw20", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581027112.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;As you know, you can use object destructuring for an object to extract values with the same name:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const values = { &amp;#39;name&amp;#39;: &amp;#39;John&amp;#39;, &amp;#39;age&amp;#39;: 20, &amp;#39;country&amp;#39;: &amp;#39;USA&amp;#39; }\nconst { name, age } = values\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;But when using Redux&amp;#39;s useSelector hook, is it better to have them in their own calls or use the same logic?&lt;/p&gt;\n\n&lt;p&gt;For example, let&amp;#39;s look at the initial state which is part of a reducer that will eventually be called userInfo in a combineReducers call:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const initialState = { &amp;#39;name&amp;#39;: &amp;#39;&amp;#39;, &amp;#39;age&amp;#39;: 0, &amp;#39;country&amp;#39;: &amp;#39;&amp;#39; }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If I am in a component, is it better to do&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const { name, age } = useSelector(state =&amp;gt; state.userInfo)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;or&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const name = useSelector(state =&amp;gt; state.name)\nconst age = useSelector(state =&amp;gt; state.age)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reason I ask is that the first example is one call but may initially bring in all the values for that userInfo state while the second example is more direct, but then also calls useSelector an additional time.&lt;/p&gt;\n\n&lt;p&gt;To be more performant and cut down on re-renders on data change, which one is the better method?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ezsw20", "is_robot_indexable": true, "report_reasons": null, "author": "t3g", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/ezsw20/which_is_more_performant_for_useselector_hook/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/ezsw20/which_is_more_performant_for_useselector_hook/", "subreddit_subscribers": 3229, "created_utc": 1580998312.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Hi!\n\nI am new to redux and was wondering if I am understanding the logic well.\n\nI have an API that returns a list of item (Object), with pagination and other filtering parameters.  \nI was thinking about modeling my state as follow:  \n\n\n    exampleParams = { search: \"name\", page: 1 };\n\n    after API call,\n    \n    state\n    {\n        items: {\n            [objectID]: Object,\n            ...\n        },\n        queries: {\n            [queryString.stringify(exampleParams)] = {\n                ids: Array[of objectID],\n                count: number,\n            },\n            ...\n        },\n    };\n\nI was thinking about implementing this in the case the user goes from page 1 to page 2, then comes back to page 1. Since i know the ids of the list returned by the API from a previous query, I wouldn't call the API again.\n\nIn this case, since i have the query results in the state, I can just use\n\n    queries[queryString.stringify(params)].ids.reduce((acc, id) =&gt; {...acc, [id]: items[id]}, {});\n\nwhen i come back to page 1.\n\nAm I thinking this the right way ? Is this the right use case of redux ?  \n\n\nThanks in advance for the feedbacks", "author_fullname": "t2_ir2sc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to structure the state", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ez8t79", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580934386.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi!&lt;/p&gt;\n\n&lt;p&gt;I am new to redux and was wondering if I am understanding the logic well.&lt;/p&gt;\n\n&lt;p&gt;I have an API that returns a list of item (Object), with pagination and other filtering parameters.&lt;br/&gt;\nI was thinking about modeling my state as follow:  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;exampleParams = { search: &amp;quot;name&amp;quot;, page: 1 };\n\nafter API call,\n\nstate\n{\n    items: {\n        [objectID]: Object,\n        ...\n    },\n    queries: {\n        [queryString.stringify(exampleParams)] = {\n            ids: Array[of objectID],\n            count: number,\n        },\n        ...\n    },\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I was thinking about implementing this in the case the user goes from page 1 to page 2, then comes back to page 1. Since i know the ids of the list returned by the API from a previous query, I wouldn&amp;#39;t call the API again.&lt;/p&gt;\n\n&lt;p&gt;In this case, since i have the query results in the state, I can just use&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;queries[queryString.stringify(params)].ids.reduce((acc, id) =&amp;gt; {...acc, [id]: items[id]}, {});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;when i come back to page 1.&lt;/p&gt;\n\n&lt;p&gt;Am I thinking this the right way ? Is this the right use case of redux ?  &lt;/p&gt;\n\n&lt;p&gt;Thanks in advance for the feedbacks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ez8t79", "is_robot_indexable": true, "report_reasons": null, "author": "yugo9109", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/ez8t79/how_to_structure_the_state/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/ez8t79/how_to_structure_the_state/", "subreddit_subscribers": 3229, "created_utc": 1580905586.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I have a bit of a love/hate relationship with Redux. I love the atomic state updates, persistable, replayable global state, and awesome middleware. However, like many others, I hate writing Redux - at least with the recommended design patterns. I experimented with various ways to write better Redux, but it took me a while to figure out the core problem...\n\n*The recommended way of using Redux breaks modular design.* Modular design is such a fundamental tool to scalable software engineering, of course Redux was a pain to use!\n\nOnce I had that insight, I was able to create a new, modular design pattern for using Redux that leveraged Redux's strengths while avoiding the weaknesses of previous design patterns.\n\nI'd love your feedback!\n\nModular Redux: [https://medium.com/@shanebdavis/modular-redux-a-design-pattern-for-mastering-scalable-shared-state-82d4abc0d7b3](https://medium.com/@shanebdavis/modular-redux-a-design-pattern-for-mastering-scalable-shared-state-82d4abc0d7b3)\n\n([cross-posted](https://www.reddit.com/r/reactjs/comments/eyuu7i/modular_redux_a_design_pattern_for_mastering/) on /r/reactjs)", "author_fullname": "t2_blgsn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Modular Redux \u2014 a Design Pattern for Mastering Scalable, Shared State", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eyuwgv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1580842658.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580871143.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a bit of a love/hate relationship with Redux. I love the atomic state updates, persistable, replayable global state, and awesome middleware. However, like many others, I hate writing Redux - at least with the recommended design patterns. I experimented with various ways to write better Redux, but it took me a while to figure out the core problem...&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;The recommended way of using Redux breaks modular design.&lt;/em&gt; Modular design is such a fundamental tool to scalable software engineering, of course Redux was a pain to use!&lt;/p&gt;\n\n&lt;p&gt;Once I had that insight, I was able to create a new, modular design pattern for using Redux that leveraged Redux&amp;#39;s strengths while avoiding the weaknesses of previous design patterns.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d love your feedback!&lt;/p&gt;\n\n&lt;p&gt;Modular Redux: &lt;a href=\"https://medium.com/@shanebdavis/modular-redux-a-design-pattern-for-mastering-scalable-shared-state-82d4abc0d7b3\"&gt;https://medium.com/@shanebdavis/modular-redux-a-design-pattern-for-mastering-scalable-shared-state-82d4abc0d7b3&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(&lt;a href=\"https://www.reddit.com/r/reactjs/comments/eyuu7i/modular_redux_a_design_pattern_for_mastering/\"&gt;cross-posted&lt;/a&gt; on &lt;a href=\"/r/reactjs\"&gt;/r/reactjs&lt;/a&gt;)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eyuwgv", "is_robot_indexable": true, "report_reasons": null, "author": "Shanebdavis", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/eyuwgv/modular_redux_a_design_pattern_for_mastering/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/eyuwgv/modular_redux_a_design_pattern_for_mastering/", "subreddit_subscribers": 3229, "created_utc": 1580842343.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "user_reports": [], "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "React Ninjas Newsletter #89: React Navigation v5 + React Native Paper = \u2764\ufe0f", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "parent_whitelist_status": null, "hide_score": false, "name": "t3_ez2ngi", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "thumbnail": "", "edited": false, "author_flair_css_class": null, "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1580901027.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "domain": "reactninjs.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ez2ngi", "is_robot_indexable": true, "report_reasons": null, "author": "[deleted]", "discussion_type": null, "media": null, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_flair_text_color": "dark", "permalink": "/r/reduxjs/comments/ez2ngi/react_ninjas_newsletter_89_react_navigation_v5/", "whitelist_status": null, "stickied": false, "url": "https://reactninjs.com/post/89-react-navigation-v5-react-native-paper", "subreddit_subscribers": 3229, "created_utc": 1580872227.0, "num_crossposts": 0, "num_comments": 0, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I have a REST API with JWT authentication backend.\n\nI would like to find an example project or course, which could be used as a reference implementation for my React/Redux frontend (with router + pagination) for that API.", "author_fullname": "t2_416bcqmf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Please advice example project or course (React, Redux, JWT, REST)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eys7wk", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580861117.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a REST API with JWT authentication backend.&lt;/p&gt;\n\n&lt;p&gt;I would like to find an example project or course, which could be used as a reference implementation for my React/Redux frontend (with router + pagination) for that API.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eys7wk", "is_robot_indexable": true, "report_reasons": null, "author": "Gary_Pollard", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/eys7wk/please_advice_example_project_or_course_react/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/eys7wk/please_advice_example_project_or_course_react/", "subreddit_subscribers": 3229, "created_utc": 1580832317.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Using React, I was taught to pass an array down to a container from a parent component where I iterate an array. This then gets passed down to a lower component to display the attributes. Using Redux in my app to manage state, I'm not able to immediately reflect an update in attribute in the DOM when I update the instance in the Reducer. Here's my code:\n\n&amp;#x200B;\n\nThe parent component: \n\n    import React, { Component } from \"react\";\n    import RecurringOutagesContainer from \"./containers/RecurringOutagesContainer\";\n    import FutureOutagesContainer from \"./containers/FutureOutagesContainer\";\n    import CurrentOutagesContainer from \"./containers/CurrentOutagesContainer\";\n    import CreateModalComponent from \"./components/CreateModalComponent\";\n    import { Container, Row, Col, Image } from \"react-bootstrap\";\n    import { getFutureOutages } from \"./actions/fetchFutureOutagesAction\";\n    import { getRecurringOutages } from \"./actions/fetchRecurringOutagesAction\";\n    import { getServices } from \"./actions/fetchServicesAction\";\n    import { connect } from 'react-redux'; \n    \n    \n    class Dashboard extends Component {\n      state = {\n        services: [],\n        outages: [], \n        showModal: false\n      };\n    \n      componentDidMount() {\n        this.props.getFutureOutages()\n        this.props.getRecurringOutages()\n        this.props.getServices()\n      }\n    \n    \n      render() {\n        console.log(this.props)\n        return (\n          &lt;div&gt;\n            &lt;Container&gt;\n              &lt;Row&gt;\n                &lt;Col sm={1}&gt;\n                  &lt;img\n                    src={require(\"./public/logo-2-dashboard.png\")}\n                    alt=\"logo\"\n                    id=\"logo\"\n                  &gt;&lt;/img&gt;\n                &lt;/Col&gt;\n                &lt;Col md={8}&gt;&lt;/Col&gt;\n              &lt;/Row&gt;\n            &lt;/Container&gt;\n            &lt;div className=\"container\"&gt;\n              &lt;div className=\"d-flex justify-content-md-end bd-highlight\"&gt;\n                &lt;CreateModalComponent\n                  show={this.state.showModal}\n                  services={this.props.services}\n                  futureOutages={this.props.futureOutages}\n                  recurringOutages={this.props.recurringOutages}\n                /&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n            &lt;div className=\"d-flex justify-content-center bd-highlight dashboard\"&gt;\n              &lt;div className=\"d-flex justify-content-start bd-highlight\"&gt;\n                &lt;div className=\"d-fliex pastOutages\"&gt;\n                  &lt;h4&gt;Past Outages&lt;/h4&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n              &lt;div className=\"d-flex justify-content-center bd-highlight\"&gt;\n                &lt;div className=\"d-fliex currentOutages\"&gt;\n                  &lt;h4&gt;Current Outages&lt;/h4&gt;\n                  &lt;div className=\"container\"&gt;\n                    &lt;div className=\"col-12\"&gt;\n                      &lt;CurrentOutagesContainer services={this.props.services} /&gt;\n                    &lt;/div&gt;\n                  &lt;/div&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n              &lt;div className=\"d-flex align-items-center flex-column bd-highlight\"&gt;\n                &lt;div className=\"d-fliex justify-content-center\"&gt;\n                  &lt;h4&gt;Future Outages&lt;/h4&gt;\n                  &lt;div className=\"container\" id=\"futureOutages\"&gt;\n                    &lt;div className=\"col-12\"&gt;\n                      &lt;FutureOutagesContainer\n                        futureOutages={this.props.futureOutages} services={this.props.services}\n                      /&gt;\n                    &lt;/div&gt;\n                  &lt;/div&gt;\n    \n                  &lt;h4&gt;Recurring Outages&lt;/h4&gt;\n                  &lt;div className=\"container\" id=\"recurringOutages\"&gt;\n                    &lt;div className=\"col-12\"&gt;\n                      &lt;RecurringOutagesContainer\n                        recurringOutages={this.props.recurringOutages}\n                      /&gt;\n                    &lt;/div&gt;\n                  &lt;/div&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n            &lt;/div&gt;\n          &lt;/div&gt;\n        );\n      }\n    }\n    \n    const mapStateToProps = state =&gt; {\n      return {\n        futureOutages: state.futureOutages.futureOutages,\n        recurringOutages: state.recurringOutages.recurringOutages, \n        services: state.services.services\n      }\n    };\n    \n    \n    const mapDispatchToProps = dispatch =&gt; {\n      return {\n        getFutureOutages: () =&gt; dispatch(getFutureOutages()),\n        getRecurringOutages: () =&gt; dispatch(getRecurringOutages()),\n        getServices: () =&gt; dispatch(getServices())\n      };\n    };\n    \n    export default connect(mapStateToProps, mapDispatchToProps)(Dashboard); // this connects Dashboard to store\n    \n\nthe Container: \n\n    import React from \"react\";\n    import FutureOutagesComponent from \"../components/FutureOutagesComponent\"\n    \n    const FutureOutagesContainer = props =&gt; {\n     \n       return (\n        &lt;div&gt;\n             {props.futureOutages &amp;&amp; props.futureOutages.map((futureOutage, idx) =&gt; (\n               &lt;FutureOutagesComponent key={idx} futureOutage={futureOutage} services={props.services} /&gt;\n             ))\n             }\n        &lt;/div&gt;\n      )\n    \n    };\n    \n    export default FutureOutagesContainer;\n    \n\nThe lower Component: \n\n    import React, { Component } from 'react';\n    import EditOutageModal from './EditOutageModal';\n    class FutureOutagesComponent extends Component {\n    \n       render() {\n          \n            return (\n              &lt;div&gt;\n                &lt;div\n                  className=\"card text-white bg-info mb-3\"\n                  style={{ maxWidth: \"18rem\" }}\n                &gt;\n                  &lt;div className=\"card-body\"&gt;\n                    &lt;p className=\"card-text\"&gt;\n                      Service: {this.props.futureOutage.service.service}\n                    &lt;/p&gt;\n                    &lt;p className=\"card-text\"&gt;\n                      Start Time: {this.props.futureOutage.start_time}\n                    &lt;/p&gt;\n                    &lt;p className=\"card-text\"&gt;\n                      End Time: {this.props.futureOutage.end_time}\n                    &lt;/p&gt;\n                    &lt;p className=\"card-text\"&gt;\n                      Reason: {this.props.futureOutage.reason}\n                    &lt;/p&gt;\n                  &lt;/div&gt;\n          \n                  &lt;EditOutageModal\n                    outage={this.props.futureOutage}\n                    type=\"FO\"\n                    services={this.props.services}\n                  /&gt;\n                &lt;/div&gt;\n              &lt;/div&gt;\n            );\n        }\n    }\n    \n    \n    \n    export default FutureOutagesComponent; \n    \n\nThe reducer: \n\n    const initialState = {\n        futureOutages: []\n    }\n    \n    export const futureOutagesReducer = (state = initialState, action) =&gt; {\n      \n        switch (action.type) {\n            case 'GET_FUTURE_OUTAGES':\n                return { futureOutages: action.payload };\n            case 'CREATE_FUTURE_OUTAGE':\n                return { futureOutages: [ ...state.futureOutages, action.payload ]};\n            case 'UPDATE_FUTURE_OUTAGE':\n                let futureOutagesStateCopy = state.futureOutages.slice();\n                let updatedFutureOutageIndex = state.futureOutagesStateCopy.findIndex(futureOutage =&gt; futureOutage.id === action.payload.id)\n                futureOutagesStateCopy.splice(updatedFutureOutageIndex, 1, action.payload);\n                return { ...state, futureOutages: futureOutagesStateCopy }\n            default: \n                return state;\n        }\n    }\n\nRight now, the \\`futureOutage\\` update takes place and works in the \\`action\\` (not pictured here). It just doesn't immediately change in the DOM.", "author_fullname": "t2_ci0js", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Confusion on how to immediately change props in DOM from Redux state", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ev9prm", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580266475.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Using React, I was taught to pass an array down to a container from a parent component where I iterate an array. This then gets passed down to a lower component to display the attributes. Using Redux in my app to manage state, I&amp;#39;m not able to immediately reflect an update in attribute in the DOM when I update the instance in the Reducer. Here&amp;#39;s my code:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;The parent component: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import React, { Component } from &amp;quot;react&amp;quot;;\nimport RecurringOutagesContainer from &amp;quot;./containers/RecurringOutagesContainer&amp;quot;;\nimport FutureOutagesContainer from &amp;quot;./containers/FutureOutagesContainer&amp;quot;;\nimport CurrentOutagesContainer from &amp;quot;./containers/CurrentOutagesContainer&amp;quot;;\nimport CreateModalComponent from &amp;quot;./components/CreateModalComponent&amp;quot;;\nimport { Container, Row, Col, Image } from &amp;quot;react-bootstrap&amp;quot;;\nimport { getFutureOutages } from &amp;quot;./actions/fetchFutureOutagesAction&amp;quot;;\nimport { getRecurringOutages } from &amp;quot;./actions/fetchRecurringOutagesAction&amp;quot;;\nimport { getServices } from &amp;quot;./actions/fetchServicesAction&amp;quot;;\nimport { connect } from &amp;#39;react-redux&amp;#39;; \n\n\nclass Dashboard extends Component {\n  state = {\n    services: [],\n    outages: [], \n    showModal: false\n  };\n\n  componentDidMount() {\n    this.props.getFutureOutages()\n    this.props.getRecurringOutages()\n    this.props.getServices()\n  }\n\n\n  render() {\n    console.log(this.props)\n    return (\n      &amp;lt;div&amp;gt;\n        &amp;lt;Container&amp;gt;\n          &amp;lt;Row&amp;gt;\n            &amp;lt;Col sm={1}&amp;gt;\n              &amp;lt;img\n                src={require(&amp;quot;./public/logo-2-dashboard.png&amp;quot;)}\n                alt=&amp;quot;logo&amp;quot;\n                id=&amp;quot;logo&amp;quot;\n              &amp;gt;&amp;lt;/img&amp;gt;\n            &amp;lt;/Col&amp;gt;\n            &amp;lt;Col md={8}&amp;gt;&amp;lt;/Col&amp;gt;\n          &amp;lt;/Row&amp;gt;\n        &amp;lt;/Container&amp;gt;\n        &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;\n          &amp;lt;div className=&amp;quot;d-flex justify-content-md-end bd-highlight&amp;quot;&amp;gt;\n            &amp;lt;CreateModalComponent\n              show={this.state.showModal}\n              services={this.props.services}\n              futureOutages={this.props.futureOutages}\n              recurringOutages={this.props.recurringOutages}\n            /&amp;gt;\n          &amp;lt;/div&amp;gt;\n        &amp;lt;/div&amp;gt;\n        &amp;lt;div className=&amp;quot;d-flex justify-content-center bd-highlight dashboard&amp;quot;&amp;gt;\n          &amp;lt;div className=&amp;quot;d-flex justify-content-start bd-highlight&amp;quot;&amp;gt;\n            &amp;lt;div className=&amp;quot;d-fliex pastOutages&amp;quot;&amp;gt;\n              &amp;lt;h4&amp;gt;Past Outages&amp;lt;/h4&amp;gt;\n            &amp;lt;/div&amp;gt;\n          &amp;lt;/div&amp;gt;\n          &amp;lt;div className=&amp;quot;d-flex justify-content-center bd-highlight&amp;quot;&amp;gt;\n            &amp;lt;div className=&amp;quot;d-fliex currentOutages&amp;quot;&amp;gt;\n              &amp;lt;h4&amp;gt;Current Outages&amp;lt;/h4&amp;gt;\n              &amp;lt;div className=&amp;quot;container&amp;quot;&amp;gt;\n                &amp;lt;div className=&amp;quot;col-12&amp;quot;&amp;gt;\n                  &amp;lt;CurrentOutagesContainer services={this.props.services} /&amp;gt;\n                &amp;lt;/div&amp;gt;\n              &amp;lt;/div&amp;gt;\n            &amp;lt;/div&amp;gt;\n          &amp;lt;/div&amp;gt;\n          &amp;lt;div className=&amp;quot;d-flex align-items-center flex-column bd-highlight&amp;quot;&amp;gt;\n            &amp;lt;div className=&amp;quot;d-fliex justify-content-center&amp;quot;&amp;gt;\n              &amp;lt;h4&amp;gt;Future Outages&amp;lt;/h4&amp;gt;\n              &amp;lt;div className=&amp;quot;container&amp;quot; id=&amp;quot;futureOutages&amp;quot;&amp;gt;\n                &amp;lt;div className=&amp;quot;col-12&amp;quot;&amp;gt;\n                  &amp;lt;FutureOutagesContainer\n                    futureOutages={this.props.futureOutages} services={this.props.services}\n                  /&amp;gt;\n                &amp;lt;/div&amp;gt;\n              &amp;lt;/div&amp;gt;\n\n              &amp;lt;h4&amp;gt;Recurring Outages&amp;lt;/h4&amp;gt;\n              &amp;lt;div className=&amp;quot;container&amp;quot; id=&amp;quot;recurringOutages&amp;quot;&amp;gt;\n                &amp;lt;div className=&amp;quot;col-12&amp;quot;&amp;gt;\n                  &amp;lt;RecurringOutagesContainer\n                    recurringOutages={this.props.recurringOutages}\n                  /&amp;gt;\n                &amp;lt;/div&amp;gt;\n              &amp;lt;/div&amp;gt;\n            &amp;lt;/div&amp;gt;\n          &amp;lt;/div&amp;gt;\n        &amp;lt;/div&amp;gt;\n      &amp;lt;/div&amp;gt;\n    );\n  }\n}\n\nconst mapStateToProps = state =&amp;gt; {\n  return {\n    futureOutages: state.futureOutages.futureOutages,\n    recurringOutages: state.recurringOutages.recurringOutages, \n    services: state.services.services\n  }\n};\n\n\nconst mapDispatchToProps = dispatch =&amp;gt; {\n  return {\n    getFutureOutages: () =&amp;gt; dispatch(getFutureOutages()),\n    getRecurringOutages: () =&amp;gt; dispatch(getRecurringOutages()),\n    getServices: () =&amp;gt; dispatch(getServices())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard); // this connects Dashboard to store\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;the Container: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import React from &amp;quot;react&amp;quot;;\nimport FutureOutagesComponent from &amp;quot;../components/FutureOutagesComponent&amp;quot;\n\nconst FutureOutagesContainer = props =&amp;gt; {\n\n   return (\n    &amp;lt;div&amp;gt;\n         {props.futureOutages &amp;amp;&amp;amp; props.futureOutages.map((futureOutage, idx) =&amp;gt; (\n           &amp;lt;FutureOutagesComponent key={idx} futureOutage={futureOutage} services={props.services} /&amp;gt;\n         ))\n         }\n    &amp;lt;/div&amp;gt;\n  )\n\n};\n\nexport default FutureOutagesContainer;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The lower Component: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import React, { Component } from &amp;#39;react&amp;#39;;\nimport EditOutageModal from &amp;#39;./EditOutageModal&amp;#39;;\nclass FutureOutagesComponent extends Component {\n\n   render() {\n\n        return (\n          &amp;lt;div&amp;gt;\n            &amp;lt;div\n              className=&amp;quot;card text-white bg-info mb-3&amp;quot;\n              style={{ maxWidth: &amp;quot;18rem&amp;quot; }}\n            &amp;gt;\n              &amp;lt;div className=&amp;quot;card-body&amp;quot;&amp;gt;\n                &amp;lt;p className=&amp;quot;card-text&amp;quot;&amp;gt;\n                  Service: {this.props.futureOutage.service.service}\n                &amp;lt;/p&amp;gt;\n                &amp;lt;p className=&amp;quot;card-text&amp;quot;&amp;gt;\n                  Start Time: {this.props.futureOutage.start_time}\n                &amp;lt;/p&amp;gt;\n                &amp;lt;p className=&amp;quot;card-text&amp;quot;&amp;gt;\n                  End Time: {this.props.futureOutage.end_time}\n                &amp;lt;/p&amp;gt;\n                &amp;lt;p className=&amp;quot;card-text&amp;quot;&amp;gt;\n                  Reason: {this.props.futureOutage.reason}\n                &amp;lt;/p&amp;gt;\n              &amp;lt;/div&amp;gt;\n\n              &amp;lt;EditOutageModal\n                outage={this.props.futureOutage}\n                type=&amp;quot;FO&amp;quot;\n                services={this.props.services}\n              /&amp;gt;\n            &amp;lt;/div&amp;gt;\n          &amp;lt;/div&amp;gt;\n        );\n    }\n}\n\n\n\nexport default FutureOutagesComponent; \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The reducer: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const initialState = {\n    futureOutages: []\n}\n\nexport const futureOutagesReducer = (state = initialState, action) =&amp;gt; {\n\n    switch (action.type) {\n        case &amp;#39;GET_FUTURE_OUTAGES&amp;#39;:\n            return { futureOutages: action.payload };\n        case &amp;#39;CREATE_FUTURE_OUTAGE&amp;#39;:\n            return { futureOutages: [ ...state.futureOutages, action.payload ]};\n        case &amp;#39;UPDATE_FUTURE_OUTAGE&amp;#39;:\n            let futureOutagesStateCopy = state.futureOutages.slice();\n            let updatedFutureOutageIndex = state.futureOutagesStateCopy.findIndex(futureOutage =&amp;gt; futureOutage.id === action.payload.id)\n            futureOutagesStateCopy.splice(updatedFutureOutageIndex, 1, action.payload);\n            return { ...state, futureOutages: futureOutagesStateCopy }\n        default: \n            return state;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Right now, the `futureOutage` update takes place and works in the `action` (not pictured here). It just doesn&amp;#39;t immediately change in the DOM.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ev9prm", "is_robot_indexable": true, "report_reasons": null, "author": "dsound", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/ev9prm/confusion_on_how_to_immediately_change_props_in/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/ev9prm/confusion_on_how_to_immediately_change_props_in/", "subreddit_subscribers": 3229, "created_utc": 1580237675.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Greetings!\n\nI am currently having trouble rendering a \"sign up\" form, this form is rendered with redux-form, and is currently redefined by exporting a constant: \"export const SignUpFormPresentation: ...\"\n\nHowever, I currently need to make the password fields and form password (createPasswordInputand createPasswordRetypeInputrespectively) can have a state that by clicking on these fields, the password can be revealed / hidden in both fields at the same time. So I am forced to create a class to make this state, and restructure the code a bit.\n\nThe problem is that I have to combine the way the form is made with redux-form, and be able to correctly export the constant where the form is rendered, and also have access to this class, from where I export the inputs of each password field , to be able to operate the onclick and type attributes, in the input.\n\ni show the code and details in stackoverflow, can i get help in this please?\n\n[StackOverFlow Post](https://stackoverflow.com/q/59888130/11019195)", "author_fullname": "t2_3vtn2teg", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Redux/React | \u00bfHow can I export a constant within a class? (Unexpected token error)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_et11m8", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579848997.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Greetings!&lt;/p&gt;\n\n&lt;p&gt;I am currently having trouble rendering a &amp;quot;sign up&amp;quot; form, this form is rendered with redux-form, and is currently redefined by exporting a constant: &amp;quot;export const SignUpFormPresentation: ...&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;However, I currently need to make the password fields and form password (createPasswordInputand createPasswordRetypeInputrespectively) can have a state that by clicking on these fields, the password can be revealed / hidden in both fields at the same time. So I am forced to create a class to make this state, and restructure the code a bit.&lt;/p&gt;\n\n&lt;p&gt;The problem is that I have to combine the way the form is made with redux-form, and be able to correctly export the constant where the form is rendered, and also have access to this class, from where I export the inputs of each password field , to be able to operate the onclick and type attributes, in the input.&lt;/p&gt;\n\n&lt;p&gt;i show the code and details in stackoverflow, can i get help in this please?&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://stackoverflow.com/q/59888130/11019195\"&gt;StackOverFlow Post&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "et11m8", "is_robot_indexable": true, "report_reasons": null, "author": "Disabled_Talk", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/et11m8/reduxreact_how_can_i_export_a_constant_within_a/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/et11m8/reduxreact_how_can_i_export_a_constant_within_a/", "subreddit_subscribers": 3229, "created_utc": 1579820197.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "hi everyone,\n\ni have a code, where i render a password input with redux-form, but inside this input, i want to get a buttom to hide/reveal the password, i am trying to do it with action and reducer to keep this function globally, so i can use it in anothers passwords inputs too.\n\nDo you know any example to do this? i am new using react and redux, i would like to find an example that would be usefull for me as a guide.", "author_fullname": "t2_3vtn2teg", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Do anyone know an example to get action button, to reveal / hide password in a password input with action and reducer?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_es08m7", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579666226.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;hi everyone,&lt;/p&gt;\n\n&lt;p&gt;i have a code, where i render a password input with redux-form, but inside this input, i want to get a buttom to hide/reveal the password, i am trying to do it with action and reducer to keep this function globally, so i can use it in anothers passwords inputs too.&lt;/p&gt;\n\n&lt;p&gt;Do you know any example to do this? i am new using react and redux, i would like to find an example that would be usefull for me as a guide.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "es08m7", "is_robot_indexable": true, "report_reasons": null, "author": "Disabled_Talk", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/es08m7/do_anyone_know_an_example_to_get_action_button_to/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/es08m7/do_anyone_know_an_example_to_get_action_button_to/", "subreddit_subscribers": 3229, "created_utc": 1579637426.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "So I have an online store project. \nOn the homepage I'm getting the data for each book from mapStateToProps.\n\nWhat I want is to have a buttons on homepage for each book that when clicked will add that book to the cart. \n\nThe cart is a separate page I have using reactRouter. \n\nI'm so fkn lost and have tried everything, I tried doing  mapDispatchToProps but its quite mind boggling for me how I can make the button on the homepage to send the data from the store to the cart page. I'm lost and want to die because its been 3 weeks working on this shit and I'm not getting ANYWHERE. pls help me pls", "author_fullname": "t2_3mia3geo", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to access redux store from across components??", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_er8db0", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579525152.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I have an online store project. \nOn the homepage I&amp;#39;m getting the data for each book from mapStateToProps.&lt;/p&gt;\n\n&lt;p&gt;What I want is to have a buttons on homepage for each book that when clicked will add that book to the cart. &lt;/p&gt;\n\n&lt;p&gt;The cart is a separate page I have using reactRouter. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m so fkn lost and have tried everything, I tried doing  mapDispatchToProps but its quite mind boggling for me how I can make the button on the homepage to send the data from the store to the cart page. I&amp;#39;m lost and want to die because its been 3 weeks working on this shit and I&amp;#39;m not getting ANYWHERE. pls help me pls&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "er8db0", "is_robot_indexable": true, "report_reasons": null, "author": "scaled2good", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/er8db0/how_to_access_redux_store_from_across_components/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/er8db0/how_to_access_redux_store_from_across_components/", "subreddit_subscribers": 3229, "created_utc": 1579496352.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_er8db0", "before": null}}