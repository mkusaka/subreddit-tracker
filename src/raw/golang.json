{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_1vdi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What's coming in Go 1.15", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ginp22", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 157, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 157, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589357112.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "lwn.net", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ginp22", "is_robot_indexable": true, "report_reasons": null, "author": "benhoyt", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/ginp22/whats_coming_in_go_115/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://lwn.net/SubscriberLink/820217/47ed80088c03b18d/", "subreddit_subscribers": 112430, "created_utc": 1589328312.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_a3n51", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Too modern Go application? Building a serverless application with Google Cloud Run and Firebase", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_giwx9q", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589396740.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "threedots.tech", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "giwx9q", "is_robot_indexable": true, "report_reasons": null, "author": "mi_losz", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/giwx9q/too_modern_go_application_building_a_serverless/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://threedots.tech/post/serverless-cloud-run-firebase-modern-go-application/", "subreddit_subscribers": 112430, "created_utc": 1589367940.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_41nkoba1", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "\ud83c\udf44VPN supporting authentications such as Google OpenID Connect or AWS IAM ... ETC, over GRPC.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_givybr", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.63, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589392079.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "givybr", "is_robot_indexable": true, "report_reasons": null, "author": "allan-bae", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/givybr/vpn_supporting_authentications_such_as_google/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/gjbae1212/grpc-vpn", "subreddit_subscribers": 112430, "created_utc": 1589363279.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_2xgffz8j", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "\ud83d\udd0d Announcing observe: Observe a website and get an e-mail if something changes.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_givvf3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589391687.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "givvf3", "is_robot_indexable": true, "report_reasons": null, "author": "dominik-braun", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/givvf3/announcing_observe_observe_a_website_and_get_an/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/dominikbraun/observe", "subreddit_subscribers": 112430, "created_utc": 1589362887.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_giukr1d", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Tutorial on building a desktop app with goey", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_giy708", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589402205.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "bitbucket.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "giy708", "is_robot_indexable": true, "report_reasons": null, "author": "siplasma", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/giy708/tutorial_on_building_a_desktop_app_with_goey/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://bitbucket.org/rj/goey/wiki/Tutorial-Hello", "subreddit_subscribers": 112430, "created_utc": 1589373405.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_aqi5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ensmallening Go binaries by prohibiting comparisons", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gifbju", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 53, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 53, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589331944.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "dave.cheney.net", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gifbju", "is_robot_indexable": true, "report_reasons": null, "author": "pdq", "discussion_type": null, "num_comments": 18, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gifbju/ensmallening_go_binaries_by_prohibiting/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://dave.cheney.net/2020/05/09/ensmallening-go-binaries-by-prohibiting-comparisons", "subreddit_subscribers": 112430, "created_utc": 1589303144.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "&amp;#x200B;\n\nhttps://i.redd.it/4gtiwcxqtby41.gif\n\n[https://github.com/ryo-ma/lazyhub](https://github.com/ryo-ma/lazyhub)\n\n* \ud83d\ude80Check the trending repositories on GitHub today\n* \ud83d\udd0dSearch repositories\n* \ud83d\udcd8Read the README\n* \ud83d\udcc4Copy the clone command to clipboard\n* \ud83d\udcbbOpen the repository page on your browser", "author_fullname": "t2_68s7hfq6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "\ud83d\ude80lazyhub - Terminal UI Client for GitHub using gocui.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "media_metadata": {"4gtiwcxqtby41": {"status": "valid", "e": "AnimatedImage", "m": "image/gif", "p": [{"y": 79, "x": 108, "u": "https://preview.redd.it/4gtiwcxqtby41.gif?width=108&amp;crop=smart&amp;format=png8&amp;s=72e52c8c7678d0352176154b6852d26f4b6809b5"}, {"y": 159, "x": 216, "u": "https://preview.redd.it/4gtiwcxqtby41.gif?width=216&amp;crop=smart&amp;format=png8&amp;s=5266294e2e6ac26214e45bc40140f249894ccd9f"}, {"y": 236, "x": 320, "u": "https://preview.redd.it/4gtiwcxqtby41.gif?width=320&amp;crop=smart&amp;format=png8&amp;s=057285fdb60bf21492f4c7e3d814955453f9b17e"}, {"y": 473, "x": 640, "u": "https://preview.redd.it/4gtiwcxqtby41.gif?width=640&amp;crop=smart&amp;format=png8&amp;s=151d83865e4a7c5d58b628e09c429faa7f7cb09a"}], "s": {"y": 512, "gif": "https://i.redd.it/4gtiwcxqtby41.gif", "mp4": "https://preview.redd.it/4gtiwcxqtby41.gif?format=mp4&amp;s=c4b585d05d969412979bc378762e5ad8d632e1b4", "x": 692}, "id": "4gtiwcxqtby41"}}, "name": "t3_gia5zz", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 83, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 83, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1589286281.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589314842.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://i.redd.it/4gtiwcxqtby41.gif\"&gt;https://i.redd.it/4gtiwcxqtby41.gif&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ryo-ma/lazyhub\"&gt;https://github.com/ryo-ma/lazyhub&lt;/a&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;\ud83d\ude80Check the trending repositories on GitHub today&lt;/li&gt;\n&lt;li&gt;\ud83d\udd0dSearch repositories&lt;/li&gt;\n&lt;li&gt;\ud83d\udcd8Read the README&lt;/li&gt;\n&lt;li&gt;\ud83d\udcc4Copy the clone command to clipboard&lt;/li&gt;\n&lt;li&gt;\ud83d\udcbbOpen the repository page on your browser&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gia5zz", "is_robot_indexable": true, "report_reasons": null, "author": "ryo_ma", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gia5zz/lazyhub_terminal_ui_client_for_github_using_gocui/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gia5zz/lazyhub_terminal_ui_client_for_github_using_gocui/", "subreddit_subscribers": 112430, "created_utc": 1589286042.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I once saw this meme, and wondered if I could build a solution for it. I settled on Go and [Qt](https://github.com/therecipe/qt) for the GUI and built pickleIt. Its early stages, and currently I have only compiled for OSX (as thats all I have). Please see the readme in the repository, and if you want to try it on OSX (or tell me that it doesn't work....) there is a download link near the top!  \nTo be clear, this was a side project, and at this stage, I'm wondering what people think.  \n[Link to Code/Download Link here](https://gitlab.com/amlwwalker/pickleit)   \nFeedback massively appreciated\n\n&amp;#x200B;\n\n[PickleIt Gui](https://preview.redd.it/2wt6mkjyvdy41.png?width=2624&amp;format=png&amp;auto=webp&amp;s=805225ee7dce35ca2297a06a4eacd65e167f2597)\n\n[The meme that got me going](https://preview.redd.it/vrr10nz8vdy41.png?width=766&amp;format=png&amp;auto=webp&amp;s=b7be1496f7de84a39b8aaa50282352652bcc7ab3)", "author_fullname": "t2_12c37d", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "PickleIt - A Gui based version control system for binary files", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "media_metadata": {"vrr10nz8vdy41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 106, "x": 108, "u": "https://preview.redd.it/vrr10nz8vdy41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=5999549848c0ddef5f2d727731de21a51538f1d0"}, {"y": 213, "x": 216, "u": "https://preview.redd.it/vrr10nz8vdy41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=d1feae77c73cee833a91083d104543abf77de291"}, {"y": 315, "x": 320, "u": "https://preview.redd.it/vrr10nz8vdy41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=fd6e59ee98a60a7b4518ee0ce8ce6a8574095916"}, {"y": 631, "x": 640, "u": "https://preview.redd.it/vrr10nz8vdy41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=cc7132640e30a4607e345588a616a328cb7519cd"}], "s": {"y": 756, "x": 766, "u": "https://preview.redd.it/vrr10nz8vdy41.png?width=766&amp;format=png&amp;auto=webp&amp;s=b7be1496f7de84a39b8aaa50282352652bcc7ab3"}, "id": "vrr10nz8vdy41"}, "2wt6mkjyvdy41": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 74, "x": 108, "u": "https://preview.redd.it/2wt6mkjyvdy41.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=3e82de14c065428c6dea709b156f5f6c66f73a57"}, {"y": 148, "x": 216, "u": "https://preview.redd.it/2wt6mkjyvdy41.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=82b6ed94cbc10df84f37517c7eadbe2c86e28c29"}, {"y": 220, "x": 320, "u": "https://preview.redd.it/2wt6mkjyvdy41.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=8671ee373948f99c9c8963ffd827b63095e92469"}, {"y": 440, "x": 640, "u": "https://preview.redd.it/2wt6mkjyvdy41.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=fae852a464e22055d7b7e16861dbe034bb938e75"}, {"y": 660, "x": 960, "u": "https://preview.redd.it/2wt6mkjyvdy41.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=501f6f8fcc3a7f59a00f6e6180ef948ebcc6667c"}, {"y": 742, "x": 1080, "u": "https://preview.redd.it/2wt6mkjyvdy41.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=9e9edf737d8dd249f7e50eb0d09174b40a1d7065"}], "s": {"y": 1804, "x": 2624, "u": "https://preview.redd.it/2wt6mkjyvdy41.png?width=2624&amp;format=png&amp;auto=webp&amp;s=805225ee7dce35ca2297a06a4eacd65e167f2597"}, "id": "2wt6mkjyvdy41"}}, "name": "t3_gii6wc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.85, "author_flair_background_color": null, "subreddit_type": "public", "ups": 23, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 23, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1589316662.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589339778.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I once saw this meme, and wondered if I could build a solution for it. I settled on Go and &lt;a href=\"https://github.com/therecipe/qt\"&gt;Qt&lt;/a&gt; for the GUI and built pickleIt. Its early stages, and currently I have only compiled for OSX (as thats all I have). Please see the readme in the repository, and if you want to try it on OSX (or tell me that it doesn&amp;#39;t work....) there is a download link near the top!&lt;br/&gt;\nTo be clear, this was a side project, and at this stage, I&amp;#39;m wondering what people think.&lt;br/&gt;\n&lt;a href=\"https://gitlab.com/amlwwalker/pickleit\"&gt;Link to Code/Download Link here&lt;/a&gt;&lt;br/&gt;\nFeedback massively appreciated&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/2wt6mkjyvdy41.png?width=2624&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=805225ee7dce35ca2297a06a4eacd65e167f2597\"&gt;PickleIt Gui&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/vrr10nz8vdy41.png?width=766&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=b7be1496f7de84a39b8aaa50282352652bcc7ab3\"&gt;The meme that got me going&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gii6wc", "is_robot_indexable": true, "report_reasons": null, "author": "amlwwalker", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gii6wc/pickleit_a_gui_based_version_control_system_for/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gii6wc/pickleit_a_gui_based_version_control_system_for/", "subreddit_subscribers": 112430, "created_utc": 1589310978.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I was watching this talk https://www.youtube.com/watch?v=zeLToGnjIUM which discusses various ways to write async code in different languages, the speaker discussed Go and said since you have to use channels to get return values from goroutines this is like function coloring http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\n\nnow I am not exactly sure what function coloring is I am assuming that it is a syntax in which the langauge starts looking more like a DSL and becomes hard to reason about.\n\nWhile programming in Go I have found that it is a joy to write concurrent code and its very easy to reason about as compared to any of the other async await syntax which doesn't really make sense (although the Zig async await syntax does look much cleaner and straightforward)\n\nI wanted to the community's opinion on this whether goroutines-channels style concurrency can be considered an example of function colouring?", "author_fullname": "t2_6s2uku", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is Go's concurrency model which uses channels and goroutines for writing concurrent code an example of function coloring?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_gixpgu", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589400267.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was watching this talk &lt;a href=\"https://www.youtube.com/watch?v=zeLToGnjIUM\"&gt;https://www.youtube.com/watch?v=zeLToGnjIUM&lt;/a&gt; which discusses various ways to write async code in different languages, the speaker discussed Go and said since you have to use channels to get return values from goroutines this is like function coloring &lt;a href=\"http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/\"&gt;http://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;now I am not exactly sure what function coloring is I am assuming that it is a syntax in which the langauge starts looking more like a DSL and becomes hard to reason about.&lt;/p&gt;\n\n&lt;p&gt;While programming in Go I have found that it is a joy to write concurrent code and its very easy to reason about as compared to any of the other async await syntax which doesn&amp;#39;t really make sense (although the Zig async await syntax does look much cleaner and straightforward)&lt;/p&gt;\n\n&lt;p&gt;I wanted to the community&amp;#39;s opinion on this whether goroutines-channels style concurrency can be considered an example of function colouring?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gixpgu", "is_robot_indexable": true, "report_reasons": null, "author": "fenster25", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gixpgu/is_gos_concurrency_model_which_uses_channels_and/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gixpgu/is_gos_concurrency_model_which_uses_channels_and/", "subreddit_subscribers": 112430, "created_utc": 1589371467.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi I'm currently working on API wrapper and decided that I'll learn how to test Golang code. I have such method in my struct:\n\n    func (l *Librus) CreateSession() error {\n    \tpostData := url.Values{}\n    \tpostData.Set(\"username\", l.Username)\n    \tpostData.Set(\"password\", l.Password)\n    \tpostData.Set(\"librus_long_term_token\", \"1\")\n    \tpostData.Set(\"grant_type\", \"password\")\n    \n    \t// request\n    \treq, err := http.NewRequest(\"POST\", host+\"OAuth/Token\", strings.NewReader(postData.Encode()))\n    \t// add headers\n    \tfor _, h := range Headers {\n    \t\treq.Header.Set(h.Key, h.Value)\n    \t}\n    \n    \tif err != nil {\n    \t\treturn err\n    \t}\n    \n    \t// response\n    \tres, err := l.Client.Do(req)\n    \tif err != nil {\n    \t\treturn err\n    \t}\n    \tdefer res.Body.Close()\n    \n    \t// check response code\n    \tif res.StatusCode != http.StatusOK {\n    \t\treturn fmt.Errorf(\"Error status code, wanted: %v, got: %v\", http.StatusOK, res.StatusCode)\n    \t}\n    \n    \t// decode json response\n    \tokResponse := new(OKResponse)\n    \terr = json.NewDecoder(res.Body).Decode(okResponse)\n    \tif err != nil {\n    \t\treturn err\n    \t}\n    \n    \t// change authorization header\n    \tHeaders[0].Value = \"Bearer \" + okResponse.AccessToken\n    \n    \treturn nil\n    }\n\nI wrote mock for http.Client and it looks like this:\n\n    type MockClient struct {\n    \tExpectedRes *http.Response\n    \tReq         *http.Request\n    \tErr         error\n    \tDoFunc      func(req *http.Request) (*http.Response, error)\n    }\n    \n    func (m *MockClient) Do(req *http.Request) (*http.Response, error) {\n    \tm.Req = req\n    \tif m.DoFunc != nil {\n    \t\treturn m.DoFunc(req)\n    \t}\n    \treturn m.ExpectedRes, m.Err\n    }\n\nTest:\n\n    func TestSuccessCreateSession(t *testing.T) {\n    \tclient := &amp;mocks.MockClient{\n    \t\tDoFunc: func(req *http.Request) (*http.Response, error) {\n    \t\t\treturn &amp;http.Response{\n    \t\t\t\tStatusCode: http.StatusOK,\n    \t\t\t}, nil\n    \t\t},\n    \t}\n    \n    \tl := &amp;golibrus.Librus{\n    \t\tClient:   client,\n    \t\tUsername: \"test\",\n    \t\tPassword: \"test\",\n    \t}\n    \n    \terr = l.CreateSession()\n    \tassert.Nil(t, err)\n    }\n\n&amp;#x200B;\n\nI tried writing test for this 'CreateSession' method but it returns error on 'defer.res.Body.Close()', I think it causes it because 'Body' is empty. Do you guys have any advice? I read a lot of articles how to mock but I still don't understand it :(.", "author_fullname": "t2_1f7u5617", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How should I test API wrapper?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_gixc6c", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589398652.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi I&amp;#39;m currently working on API wrapper and decided that I&amp;#39;ll learn how to test Golang code. I have such method in my struct:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func (l *Librus) CreateSession() error {\n    postData := url.Values{}\n    postData.Set(&amp;quot;username&amp;quot;, l.Username)\n    postData.Set(&amp;quot;password&amp;quot;, l.Password)\n    postData.Set(&amp;quot;librus_long_term_token&amp;quot;, &amp;quot;1&amp;quot;)\n    postData.Set(&amp;quot;grant_type&amp;quot;, &amp;quot;password&amp;quot;)\n\n    // request\n    req, err := http.NewRequest(&amp;quot;POST&amp;quot;, host+&amp;quot;OAuth/Token&amp;quot;, strings.NewReader(postData.Encode()))\n    // add headers\n    for _, h := range Headers {\n        req.Header.Set(h.Key, h.Value)\n    }\n\n    if err != nil {\n        return err\n    }\n\n    // response\n    res, err := l.Client.Do(req)\n    if err != nil {\n        return err\n    }\n    defer res.Body.Close()\n\n    // check response code\n    if res.StatusCode != http.StatusOK {\n        return fmt.Errorf(&amp;quot;Error status code, wanted: %v, got: %v&amp;quot;, http.StatusOK, res.StatusCode)\n    }\n\n    // decode json response\n    okResponse := new(OKResponse)\n    err = json.NewDecoder(res.Body).Decode(okResponse)\n    if err != nil {\n        return err\n    }\n\n    // change authorization header\n    Headers[0].Value = &amp;quot;Bearer &amp;quot; + okResponse.AccessToken\n\n    return nil\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I wrote mock for http.Client and it looks like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type MockClient struct {\n    ExpectedRes *http.Response\n    Req         *http.Request\n    Err         error\n    DoFunc      func(req *http.Request) (*http.Response, error)\n}\n\nfunc (m *MockClient) Do(req *http.Request) (*http.Response, error) {\n    m.Req = req\n    if m.DoFunc != nil {\n        return m.DoFunc(req)\n    }\n    return m.ExpectedRes, m.Err\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Test:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func TestSuccessCreateSession(t *testing.T) {\n    client := &amp;amp;mocks.MockClient{\n        DoFunc: func(req *http.Request) (*http.Response, error) {\n            return &amp;amp;http.Response{\n                StatusCode: http.StatusOK,\n            }, nil\n        },\n    }\n\n    l := &amp;amp;golibrus.Librus{\n        Client:   client,\n        Username: &amp;quot;test&amp;quot;,\n        Password: &amp;quot;test&amp;quot;,\n    }\n\n    err = l.CreateSession()\n    assert.Nil(t, err)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I tried writing test for this &amp;#39;CreateSession&amp;#39; method but it returns error on &amp;#39;defer.res.Body.Close()&amp;#39;, I think it causes it because &amp;#39;Body&amp;#39; is empty. Do you guys have any advice? I read a lot of articles how to mock but I still don&amp;#39;t understand it :(.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gixc6c", "is_robot_indexable": true, "report_reasons": null, "author": "0x113", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gixc6c/how_should_i_test_api_wrapper/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gixc6c/how_should_i_test_api_wrapper/", "subreddit_subscribers": 112430, "created_utc": 1589369852.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_gixc6c", "before": null}}