{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - January", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_eib2jh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 28, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 28, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1577865929.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "908dba50-143b-11ea-8541-0e435e5ea9e1", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eib2jh", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 7, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/eib2jh/whos_hiring_typescript_developers_january/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/eib2jh/whos_hiring_typescript_developers_january/", "subreddit_subscribers": 30049, "created_utc": 1577837129.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Current situation is I'm developing a shopify app on Node/Koa.js. It returns a context object with some important details such as the store name and other things. \n\nI could tell Typescript `ctx.session` is `any` to turn off type checking. But then what is the point of TS, and also it's good for me as a developer to actually learn the shape of what I'm resolving for clarity.\n\nDocumentation on ctx.session is lacking:\n\n[https://github.com/koajs/session](https://github.com/koajs/session)\n\n[https://www.npmjs.com/package/@shopify/koa-shopify-auth](https://www.npmjs.com/package/@shopify/koa-shopify-auth)\n\nFaced with this situation how do you guys proceed? I am thinking I should just run a test to see what comes back, log it and write an interface based on that.\n\nIf this is a situation you guys would just mark as `any` I am open to that advice too.", "author_fullname": "t2_3dgvi4uq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Dealing with values you don't know the shape of (from being undocumented)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": true, "name": "t3_emqpks", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1578690590.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Current situation is I&amp;#39;m developing a shopify app on Node/Koa.js. It returns a context object with some important details such as the store name and other things. &lt;/p&gt;\n\n&lt;p&gt;I could tell Typescript &lt;code&gt;ctx.session&lt;/code&gt; is &lt;code&gt;any&lt;/code&gt; to turn off type checking. But then what is the point of TS, and also it&amp;#39;s good for me as a developer to actually learn the shape of what I&amp;#39;m resolving for clarity.&lt;/p&gt;\n\n&lt;p&gt;Documentation on ctx.session is lacking:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/koajs/session\"&gt;https://github.com/koajs/session&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.npmjs.com/package/@shopify/koa-shopify-auth\"&gt;https://www.npmjs.com/package/@shopify/koa-shopify-auth&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Faced with this situation how do you guys proceed? I am thinking I should just run a test to see what comes back, log it and write an interface based on that.&lt;/p&gt;\n\n&lt;p&gt;If this is a situation you guys would just mark as &lt;code&gt;any&lt;/code&gt; I am open to that advice too.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/mxihVlLkD2G1ftJHV7GOlpb0yGj_c0CgVUmNt_pKH7Q.jpg?auto=webp&amp;s=59487cabc482f5ae30f77d40c40ad55043211136", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/mxihVlLkD2G1ftJHV7GOlpb0yGj_c0CgVUmNt_pKH7Q.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c20e6b7fb79c5e2a397f2300f8d7b054f65bd6e8", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/mxihVlLkD2G1ftJHV7GOlpb0yGj_c0CgVUmNt_pKH7Q.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=7249bed0cc81817ae92cf68a32457fe3af04e3ba", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/mxihVlLkD2G1ftJHV7GOlpb0yGj_c0CgVUmNt_pKH7Q.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=62b7f58854b9b1bb863830d6362e54bb50909c86", "width": 320, "height": 320}], "variants": {}, "id": "_MxRGo01f19STv4QGxJVm7wQd8YZYuHOFX3VFePtMpE"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emqpks", "is_robot_indexable": true, "report_reasons": null, "author": "javascript_dev", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emqpks/dealing_with_values_you_dont_know_the_shape_of/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/emqpks/dealing_with_values_you_dont_know_the_shape_of/", "subreddit_subscribers": 30049, "created_utc": 1578661790.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Given some type and an extension of that type:\n\n```\ninterface Item {\n  type: string\n}\n\ninterface ItemTypeA extends Item {\n  valA: number\n}\n```\n\nSometimes I need to take a variable of the type and cast it to the more specific type via the `as` keyword:\n```\nfunction fn1(item: Item) {\n  if (item.type === 'A') {\n    const itemA = item as ItemTypeA;\n    const { valA } = itemA\n    // ...\n  }\n}\n```\n\nAlternatively, it can be done via a type checking function:\n\n```\nconst itemIsA = (item: Item): item is ItemTypeA =&gt; item.type === 'A';\n\nfunction fn2(item: Item) {\n  if (itemIsA(item)) {\n    const { valA } = item;\n    // ...\n  }\n}\n```\n\nThe first way seems more convenient, explicit, and doesn't require an extra function. With the second way, even though the compiler knows that the item has been casted to a new type, a human reader must either infer by the checker-function name or see what the checker returns.", "author_fullname": "t2_19ekjgby", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "casting a variable from a type to a subtype", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_emnzj9", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578672471.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Given some type and an extension of that type:&lt;/p&gt;\n\n&lt;p&gt;```\ninterface Item {\n  type: string\n}&lt;/p&gt;\n\n&lt;p&gt;interface ItemTypeA extends Item {\n  valA: number\n}\n```&lt;/p&gt;\n\n&lt;p&gt;Sometimes I need to take a variable of the type and cast it to the more specific type via the &lt;code&gt;as&lt;/code&gt; keyword:\n&lt;code&gt;\nfunction fn1(item: Item) {\n  if (item.type === &amp;#39;A&amp;#39;) {\n    const itemA = item as ItemTypeA;\n    const { valA } = itemA\n    // ...\n  }\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Alternatively, it can be done via a type checking function:&lt;/p&gt;\n\n&lt;p&gt;```\nconst itemIsA = (item: Item): item is ItemTypeA =&amp;gt; item.type === &amp;#39;A&amp;#39;;&lt;/p&gt;\n\n&lt;p&gt;function fn2(item: Item) {\n  if (itemIsA(item)) {\n    const { valA } = item;\n    // ...\n  }\n}\n```&lt;/p&gt;\n\n&lt;p&gt;The first way seems more convenient, explicit, and doesn&amp;#39;t require an extra function. With the second way, even though the compiler knows that the item has been casted to a new type, a human reader must either infer by the checker-function name or see what the checker returns.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "emnzj9", "is_robot_indexable": true, "report_reasons": null, "author": "wagonn", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/emnzj9/casting_a_variable_from_a_type_to_a_subtype/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/emnzj9/casting_a_variable_from_a_type_to_a_subtype/", "subreddit_subscribers": 30049, "created_utc": 1578643671.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "When running tests I'm seeing errors for basic browser DOM functions (`ReferenceError: btoa is not defined`), classes, and operations.\n\n```\nTS2569: Type 'Uint8Array' is not an array type or a string type. Use compiler option '--downlevelIteration' to allow iterating of iterators.\n\nlet base64String = btoa(String.fromCharCode(...new Uint8Array(buffer)));\n```\n\nI've tried setting my `tsconfig.json` to may [variations of the compilerOptions](https://www.typescriptlang.org/docs/handbook/compiler-options.html) but none of them seem to work.\n\n```\n{\n    \"compilerOptions\": {\n        \"lib\": [\n            \"es2016\",\n            \"dom\"\n        ]\n    }\n}\nor\n{\n    \"compilerOptions\": {\n        \"module\": \"commonjs\",\n        \"target\": \"es5\",\n        \"lib\": [\"es6\", \"dom\"],\n    }\n}\n\n```\n\nWhat am I missing? Do I need a reference to `lib.dom.d.ts` somewhere?\n\n- https://github.com/basarat/typescript-book/blob/master/docs/types/lib.d.ts.md#lib-option\n- https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts", "author_fullname": "t2_5altezy2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Missing basic DOM types in TypeScript project", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_em13kc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578555906.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;When running tests I&amp;#39;m seeing errors for basic browser DOM functions (&lt;code&gt;ReferenceError: btoa is not defined&lt;/code&gt;), classes, and operations.&lt;/p&gt;\n\n&lt;p&gt;```\nTS2569: Type &amp;#39;Uint8Array&amp;#39; is not an array type or a string type. Use compiler option &amp;#39;--downlevelIteration&amp;#39; to allow iterating of iterators.&lt;/p&gt;\n\n&lt;p&gt;let base64String = btoa(String.fromCharCode(...new Uint8Array(buffer)));\n```&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve tried setting my &lt;code&gt;tsconfig.json&lt;/code&gt; to may &lt;a href=\"https://www.typescriptlang.org/docs/handbook/compiler-options.html\"&gt;variations of the compilerOptions&lt;/a&gt; but none of them seem to work.&lt;/p&gt;\n\n&lt;p&gt;```\n{\n    &amp;quot;compilerOptions&amp;quot;: {\n        &amp;quot;lib&amp;quot;: [\n            &amp;quot;es2016&amp;quot;,\n            &amp;quot;dom&amp;quot;\n        ]\n    }\n}\nor\n{\n    &amp;quot;compilerOptions&amp;quot;: {\n        &amp;quot;module&amp;quot;: &amp;quot;commonjs&amp;quot;,\n        &amp;quot;target&amp;quot;: &amp;quot;es5&amp;quot;,\n        &amp;quot;lib&amp;quot;: [&amp;quot;es6&amp;quot;, &amp;quot;dom&amp;quot;],\n    }\n}&lt;/p&gt;\n\n&lt;p&gt;```&lt;/p&gt;\n\n&lt;p&gt;What am I missing? Do I need a reference to &lt;code&gt;lib.dom.d.ts&lt;/code&gt; somewhere?&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/basarat/typescript-book/blob/master/docs/types/lib.d.ts.md#lib-option\"&gt;https://github.com/basarat/typescript-book/blob/master/docs/types/lib.d.ts.md#lib-option&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts\"&gt;https://github.com/Microsoft/TypeScript/blob/master/lib/lib.dom.d.ts&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "em13kc", "is_robot_indexable": true, "report_reasons": null, "author": "marchsnow", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/em13kc/missing_basic_dom_types_in_typescript_project/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/em13kc/missing_basic_dom_types_in_typescript_project/", "subreddit_subscribers": 30049, "created_utc": 1578527106.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have been recently asked to implement a form with pagination, dynamical elements that would maintain its state.\n\nI have some experience in the Front End field, but I definitely need to learn a lot. \n\nI would appreciate it if you could take a look at the code and let me know what you think.\n\nhttps://github.com/shpotainna/passengers", "author_fullname": "t2_2d7fo5sw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A form that maintains its state between pages. Feedback needed.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_eltcl2", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1578493945.0, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1578522276.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have been recently asked to implement a form with pagination, dynamical elements that would maintain its state.&lt;/p&gt;\n\n&lt;p&gt;I have some experience in the Front End field, but I definitely need to learn a lot. &lt;/p&gt;\n\n&lt;p&gt;I would appreciate it if you could take a look at the code and let me know what you think.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/shpotainna/passengers\"&gt;https://github.com/shpotainna/passengers&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?auto=webp&amp;s=10d5a739f2a3393add9cd70effa6358d9abf6ce3", "width": 1338, "height": 1026}, "resolutions": [{"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=4b3fd6233d4c2ef1df35f2456831267710e18e14", "width": 108, "height": 82}, {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=8260a71281bbe5d165e39ce1a20aa4cc0483a843", "width": 216, "height": 165}, {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=43b9cb08c8d0bf6a58a9778afa7731df7078d946", "width": 320, "height": 245}, {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=504bd2c958a830224a9be8148cf3070383e3e582", "width": 640, "height": 490}, {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=f7d2e717b3e08704dc7932ac2c77925b24caffd3", "width": 960, "height": 736}, {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=05cf3be5df99d7ec12a940db8d8b1a48a67e5316", "width": 1080, "height": 828}], "variants": {}, "id": "By7jHITvdE7rrOKClNBuv6-8xUPkPa34M9zHi3FVs78"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eltcl2", "is_robot_indexable": true, "report_reasons": null, "author": "in_theSea", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/eltcl2/a_form_that_maintains_its_state_between_pages/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/eltcl2/a_form_that_maintains_its_state_between_pages/", "subreddit_subscribers": 30049, "created_utc": 1578493476.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Suppose I have:\n\n    type union = string | number;\n    type subset = union &amp; string; // subset = string;\n\nI'd like to do something like:\n\n    interface A&lt;T&gt; { }\n    type union = A&lt;string&gt; | A&lt;number&gt;;\n    type subset = union &amp; A&lt;string&gt;; // expect subset = A&lt;string&gt;\n\nThe subset type in this case becomes `(A&lt;string&gt; &amp; A&lt;string&gt;) | (A&lt;string&gt; &amp; A&lt;number&gt;)`, which I don't think is what I want.\n\nUpdate: I solved the problem using Extract&lt;T, U&gt; and by defining a property on my interface with the generic type:\n\n    interface A&lt;T&gt; { _type: T };\n    type union = A&lt;string&gt; | A&lt;number&gt;;\n    type subset = Extract&lt;union, A&lt;string&gt;&gt;; // A&lt;string&gt; as expected\n\nIt is a bit hacky - in my actual code I have a class, so I defined a private setter with that type and it seems to work. The actual use case is a much more complex type whose details don't belong here, but the above sums it up well.", "author_fullname": "t2_oeoo6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How do I get the intersection of generic types?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_elnme2", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1578459164.0, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578486328.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Suppose I have:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type union = string | number;\ntype subset = union &amp;amp; string; // subset = string;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;d like to do something like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface A&amp;lt;T&amp;gt; { }\ntype union = A&amp;lt;string&amp;gt; | A&amp;lt;number&amp;gt;;\ntype subset = union &amp;amp; A&amp;lt;string&amp;gt;; // expect subset = A&amp;lt;string&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The subset type in this case becomes &lt;code&gt;(A&amp;lt;string&amp;gt; &amp;amp; A&amp;lt;string&amp;gt;) | (A&amp;lt;string&amp;gt; &amp;amp; A&amp;lt;number&amp;gt;)&lt;/code&gt;, which I don&amp;#39;t think is what I want.&lt;/p&gt;\n\n&lt;p&gt;Update: I solved the problem using Extract&amp;lt;T, U&amp;gt; and by defining a property on my interface with the generic type:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface A&amp;lt;T&amp;gt; { _type: T };\ntype union = A&amp;lt;string&amp;gt; | A&amp;lt;number&amp;gt;;\ntype subset = Extract&amp;lt;union, A&amp;lt;string&amp;gt;&amp;gt;; // A&amp;lt;string&amp;gt; as expected\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It is a bit hacky - in my actual code I have a class, so I defined a private setter with that type and it seems to work. The actual use case is a much more complex type whose details don&amp;#39;t belong here, but the above sums it up well.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "elnme2", "is_robot_indexable": true, "report_reasons": null, "author": "qqqyqnz", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/elnme2/how_do_i_get_the_intersection_of_generic_types/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/elnme2/how_do_i_get_the_intersection_of_generic_types/", "subreddit_subscribers": 30049, "created_utc": 1578457528.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_1r41bikz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Should you use TypeScript if you know JavaScript well?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 70, "hide_score": false, "name": "t3_eljud4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": true, "thumbnail": "https://a.thumbs.redditmedia.com/C70YpxobXpoUwesaprIOpgsYjUSulX7TI-hrdXVVkQ8.jpg", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1578468808.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/jEdHPA3biMPjpqXFX_h95A7w14mG0e0qXLnvR5F4xz8.jpg?auto=webp&amp;s=c0cd5e8f5a4d37975205485789924d7487099c53", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/jEdHPA3biMPjpqXFX_h95A7w14mG0e0qXLnvR5F4xz8.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0234fb7258aeb2a8dcc83253e3ab2a6d8428fab7", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/jEdHPA3biMPjpqXFX_h95A7w14mG0e0qXLnvR5F4xz8.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=be6ba6a9c46782bfbfc1624b00c5a3c60f2a2537", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/jEdHPA3biMPjpqXFX_h95A7w14mG0e0qXLnvR5F4xz8.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=505d8dc0150efa238f3eed3a23c9a2a0e47b52c4", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/jEdHPA3biMPjpqXFX_h95A7w14mG0e0qXLnvR5F4xz8.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=ead09cb24cad968d3424532f6ac2332458ef158b", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/jEdHPA3biMPjpqXFX_h95A7w14mG0e0qXLnvR5F4xz8.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=60b4828364dbb460c262620698f9d0ed991f9ac1", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/jEdHPA3biMPjpqXFX_h95A7w14mG0e0qXLnvR5F4xz8.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=387c3c2253b7c7a1e0cd8a72f751c17d3fc4c021", "width": 1080, "height": 540}], "variants": {}, "id": "Q3ZTVQ9vSj1lXRr68eNOw2CoM2WhFfr2hE9nc_TMKWk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eljud4", "is_robot_indexable": true, "report_reasons": null, "author": "Charles_Stover", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/eljud4/should_you_use_typescript_if_you_know_javascript/", "parent_whitelist_status": null, "stickied": false, "url": "https://medium.com/@Charles_Stover/should-you-use-typescript-if-you-know-javascript-well-85042756e594", "subreddit_subscribers": 30049, "created_utc": 1578440008.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_10mycb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Absolute path resolver for Typescript with Babel and Webpack", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_ekxkoc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/-3eB442xkEATh1AHeM-ezLKXl1su1hxKmt9JGIIpk9E.jpg", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1578362080.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/0K0sI1IagYuvaRbhEDnQ8AvM_uj7ForYXMOIg49mpiI.jpg?auto=webp&amp;s=990cfeb50301cfed70b51f7fb6ded535a4297a5c", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/0K0sI1IagYuvaRbhEDnQ8AvM_uj7ForYXMOIg49mpiI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d274102a25b5ec28abc16af8029a22a6a9d6064b", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/0K0sI1IagYuvaRbhEDnQ8AvM_uj7ForYXMOIg49mpiI.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d2220f32dc1847b90e62f112e0929c8d0b43ad45", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/0K0sI1IagYuvaRbhEDnQ8AvM_uj7ForYXMOIg49mpiI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=067861a771a39863cec4f1378e0ae1756bad7308", "width": 320, "height": 320}], "variants": {}, "id": "bccFqiOWRzkn3vkr8eWNMnxudykHI5Gbu6R7wVgLszE"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ekxkoc", "is_robot_indexable": true, "report_reasons": null, "author": "manika456", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ekxkoc/absolute_path_resolver_for_typescript_with_babel/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/turbothinh/ts-babel-webpack-boilerplate", "subreddit_subscribers": 30049, "created_utc": 1578333280.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_op9pz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "ReactFormHelper: Simple way to build forms in React", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_el9zqo", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/lkdLpEtX-KUQff0ZfN9n5jhX_gnkaxvqsv8j8iSopnQ.jpg", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1578422875.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/qgvG-JCRTXQ1j6sBEHR9UnnTeyTeTt10SxLq9XU0gDg.jpg?auto=webp&amp;s=1144b4ae5bffbced99e969fe0019df62221d8f39", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/qgvG-JCRTXQ1j6sBEHR9UnnTeyTeTt10SxLq9XU0gDg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f3d29e630a7beee27b286e35a6a8072eb6c951e8", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/qgvG-JCRTXQ1j6sBEHR9UnnTeyTeTt10SxLq9XU0gDg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=55bf52c44fb15a506b594e0adef0dcd2e1d62092", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/qgvG-JCRTXQ1j6sBEHR9UnnTeyTeTt10SxLq9XU0gDg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=79eb9ba8a0ae1285438b26e922a5e81ca25004dc", "width": 320, "height": 320}], "variants": {}, "id": "ioeg8dfkCPZf1-LC2wSXGNVmIFukwXXiN29eTUoWCFY"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "el9zqo", "is_robot_indexable": true, "report_reasons": null, "author": "evandrolg", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/el9zqo/reactformhelper_simple_way_to_build_forms_in_react/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/EvandroLG/ReactFormHelper", "subreddit_subscribers": 30049, "created_utc": 1578394075.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hej Typescript people. :)\n\nI need to override an existing type of a property. How can i achieve this?\n\nI've made an codesandbox example: [https://codesandbox.io/s/typescript-playground-export-u2203](https://codesandbox.io/s/typescript-playground-export-u2203)\n\nAt the end, the test prop should accept strings and numbers.", "author_fullname": "t2_fchwz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How can i override a property type of a merged type?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ekv0wd", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1578350714.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hej Typescript people. :)&lt;/p&gt;\n\n&lt;p&gt;I need to override an existing type of a property. How can i achieve this?&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve made an codesandbox example: &lt;a href=\"https://codesandbox.io/s/typescript-playground-export-u2203\"&gt;https://codesandbox.io/s/typescript-playground-export-u2203&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;At the end, the test prop should accept strings and numbers.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/3N0PMFy2jroz9QfgIRr5wXq1Z4Sgyl3O4tlC_4ej-a4.jpg?auto=webp&amp;s=7acc8a3c5012d1a0e28b0e77b4e5c46c02ca0de7", "width": 1200, "height": 630}, "resolutions": [{"url": "https://external-preview.redd.it/3N0PMFy2jroz9QfgIRr5wXq1Z4Sgyl3O4tlC_4ej-a4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=f751a3e23fa7dcad40f677da271c6f3905d51ab6", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/3N0PMFy2jroz9QfgIRr5wXq1Z4Sgyl3O4tlC_4ej-a4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=db50783dc94f9d9dd8a6253d60d9af83cc627695", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/3N0PMFy2jroz9QfgIRr5wXq1Z4Sgyl3O4tlC_4ej-a4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a465634aff0c76829e37a289854c3c0a5fc10fa1", "width": 320, "height": 168}, {"url": "https://external-preview.redd.it/3N0PMFy2jroz9QfgIRr5wXq1Z4Sgyl3O4tlC_4ej-a4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=95025a9714601748d20702a986a3532f7bfe8d72", "width": 640, "height": 336}, {"url": "https://external-preview.redd.it/3N0PMFy2jroz9QfgIRr5wXq1Z4Sgyl3O4tlC_4ej-a4.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=64e57a3c2d87d788c0067b4a7be7ee908cb2cd59", "width": 960, "height": 504}, {"url": "https://external-preview.redd.it/3N0PMFy2jroz9QfgIRr5wXq1Z4Sgyl3O4tlC_4ej-a4.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=1f0fdee53aa14a50b624068bf39d1aad51dbd794", "width": 1080, "height": 567}], "variants": {}, "id": "sLNtwMq2hglvMk7PDm_Oyr_O3WZ_MIqiTvv07oCGZok"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ekv0wd", "is_robot_indexable": true, "report_reasons": null, "author": "danbruegge", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ekv0wd/how_can_i_override_a_property_type_of_a_merged/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ekv0wd/how_can_i_override_a_property_type_of_a_merged/", "subreddit_subscribers": 30049, "created_utc": 1578321914.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I am writing a TypeScript library + an example-app, each in separate codebases. I am having trouble getting the library's main function and its typings to be accessible from its import root; I want to be able to consume the library like this:\n\n    import myMainFunc, { InterfaceA, InterfaceB } from 'my-lib';\n\nHowever, I can only import the types from my-lib, not the main func. I have an entrypoint `index.ts` containing a default export, and a `types.ts` containing all relevant types:\n\n    src/\n      index.ts\n      types.ts\n\nMy package.json has\n\n      \"files\": [\n        \"/dist/\"\n      ],\n      \"main\": \"dist/index.js\",\n      \"typings\": \"dist/types.d.ts\",\n\nand my tsconfig has\n\n    {\n      \"compilerOptions\": {\n        \"lib\": [\"es6\", \"dom\", \"es2017\"],\n        \"target\": \"es5\",\n        \"module\": \"commonjs\",\n        \"declaration\": true,\n        \"outDir\": \"./dist\",\n        \"strict\": true\n      },\n      \"include\": [\"src\"],\n      \"exclude\": [\"node_modules\", \"src/test/*\"]\n    }\n\nThe built dist directory looks like:\n\n    dist/\n      index.js\n      index.d.ts\n      types.js\n      types.d.ts\n\nNote: the library is not yet published, so I use `yarn link` to pull it in as a dependency to the example app.", "author_fullname": "t2_19ekjgby", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "how to import TypeScript library main function and typings from same location", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ekm021", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1578300316.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am writing a TypeScript library + an example-app, each in separate codebases. I am having trouble getting the library&amp;#39;s main function and its typings to be accessible from its import root; I want to be able to consume the library like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import myMainFunc, { InterfaceA, InterfaceB } from &amp;#39;my-lib&amp;#39;;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However, I can only import the types from my-lib, not the main func. I have an entrypoint &lt;code&gt;index.ts&lt;/code&gt; containing a default export, and a &lt;code&gt;types.ts&lt;/code&gt; containing all relevant types:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;src/\n  index.ts\n  types.ts\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My package.json has&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;  &amp;quot;files&amp;quot;: [\n    &amp;quot;/dist/&amp;quot;\n  ],\n  &amp;quot;main&amp;quot;: &amp;quot;dist/index.js&amp;quot;,\n  &amp;quot;typings&amp;quot;: &amp;quot;dist/types.d.ts&amp;quot;,\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and my tsconfig has&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n  &amp;quot;compilerOptions&amp;quot;: {\n    &amp;quot;lib&amp;quot;: [&amp;quot;es6&amp;quot;, &amp;quot;dom&amp;quot;, &amp;quot;es2017&amp;quot;],\n    &amp;quot;target&amp;quot;: &amp;quot;es5&amp;quot;,\n    &amp;quot;module&amp;quot;: &amp;quot;commonjs&amp;quot;,\n    &amp;quot;declaration&amp;quot;: true,\n    &amp;quot;outDir&amp;quot;: &amp;quot;./dist&amp;quot;,\n    &amp;quot;strict&amp;quot;: true\n  },\n  &amp;quot;include&amp;quot;: [&amp;quot;src&amp;quot;],\n  &amp;quot;exclude&amp;quot;: [&amp;quot;node_modules&amp;quot;, &amp;quot;src/test/*&amp;quot;]\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The built dist directory looks like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;dist/\n  index.js\n  index.d.ts\n  types.js\n  types.d.ts\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Note: the library is not yet published, so I use &lt;code&gt;yarn link&lt;/code&gt; to pull it in as a dependency to the example app.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ekm021", "is_robot_indexable": true, "report_reasons": null, "author": "wagonn", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ekm021/how_to_import_typescript_library_main_function/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ekm021/how_to_import_typescript_library_main_function/", "subreddit_subscribers": 30049, "created_utc": 1578271516.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_ekm021", "before": null}}