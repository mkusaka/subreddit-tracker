{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_57uz3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Announcing the 2020 Go Developer Survey", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jeuosg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 201, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 201, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603245041.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.golang.org", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://blog.golang.org/survey2020", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 80, "id": "award_8352bdff-3e03-4189-8a08-82501dd8f835", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=16&amp;height=16&amp;auto=webp&amp;s=85b1aa61933f163dd2b77b1e78f4d82d9c947ec1", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=32&amp;height=32&amp;auto=webp&amp;s=67935636337b07ca5b98d945f4bcdae26e5f567e", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=48&amp;height=48&amp;auto=webp&amp;s=547d5fb33f5a4a5d6fc154cbd658638cc2b1c3a0", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=64&amp;height=64&amp;auto=webp&amp;s=e17bc331183e7ba194314a34e43b35460a835fff", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=128&amp;height=128&amp;auto=webp&amp;s=1b4e617f18af8d4e2c47c2f154d4422be43c809f", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Everything is better with a good hug", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Hugz", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=16&amp;height=16&amp;auto=webp&amp;s=85b1aa61933f163dd2b77b1e78f4d82d9c947ec1", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=32&amp;height=32&amp;auto=webp&amp;s=67935636337b07ca5b98d945f4bcdae26e5f567e", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=48&amp;height=48&amp;auto=webp&amp;s=547d5fb33f5a4a5d6fc154cbd658638cc2b1c3a0", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=64&amp;height=64&amp;auto=webp&amp;s=e17bc331183e7ba194314a34e43b35460a835fff", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png?width=128&amp;height=128&amp;auto=webp&amp;s=1b4e617f18af8d4e2c47c2f154d4422be43c809f", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/niiatoknifn51_Hugz.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jeuosg", "is_robot_indexable": true, "report_reasons": null, "author": "spf13", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jeuosg/announcing_the_2020_go_developer_survey/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://blog.golang.org/survey2020", "subreddit_subscribers": 128870, "created_utc": 1603216241.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_10rfvn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Just published my first desktop application. I noticed that there wasn't any open source and easy to use software for deflickering timelapse footage. So I wrote a tool in Go! It's only version 0.1.0 but I hope it's a good start.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jjblds", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 129, "total_awards_received": 2, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 129, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603866773.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/StruffelProductions/simple-deflicker", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 50, "id": "award_02d9ab2c-162e-4c01-8438-317a016ed3d9", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=16&amp;height=16&amp;auto=webp&amp;s=92e96be1dbd278dc987fbd9acc1bd5078566f254", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=32&amp;height=32&amp;auto=webp&amp;s=83e14655f2b162b295f7d2c7058b9ad94cf8b73c", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=48&amp;height=48&amp;auto=webp&amp;s=83038a4d6181d3c8f5107dbca4ddb735ca6c2231", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=64&amp;height=64&amp;auto=webp&amp;s=3c4e39a7664d799ff50f32e9a3f96c3109d2e266", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=128&amp;height=128&amp;auto=webp&amp;s=390bf9706b8e1a6215716ebcf6363373f125c339", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "I'm in this with you.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Take My Energy", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=16&amp;height=16&amp;auto=webp&amp;s=92e96be1dbd278dc987fbd9acc1bd5078566f254", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=32&amp;height=32&amp;auto=webp&amp;s=83e14655f2b162b295f7d2c7058b9ad94cf8b73c", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=48&amp;height=48&amp;auto=webp&amp;s=83038a4d6181d3c8f5107dbca4ddb735ca6c2231", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=64&amp;height=64&amp;auto=webp&amp;s=3c4e39a7664d799ff50f32e9a3f96c3109d2e266", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png?width=128&amp;height=128&amp;auto=webp&amp;s=390bf9706b8e1a6215716ebcf6363373f125c339", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/898sygoknoo41_TakeMyEnergy.png"}, {"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 50, "id": "award_d33fddd7-a58a-4472-b1a2-3157d8c8b76f", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 16, "height": 16}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 32, "height": 32}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 48, "height": 48}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 64, "height": 64}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 128, "height": 128}], "icon_width": 512, "static_icon_width": 512, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Looking like you're working is hard work.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 512, "name": "Looking Busy", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=16&amp;height=16&amp;auto=webp&amp;s=db9e29688c05aeb51dafbcd54ec1dcfab3bb47dc", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=32&amp;height=32&amp;auto=webp&amp;s=46adbd135d36ba32a7709877e99ff7a126af367b", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=48&amp;height=48&amp;auto=webp&amp;s=f3118b3d29ca5d2a3c6e941a0b874c9b66dd7f7b", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=64&amp;height=64&amp;auto=webp&amp;s=50f2d89d742aa628382b07bea320a4673821cbca", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=128&amp;height=128&amp;auto=webp&amp;s=ebbcf8563d42edc4fd85e52933dafaecb6a849b7", "width": 128, "height": 128}], "icon_format": "APNG", "icon_height": 512, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jjblds", "is_robot_indexable": true, "report_reasons": null, "author": "Struffel", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jjblds/just_published_my_first_desktop_application_i/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/StruffelProductions/simple-deflicker", "subreddit_subscribers": 128870, "created_utc": 1603837973.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_26tgu65h", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GO-ORA: An Oracle client in Pure Go. No CGO, faster compile time and no extra libraries dependency", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jjbvbg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 42, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 42, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603867661.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/sijms/go-ora", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jjbvbg", "is_robot_indexable": true, "report_reasons": null, "author": "flechin", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jjbvbg/goora_an_oracle_client_in_pure_go_no_cgo_faster/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/sijms/go-ora", "subreddit_subscribers": 128870, "created_utc": 1603838861.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi,\n\nI have these packages\n\n* db\n* api\n* main (but not relevant for this question)\n\n&amp;#x200B;\n\nBoth packages db and api need to connect to db for running the tests  (api is calls to gin integration test more). The first solution was to dublicate the connection to mysql code in main\\_test.go of each package which is very ugly as code is exactly the same.\n\nThen now I am trying to find a way to share testutils accross package\n\n&amp;#x200B;\n\nI have the ConnectToDb method inside `db/main_test.go`\n\n    package db\n    \n    // imports here\n    \n    func ConnectToDb()  *sql.DB {\n    \tport, err := strconv.Atoi(os.Getenv(\"DB_PORT\"))\n    \tif err != nil {\n    \t\tlog.Panic(err)\n    \t}\n    \treturn ConnectToDbOrDie(Config{\n    \t\tDriver:   os.Getenv(\"DB_DRIVER\"),\n    \t\tHost:     os.Getenv(\"DB_HOST\"),\n    \t\tPort:     port,\n    \t\tName:     \"\", // because want to only access then create the random test db named\n    \t\tUser:     os.Getenv(\"DB_USERNAME\"),\n    \t\tPassword: os.Getenv(\"DB_PASSWORD\"),\n    \t})\n    }\n\n&amp;#x200B;\n\nThe problem is that I cannot use this method inside `api/main_test.go` because it is not exported\n\nAdditionally I don't want to put that function outside the \\_test.go file because don't want to export to the clients of my library!\n\nAnd also this function is unique only for connecting to test database different from other function , so must not get exported, and just be internal and shared accross different packages that need to use it in their tests", "author_fullname": "t2_8lgevsn7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to share test utilities accros packages ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jjmsoc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603916893.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;I have these packages&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;db&lt;/li&gt;\n&lt;li&gt;api&lt;/li&gt;\n&lt;li&gt;main (but not relevant for this question)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Both packages db and api need to connect to db for running the tests  (api is calls to gin integration test more). The first solution was to dublicate the connection to mysql code in main_test.go of each package which is very ugly as code is exactly the same.&lt;/p&gt;\n\n&lt;p&gt;Then now I am trying to find a way to share testutils accross package&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I have the ConnectToDb method inside &lt;code&gt;db/main_test.go&lt;/code&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package db\n\n// imports here\n\nfunc ConnectToDb()  *sql.DB {\n    port, err := strconv.Atoi(os.Getenv(&amp;quot;DB_PORT&amp;quot;))\n    if err != nil {\n        log.Panic(err)\n    }\n    return ConnectToDbOrDie(Config{\n        Driver:   os.Getenv(&amp;quot;DB_DRIVER&amp;quot;),\n        Host:     os.Getenv(&amp;quot;DB_HOST&amp;quot;),\n        Port:     port,\n        Name:     &amp;quot;&amp;quot;, // because want to only access then create the random test db named\n        User:     os.Getenv(&amp;quot;DB_USERNAME&amp;quot;),\n        Password: os.Getenv(&amp;quot;DB_PASSWORD&amp;quot;),\n    })\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;The problem is that I cannot use this method inside &lt;code&gt;api/main_test.go&lt;/code&gt; because it is not exported&lt;/p&gt;\n\n&lt;p&gt;Additionally I don&amp;#39;t want to put that function outside the _test.go file because don&amp;#39;t want to export to the clients of my library!&lt;/p&gt;\n\n&lt;p&gt;And also this function is unique only for connecting to test database different from other function , so must not get exported, and just be internal and shared accross different packages that need to use it in their tests&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jjmsoc", "is_robot_indexable": true, "report_reasons": null, "author": "chriscs777", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jjmsoc/how_to_share_test_utilities_accros_packages/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jjmsoc/how_to_share_test_utilities_accros_packages/", "subreddit_subscribers": 128870, "created_utc": 1603888093.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ksvpy", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ebiten (A dead simple 2D game library for Go) v2.0.0 released: no new features, but the API is cleaned up", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jj2116", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 153, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 153, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "ebiten", "selftext": "", "author_fullname": "t2_ksvpy", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ebiten v2.0.0 released", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ebiten", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jj1x9w", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603836994.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "ebiten.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://ebiten.org/blog/v2.0.0.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2nda5q", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jj1x9w", "is_robot_indexable": true, "report_reasons": null, "author": "hajimehoshi", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ebiten/comments/jj1x9w/ebiten_v200_released/", "parent_whitelist_status": null, "stickied": false, "url": "https://ebiten.org/blog/v2.0.0.html", "subreddit_subscribers": 50, "created_utc": 1603808194.0, "num_crossposts": 2, "media": null, "is_video": false}], "created": 1603837344.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "ebiten.org", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://ebiten.org/blog/v2.0.0.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jj2116", "is_robot_indexable": true, "report_reasons": null, "author": "hajimehoshi", "discussion_type": null, "num_comments": 26, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_jj1x9w", "author_flair_text_color": null, "permalink": "/r/golang/comments/jj2116/ebiten_a_dead_simple_2d_game_library_for_go_v200/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://ebiten.org/blog/v2.0.0.html", "subreddit_subscribers": 128870, "created_utc": 1603808544.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_40noqea7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A golang library to detect differences/similarities between two string. Detecting if two string is \"the same\" or \"similar\". For example, if you wants to detect the user putting bad-word as user name, or to forbid the use of unwanted words. This lib implements, some popular algorithm for you.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jjj04g", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603896719.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/hyperjumptech/beda", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jjj04g", "is_robot_indexable": true, "report_reasons": null, "author": "fneman", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jjj04g/a_golang_library_to_detect/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/hyperjumptech/beda", "subreddit_subscribers": 128870, "created_utc": 1603867919.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_8g6femfs", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A library for creating and storing idempotency keys.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jjgnzn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.77, "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603885283.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/catmullet/one", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jjgnzn", "is_robot_indexable": true, "report_reasons": null, "author": "rjcatmull", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jjgnzn/a_library_for_creating_and_storing_idempotency/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/catmullet/one", "subreddit_subscribers": 128870, "created_utc": 1603856483.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4lmwp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "amfora - Gemini client (gopher successor)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jjf4p9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603879221.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/makeworld-the-better-one/amfora", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jjf4p9", "is_robot_indexable": true, "report_reasons": null, "author": "tslocum", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jjf4p9/amfora_gemini_client_gopher_successor/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/makeworld-the-better-one/amfora", "subreddit_subscribers": 128870, "created_utc": 1603850421.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi,\n\nI have a program that scans the filesystem for files, examines those, and if they match a requirement, copies those files to a new location.\n\nI'm trying to implement this using a producer-consumer pattern. It works fine, but following the progress of the long running operations is troublesome for me.\n\nHere's the problematic part:\n\n    var wg sync.WaitGroup\n    jobs := make(chan *scanJob, config.Workers*config.Workers)\n    copyOps := make(chan int, config.Workers*config.Workers)\n    runningWorkers := config.Workers\n    for i := 0; i &lt; config.Workers; i++ {\n        wg.Add(1)\n        go worker(&amp;wg, jobs, copyOps)\n    }\n    go scanner(&amp;wg, jobs)\n    \n    // Follow the progress.\n    copyCount := 0\n    for value := range copyOps {\n        if value &gt; 0 {\n            copyCount++\n        } else {\n            log.Info().Msg(\"A worker finished\")\n            runningWorkers--\n            if runningWorkers &lt; 1 {\n                break\n            }\n        }\n    }\n    \n    // We're done.\n    wg.Wait()\n    close(copyOps)\n    log.Info().Int(\"files\", copyCount).Msg(\"Copied\")\n\nThe current implementation is such that each worker writes integer 1 to the copyOps channel to indicate that a file has been processed. A worker writes integer 0 to the copyOps channel once it is done with its `for job := range jobs` \\-loop. When a zero appears on the copyOps channel I decrease the value of `runningWorkers`. Once it reaches zero, I know that all workers are done, and I can break out of the progress loop.\n\nIs there a more idiomatic Go way of achieving this? I know, that `wg.Wait` will wait for workers to finish. But if I wait for that to happen, I would print the progress after all operations are done, and that does not seem like a good solution. I would like to report the progress *while* it's happening.", "author_fullname": "t2_2lscv9o0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Looking for an idiomatic Go way to get progress from multiple workers", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jjkvnw", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603907630.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;I have a program that scans the filesystem for files, examines those, and if they match a requirement, copies those files to a new location.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m trying to implement this using a producer-consumer pattern. It works fine, but following the progress of the long running operations is troublesome for me.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s the problematic part:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;var wg sync.WaitGroup\njobs := make(chan *scanJob, config.Workers*config.Workers)\ncopyOps := make(chan int, config.Workers*config.Workers)\nrunningWorkers := config.Workers\nfor i := 0; i &amp;lt; config.Workers; i++ {\n    wg.Add(1)\n    go worker(&amp;amp;wg, jobs, copyOps)\n}\ngo scanner(&amp;amp;wg, jobs)\n\n// Follow the progress.\ncopyCount := 0\nfor value := range copyOps {\n    if value &amp;gt; 0 {\n        copyCount++\n    } else {\n        log.Info().Msg(&amp;quot;A worker finished&amp;quot;)\n        runningWorkers--\n        if runningWorkers &amp;lt; 1 {\n            break\n        }\n    }\n}\n\n// We&amp;#39;re done.\nwg.Wait()\nclose(copyOps)\nlog.Info().Int(&amp;quot;files&amp;quot;, copyCount).Msg(&amp;quot;Copied&amp;quot;)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The current implementation is such that each worker writes integer 1 to the copyOps channel to indicate that a file has been processed. A worker writes integer 0 to the copyOps channel once it is done with its &lt;code&gt;for job := range jobs&lt;/code&gt; -loop. When a zero appears on the copyOps channel I decrease the value of &lt;code&gt;runningWorkers&lt;/code&gt;. Once it reaches zero, I know that all workers are done, and I can break out of the progress loop.&lt;/p&gt;\n\n&lt;p&gt;Is there a more idiomatic Go way of achieving this? I know, that &lt;code&gt;wg.Wait&lt;/code&gt; will wait for workers to finish. But if I wait for that to happen, I would print the progress after all operations are done, and that does not seem like a good solution. I would like to report the progress &lt;em&gt;while&lt;/em&gt; it&amp;#39;s happening.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jjkvnw", "is_robot_indexable": true, "report_reasons": null, "author": "rumpu-jussi", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jjkvnw/looking_for_an_idiomatic_go_way_to_get_progress/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jjkvnw/looking_for_an_idiomatic_go_way_to_get_progress/", "subreddit_subscribers": 128870, "created_utc": 1603878830.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "The javascript ecosystem has many libraries that are designed to build custom text editors. However, I failed to find something similar for go, a library designed to build custom, terminal based text editors for a specific purpose.\n\nOn one hand, I found multiple tui toolkits, but they are not really designed with text editing in mind. It is certainly possible to use them to build a text editor, but that would require quite a lot of plumbing.\n\nOn the other end, I found [micro](https://github.com/zyedidia/micro), which has pretty much everything necessary, but isn't designed as a library.\n\nDid I miss something? How would you build a custom text editor?", "author_fullname": "t2_38556", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "text editor library ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jjl3wj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603908854.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The javascript ecosystem has many libraries that are designed to build custom text editors. However, I failed to find something similar for go, a library designed to build custom, terminal based text editors for a specific purpose.&lt;/p&gt;\n\n&lt;p&gt;On one hand, I found multiple tui toolkits, but they are not really designed with text editing in mind. It is certainly possible to use them to build a text editor, but that would require quite a lot of plumbing.&lt;/p&gt;\n\n&lt;p&gt;On the other end, I found &lt;a href=\"https://github.com/zyedidia/micro\"&gt;micro&lt;/a&gt;, which has pretty much everything necessary, but isn&amp;#39;t designed as a library.&lt;/p&gt;\n\n&lt;p&gt;Did I miss something? How would you build a custom text editor?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jjl3wj", "is_robot_indexable": true, "report_reasons": null, "author": "jiyunatori", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jjl3wj/text_editor_library/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jjl3wj/text_editor_library/", "subreddit_subscribers": 128870, "created_utc": 1603880054.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello i have a Tag struct which has data type, value and bytes fields. I am setting the value and bytes of value with SetValue and SetBytes fuctions. When i set the value i also set bytes and vice versa.\n\nIf there is a better or idiomatic way, please advice.\n\nHere is the code:\n```go\n//data types\nconst (\n\tBit     uint8 = 1\n\tUint8   uint8 = 2\n\tInt8    uint8 = 3\n\t//...\n)\n\ntype Tag struct {\n\t//...\n\tDataType     uint8\n\tbytes        []byte\n\tvalue        interface{}\n}\n\nfunc (t *Tag) SetBytes(bytesOfValue []byte) error {\n\t//try to set value\n\tvar value interface{}\n\tb := bytes.NewReader(bytesOfValue)\n\tvar err error\n\tswitch t.DataType {\n\tcase Bit:\n\t\tvar v bool\n\t\terr = binary.Read(b, binary.BigEndian, &amp;v)\n\t\tvalue = v\n\tcase Uint8:\n\t\tvar v uint8\n\t\terr = binary.Read(b, binary.BigEndian, &amp;v)\n\t\tvalue = v\n\tcase Int8:\n\t\tvar v int8\n\t\terr = binary.Read(b, binary.BigEndian, &amp;v)\n\t\tvalue = v\n\t\t//...\n\t}\n\tif err != nil {\n\t\tfmt.Println(err.Error())\n\t\treturn errors.New(\"reading bytes failed\")\n\t}\n\tt.value = value\n\t//set bytes\n\tt.bytes = bytesOfValue\n\treturn nil\n}\n\nfunc (t *Tag) SetValue(value interface{}) error {\n\t//try to set bytes\n\tvar v interface{}\n\tvar ok bool\n\tswitch t.DataType {\n\tcase Bit:\n\t\tv, ok = value.(bool)\n\tcase Uint8:\n\t\tv, ok = value.(uint8)\n\tcase Int8:\n\t\tv, ok = value.(int8)\n\t//...\n\t}\n\tif !ok {\n\t\treturn errors.New(\"value is not valid\")\n\t}\n\tb := new(bytes.Buffer)\n\terr := binary.Write(b, binary.BigEndian, v)\n\tif err != nil {\n\t\treturn errors.New(\"writing bytes failed\")\n\t}\n\tt.bytes = b.Bytes()\n\t//set value\n\tt.value = value\n\treturn nil\n}\n```\nAnd i set the value and bytes of value like this:\n```go\n//set value\nt.SetValue(int8(-128))\n\n//set bytes\nt.SetBytes([]byte{128})\n```\nPlayground link: https://play.golang.org/p/hHpTIw9Fxx5\n\nBest regards", "author_fullname": "t2_5pyhag7i", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I need an advice for setting an interface{} value", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jjkmlo", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1603891224.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603906196.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello i have a Tag struct which has data type, value and bytes fields. I am setting the value and bytes of value with SetValue and SetBytes fuctions. When i set the value i also set bytes and vice versa.&lt;/p&gt;\n\n&lt;p&gt;If there is a better or idiomatic way, please advice.&lt;/p&gt;\n\n&lt;p&gt;Here is the code:\n```go\n//data types\nconst (\n    Bit     uint8 = 1\n    Uint8   uint8 = 2\n    Int8    uint8 = 3\n    //...\n)&lt;/p&gt;\n\n&lt;p&gt;type Tag struct {\n    //...\n    DataType     uint8\n    bytes        []byte\n    value        interface{}\n}&lt;/p&gt;\n\n&lt;p&gt;func (t *Tag) SetBytes(bytesOfValue []byte) error {\n    //try to set value\n    var value interface{}\n    b := bytes.NewReader(bytesOfValue)\n    var err error\n    switch t.DataType {\n    case Bit:\n        var v bool\n        err = binary.Read(b, binary.BigEndian, &amp;amp;v)\n        value = v\n    case Uint8:\n        var v uint8\n        err = binary.Read(b, binary.BigEndian, &amp;amp;v)\n        value = v\n    case Int8:\n        var v int8\n        err = binary.Read(b, binary.BigEndian, &amp;amp;v)\n        value = v\n        //...\n    }\n    if err != nil {\n        fmt.Println(err.Error())\n        return errors.New(&amp;quot;reading bytes failed&amp;quot;)\n    }\n    t.value = value\n    //set bytes\n    t.bytes = bytesOfValue\n    return nil\n}&lt;/p&gt;\n\n&lt;p&gt;func (t *Tag) SetValue(value interface{}) error {\n    //try to set bytes\n    var v interface{}\n    var ok bool\n    switch t.DataType {\n    case Bit:\n        v, ok = value.(bool)\n    case Uint8:\n        v, ok = value.(uint8)\n    case Int8:\n        v, ok = value.(int8)\n    //...\n    }\n    if !ok {\n        return errors.New(&amp;quot;value is not valid&amp;quot;)\n    }\n    b := new(bytes.Buffer)\n    err := binary.Write(b, binary.BigEndian, v)\n    if err != nil {\n        return errors.New(&amp;quot;writing bytes failed&amp;quot;)\n    }\n    t.bytes = b.Bytes()\n    //set value\n    t.value = value\n    return nil\n}\n&lt;code&gt;\nAnd i set the value and bytes of value like this:\n&lt;/code&gt;go\n//set value\nt.SetValue(int8(-128))&lt;/p&gt;\n\n&lt;p&gt;//set bytes\nt.SetBytes([]byte{128})\n```\nPlayground link: &lt;a href=\"https://play.golang.org/p/hHpTIw9Fxx5\"&gt;https://play.golang.org/p/hHpTIw9Fxx5&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Best regards&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jjkmlo", "is_robot_indexable": true, "report_reasons": null, "author": "ermanimer", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jjkmlo/i_need_an_advice_for_setting_an_interface_value/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jjkmlo/i_need_an_advice_for_setting_an_interface_value/", "subreddit_subscribers": 128870, "created_utc": 1603877396.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_jjkmlo", "before": null}}