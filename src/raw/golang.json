{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_yu45k", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Golang's repo displayed using Onefetch", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jdek8w", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 42, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 42, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603048283.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://i.redd.it/ltz7slxd6ut51.png", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jdek8w", "is_robot_indexable": true, "report_reasons": null, "author": "ossama_hj", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jdek8w/golangs_repo_displayed_using_onefetch/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://i.redd.it/ltz7slxd6ut51.png", "subreddit_subscribers": 127941, "created_utc": 1603019483.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "As the title says. I'm kinda bad at reading programming books, get distracted and bored very easily, but videos do very well for me.  Heard people say bad stuff about Go tutorials on udemy, especially Todd McLeod. Is it really that bad? I wanted to pick a good tutorial and practice on codewars.", "author_fullname": "t2_8e7k55pl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Which Udemy course to purchase?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jdd7n2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1603013183.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603041169.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;As the title says. I&amp;#39;m kinda bad at reading programming books, get distracted and bored very easily, but videos do very well for me.  Heard people say bad stuff about Go tutorials on udemy, especially Todd McLeod. Is it really that bad? I wanted to pick a good tutorial and practice on codewars.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jdd7n2", "is_robot_indexable": true, "report_reasons": null, "author": "foolwya", "discussion_type": null, "num_comments": 21, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jdd7n2/which_udemy_course_to_purchase/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jdd7n2/which_udemy_course_to_purchase/", "subreddit_subscribers": 127941, "created_utc": 1603012369.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Can someone tell me what I'm doing wrong?  Currently this script looks like its just hanging and never returning.  I've tested the snmp, and ip iteration independently and they worked. Once I introduced the go routine it looks like I've broken something. Can someone offer assistance as to what I've done wrong. Also I just read there is a better way of limiting go routines but in a pinch I just wanted to keep it under a thousand go routines.\n\n    package main\n    \n    import (\n    \t\"encoding/binary\"\n    \t\"fmt\"\n    \t\"log\"\n    \t\"net\"\n    \t\"sync\"\n    \n    \tg \"github.com/gosnmp/gosnmp\"\n    )\n    \n    const snmpComm string = \"public\"\n    \n    func poller(ip string, wg *sync.WaitGroup) {\n    \tdefer wg.Done()\n    \t// Default is a pointer to a GoSNMP struct that contains sensible defaults\n    \t// eg port 161, community public, etc\n    \tg.Default.Target = ip\n    \tg.Default.Community = snmpComm\n    \n    \terr := g.Default.Connect()\n    \tif err != nil {\n    \t\tlog.Fatalf(\"Connect() err: %v\", err)\n    \t}\n    \tdefer g.Default.Conn.Close()\n    \n    \toids := []string{\"1.3.6.1.2.1.1.1.0\", \"1.3.6.1.2.1.1.5.0\"}\n    \tresult, err2 := g.Default.Get(oids) // Get() accepts up to g.MAX_OIDS\n    \tif err2 != nil {\n    \t\tlog.Fatalf(\"Get() err: %v\", err2)\n    \t}\n    \n    \tfor i, variable := range result.Variables {\n    \t\tfmt.Printf(\"%d: oid: %s \", i, variable.Name)\n    \t}\n    }\n    \n    func main() {\n    \tvar wg sync.WaitGroup\n    \n    \t_, ipv4Net, err := net.ParseCIDR(\"10.201.0.0/16\")\n    \tif err != nil {\n    \t\tfmt.Println(err)\n    \t}\n    \n    \t// convert IPNet struct mask and address to uint32\n    \t// network is BigEndian\n    \tmask := binary.BigEndian.Uint32(ipv4Net.Mask)\n    \tstart := binary.BigEndian.Uint32(ipv4Net.IP)\n    \n    \t// find the final address\n    \tfinish := (start &amp; mask) | (mask ^ 0xffffffff)\n    \n    \t// loop through addresses as uint32\n    \tthreadProtector := 0\n    \tfor i := start; i &lt;= finish; i++ {\n    \t\tif threadProtector &lt;= 999 {\n    \t\t\t// convert back to net.IP\n    \t\t\tip := make(net.IP, 4)\n    \t\t\tbinary.BigEndian.PutUint32(ip, i)\n    \t\t\tipstr := ip.String()\n    \t\t\twg.Add(1)\n    \t\t\tgo poller(ipstr, &amp;wg)\n    \t\t\tthreadProtector++\n    \t\t} else if threadProtector == 1000 {\n    \t\t\twg.Wait()\n    \t\t\tthreadProtector = 0\n    \t\t}\n    \t}\n    \n    }", "author_fullname": "t2_xl7tg", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "go routine problem", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jd96zc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603020851.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Can someone tell me what I&amp;#39;m doing wrong?  Currently this script looks like its just hanging and never returning.  I&amp;#39;ve tested the snmp, and ip iteration independently and they worked. Once I introduced the go routine it looks like I&amp;#39;ve broken something. Can someone offer assistance as to what I&amp;#39;ve done wrong. Also I just read there is a better way of limiting go routines but in a pinch I just wanted to keep it under a thousand go routines.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package main\n\nimport (\n    &amp;quot;encoding/binary&amp;quot;\n    &amp;quot;fmt&amp;quot;\n    &amp;quot;log&amp;quot;\n    &amp;quot;net&amp;quot;\n    &amp;quot;sync&amp;quot;\n\n    g &amp;quot;github.com/gosnmp/gosnmp&amp;quot;\n)\n\nconst snmpComm string = &amp;quot;public&amp;quot;\n\nfunc poller(ip string, wg *sync.WaitGroup) {\n    defer wg.Done()\n    // Default is a pointer to a GoSNMP struct that contains sensible defaults\n    // eg port 161, community public, etc\n    g.Default.Target = ip\n    g.Default.Community = snmpComm\n\n    err := g.Default.Connect()\n    if err != nil {\n        log.Fatalf(&amp;quot;Connect() err: %v&amp;quot;, err)\n    }\n    defer g.Default.Conn.Close()\n\n    oids := []string{&amp;quot;1.3.6.1.2.1.1.1.0&amp;quot;, &amp;quot;1.3.6.1.2.1.1.5.0&amp;quot;}\n    result, err2 := g.Default.Get(oids) // Get() accepts up to g.MAX_OIDS\n    if err2 != nil {\n        log.Fatalf(&amp;quot;Get() err: %v&amp;quot;, err2)\n    }\n\n    for i, variable := range result.Variables {\n        fmt.Printf(&amp;quot;%d: oid: %s &amp;quot;, i, variable.Name)\n    }\n}\n\nfunc main() {\n    var wg sync.WaitGroup\n\n    _, ipv4Net, err := net.ParseCIDR(&amp;quot;10.201.0.0/16&amp;quot;)\n    if err != nil {\n        fmt.Println(err)\n    }\n\n    // convert IPNet struct mask and address to uint32\n    // network is BigEndian\n    mask := binary.BigEndian.Uint32(ipv4Net.Mask)\n    start := binary.BigEndian.Uint32(ipv4Net.IP)\n\n    // find the final address\n    finish := (start &amp;amp; mask) | (mask ^ 0xffffffff)\n\n    // loop through addresses as uint32\n    threadProtector := 0\n    for i := start; i &amp;lt;= finish; i++ {\n        if threadProtector &amp;lt;= 999 {\n            // convert back to net.IP\n            ip := make(net.IP, 4)\n            binary.BigEndian.PutUint32(ip, i)\n            ipstr := ip.String()\n            wg.Add(1)\n            go poller(ipstr, &amp;amp;wg)\n            threadProtector++\n        } else if threadProtector == 1000 {\n            wg.Wait()\n            threadProtector = 0\n        }\n    }\n\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jd96zc", "is_robot_indexable": true, "report_reasons": null, "author": "friday963", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jd96zc/go_routine_problem/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jd96zc/go_routine_problem/", "subreddit_subscribers": 127941, "created_utc": 1602992051.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey all,\n\nGot a front end API that sends messages to back end services. Right now, the message bus uses just string values as the topic name to send something on, or subscribe to. Also, some services can pub/sub with other services as well, not just the API services. With that in mind, do you put version values within the topic name string?\n\nAs an example, say I have a simple Email service, version 1. It only handles a TO and a message body. Json like {to: '...@...com', msg: 'blah blah'}.  Now, I get a more robust email service I can use, that can now support CC, html body, subject, etc. I also decide msg is not a good key.. so I modify the JSON payload to something like {to:..., subject:..., body:... cc:...}. Clearly the first version of my email service wont decode the new format correctly. But if I change the current service to the new format, then services still sending the old format wont work either. So.. in the case of event bus with topic strings... is the way to go to spin up a 2nd (new email service) while the 1st one still runs.. so that services now ready to use the new 2nd version, can work (using a new topic string.. either with v2 in it, or some new name like NewEmailService) and the current services using the old email service continue to work?", "author_fullname": "t2_5rkthjpv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How do you deal with microservice versioning when using a message bus?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jdbo1i", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.72, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603032861.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey all,&lt;/p&gt;\n\n&lt;p&gt;Got a front end API that sends messages to back end services. Right now, the message bus uses just string values as the topic name to send something on, or subscribe to. Also, some services can pub/sub with other services as well, not just the API services. With that in mind, do you put version values within the topic name string?&lt;/p&gt;\n\n&lt;p&gt;As an example, say I have a simple Email service, version 1. It only handles a TO and a message body. Json like {to: &amp;#39;&lt;a href=\"mailto:...@...com\"&gt;...@...com&lt;/a&gt;&amp;#39;, msg: &amp;#39;blah blah&amp;#39;}.  Now, I get a more robust email service I can use, that can now support CC, html body, subject, etc. I also decide msg is not a good key.. so I modify the JSON payload to something like {to:..., subject:..., body:... cc:...}. Clearly the first version of my email service wont decode the new format correctly. But if I change the current service to the new format, then services still sending the old format wont work either. So.. in the case of event bus with topic strings... is the way to go to spin up a 2nd (new email service) while the 1st one still runs.. so that services now ready to use the new 2nd version, can work (using a new topic string.. either with v2 in it, or some new name like NewEmailService) and the current services using the old email service continue to work?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jdbo1i", "is_robot_indexable": true, "report_reasons": null, "author": "golangorgohome", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jdbo1i/how_do_you_deal_with_microservice_versioning_when/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jdbo1i/how_do_you_deal_with_microservice_versioning_when/", "subreddit_subscribers": 127941, "created_utc": 1603004061.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_c41dr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Type analysis for annotated empty interface{}s", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jdfis4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603052996.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/siadat/intertype#demo-1", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jdfis4", "is_robot_indexable": true, "report_reasons": null, "author": "s-i-n-a", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jdfis4/type_analysis_for_annotated_empty_interfaces/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/siadat/intertype#demo-1", "subreddit_subscribers": 127941, "created_utc": 1603024196.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Today i release 1.0.0-beta version of [at2k](https://github.com/ilya-mezentsev/acceptance-testing-2k) - project for manage and run acceptance tests.\n\nIt allows you write something like this\n```\nBEGIN\n    createUserResponse = CREATE USER {\"name\": \"Jim\"}\n\n    ASSERT createUserResponse.status EQUALS ok\n\n    userResponse = GET USER ${createUserResponse.hash}\n\n    ASSERT userResponse.status EQUALS ok\n    ASSERT userResponse.data.name EQUALS Jim\n    ASSERT userResponse.data.hash EQUALS ${createUserResponse.hash}\nEND\n\nBEGIN\n    getNotExistsUserResponse = GET USER not-exists-hash\n\n    ASSERT getNotExistsUserResponse.status EQUALS error\n    ASSERT getNotExistsUserResponse.data EQUALS user-not-found\nEND\n```\n\nTo test code like this\n```\nusers.get('/:hash', (req, res) =&gt; {\n    const user = usersRepository.find(u =&gt; u.hash === req.params.hash);\n\n    if (user) {\n        res.status(200).send({\n            status: 'ok',\n            data: user\n        });\n    } else {\n        res.status(200).send({\n            status: 'error',\n            data: 'user-not-found'\n        });\n    }\n});\n\nusers.post('/', (req, res) =&gt; {\n    const { name } = req.body;\n    const hash = uuid4();\n\n    usersRepository.push({\n        hash, name\n    });\n    res.status(200).send({status: 'ok', hash});\n});\n```\n\nI'm quite new in releasing projects (and posting on reddit ;-)). Feel free to review code or write comments here - I'll be glad to get feedback)\n\nP.S. Web version is available [here](https://at2k-beta.site/). Please, don't overuse it, because server hasn't have enough of resources to handle \"loads\" of requests", "author_fullname": "t2_5rokym1s", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "My project for manage and run acceptance tests", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jdf9k6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603051834.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Today i release 1.0.0-beta version of &lt;a href=\"https://github.com/ilya-mezentsev/acceptance-testing-2k\"&gt;at2k&lt;/a&gt; - project for manage and run acceptance tests.&lt;/p&gt;\n\n&lt;p&gt;It allows you write something like this\n```\nBEGIN\n    createUserResponse = CREATE USER {&amp;quot;name&amp;quot;: &amp;quot;Jim&amp;quot;}&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ASSERT createUserResponse.status EQUALS ok\n\nuserResponse = GET USER ${createUserResponse.hash}\n\nASSERT userResponse.status EQUALS ok\nASSERT userResponse.data.name EQUALS Jim\nASSERT userResponse.data.hash EQUALS ${createUserResponse.hash}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;END&lt;/p&gt;\n\n&lt;p&gt;BEGIN\n    getNotExistsUserResponse = GET USER not-exists-hash&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;ASSERT getNotExistsUserResponse.status EQUALS error\nASSERT getNotExistsUserResponse.data EQUALS user-not-found\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;END\n```&lt;/p&gt;\n\n&lt;p&gt;To test code like this\n```\nusers.get(&amp;#39;/:hash&amp;#39;, (req, res) =&amp;gt; {\n    const user = usersRepository.find(u =&amp;gt; u.hash === req.params.hash);&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;if (user) {\n    res.status(200).send({\n        status: &amp;#39;ok&amp;#39;,\n        data: user\n    });\n} else {\n    res.status(200).send({\n        status: &amp;#39;error&amp;#39;,\n        data: &amp;#39;user-not-found&amp;#39;\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;});&lt;/p&gt;\n\n&lt;p&gt;users.post(&amp;#39;/&amp;#39;, (req, res) =&amp;gt; {\n    const { name } = req.body;\n    const hash = uuid4();&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;usersRepository.push({\n    hash, name\n});\nres.status(200).send({status: &amp;#39;ok&amp;#39;, hash});\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;});\n```&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m quite new in releasing projects (and posting on reddit ;-)). Feel free to review code or write comments here - I&amp;#39;ll be glad to get feedback)&lt;/p&gt;\n\n&lt;p&gt;P.S. Web version is available &lt;a href=\"https://at2k-beta.site/\"&gt;here&lt;/a&gt;. Please, don&amp;#39;t overuse it, because server hasn&amp;#39;t have enough of resources to handle &amp;quot;loads&amp;quot; of requests&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jdf9k6", "is_robot_indexable": true, "report_reasons": null, "author": "imezentsev", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jdf9k6/my_project_for_manage_and_run_acceptance_tests/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jdf9k6/my_project_for_manage_and_run_acceptance_tests/", "subreddit_subscribers": 127941, "created_utc": 1603023034.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_kj0nv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Glow: Markdown reader for the terminal with a TUI and encrypted cloud stash", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jcxanh", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 38, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 38, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1602977901.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/charmbracelet/glow", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jcxanh", "is_robot_indexable": true, "report_reasons": null, "author": "binaryfor", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jcxanh/glow_markdown_reader_for_the_terminal_with_a_tui/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/charmbracelet/glow", "subreddit_subscribers": 127941, "created_utc": 1602949101.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_wy4vd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "validating v2 (a Go library for validating structs and fields) is released", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jcv6gt", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 58, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 58, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1602970393.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/RussellLuo/validating", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jcv6gt", "is_robot_indexable": true, "report_reasons": null, "author": "RussellLuo", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jcv6gt/validating_v2_a_go_library_for_validating_structs/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/RussellLuo/validating", "subreddit_subscribers": 127941, "created_utc": 1602941593.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_eeeoo", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Gosaic - 4yrs but still a piece of art", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jcrmou", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 118, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 118, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1602952872.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/atongen/gosaic", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jcrmou", "is_robot_indexable": true, "report_reasons": null, "author": "babawere", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jcrmou/gosaic_4yrs_but_still_a_piece_of_art/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/atongen/gosaic", "subreddit_subscribers": 127941, "created_utc": 1602924072.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi all,\n\nHopefully a simple one. Is it possible to wrap a function definition over 2 lines. I am working on a project that likes lines to be hard wrapped at around 80 characters. The hard limit is 100 characters but 80 is preferable. Is it possible to wrap a go function definition over 2 lines? Something like:\n\n```\nfunc getEntityByShortId(el *openpgp.EntityList , id uint32)\n    (entity *openpgp.Entity, err error) {\n......\n}\n```\n\nThis doesn't work. Am I missing something or is it simply not possible?\n\nThanks in advance", "author_fullname": "t2_auq30", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Wrap function definition over 2 lines", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jde5mo", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603046244.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all,&lt;/p&gt;\n\n&lt;p&gt;Hopefully a simple one. Is it possible to wrap a function definition over 2 lines. I am working on a project that likes lines to be hard wrapped at around 80 characters. The hard limit is 100 characters but 80 is preferable. Is it possible to wrap a go function definition over 2 lines? Something like:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nfunc getEntityByShortId(el *openpgp.EntityList , id uint32)\n    (entity *openpgp.Entity, err error) {\n......\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;This doesn&amp;#39;t work. Am I missing something or is it simply not possible?&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jde5mo", "is_robot_indexable": true, "report_reasons": null, "author": "Jab2870", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jde5mo/wrap_function_definition_over_2_lines/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jde5mo/wrap_function_definition_over_2_lines/", "subreddit_subscribers": 127941, "created_utc": 1603017444.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_jde5mo", "before": null}}