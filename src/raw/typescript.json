{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - August", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i1ikj5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 25, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 25, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596269158.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i1ikj5", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 0, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i1ikj5/whos_hiring_typescript_developers_august/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/i1ikj5/whos_hiring_typescript_developers_august/", "subreddit_subscribers": 45727, "created_utc": 1596240358.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_432e5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Announcing TypeScript 4.0 RC", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 64, "top_awarded_type": null, "hide_score": false, "name": "t3_i51era", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 57, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 57, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/3daiO2pEOs5lF6MkyJ0u0prI-s4rwm-Yoj3gHo6OXXY.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1596780547.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "devblogs.microsoft.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-rc/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/jlpHTNqfQqWriePE-7Z17xRSHAx9P78d44uUOwzngqk.jpg?auto=webp&amp;s=7db056121bc43931eb59bbe1004cc2c5606ce523", "width": 1084, "height": 498}, "resolutions": [{"url": "https://external-preview.redd.it/jlpHTNqfQqWriePE-7Z17xRSHAx9P78d44uUOwzngqk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e9193f10fed61acdc4d9c1417552e250237519d7", "width": 108, "height": 49}, {"url": "https://external-preview.redd.it/jlpHTNqfQqWriePE-7Z17xRSHAx9P78d44uUOwzngqk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=0e339258be172883f204d36a5817e05c6d3d86c8", "width": 216, "height": 99}, {"url": "https://external-preview.redd.it/jlpHTNqfQqWriePE-7Z17xRSHAx9P78d44uUOwzngqk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2daa7b44b127384a9024b165d8948dfdc712eaef", "width": 320, "height": 147}, {"url": "https://external-preview.redd.it/jlpHTNqfQqWriePE-7Z17xRSHAx9P78d44uUOwzngqk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=37cbf8153461ee9959d679d611c4c500add5e564", "width": 640, "height": 294}, {"url": "https://external-preview.redd.it/jlpHTNqfQqWriePE-7Z17xRSHAx9P78d44uUOwzngqk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=2a3d9b7706c9c9a2997c41db5ab729b88f4bb126", "width": 960, "height": 441}, {"url": "https://external-preview.redd.it/jlpHTNqfQqWriePE-7Z17xRSHAx9P78d44uUOwzngqk.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=ce7b0185170714c75184bac47b7146a461386aba", "width": 1080, "height": 496}], "variants": {}, "id": "ex4llFcoOX3xhgeuVSqBZrOA2bDLETsUOJ1tgSnLkbs"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i51era", "is_robot_indexable": true, "report_reasons": null, "author": "DanielRosenwasser", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i51era/announcing_typescript_40_rc/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://devblogs.microsoft.com/typescript/announcing-typescript-4-0-rc/", "subreddit_subscribers": 45727, "created_utc": 1596751747.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm dealing with this error right now:\n\n    TS2345: Argument of type 'MemoExoticComponent&lt;ForwardRefExoticComponent&lt;IProps &amp; RefAttributes&lt;HTMLElement&gt;&gt;&gt;' is not assignable to parameter of type 'ReactRefComponent&lt;IProps &amp; IRefProps&gt;'. \u00a0\u00a0Type 'ReactElement&lt;any, string | ((props: any) =&gt; ReactElement&lt;any, string | ... | (new (props: any) =&gt; Component&lt;any, any, any&gt;)&gt; | null) | (new (props: any) =&gt; Component&lt;any, any, any&gt;)&gt; | null' is not assignable to type 'Element'. \u00a0\u00a0\u00a0\u00a0Type 'null' is not assignable to type 'Element'.\n\n... this is a nightmare.\n\nIt forces me to jump between all the types.\n\nWhy not just show the above BUT show the canonical type as an 'interface' declaration showing what the type SHOULD be if I were to code it without using type or interface references/inheritance.\n\nSo it would just say something like:\n\n    the canonical type is:\n    \n    interface Foo {\n        readonly bar: string;\n        ....\n    }\n\nThis would make my life 100x easier!", "author_fullname": "t2_pc7lu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Typescript compiler errors with typescript are a nightmare and could be improved by showing the *canonical* type.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i4t8mi", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 62, "total_awards_received": 1, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 62, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596754483.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m dealing with this error right now:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;TS2345: Argument of type &amp;#39;MemoExoticComponent&amp;lt;ForwardRefExoticComponent&amp;lt;IProps &amp;amp; RefAttributes&amp;lt;HTMLElement&amp;gt;&amp;gt;&amp;gt;&amp;#39; is not assignable to parameter of type &amp;#39;ReactRefComponent&amp;lt;IProps &amp;amp; IRefProps&amp;gt;&amp;#39;. \u00a0\u00a0Type &amp;#39;ReactElement&amp;lt;any, string | ((props: any) =&amp;gt; ReactElement&amp;lt;any, string | ... | (new (props: any) =&amp;gt; Component&amp;lt;any, any, any&amp;gt;)&amp;gt; | null) | (new (props: any) =&amp;gt; Component&amp;lt;any, any, any&amp;gt;)&amp;gt; | null&amp;#39; is not assignable to type &amp;#39;Element&amp;#39;. \u00a0\u00a0\u00a0\u00a0Type &amp;#39;null&amp;#39; is not assignable to type &amp;#39;Element&amp;#39;.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;... this is a nightmare.&lt;/p&gt;\n\n&lt;p&gt;It forces me to jump between all the types.&lt;/p&gt;\n\n&lt;p&gt;Why not just show the above BUT show the canonical type as an &amp;#39;interface&amp;#39; declaration showing what the type SHOULD be if I were to code it without using type or interface references/inheritance.&lt;/p&gt;\n\n&lt;p&gt;So it would just say something like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;the canonical type is:\n\ninterface Foo {\n    readonly bar: string;\n    ....\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This would make my life 100x easier!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 30, "id": "award_7149a401-1223-4543-bfd6-4127cb4246da", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png", "days_of_premium": 0, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=16&amp;height=16&amp;auto=webp&amp;s=3488f7c5a6f97f206132ef925d5a7cf1139085b1", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=32&amp;height=32&amp;auto=webp&amp;s=8a0670a9461db50dea6e41835e2ffe6fe60d9b5e", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=48&amp;height=48&amp;auto=webp&amp;s=776256c47db66ef974dd2f054cdee57b7ff0bcb0", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=64&amp;height=64&amp;auto=webp&amp;s=cd087e8240a311dea69233cdd54cac2b75db391a", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=128&amp;height=128&amp;auto=webp&amp;s=a9cbe69d62e0110174dc99d801fcb0e32674687c", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "description": "The key is to keep your cool this summer.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Cool Summer", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=16&amp;height=16&amp;auto=webp&amp;s=3488f7c5a6f97f206132ef925d5a7cf1139085b1", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=32&amp;height=32&amp;auto=webp&amp;s=8a0670a9461db50dea6e41835e2ffe6fe60d9b5e", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=48&amp;height=48&amp;auto=webp&amp;s=776256c47db66ef974dd2f054cdee57b7ff0bcb0", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=64&amp;height=64&amp;auto=webp&amp;s=cd087e8240a311dea69233cdd54cac2b75db391a", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=128&amp;height=128&amp;auto=webp&amp;s=a9cbe69d62e0110174dc99d801fcb0e32674687c", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i4t8mi", "is_robot_indexable": true, "report_reasons": null, "author": "brainhack3r", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i4t8mi/typescript_compiler_errors_with_typescript_are_a/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i4t8mi/typescript_compiler_errors_with_typescript_are_a/", "subreddit_subscribers": 45727, "created_utc": 1596725683.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "This is just an example to illustrate my issue.\n\nSay I have a class\n\n    class Person {\n      \n      constuctor(public firstName: string, public lastName: string) {}\n \n      getName() {\n        return this.firstName + \" \" + this.lastName;\n      }\n    }\n\nNow, say that I make an API call to get a Person array, so I might write it like this\n\n    function fetchPeople(url: string) {\n      return Axios\n        .get&lt;Person[]&gt;(url)\n        .then(res =&gt; res.data.map(p =&gt; new Person(p.firstName, p.lastName));\n    }\n\nNow, this does work, but it involves lying to Typescript, because of course Typescript would also now accept \n\n    function fetchNames(url: string) {\n      return Axios\n        .get&lt;Person[]&gt;(url)\n        .then(res =&gt; res.data.map(p =&gt; p.getName());\n    }\n\nand then that would give a runtime error.\n\nAnother possibility is to type out an interface `IPerson` with properties `firstName: string` and `lastName: string`. The problem I have with this is that in my actual use case this involves hundreds of lines of code to create a load of interfaces that will be used exactly once each. So that seems like a waste of time just for a bit of extra type checking.\n\nThe third possibility is to just pass `any` as the type to `Axios.get`. This is even more honest than the first option, but it also does away with my typechecking. \n\nDoes anyone have a sensible solution?", "author_fullname": "t2_7c15x4sq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What's the best way to initiate classes from an api call without lying to typescript?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_i5cevm", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1596801395.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596829980.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This is just an example to illustrate my issue.&lt;/p&gt;\n\n&lt;p&gt;Say I have a class&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Person {\n\n  constuctor(public firstName: string, public lastName: string) {}\n\n  getName() {\n    return this.firstName + &amp;quot; &amp;quot; + this.lastName;\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, say that I make an API call to get a Person array, so I might write it like this&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function fetchPeople(url: string) {\n  return Axios\n    .get&amp;lt;Person[]&amp;gt;(url)\n    .then(res =&amp;gt; res.data.map(p =&amp;gt; new Person(p.firstName, p.lastName));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now, this does work, but it involves lying to Typescript, because of course Typescript would also now accept &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function fetchNames(url: string) {\n  return Axios\n    .get&amp;lt;Person[]&amp;gt;(url)\n    .then(res =&amp;gt; res.data.map(p =&amp;gt; p.getName());\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and then that would give a runtime error.&lt;/p&gt;\n\n&lt;p&gt;Another possibility is to type out an interface &lt;code&gt;IPerson&lt;/code&gt; with properties &lt;code&gt;firstName: string&lt;/code&gt; and &lt;code&gt;lastName: string&lt;/code&gt;. The problem I have with this is that in my actual use case this involves hundreds of lines of code to create a load of interfaces that will be used exactly once each. So that seems like a waste of time just for a bit of extra type checking.&lt;/p&gt;\n\n&lt;p&gt;The third possibility is to just pass &lt;code&gt;any&lt;/code&gt; as the type to &lt;code&gt;Axios.get&lt;/code&gt;. This is even more honest than the first option, but it also does away with my typechecking. &lt;/p&gt;\n\n&lt;p&gt;Does anyone have a sensible solution?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i5cevm", "is_robot_indexable": true, "report_reasons": null, "author": "TCIsMaBoi", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i5cevm/whats_the_best_way_to_initiate_classes_from_an/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i5cevm/whats_the_best_way_to_initiate_classes_from_an/", "subreddit_subscribers": 45727, "created_utc": 1596801180.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hello\u00a0people!So Im\u00a0a\u00a0junior\u00a0dev\u00a0and\u00a0I\u00a0have\u00a0a\u00a0bunch\u00a0of\u00a0different\u00a0Apps\u00a0at\u00a0work,\u00a0but since \u00a0they\u00a0all\u00a0have\u00a0the\u00a0same\u00a0\"business\u00a0logic\",\u00a0I\u00a0had\u00a0a\u00a0package in\u00a0the\u00a0past\u00a0for\u00a0that.\u00a0But\u00a0now,\u00a0since\u00a0I'm\u00a0adding\u00a0new\u00a0platforms,\u00a0I\u00a0decided\u00a0to\u00a0create a\u00a0new\u00a0one\u00a0using\u00a0tree-shaking,\u00a0but\u00a0I\u00a0wanted\u00a0to\u00a0use\u00a0the\u00a0correct\u00a0pattern/architecture\u00a0for\u00a0that. This new package is\u00a0mainly\u00a0for React App\u00a0(they\u00a0are\u00a0all\u00a0frontend)\n\nThis package\u00a0should\u00a0contain\u00a0a\u00a0lot\u00a0of\u00a0stuff:\u00a0Services,\u00a0Models,\u00a0Typings,\u00a0etc\u00a0(that's\u00a0why\u00a0I'm\u00a0going\u00a0to\u00a0use\u00a0Tree-Shaking),\u00a0but\u00a0I\u00a0don't\u00a0what's\u00a0the\u00a0best\u00a0way\u00a0to\u00a0organize\u00a0the\u00a0code\u00a0and\u00a0the\u00a0types. Because\u00a0theses\u00a0modules\u00a0inside\u00a0the\u00a0package\u00a0might\u00a0have\u00a0some\u00a0dependencies\u00a0between\u00a0each\u00a0other,\u00a0but\u00a0most\u00a0of\u00a0those\u00a0are\u00a0types\u00a0only\u00a0(which\u00a0would\u00a0be\u00a0removed\u00a0when\u00a0compiling\u00a0to\u00a0plain\u00a0js),\u00a0so\u00a0for example,\u00a0let's\u00a0say\u00a0I\u00a0have\u00a0these\u00a02\u00a0interfaces\u00a0at\u00a02\u00a0different\u00a0files.\n\n&gt;//\u00a0A/index.ts\u00a0-\u00a0interface\u00a0A\u00a0at\u00a0A/index.ts  \n&gt;  \n&gt;interface A\u00a0{\u00a0\u00a0\u00a0\u00a0key:\u00a0string; }  \n&gt;  \n&gt;//\u00a0B/index.ts\u00a0-\u00a0interface\u00a0B\u00a0at\u00a0B/index.ts  \n&gt;  \n&gt;interface B\u00a0{\u00a0\u00a0\u00a0\u00a0foo(a\u00a0:\u00a0A):\u00a0void;}\n\nthe\u00a0file\u00a0'B'\u00a0only\u00a0needs\u00a0the\u00a0types\u00a0from\u00a0file\u00a0'A',\u00a0not\u00a0actual\u00a0code\u00a0and\u00a0I\u00a0&gt;&gt;think&lt;&lt;\u00a0that\u00a0is\u00a0something\u00a0to\u00a0worry\u00a0about.So with\u00a0the\u00a0goal\u00a0of\u00a0having\u00a0a\u00a0Tree-Shakable/Type\u00a0friendly\u00a0Util's\u00a0Package\u00a0for\u00a0my\u00a0web\u00a0app,\u00a0I\u00a0came\u00a0up\u00a0with\u00a0the\u00a0following\u00a0solution:\n\nLet's\u00a0say\u00a0I\u00a0want\u00a0to\u00a0create\u00a0a\u00a0User\u00a0model,\u00a0I\u00a0would\u00a0then\u00a0have:\n\n//\u00a0user/getters.ts\u00a0-&gt;\u00a0all\u00a0the\u00a0implementations\u00a0of\u00a0the\u00a0model\n\n//\u00a0user/schema.d.ts\u00a0-&gt;\u00a0\u00a0all\u00a0the\u00a0type\u00a0external\u00a0type\u00a0definitions\n\n//\u00a0user/index.ts\u00a0-&gt;\u00a0put\u00a0everything\u00a0together\n\nI\u00a0would\u00a0then\u00a0have\u00a0some\u00a0sort\u00a0of\u00a0index.d.ts\u00a0at\u00a0the\u00a0root\u00a0of\u00a0my\u00a0application\u00a0that\u00a0would\u00a0import\u00a0all\u00a0the\u00a0.d.ts\u00a0files,\u00a0making\u00a0all\u00a0those\u00a0types\u00a0global,\u00a0thus\u00a0removing\u00a0the\u00a0need\u00a0to\u00a0import\u00a0types\u00a0across\u00a0files.\n\nWhat\u00a0you\u00a0guys\u00a0think? Is this\u00a0good\u00a0pattern?\u00a0Is\u00a0it\u00a0bad?\u00a0Is is\u00a0horrible?\u00a0I\u00a0would\u00a0gladly\u00a0take\u00a0on\u00a0suggestions\u00a0:D, or links to reference material, I don't know.\n\nPS:\u00a0This is\u00a0the\u00a0first\u00a0time\u00a0I'm\u00a0asking\u00a0a\u00a0code-related\u00a0question\u00a0in\u00a0a\u00a0long\u00a0while,\u00a0so\u00a0I'm\u00a0sorry\u00a0if\u00a0it's\u00a0a\u00a0little\u00a0confusing\u00a0\\\\o", "author_fullname": "t2_10o0lr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to properly organize modules and types?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i55esz", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1596766877.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596795434.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello\u00a0people!So Im\u00a0a\u00a0junior\u00a0dev\u00a0and\u00a0I\u00a0have\u00a0a\u00a0bunch\u00a0of\u00a0different\u00a0Apps\u00a0at\u00a0work,\u00a0but since \u00a0they\u00a0all\u00a0have\u00a0the\u00a0same\u00a0&amp;quot;business\u00a0logic&amp;quot;,\u00a0I\u00a0had\u00a0a\u00a0package in\u00a0the\u00a0past\u00a0for\u00a0that.\u00a0But\u00a0now,\u00a0since\u00a0I&amp;#39;m\u00a0adding\u00a0new\u00a0platforms,\u00a0I\u00a0decided\u00a0to\u00a0create a\u00a0new\u00a0one\u00a0using\u00a0tree-shaking,\u00a0but\u00a0I\u00a0wanted\u00a0to\u00a0use\u00a0the\u00a0correct\u00a0pattern/architecture\u00a0for\u00a0that. This new package is\u00a0mainly\u00a0for React App\u00a0(they\u00a0are\u00a0all\u00a0frontend)&lt;/p&gt;\n\n&lt;p&gt;This package\u00a0should\u00a0contain\u00a0a\u00a0lot\u00a0of\u00a0stuff:\u00a0Services,\u00a0Models,\u00a0Typings,\u00a0etc\u00a0(that&amp;#39;s\u00a0why\u00a0I&amp;#39;m\u00a0going\u00a0to\u00a0use\u00a0Tree-Shaking),\u00a0but\u00a0I\u00a0don&amp;#39;t\u00a0what&amp;#39;s\u00a0the\u00a0best\u00a0way\u00a0to\u00a0organize\u00a0the\u00a0code\u00a0and\u00a0the\u00a0types. Because\u00a0theses\u00a0modules\u00a0inside\u00a0the\u00a0package\u00a0might\u00a0have\u00a0some\u00a0dependencies\u00a0between\u00a0each\u00a0other,\u00a0but\u00a0most\u00a0of\u00a0those\u00a0are\u00a0types\u00a0only\u00a0(which\u00a0would\u00a0be\u00a0removed\u00a0when\u00a0compiling\u00a0to\u00a0plain\u00a0js),\u00a0so\u00a0for example,\u00a0let&amp;#39;s\u00a0say\u00a0I\u00a0have\u00a0these\u00a02\u00a0interfaces\u00a0at\u00a02\u00a0different\u00a0files.&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;//\u00a0A/index.ts\u00a0-\u00a0interface\u00a0A\u00a0at\u00a0A/index.ts  &lt;/p&gt;\n\n&lt;p&gt;interface A\u00a0{\u00a0\u00a0\u00a0\u00a0key:\u00a0string; }  &lt;/p&gt;\n\n&lt;p&gt;//\u00a0B/index.ts\u00a0-\u00a0interface\u00a0B\u00a0at\u00a0B/index.ts  &lt;/p&gt;\n\n&lt;p&gt;interface B\u00a0{\u00a0\u00a0\u00a0\u00a0foo(a\u00a0:\u00a0A):\u00a0void;}&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;the\u00a0file\u00a0&amp;#39;B&amp;#39;\u00a0only\u00a0needs\u00a0the\u00a0types\u00a0from\u00a0file\u00a0&amp;#39;A&amp;#39;,\u00a0not\u00a0actual\u00a0code\u00a0and\u00a0I\u00a0&amp;gt;&amp;gt;think&amp;lt;&amp;lt;\u00a0that\u00a0is\u00a0something\u00a0to\u00a0worry\u00a0about.So with\u00a0the\u00a0goal\u00a0of\u00a0having\u00a0a\u00a0Tree-Shakable/Type\u00a0friendly\u00a0Util&amp;#39;s\u00a0Package\u00a0for\u00a0my\u00a0web\u00a0app,\u00a0I\u00a0came\u00a0up\u00a0with\u00a0the\u00a0following\u00a0solution:&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s\u00a0say\u00a0I\u00a0want\u00a0to\u00a0create\u00a0a\u00a0User\u00a0model,\u00a0I\u00a0would\u00a0then\u00a0have:&lt;/p&gt;\n\n&lt;p&gt;//\u00a0user/getters.ts\u00a0-&amp;gt;\u00a0all\u00a0the\u00a0implementations\u00a0of\u00a0the\u00a0model&lt;/p&gt;\n\n&lt;p&gt;//\u00a0user/schema.d.ts\u00a0-&amp;gt;\u00a0\u00a0all\u00a0the\u00a0type\u00a0external\u00a0type\u00a0definitions&lt;/p&gt;\n\n&lt;p&gt;//\u00a0user/index.ts\u00a0-&amp;gt;\u00a0put\u00a0everything\u00a0together&lt;/p&gt;\n\n&lt;p&gt;I\u00a0would\u00a0then\u00a0have\u00a0some\u00a0sort\u00a0of\u00a0index.d.ts\u00a0at\u00a0the\u00a0root\u00a0of\u00a0my\u00a0application\u00a0that\u00a0would\u00a0import\u00a0all\u00a0the\u00a0.d.ts\u00a0files,\u00a0making\u00a0all\u00a0those\u00a0types\u00a0global,\u00a0thus\u00a0removing\u00a0the\u00a0need\u00a0to\u00a0import\u00a0types\u00a0across\u00a0files.&lt;/p&gt;\n\n&lt;p&gt;What\u00a0you\u00a0guys\u00a0think? Is this\u00a0good\u00a0pattern?\u00a0Is\u00a0it\u00a0bad?\u00a0Is is\u00a0horrible?\u00a0I\u00a0would\u00a0gladly\u00a0take\u00a0on\u00a0suggestions\u00a0:D, or links to reference material, I don&amp;#39;t know.&lt;/p&gt;\n\n&lt;p&gt;PS:\u00a0This is\u00a0the\u00a0first\u00a0time\u00a0I&amp;#39;m\u00a0asking\u00a0a\u00a0code-related\u00a0question\u00a0in\u00a0a\u00a0long\u00a0while,\u00a0so\u00a0I&amp;#39;m\u00a0sorry\u00a0if\u00a0it&amp;#39;s\u00a0a\u00a0little\u00a0confusing\u00a0\\o&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i55esz", "is_robot_indexable": true, "report_reasons": null, "author": "Tijuk", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i55esz/how_to_properly_organize_modules_and_types/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i55esz/how_to_properly_organize_modules_and_types/", "subreddit_subscribers": 45727, "created_utc": 1596766634.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I've been messing around with the new variadic tuples in typescript 4.0 and was able to write a higher order function that converts the popular (err, result) \"callback\" format fn's into a type-safe promise.\n\nThought this was a really cool use-case of what's now possible, so wanted to share:\n\n[Typescript Playground Link](https://www.typescriptlang.org/play?ts=4.0.0-beta#code/FAFwngDgpgBAwgQwDZIEYIMYGsCiAnPGAXhnzwHtCAfGAZxDwEsA7AcxhuYFcUBuUSLEQp02ADwAlAHzEYACigEAXPGRpMuAgBoYeKLR4gVEgJTEZCZmGADoMAGJdmGEI3LMA6oxAALYevEAFRgoAA8QKGYAE1oYSzAAbQBdHWlZOQA6LIQ8VloVBKyMwJ1VEQ1JKSSzIgsrfmAMd3oYCAoAW0ZaRgAzMH9RLFkxAEkQ8MiYuKtk1Kk5HqcMFUdnV3cvXwGKkbmamUzs3PyYEZMVAAUOrqhK8xgAb2AYXSgQLjxmGGYoAHcYK7kTq0KByOR6WjkJAANygOj0ACsoC59o9ni8YItnIcMjk8joFMoygFNHh4fpDMZUU8MRi9O9PiECDAAPyvJEuQl4MxKCFQ2HgilIEAmfi0gC+JnRkv44pswCxLjcXx8UBQ5E2fjUgzk6OYCHaUBU9CYbC06IQrCN3y47VQinNLwwqBUXJUZEoHBtKHJBmFxoYLFYqOh5EYUWAZhpMGdcm4PpgAAMRgBydowAAkD31hvFOktsCzBfFidFwDlwCQbxgqvVAEFaIDgbASG0gV1ev1tRo5LWkBrvFrytgy8A5AhaGBnPJqeiqyAYKw9G8g7IEL8EN4a2r+w2mzc5AAiPvkQ86ADMAEYyy9kIoQHIl1AV2wy5K5GWgA)\n\nAlso release it as an NPM package if anyone wants to help improve it (or fix my mistakes)!\n\n[https://github.com/ChuckJonas/ts-promisify-callback](https://github.com/ChuckJonas/ts-promisify-callback)", "author_fullname": "t2_3rkcc7qb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Using the new variadic tuple types to convert callback functions to promises", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i58b83", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596807955.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been messing around with the new variadic tuples in typescript 4.0 and was able to write a higher order function that converts the popular (err, result) &amp;quot;callback&amp;quot; format fn&amp;#39;s into a type-safe promise.&lt;/p&gt;\n\n&lt;p&gt;Thought this was a really cool use-case of what&amp;#39;s now possible, so wanted to share:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.typescriptlang.org/play?ts=4.0.0-beta#code/FAFwngDgpgBAwgQwDZIEYIMYGsCiAnPGAXhnzwHtCAfGAZxDwEsA7AcxhuYFcUBuUSLEQp02ADwAlAHzEYACigEAXPGRpMuAgBoYeKLR4gVEgJTEZCZmGADoMAGJdmGEI3LMA6oxAALYevEAFRgoAA8QKGYAE1oYSzAAbQBdHWlZOQA6LIQ8VloVBKyMwJ1VEQ1JKSSzIgsrfmAMd3oYCAoAW0ZaRgAzMH9RLFkxAEkQ8MiYuKtk1Kk5HqcMFUdnV3cvXwGKkbmamUzs3PyYEZMVAAUOrqhK8xgAb2AYXSgQLjxmGGYoAHcYK7kTq0KByOR6WjkJAANygOj0ACsoC59o9ni8YItnIcMjk8joFMoygFNHh4fpDMZUU8MRi9O9PiECDAAPyvJEuQl4MxKCFQ2HgilIEAmfi0gC+JnRkv44pswCxLjcXx8UBQ5E2fjUgzk6OYCHaUBU9CYbC06IQrCN3y47VQinNLwwqBUXJUZEoHBtKHJBmFxoYLFYqOh5EYUWAZhpMGdcm4PpgAAMRgBydowAAkD31hvFOktsCzBfFidFwDlwCQbxgqvVAEFaIDgbASG0gV1ev1tRo5LWkBrvFrytgy8A5AhaGBnPJqeiqyAYKw9G8g7IEL8EN4a2r+w2mzc5AAiPvkQ86ADMAEYyy9kIoQHIl1AV2wy5K5GWgA\"&gt;Typescript Playground Link&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also release it as an NPM package if anyone wants to help improve it (or fix my mistakes)!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ChuckJonas/ts-promisify-callback\"&gt;https://github.com/ChuckJonas/ts-promisify-callback&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i58b83", "is_robot_indexable": true, "report_reasons": null, "author": "Active_Ice2826", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i58b83/using_the_new_variadic_tuple_types_to_convert/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i58b83/using_the_new_variadic_tuple_types_to_convert/", "subreddit_subscribers": 45727, "created_utc": 1596779155.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Is it possible to create a type where a property is optional but cannot be set to undefined? Or does TypeScript simply not allow this as any omitted property's value is undefined?\n\nEdit: This is the best I could come up with but it doesn't work so I'm concluding that it's not possible.\n\n```  \ntype Foo = { foo?: string }  \ntype Bar&lt;T&gt; = { [P in keyof T]: T[P] extends undefined ? never : T[P] }  \ntype Baz = Bar&lt;Foo&gt;  \n\nconst a: Baz = {};  \nconst b: Baz = { foo: \"abc\" };  \nconst c: Baz = { foo: undefined }; // trying to make this not allowed  \n```", "author_fullname": "t2_15uusv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Optional but not undefined?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i54lu8", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1596805118.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596792203.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is it possible to create a type where a property is optional but cannot be set to undefined? Or does TypeScript simply not allow this as any omitted property&amp;#39;s value is undefined?&lt;/p&gt;\n\n&lt;p&gt;Edit: This is the best I could come up with but it doesn&amp;#39;t work so I&amp;#39;m concluding that it&amp;#39;s not possible.&lt;/p&gt;\n\n&lt;p&gt;```&lt;br/&gt;\ntype Foo = { foo?: string }&lt;br/&gt;\ntype Bar&amp;lt;T&amp;gt; = { [P in keyof T]: T[P] extends undefined ? never : T[P] }&lt;br/&gt;\ntype Baz = Bar&amp;lt;Foo&amp;gt;  &lt;/p&gt;\n\n&lt;p&gt;const a: Baz = {};&lt;br/&gt;\nconst b: Baz = { foo: &amp;quot;abc&amp;quot; };&lt;br/&gt;\nconst c: Baz = { foo: undefined }; // trying to make this not allowed&lt;br/&gt;\n```&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i54lu8", "is_robot_indexable": true, "report_reasons": null, "author": "SlayMaster3000", "discussion_type": null, "num_comments": 21, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i54lu8/optional_but_not_undefined/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i54lu8/optional_but_not_undefined/", "subreddit_subscribers": 45727, "created_utc": 1596763403.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Would love to know if the pandemic had much of a negative impact, and also how much working remotely is opening up hiring abroad/generating a more global competition.", "author_fullname": "t2_n0fqf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How is the job market right now?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i564s9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.6, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596798357.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Would love to know if the pandemic had much of a negative impact, and also how much working remotely is opening up hiring abroad/generating a more global competition.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i564s9", "is_robot_indexable": true, "report_reasons": null, "author": "Gusti25", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i564s9/how_is_the_job_market_right_now/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i564s9/how_is_the_job_market_right_now/", "subreddit_subscribers": 45727, "created_utc": 1596769557.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I've been working on a domino game in React/Typescript that is based on Mexican Train.  I have a class called `BoneArray` that is an abstract class for any array of dominos (bones as they're called in the game).  This is a class that any array of dominos (the player hand, the bone pile, etc), might inherit from.\n\nI'm having some trouble with a generic method for reduce.  The `bones` property is protected, because I want to limit what users of this class can do with it, but I'm also trying to write wrappers around some of the JavaScript array methods so they can remain available.\n\nThe trouble I'm having with reduce is with the optional `initialValue` parameter.\n\nHere's the code:\n\n```\npublic reduce&lt;T&gt;(\n    callbackfn: (\n        accum: T, \n        current: Domino, \n        index?: number, \n        array?: Domino[]) =&gt; T, initialValue: T): T {\n            return this.bones.reduce(callbackfn, initialValue);\n}\n```\n\nIt works as is.  For a Hand object that inherits from BoneArray `this.score = this.reduce&lt;number&gt;((accum, domino) =&gt; accum + domino.score, 0);` works fine, I get the appropriate scores for the dominoes in my hand.  But I can't figure out how to make `initialValue` an optional parameter.  I've tried `initialValue?: T` and I've tried `initialValue: T | undefined` and I've tried both together, `initialValue?: T | undefined` and none of them work.  I keep getting an error saying there's no matching overload for initialValue to be undefined.  I *can* make the value optional with `initialValue?: T | any` but I feel like `any` is a gross bandaid fix, I have a bit of an aversion to `any`.\n\nHow do I make `initialValue` an optional parameter, as it is in the regular JavaScript `Array.prototype.reduce`?", "author_fullname": "t2_vpztq7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Typescript keeps being unhappy with optional parameter", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i4zp5v", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596775045.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been working on a domino game in React/Typescript that is based on Mexican Train.  I have a class called &lt;code&gt;BoneArray&lt;/code&gt; that is an abstract class for any array of dominos (bones as they&amp;#39;re called in the game).  This is a class that any array of dominos (the player hand, the bone pile, etc), might inherit from.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m having some trouble with a generic method for reduce.  The &lt;code&gt;bones&lt;/code&gt; property is protected, because I want to limit what users of this class can do with it, but I&amp;#39;m also trying to write wrappers around some of the JavaScript array methods so they can remain available.&lt;/p&gt;\n\n&lt;p&gt;The trouble I&amp;#39;m having with reduce is with the optional &lt;code&gt;initialValue&lt;/code&gt; parameter.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s the code:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\npublic reduce&amp;lt;T&amp;gt;(\n    callbackfn: (\n        accum: T, \n        current: Domino, \n        index?: number, \n        array?: Domino[]) =&amp;gt; T, initialValue: T): T {\n            return this.bones.reduce(callbackfn, initialValue);\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;It works as is.  For a Hand object that inherits from BoneArray &lt;code&gt;this.score = this.reduce&amp;lt;number&amp;gt;((accum, domino) =&amp;gt; accum + domino.score, 0);&lt;/code&gt; works fine, I get the appropriate scores for the dominoes in my hand.  But I can&amp;#39;t figure out how to make &lt;code&gt;initialValue&lt;/code&gt; an optional parameter.  I&amp;#39;ve tried &lt;code&gt;initialValue?: T&lt;/code&gt; and I&amp;#39;ve tried &lt;code&gt;initialValue: T | undefined&lt;/code&gt; and I&amp;#39;ve tried both together, &lt;code&gt;initialValue?: T | undefined&lt;/code&gt; and none of them work.  I keep getting an error saying there&amp;#39;s no matching overload for initialValue to be undefined.  I &lt;em&gt;can&lt;/em&gt; make the value optional with &lt;code&gt;initialValue?: T | any&lt;/code&gt; but I feel like &lt;code&gt;any&lt;/code&gt; is a gross bandaid fix, I have a bit of an aversion to &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;How do I make &lt;code&gt;initialValue&lt;/code&gt; an optional parameter, as it is in the regular JavaScript &lt;code&gt;Array.prototype.reduce&lt;/code&gt;?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i4zp5v", "is_robot_indexable": true, "report_reasons": null, "author": "jkuhl_prog", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i4zp5v/typescript_keeps_being_unhappy_with_optional/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i4zp5v/typescript_keeps_being_unhappy_with_optional/", "subreddit_subscribers": 45727, "created_utc": 1596746245.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "So I'm using yarn workspaces to split a project up into \"micro packages\" for better code separation. This is a backend node project. I've got your standard setup of a `packages/` folder which also includes a `packages/app` which is the entry point to run\n\n    packages/\n        app/\n        module-1/\n        module-2/\n\nRunning `yarn run build` correctly builds each module so I can import it, and running `yarn run dev` runs `ts-node-dev src/index.ts` in the app package, all that is gravy\n\nThe part that I'm stumbling on is during development; when using `yarn run dev`, changes to the `module-1` package don't trigger a restart. If I want to work on module-1, I have to use `yarn workspace @group/module-1 run build:watch` alongside the dev script\n\nIs there a way to set it up so that running my dev script can start a watch on all the separate packages?", "author_fullname": "t2_5byem", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Watching and compiling packages in a workspace monorepo with typescript?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i4xe5e", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.76, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596767796.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I&amp;#39;m using yarn workspaces to split a project up into &amp;quot;micro packages&amp;quot; for better code separation. This is a backend node project. I&amp;#39;ve got your standard setup of a &lt;code&gt;packages/&lt;/code&gt; folder which also includes a &lt;code&gt;packages/app&lt;/code&gt; which is the entry point to run&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;packages/\n    app/\n    module-1/\n    module-2/\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Running &lt;code&gt;yarn run build&lt;/code&gt; correctly builds each module so I can import it, and running &lt;code&gt;yarn run dev&lt;/code&gt; runs &lt;code&gt;ts-node-dev src/index.ts&lt;/code&gt; in the app package, all that is gravy&lt;/p&gt;\n\n&lt;p&gt;The part that I&amp;#39;m stumbling on is during development; when using &lt;code&gt;yarn run dev&lt;/code&gt;, changes to the &lt;code&gt;module-1&lt;/code&gt; package don&amp;#39;t trigger a restart. If I want to work on module-1, I have to use &lt;code&gt;yarn workspace @group/module-1 run build:watch&lt;/code&gt; alongside the dev script&lt;/p&gt;\n\n&lt;p&gt;Is there a way to set it up so that running my dev script can start a watch on all the separate packages?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i4xe5e", "is_robot_indexable": true, "report_reasons": null, "author": "iams3b", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i4xe5e/watching_and_compiling_packages_in_a_workspace/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/i4xe5e/watching_and_compiling_packages_in_a_workspace/", "subreddit_subscribers": 45727, "created_utc": 1596738996.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_15fanwso", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Decouple TypeScript code with Event Driven architectures. I made a fun nerdy way to do this using IOC and DI. Let me know what you guys think. Is this useful? Star and share if you like!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_i4tkwm", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.72, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/4KLYfiB7X2JG-JMVGQsC-EEDYPnhmdClcnRvSllwGrU.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1596755620.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/bobbylite/telephone-ts", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/wiNYR1bE0oHaCu8FaAGLlSMGSj911LS2kuzsOSJew90.jpg?auto=webp&amp;s=f3b130fa68fbc3ae7860672d8f3a72dae7c434b6", "width": 398, "height": 398}, "resolutions": [{"url": "https://external-preview.redd.it/wiNYR1bE0oHaCu8FaAGLlSMGSj911LS2kuzsOSJew90.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=19c60b55fbfba531f666f85ecc99902690919c89", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/wiNYR1bE0oHaCu8FaAGLlSMGSj911LS2kuzsOSJew90.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=0039da7b5fcbd60d37929eda7dc9f32f8967b85c", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/wiNYR1bE0oHaCu8FaAGLlSMGSj911LS2kuzsOSJew90.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=67bcbea5108293f1ed51e224367507e041ccd44f", "width": 320, "height": 320}], "variants": {}, "id": "JwPBgCm74WV81qDKi-MrObdvu3Iu_MyriG0qfIj4G5I"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i4tkwm", "is_robot_indexable": true, "report_reasons": null, "author": "bobbielite", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i4tkwm/decouple_typescript_code_with_event_driven/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/bobbylite/telephone-ts", "subreddit_subscribers": 45727, "created_utc": 1596726820.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_i4tkwm", "before": null}}