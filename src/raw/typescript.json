{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - April", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_fsojx3", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 32, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 32, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1585728331.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fsojx3", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/fsojx3/whos_hiring_typescript_developers_april/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/fsojx3/whos_hiring_typescript_developers_april/", "subreddit_subscribers": 37841, "created_utc": 1585699531.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_1mb50", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A generic middleware pattern in Typescript", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g1wzl6", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 34, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 34, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587002021.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "evertpot.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g1wzl6", "is_robot_indexable": true, "report_reasons": null, "author": "evert", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g1wzl6/a_generic_middleware_pattern_in_typescript/", "parent_whitelist_status": null, "stickied": false, "url": "https://evertpot.com/generic-middleware/", "subreddit_subscribers": 37841, "created_utc": 1586973221.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I got annoyed that I kept forgetting to compile my TS before pushing. So I made a GitHub action to compile it for me and make another commit if I ever forget to compile it. I'm posting a link to the action here if you guys ever need that failsafe in the background for anything.\n\nhttps://github.com/marketplace/actions/typescript-tsc-build-push", "author_fullname": "t2_e1dny", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GitHub Action: Typescript compile failsafe", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g26o6y", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1587034360.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I got annoyed that I kept forgetting to compile my TS before pushing. So I made a GitHub action to compile it for me and make another commit if I ever forget to compile it. I&amp;#39;m posting a link to the action here if you guys ever need that failsafe in the background for anything.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/marketplace/actions/typescript-tsc-build-push\"&gt;https://github.com/marketplace/actions/typescript-tsc-build-push&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/toylxCQWtWoTD9RLPDQ5b5g8dCMNfDzGxvraJ-biyZA.jpg?auto=webp&amp;s=dbfc757c336204f3d846e8a4b4ed4d26b00308b8", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/toylxCQWtWoTD9RLPDQ5b5g8dCMNfDzGxvraJ-biyZA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=fa0c68a19c9278636ebfe97bbdadf85e21c22ea9", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/toylxCQWtWoTD9RLPDQ5b5g8dCMNfDzGxvraJ-biyZA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1ce3a53668c1b67a1ffa4f824bf0bf04e81c2477", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/toylxCQWtWoTD9RLPDQ5b5g8dCMNfDzGxvraJ-biyZA.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3dfab501095726711364f54dc9ed864f0e3daf3c", "width": 320, "height": 320}], "variants": {}, "id": "kI73uyMZaeuwYr80FQzDDusY9jZmtV3_KZ_iBH9uDTc"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g26o6y", "is_robot_indexable": true, "report_reasons": null, "author": "FuLagann", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g26o6y/github_action_typescript_compile_failsafe/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g26o6y/github_action_typescript_compile_failsafe/", "subreddit_subscribers": 37841, "created_utc": 1587005560.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "is there a way to dynamically generate a const assertion in typescript ?\n\nI know you can create a `readonlyArray` assertion based on a staticly typed array, eg.\n\n     const staticTyped = [1, 2, 3] as const // readonly [1, 2, 3]\n     type TypeStatic = typeof staticTyped[number] // 1 | 2 | 3\n    \n\nNow that works as expected and elegantly. However, I need to create a large readonly array that's generated dynamically.\n\n    const generateNumRange = (from: number, to: number): number[] =&gt; {\n      const arr = []\n      for (let i = from; i &lt;= to; i++) {\n         arr.push(i)\n      }\n      return arr\n    }\n    \n    const dynamicTyped = [...generateNumRange(0, 255)] as const // readonly number[]\n    type TypeDynamic = typeof dynamicTyped[number] // number (oof)\n\nNow I do understand where the issue lies, however I can't think of a way, that would allow me to return the `dyanmicTyped` as `[0, 1, 2, ..., 255]` rather than `number[]`.\n\nIs there any way to do this / perhaps even more elegant solution to the problem altogether?", "author_fullname": "t2_880ec", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is there a way to convert dynamic array to static type assertion?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g1txjl", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586992769.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;is there a way to dynamically generate a const assertion in typescript ?&lt;/p&gt;\n\n&lt;p&gt;I know you can create a &lt;code&gt;readonlyArray&lt;/code&gt; assertion based on a staticly typed array, eg.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; const staticTyped = [1, 2, 3] as const // readonly [1, 2, 3]\n type TypeStatic = typeof staticTyped[number] // 1 | 2 | 3\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now that works as expected and elegantly. However, I need to create a large readonly array that&amp;#39;s generated dynamically.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const generateNumRange = (from: number, to: number): number[] =&amp;gt; {\n  const arr = []\n  for (let i = from; i &amp;lt;= to; i++) {\n     arr.push(i)\n  }\n  return arr\n}\n\nconst dynamicTyped = [...generateNumRange(0, 255)] as const // readonly number[]\ntype TypeDynamic = typeof dynamicTyped[number] // number (oof)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Now I do understand where the issue lies, however I can&amp;#39;t think of a way, that would allow me to return the &lt;code&gt;dyanmicTyped&lt;/code&gt; as &lt;code&gt;[0, 1, 2, ..., 255]&lt;/code&gt; rather than &lt;code&gt;number[]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Is there any way to do this / perhaps even more elegant solution to the problem altogether?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g1txjl", "is_robot_indexable": true, "report_reasons": null, "author": "Rawrplus", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g1txjl/is_there_a_way_to_convert_dynamic_array_to_static/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g1txjl/is_there_a_way_to_convert_dynamic_array_to_static/", "subreddit_subscribers": 37841, "created_utc": 1586963969.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_kgt2q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Intro to Game development with Typescript and PixieJS", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 132, "hide_score": false, "name": "t3_g1j93n", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 48, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 48, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/OwkNTlyxMRYFtxmsRWpfzyZ_hzuCzLNlNbHXL-QZIOw.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1586946423.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "nosleepjavascript.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/iqrfIVgSz70FQ7yulVNVpBl-x1SICP2xflMpS1Ebnb4.jpg?auto=webp&amp;s=1a87b3d6c83b5d2cf0251265e56f8f32bbb07382", "width": 800, "height": 758}, "resolutions": [{"url": "https://external-preview.redd.it/iqrfIVgSz70FQ7yulVNVpBl-x1SICP2xflMpS1Ebnb4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=73fe2ab7cece436335164aa9e6fa8d634a6a28a5", "width": 108, "height": 102}, {"url": "https://external-preview.redd.it/iqrfIVgSz70FQ7yulVNVpBl-x1SICP2xflMpS1Ebnb4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=9f2ce99856fdd2d4f996811f2cbe4d17e6c63211", "width": 216, "height": 204}, {"url": "https://external-preview.redd.it/iqrfIVgSz70FQ7yulVNVpBl-x1SICP2xflMpS1Ebnb4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7eab272c7dc54652fe3b2ce327995c719334ed63", "width": 320, "height": 303}, {"url": "https://external-preview.redd.it/iqrfIVgSz70FQ7yulVNVpBl-x1SICP2xflMpS1Ebnb4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=91d2f3ce03ba44b77b6d5c1200eb4f2724bfa542", "width": 640, "height": 606}], "variants": {}, "id": "2jlPg752sUq4Xmqoa0YYw5MeT2ZxMfrmyu7bv9WlucA"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g1j93n", "is_robot_indexable": true, "report_reasons": null, "author": "franleplant", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g1j93n/intro_to_game_development_with_typescript_and/", "parent_whitelist_status": null, "stickied": false, "url": "https://nosleepjavascript.com/intro-to-gamedev/", "subreddit_subscribers": 37841, "created_utc": 1586917623.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I have some strings that form a query in my project, and I can check those strings for validity at run-time when they're being used.\n\nIt would be nice to catch any errors in the query strings at compile time. Is there a way I can hook into the compiler so that something I write is run when I execute `tsc`? If I can emit errors along with line information that would be helpful.\n\nIf anyone has any resources on creating something like this that would be awesome.", "author_fullname": "t2_54rwj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hook into TSC to perform a check at compile time?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g1z4bj", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587008416.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have some strings that form a query in my project, and I can check those strings for validity at run-time when they&amp;#39;re being used.&lt;/p&gt;\n\n&lt;p&gt;It would be nice to catch any errors in the query strings at compile time. Is there a way I can hook into the compiler so that something I write is run when I execute &lt;code&gt;tsc&lt;/code&gt;? If I can emit errors along with line information that would be helpful.&lt;/p&gt;\n\n&lt;p&gt;If anyone has any resources on creating something like this that would be awesome.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g1z4bj", "is_robot_indexable": true, "report_reasons": null, "author": "ConfuciusBateman", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g1z4bj/hook_into_tsc_to_perform_a_check_at_compile_time/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g1z4bj/hook_into_tsc_to_perform_a_check_at_compile_time/", "subreddit_subscribers": 37841, "created_utc": 1586979616.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_5eo5n966", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Due to Covid, my company have asked me to learn Angular/Typescript. Any thoughts on where to start would be much appreciated.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g20u5m", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587013822.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g20u5m", "is_robot_indexable": true, "report_reasons": null, "author": "sleezypants", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g20u5m/due_to_covid_my_company_have_asked_me_to_learn/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g20u5m/due_to_covid_my_company_have_asked_me_to_learn/", "subreddit_subscribers": 37841, "created_utc": 1586985022.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi everyone, I'm playing a bit with `reflect-metatada` but something that's annoying me a lot is all the `any's` that are in the type definitions. For example:\n\n    const value = Reflect.getMetadata('key', Object)\n\nHow do we know `key` is a valid metadata key? And `value` would be any, what if it could be also `undefined`?\n\nI'm not saying that TypeScript should be automatically able to infer which `keys` and `values` are valid metadata in `Object` (even tho that'd be great) but at least, I think we should be able to do something like:\n\n    interface UserMetadata {\n      name: string;\n      age: number;\n    }\n    \n    const name = Reflect.getMetadata&lt;UserMetadata&gt;('name', Object);  // name is recognized as a valid key and is a string\n    const age = Reflect.getMetadata&lt;UserMetadata&gt;('age', Object);  // age is recognized as a valid key an is a number\n    const firstName = Reflect.getMetadata&lt;UserMetadata&gt;('firstName', Object);  // It complains because firstName is not a a valid key\n\nOr am I missing something and this is possible? So far, I tried to improve the default typings for `getMetadata` but even tho I got the `key` validation part right, it's still returning `any`.\n\n    function getMetadata&lt;T, K extends keyof T = keyof T&gt;(metadataKey: K, target: Object): T[K];\n\nWhat do you think?", "author_fullname": "t2_u4rdv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Opinions on strongly typed Reflect.getMetadata or better practices", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g1rlcf", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586984957.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone, I&amp;#39;m playing a bit with &lt;code&gt;reflect-metatada&lt;/code&gt; but something that&amp;#39;s annoying me a lot is all the &lt;code&gt;any&amp;#39;s&lt;/code&gt; that are in the type definitions. For example:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const value = Reflect.getMetadata(&amp;#39;key&amp;#39;, Object)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How do we know &lt;code&gt;key&lt;/code&gt; is a valid metadata key? And &lt;code&gt;value&lt;/code&gt; would be any, what if it could be also &lt;code&gt;undefined&lt;/code&gt;?&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m not saying that TypeScript should be automatically able to infer which &lt;code&gt;keys&lt;/code&gt; and &lt;code&gt;values&lt;/code&gt; are valid metadata in &lt;code&gt;Object&lt;/code&gt; (even tho that&amp;#39;d be great) but at least, I think we should be able to do something like:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface UserMetadata {\n  name: string;\n  age: number;\n}\n\nconst name = Reflect.getMetadata&amp;lt;UserMetadata&amp;gt;(&amp;#39;name&amp;#39;, Object);  // name is recognized as a valid key and is a string\nconst age = Reflect.getMetadata&amp;lt;UserMetadata&amp;gt;(&amp;#39;age&amp;#39;, Object);  // age is recognized as a valid key an is a number\nconst firstName = Reflect.getMetadata&amp;lt;UserMetadata&amp;gt;(&amp;#39;firstName&amp;#39;, Object);  // It complains because firstName is not a a valid key\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Or am I missing something and this is possible? So far, I tried to improve the default typings for &lt;code&gt;getMetadata&lt;/code&gt; but even tho I got the &lt;code&gt;key&lt;/code&gt; validation part right, it&amp;#39;s still returning &lt;code&gt;any&lt;/code&gt;.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function getMetadata&amp;lt;T, K extends keyof T = keyof T&amp;gt;(metadataKey: K, target: Object): T[K];\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What do you think?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g1rlcf", "is_robot_indexable": true, "report_reasons": null, "author": "larsbs", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g1rlcf/opinions_on_strongly_typed_reflectgetmetadata_or/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g1rlcf/opinions_on_strongly_typed_reflectgetmetadata_or/", "subreddit_subscribers": 37841, "created_utc": 1586956157.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_1u7m7n4i", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I created Cantara - A CLI tool to create (Serverless) Fullstack React apps with TypeScript", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 70, "hide_score": false, "name": "t3_g1p4m6", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/cfQO1xS64ulnyw66rG7i8ktbj77NNlK5YKQWHiOozAc.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1586973860.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "dev.to", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/e7k3jP2gASH7ncZHv52ZFO15pGMOecZ6RZvmsfCotJ4.jpg?auto=webp&amp;s=a73afaaf7a59859a977296ef54e0275466bf50b4", "width": 1000, "height": 500}, "resolutions": [{"url": "https://external-preview.redd.it/e7k3jP2gASH7ncZHv52ZFO15pGMOecZ6RZvmsfCotJ4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0966fa32cb35989eeae757355ae474ad0fb66d99", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/e7k3jP2gASH7ncZHv52ZFO15pGMOecZ6RZvmsfCotJ4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2ad836baa28cded67e1a17bb08944e65c22d692a", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/e7k3jP2gASH7ncZHv52ZFO15pGMOecZ6RZvmsfCotJ4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=0ecbf1d8ed498ad2666126500c9b02aa00c223c0", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/e7k3jP2gASH7ncZHv52ZFO15pGMOecZ6RZvmsfCotJ4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=cce54ded84b62d0ca76570be69d700c0d3e271ce", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/e7k3jP2gASH7ncZHv52ZFO15pGMOecZ6RZvmsfCotJ4.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=d3853236fa27f30cb7593bee69c49d165181f876", "width": 960, "height": 480}], "variants": {}, "id": "OJYe_1t8iatBPpTr41AoztP-z_WEG3To4-FDHUjJRlI"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g1p4m6", "is_robot_indexable": true, "report_reasons": null, "author": "fts_now", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g1p4m6/i_created_cantara_a_cli_tool_to_create_serverless/", "parent_whitelist_status": null, "stickied": false, "url": "https://dev.to/scriptify/cantara-a-cli-tool-to-create-serverless-fullstack-react-apps-in-minutes-23g", "subreddit_subscribers": 37841, "created_utc": 1586945060.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Having not felt like I've settled on an approach I like yet, I'm curious how other people organize their projects in regard to their type definitions.\n\nEdit: by 'global' I meant more like 'common' or 'shared' or whatever. Bad Ben, Bad!", "author_fullname": "t2_4m6huris", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "People who import their (global) types, where do you put them?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g165mn", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1586885178.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586902085.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Having not felt like I&amp;#39;ve settled on an approach I like yet, I&amp;#39;m curious how other people organize their projects in regard to their type definitions.&lt;/p&gt;\n\n&lt;p&gt;Edit: by &amp;#39;global&amp;#39; I meant more like &amp;#39;common&amp;#39; or &amp;#39;shared&amp;#39; or whatever. Bad Ben, Bad!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g165mn", "is_robot_indexable": true, "report_reasons": null, "author": "WhyNotBen_com", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g165mn/people_who_import_their_global_types_where_do_you/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g165mn/people_who_import_their_global_types_where_do_you/", "subreddit_subscribers": 37841, "created_utc": 1586873285.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I recently wanted to make sure that an array of strings contained all the strings of a string union.\n\nI found a simple way, but when attempting to generalize the pattern, I came across some behaviour I cannot explain. Perhaps someone has an idea? (disclaimer: I may be missing something obvious)\n\n&amp;#x200B;\n\n    type UnionEquality&lt;A, B&gt; = A extends B ? (B extends A ? true : never) : never;\n    type Foo = UnionEquality&lt;\"foo\" | \"bar\", \"foo\"&gt;; // true\n    type Foo2 = \"foo\" extends \"foo\" | \"bar\" ? (\"foo\" | \"bar\" extends \"foo\" ? true : never) : never; // never\n\nI'd expect \\`Foo\\` and \\`Foo2\\` to evaluate to the same type (`never`), since one is just an expansion of the other.", "author_fullname": "t2_9ixfe9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Conditional types change behaviour if under type alias", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_g14n1c", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1586867649.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1586896159.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I recently wanted to make sure that an array of strings contained all the strings of a string union.&lt;/p&gt;\n\n&lt;p&gt;I found a simple way, but when attempting to generalize the pattern, I came across some behaviour I cannot explain. Perhaps someone has an idea? (disclaimer: I may be missing something obvious)&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type UnionEquality&amp;lt;A, B&amp;gt; = A extends B ? (B extends A ? true : never) : never;\ntype Foo = UnionEquality&amp;lt;&amp;quot;foo&amp;quot; | &amp;quot;bar&amp;quot;, &amp;quot;foo&amp;quot;&amp;gt;; // true\ntype Foo2 = &amp;quot;foo&amp;quot; extends &amp;quot;foo&amp;quot; | &amp;quot;bar&amp;quot; ? (&amp;quot;foo&amp;quot; | &amp;quot;bar&amp;quot; extends &amp;quot;foo&amp;quot; ? true : never) : never; // never\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;d expect `Foo` and `Foo2` to evaluate to the same type (&lt;code&gt;never&lt;/code&gt;), since one is just an expansion of the other.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g14n1c", "is_robot_indexable": true, "report_reasons": null, "author": "adamschoenemann", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/g14n1c/conditional_types_change_behaviour_if_under_type/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/g14n1c/conditional_types_change_behaviour_if_under_type/", "subreddit_subscribers": 37841, "created_utc": 1586867359.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_g14n1c", "before": null}}