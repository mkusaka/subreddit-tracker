{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "So I used the Shopify Script Generator to generate a script that discounts Shipping Rates by a number or percentage. However I want to adapt this code so I can just hardcode the price rather than discount it, so for example I can explicitly set it to \u00a35 for arguments sake, I'm more of a Python dev so I'm having alot of trouble adapting! Code below  \n\n\n    class Campaign\n      def initialize(condition, *qualifiers)\n        @condition = (condition.to_s + '?').to_sym\n        @qualifiers = PostCartAmountQualifier ? [] : [] rescue qualifiers.compact\n        @line_item_selector = qualifiers.last unless @line_item_selector\n        qualifiers.compact.each do |qualifier|\n          is_multi_select = qualifier.instance_variable_get(:@conditions).is_a?(Array)\n          if is_multi_select\n            qualifier.instance_variable_get(:@conditions).each do |nested_q|\n              @post_amount_qualifier = nested_q if nested_q.is_a?(PostCartAmountQualifier)\n              @qualifiers &lt;&lt; qualifier\n            end\n          else\n            @post_amount_qualifier = qualifier if qualifier.is_a?(PostCartAmountQualifier)\n            @qualifiers &lt;&lt; qualifier\n          end\n        end if @qualifiers.empty?\n      end\n      def qualifies?(cart)\n        return true if @qualifiers.empty?\n        @unmodified_line_items = cart.line_items.map do |item|\n          new_item = item.dup\n          new_item.instance_variables.each do |var|\n            val = item.instance_variable_get(var)\n            new_item.instance_variable_set(var, val.dup) if val.respond_to?(:dup)\n          end\n          new_item\n        end if @post_amount_qualifier\n        @qualifiers.send(@condition) do |qualifier|\n          is_selector = false\n          if qualifier.is_a?(Selector) || qualifier.instance_variable_get(:@conditions).any? { |q| q.is_a?(Selector) }\n            is_selector = true\n          end rescue nil\n          if is_selector\n            raise \"Missing line item match type\" if @li_match_type.nil?\n            cart.line_items.send(@li_match_type) { |item| qualifier.match?(item) }\n          else\n            qualifier.match?(cart, @line_item_selector)\n          end\n        end\n      end\n      def run_with_hooks(cart)\n        before_run(cart) if respond_to?(:before_run)\n        run(cart)\n        after_run(cart)\n      end\n      def after_run(cart)\n        @discount.apply_final_discount if @discount &amp;&amp; @discount.respond_to?(:apply_final_discount)\n        revert_changes(cart) unless @post_amount_qualifier.nil? || @post_amount_qualifier.match?(cart)\n      end\n      def revert_changes(cart)\n        cart.instance_variable_set(:@line_items, @unmodified_line_items)\n      end\n    end\n    class ShippingDiscount &lt; Campaign\n      def initialize(condition, customer_qualifier, cart_qualifier, li_match_type, line_item_qualifier, rate_selector, discount)\n        super(condition, customer_qualifier, cart_qualifier, line_item_qualifier)\n        @li_match_type = (li_match_type.to_s + '?').to_sym\n        @rate_selector = rate_selector\n        @discount = discount\n      end\n      def run(rates, cart)\n        raise \"Campaign requires a discount\" unless @discount\n        return unless qualifies?(cart)\n        rates.each do |rate|\n          next unless @rate_selector.nil? || @rate_selector.match?(rate)\n          @discount.apply(rate)\n        end\n      end\n    end\n    class Selector\n      def partial_match(match_type, item_info, possible_matches)\n        match_type = (match_type.to_s + '?').to_sym\n        if item_info.kind_of?(Array)\n          possible_matches.any? do |possibility|\n            item_info.any? do |search|\n              search.send(match_type, possibility)\n            end\n          end\n        else\n          possible_matches.any? do |possibility|\n            item_info.send(match_type, possibility)\n          end\n        end\n      end\n    end\n    class RateNameSelector &lt; Selector\n      def initialize(match_type, match_condition, names)\n        @match_condition = match_condition\n        @invert = match_type == :does_not\n        @names = names.map(&amp;:downcase)\n      end\n      def match?(shipping_rate)\n        name = shipping_rate.name.downcase\n        case @match_condition\n          when :match\n            return @invert ^ @names.include?(name)\n          else\n            return @invert ^ partial_match(@match_condition, name, @names)\n        end\n      end\n    end\n    class FixedDiscount\n      def initialize(amount, message)\n        @amount = Money.new(cents: amount * 100)\n        @message = message\n      end\n      def apply(rate)\n        discount_amount = rate.price - @amount &lt; Money.zero ? rate.price : @amount\n        rate.apply_discount(discount_amount, { message: @message })\n      end\n    end\n    CAMPAIGNS = [\n      ShippingDiscount.new(\n        :any,\n        nil,\n        nil,\n        :any,\n        nil,\n        RateNameSelector.new(\n          :does,\n          :match,\n          [\"Saturday Delivery (order by 11pm Fri)\"]\n        ),\n        FixedDiscount.new(\n          3,\n          \"\"\n        )\n      ),\n      ShippingDiscount.new(\n        :any,\n        nil,\n        nil,\n        :any,\n        nil,\n        RateNameSelector.new(\n          :does,\n          :match,\n          [\"Saturday Delivery (order by 11pm Fri)\"]\n        ),\n        FixedDiscount.new(\n          2,\n          \"\"\n        )\n      )\n    ].freeze\n    CAMPAIGNS.each do |campaign|\n      campaign.run(Input.shipping_rates, Input.cart)\n    end\n    \n    Output.shipping_rates = Input.shipping_rates", "author_fullname": "t2_ak3o2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hard Code Price - Shopify Script", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_hmu1mh", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594155427.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I used the Shopify Script Generator to generate a script that discounts Shipping Rates by a number or percentage. However I want to adapt this code so I can just hardcode the price rather than discount it, so for example I can explicitly set it to \u00a35 for arguments sake, I&amp;#39;m more of a Python dev so I&amp;#39;m having alot of trouble adapting! Code below  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Campaign\n  def initialize(condition, *qualifiers)\n    @condition = (condition.to_s + &amp;#39;?&amp;#39;).to_sym\n    @qualifiers = PostCartAmountQualifier ? [] : [] rescue qualifiers.compact\n    @line_item_selector = qualifiers.last unless @line_item_selector\n    qualifiers.compact.each do |qualifier|\n      is_multi_select = qualifier.instance_variable_get(:@conditions).is_a?(Array)\n      if is_multi_select\n        qualifier.instance_variable_get(:@conditions).each do |nested_q|\n          @post_amount_qualifier = nested_q if nested_q.is_a?(PostCartAmountQualifier)\n          @qualifiers &amp;lt;&amp;lt; qualifier\n        end\n      else\n        @post_amount_qualifier = qualifier if qualifier.is_a?(PostCartAmountQualifier)\n        @qualifiers &amp;lt;&amp;lt; qualifier\n      end\n    end if @qualifiers.empty?\n  end\n  def qualifies?(cart)\n    return true if @qualifiers.empty?\n    @unmodified_line_items = cart.line_items.map do |item|\n      new_item = item.dup\n      new_item.instance_variables.each do |var|\n        val = item.instance_variable_get(var)\n        new_item.instance_variable_set(var, val.dup) if val.respond_to?(:dup)\n      end\n      new_item\n    end if @post_amount_qualifier\n    @qualifiers.send(@condition) do |qualifier|\n      is_selector = false\n      if qualifier.is_a?(Selector) || qualifier.instance_variable_get(:@conditions).any? { |q| q.is_a?(Selector) }\n        is_selector = true\n      end rescue nil\n      if is_selector\n        raise &amp;quot;Missing line item match type&amp;quot; if @li_match_type.nil?\n        cart.line_items.send(@li_match_type) { |item| qualifier.match?(item) }\n      else\n        qualifier.match?(cart, @line_item_selector)\n      end\n    end\n  end\n  def run_with_hooks(cart)\n    before_run(cart) if respond_to?(:before_run)\n    run(cart)\n    after_run(cart)\n  end\n  def after_run(cart)\n    @discount.apply_final_discount if @discount &amp;amp;&amp;amp; @discount.respond_to?(:apply_final_discount)\n    revert_changes(cart) unless @post_amount_qualifier.nil? || @post_amount_qualifier.match?(cart)\n  end\n  def revert_changes(cart)\n    cart.instance_variable_set(:@line_items, @unmodified_line_items)\n  end\nend\nclass ShippingDiscount &amp;lt; Campaign\n  def initialize(condition, customer_qualifier, cart_qualifier, li_match_type, line_item_qualifier, rate_selector, discount)\n    super(condition, customer_qualifier, cart_qualifier, line_item_qualifier)\n    @li_match_type = (li_match_type.to_s + &amp;#39;?&amp;#39;).to_sym\n    @rate_selector = rate_selector\n    @discount = discount\n  end\n  def run(rates, cart)\n    raise &amp;quot;Campaign requires a discount&amp;quot; unless @discount\n    return unless qualifies?(cart)\n    rates.each do |rate|\n      next unless @rate_selector.nil? || @rate_selector.match?(rate)\n      @discount.apply(rate)\n    end\n  end\nend\nclass Selector\n  def partial_match(match_type, item_info, possible_matches)\n    match_type = (match_type.to_s + &amp;#39;?&amp;#39;).to_sym\n    if item_info.kind_of?(Array)\n      possible_matches.any? do |possibility|\n        item_info.any? do |search|\n          search.send(match_type, possibility)\n        end\n      end\n    else\n      possible_matches.any? do |possibility|\n        item_info.send(match_type, possibility)\n      end\n    end\n  end\nend\nclass RateNameSelector &amp;lt; Selector\n  def initialize(match_type, match_condition, names)\n    @match_condition = match_condition\n    @invert = match_type == :does_not\n    @names = names.map(&amp;amp;:downcase)\n  end\n  def match?(shipping_rate)\n    name = shipping_rate.name.downcase\n    case @match_condition\n      when :match\n        return @invert ^ @names.include?(name)\n      else\n        return @invert ^ partial_match(@match_condition, name, @names)\n    end\n  end\nend\nclass FixedDiscount\n  def initialize(amount, message)\n    @amount = Money.new(cents: amount * 100)\n    @message = message\n  end\n  def apply(rate)\n    discount_amount = rate.price - @amount &amp;lt; Money.zero ? rate.price : @amount\n    rate.apply_discount(discount_amount, { message: @message })\n  end\nend\nCAMPAIGNS = [\n  ShippingDiscount.new(\n    :any,\n    nil,\n    nil,\n    :any,\n    nil,\n    RateNameSelector.new(\n      :does,\n      :match,\n      [&amp;quot;Saturday Delivery (order by 11pm Fri)&amp;quot;]\n    ),\n    FixedDiscount.new(\n      3,\n      &amp;quot;&amp;quot;\n    )\n  ),\n  ShippingDiscount.new(\n    :any,\n    nil,\n    nil,\n    :any,\n    nil,\n    RateNameSelector.new(\n      :does,\n      :match,\n      [&amp;quot;Saturday Delivery (order by 11pm Fri)&amp;quot;]\n    ),\n    FixedDiscount.new(\n      2,\n      &amp;quot;&amp;quot;\n    )\n  )\n].freeze\nCAMPAIGNS.each do |campaign|\n  campaign.run(Input.shipping_rates, Input.cart)\nend\n\nOutput.shipping_rates = Input.shipping_rates\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmu1mh", "is_robot_indexable": true, "report_reasons": null, "author": "HutchLAD", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmu1mh/hard_code_price_shopify_script/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/hmu1mh/hard_code_price_shopify_script/", "subreddit_subscribers": 66237, "created_utc": 1594126627.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_70372", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why validation matchers are the only Shoulda matchers I use", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_hmmdza", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": "", "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/MDqFdEvJFGzucQbDsolqq8rFCH2m-qAFEeKp5q_AWYo.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1594119387.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "codewithjason.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.codewithjason.com/validation-matchers-shoulda-matchers-use/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/n0Gj1pbe3MdIRXolM24PPTWLAr6pXTa4II6qD5yQv48.jpg?auto=webp&amp;s=8434e4704dc5ddabc9f51f764f7984f6fa8a7317", "width": 754, "height": 809}, "resolutions": [{"url": "https://external-preview.redd.it/n0Gj1pbe3MdIRXolM24PPTWLAr6pXTa4II6qD5yQv48.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c1378bb49c5ad7f3d4aa627af09f5bfc3a693c5b", "width": 108, "height": 115}, {"url": "https://external-preview.redd.it/n0Gj1pbe3MdIRXolM24PPTWLAr6pXTa4II6qD5yQv48.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=71e3a6754179065d77d8cf8be8553407fe9012ea", "width": 216, "height": 231}, {"url": "https://external-preview.redd.it/n0Gj1pbe3MdIRXolM24PPTWLAr6pXTa4II6qD5yQv48.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=39871fab5bbdea8a738291fcf4cfd56cb1c6d22e", "width": 320, "height": 343}, {"url": "https://external-preview.redd.it/n0Gj1pbe3MdIRXolM24PPTWLAr6pXTa4II6qD5yQv48.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=4eca2f6e77ea7e05a7e7cba093ed5ed70944ba60", "width": 640, "height": 686}], "variants": {}, "id": "3drNhwiSGExmramCDw1VKG6tY70Ozdnn7KggVG-2yKM"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "Rails with Jason", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmmdza", "is_robot_indexable": true, "report_reasons": null, "author": "jasonswett", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/ruby/comments/hmmdza/why_validation_matchers_are_the_only_shoulda/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.codewithjason.com/validation-matchers-shoulda-matchers-use/", "subreddit_subscribers": 66237, "created_utc": 1594090587.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Hey,\n\nI\u2019m looking for suggestions on a really good advanced Ruby course. It can start with the basics, but it should also ramp up and get into the weeds.\n\nTo better \u201cexplain\u201d what I\u2019m looking for, I once followed a course for JavaScript that went into the source code for V8 several times to explain concepts. It explained It also outlined how some of the major JS frameworks (at the time) where built.\n\nAt the end of this, I want to understand all the major mechanics surrounding the ruby language.\n\nThank you for your suggestions!\n\n\u2014\u2014\n\nEdit:\n\nI\u2019m currently reading Why\u2019s guide to Ruby. And I\u2019m learning a bunch. I\u2019ve also considered just reading a bunch of docs etc. But sometimes something in video format is easier to digest. Or a more carefully written (series of) articles.", "author_fullname": "t2_123zv7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best deep-dive Ruby course?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hmg444", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 19, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Question", "can_mod_post": false, "score": 19, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1594068757.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594097065.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey,&lt;/p&gt;\n\n&lt;p&gt;I\u2019m looking for suggestions on a really good advanced Ruby course. It can start with the basics, but it should also ramp up and get into the weeds.&lt;/p&gt;\n\n&lt;p&gt;To better \u201cexplain\u201d what I\u2019m looking for, I once followed a course for JavaScript that went into the source code for V8 several times to explain concepts. It explained It also outlined how some of the major JS frameworks (at the time) where built.&lt;/p&gt;\n\n&lt;p&gt;At the end of this, I want to understand all the major mechanics surrounding the ruby language.&lt;/p&gt;\n\n&lt;p&gt;Thank you for your suggestions!&lt;/p&gt;\n\n&lt;p&gt;\u2014\u2014&lt;/p&gt;\n\n&lt;p&gt;Edit:&lt;/p&gt;\n\n&lt;p&gt;I\u2019m currently reading Why\u2019s guide to Ruby. And I\u2019m learning a bunch. I\u2019ve also considered just reading a bunch of docs etc. But sometimes something in video format is easier to digest. Or a more carefully written (series of) articles.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "d3392e70-873c-11e9-af37-0eea3fce36a6", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmg444", "is_robot_indexable": true, "report_reasons": null, "author": "jessevdp", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmg444/best_deepdive_ruby_course/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/hmg444/best_deepdive_ruby_course/", "subreddit_subscribers": 66237, "created_utc": 1594068265.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_6wd3l", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "All About Ruby", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hmgjql", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1594098448.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/@jinglis12/all-about-ruby-fc83a0a18bd3", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmgjql", "is_robot_indexable": true, "report_reasons": null, "author": "lackoftactics", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmgjql/all_about_ruby/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@jinglis12/all-about-ruby-fc83a0a18bd3", "subreddit_subscribers": 66237, "created_utc": 1594069648.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_5wjhomqi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Continuous Integration Testing: Basics + What to Test", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": 105, "top_awarded_type": null, "hide_score": false, "name": "t3_hmb5qu", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/f-1Q896R1no?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Continuous Integration Testing: Basics + What to Test", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/f-1Q896R1no?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Semicolon&amp;Sons", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/f-1Q896R1no/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UC17mJJnvzAa_e9qQqLIfIeQ"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/f-1Q896R1no?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/hmb5qu", "height": 338}, "link_flair_text": "Screencast", "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/feMNnAoRyljOqOwov4aC82HHzc03SWTet6NBLLlslRk.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "rich:video", "content_categories": null, "is_self": false, "mod_note": null, "created": 1594082730.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=f-1Q896R1no", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/scrjHHPejZeSBfx8v8iN4uA92fzOCdqz5ktvAPKRjwE.jpg?auto=webp&amp;s=3c5470934940397b56012e738d4a81b7c40a62bb", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/scrjHHPejZeSBfx8v8iN4uA92fzOCdqz5ktvAPKRjwE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=2481ca13aba37ed46dc2ea37f761523aabd425a2", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/scrjHHPejZeSBfx8v8iN4uA92fzOCdqz5ktvAPKRjwE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a612cefcfbc2c46bd47c7f585ddf5b4ab4ad994b", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/scrjHHPejZeSBfx8v8iN4uA92fzOCdqz5ktvAPKRjwE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c58fdb02c0b764b72744e1b9705f05ff8b5028ff", "width": 320, "height": 240}], "variants": {}, "id": "TLZCVLZh7OfzRktk9SE1-Dh19FpfmKXWBRRCOkgdcZ8"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "dad5ecb8-873c-11e9-ad88-0e1f22813c3e", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmb5qu", "is_robot_indexable": true, "report_reasons": null, "author": "semicolonandsons", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmb5qu/continuous_integration_testing_basics_what_to_test/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=f-1Q896R1no", "subreddit_subscribers": 66237, "created_utc": 1594053930.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Continuous Integration Testing: Basics + What to Test", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/f-1Q896R1no?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Semicolon&amp;Sons", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/f-1Q896R1no/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UC17mJJnvzAa_e9qQqLIfIeQ"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_9saij", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Soft Delete with Discard", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": 88, "top_awarded_type": null, "hide_score": false, "name": "t3_hm6wju", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "public", "ups": 38, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Screencast", "can_mod_post": false, "score": 38, "approved_by": null, "author_premium": true, "thumbnail": "https://b.thumbs.redditmedia.com/VzPG-HiKsb2Kfc_AKRYakwO0Hq3htYtaUgcV6ujjTmc.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1594068028.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "driftingruby.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.driftingruby.com/episodes/soft-delete-with-discard?utm_medium=social&amp;utm_campaign=weekly_episode&amp;utm_source=reddit", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/gSzA8lguTD7qsS23BNIHg5zydm9KEeH3IMC3mKHfIgg.jpg?auto=webp&amp;s=7f30f1fc7b34a1dd32c93b666d744c1444c895c3", "width": 900, "height": 569}, "resolutions": [{"url": "https://external-preview.redd.it/gSzA8lguTD7qsS23BNIHg5zydm9KEeH3IMC3mKHfIgg.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6f4d4323906aebc7a3e72345bd2fea63929abeed", "width": 108, "height": 68}, {"url": "https://external-preview.redd.it/gSzA8lguTD7qsS23BNIHg5zydm9KEeH3IMC3mKHfIgg.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d45f6199dd71045426de191e05d4f4cf487b2527", "width": 216, "height": 136}, {"url": "https://external-preview.redd.it/gSzA8lguTD7qsS23BNIHg5zydm9KEeH3IMC3mKHfIgg.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=e08ad576e704acead7e02a21c542e270b305ecf5", "width": 320, "height": 202}, {"url": "https://external-preview.redd.it/gSzA8lguTD7qsS23BNIHg5zydm9KEeH3IMC3mKHfIgg.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=eeaee71ad70405b5aa4166afe7e45aba512ed2bf", "width": 640, "height": 404}], "variants": {}, "id": "UTHdrqhgffN5cfCGsQT6DrEDNbyeARTKtUO1tvtdFLU"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "dad5ecb8-873c-11e9-ad88-0e1f22813c3e", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hm6wju", "is_robot_indexable": true, "report_reasons": null, "author": "kobaltzz", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hm6wju/soft_delete_with_discard/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.driftingruby.com/episodes/soft-delete-with-discard?utm_medium=social&amp;utm_campaign=weekly_episode&amp;utm_source=reddit", "subreddit_subscribers": 66237, "created_utc": 1594039228.0, "num_crossposts": 2, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Sorry if this seems insignificant, but I've been looking for this old article for ages and I just can't seem to find it. It was a blog post about Ruby's culture/community on a blog that was otherwise mainly about sushi, folk music, and Discworld. I think it was British. The article was linked to quite a bit back in the day. I've been trying to Google it for ages but not luck.", "author_fullname": "t2_27m90nk5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Looking for an old Ruby blog post.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hmb4ut", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594082654.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Sorry if this seems insignificant, but I&amp;#39;ve been looking for this old article for ages and I just can&amp;#39;t seem to find it. It was a blog post about Ruby&amp;#39;s culture/community on a blog that was otherwise mainly about sushi, folk music, and Discworld. I think it was British. The article was linked to quite a bit back in the day. I&amp;#39;ve been trying to Google it for ages but not luck.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmb4ut", "is_robot_indexable": true, "report_reasons": null, "author": "silent_other", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmb4ut/looking_for_an_old_ruby_blog_post/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/hmb4ut/looking_for_an_old_ruby_blog_post/", "subreddit_subscribers": 66237, "created_utc": 1594053854.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Ruby is a nice language to type, but I'm unable to understand its use case.  \nC-C++ is used for performance  \nR-Python is used for data science and AI.  \nWhat is the use of Ruby?  \nIs Ruby an evolving language?", "author_fullname": "t2_6932y39m", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What is the use of Ruby and how its development is proceeding?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_hmt1he", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.17, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594151233.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Ruby is a nice language to type, but I&amp;#39;m unable to understand its use case.&lt;br/&gt;\nC-C++ is used for performance&lt;br/&gt;\nR-Python is used for data science and AI.&lt;br/&gt;\nWhat is the use of Ruby?&lt;br/&gt;\nIs Ruby an evolving language?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmt1he", "is_robot_indexable": true, "report_reasons": null, "author": "types2B", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmt1he/what_is_the_use_of_ruby_and_how_its_development/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/hmt1he/what_is_the_use_of_ruby_and_how_its_development/", "subreddit_subscribers": 66237, "created_utc": 1594122433.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_ibhx9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A 65 LOC Instagram scraper powered by Kimurai", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_hm5mh5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/8fNOoqlIC487HQWlgZb2RqFFkRNI3994G0pbSzEZ7e8.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1594062326.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/glaucocustodio/inspider", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/hcQuLQWY-JeI95Y0yhzntjS3wkmb-KseOadQ2nq_v5I.jpg?auto=webp&amp;s=a546b4d81198e98ee322bffdd2a69146e0bfa019", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/hcQuLQWY-JeI95Y0yhzntjS3wkmb-KseOadQ2nq_v5I.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=65fe052666b0848f882445d144c63b4599f7edf8", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/hcQuLQWY-JeI95Y0yhzntjS3wkmb-KseOadQ2nq_v5I.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=09e50d2724e6cd02cbc6092fbbfbd74dbf5b8084", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/hcQuLQWY-JeI95Y0yhzntjS3wkmb-KseOadQ2nq_v5I.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=794add58542ad328da9419a00e2850d43038f0c9", "width": 320, "height": 320}], "variants": {}, "id": "FkWpal9fpS5xcYaTK9ISjPW8GCeNy6NGKC4ea3qgLLI"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hm5mh5", "is_robot_indexable": true, "report_reasons": null, "author": "uafpl", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hm5mh5/a_65_loc_instagram_scraper_powered_by_kimurai/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/glaucocustodio/inspider", "subreddit_subscribers": 66237, "created_utc": 1594033526.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Source code is [here](https://github.com/DmitryTsepelev/rubocop-graphql).\n\nFor now, the gem can do following things:\n\n- makes sure fields and arguments have snake\u2013cased names;\n- suggests to add descriptions to entities;\n- forces grouping field definitions together/with their resolvers;\n- suggests using input types in complex mutations;\n- proposes replacing long resolver methods with resolver objects.", "author_fullname": "t2_21cqe56c", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "rubocop-graphql\u2014a rubocop plugin that enforces graphql-ruby best practices", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hm2mrz", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 31, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 31, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1594030655.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1594046634.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Source code is &lt;a href=\"https://github.com/DmitryTsepelev/rubocop-graphql\"&gt;here&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;For now, the gem can do following things:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;makes sure fields and arguments have snake\u2013cased names;&lt;/li&gt;\n&lt;li&gt;suggests to add descriptions to entities;&lt;/li&gt;\n&lt;li&gt;forces grouping field definitions together/with their resolvers;&lt;/li&gt;\n&lt;li&gt;suggests using input types in complex mutations;&lt;/li&gt;\n&lt;li&gt;proposes replacing long resolver methods with resolver objects.&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/LONwor6CmsWxclfXDY_Z7ZBVgeutpSy5wHtb-6rnm5g.jpg?auto=webp&amp;s=3ee20fe25df9ca7a6bbb3e9ad504d4de7973fc68", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/LONwor6CmsWxclfXDY_Z7ZBVgeutpSy5wHtb-6rnm5g.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=a41832da37d163a866e87d0021e8b94f04725434", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/LONwor6CmsWxclfXDY_Z7ZBVgeutpSy5wHtb-6rnm5g.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=f2e2972465dc011ea8364b6c705787405c26d805", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/LONwor6CmsWxclfXDY_Z7ZBVgeutpSy5wHtb-6rnm5g.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=729e161180f4d9d2ee39b995af4e27810eadb9a1", "width": 320, "height": 320}], "variants": {}, "id": "eqiEMZkB-PrTTOt7aWQsjIX2oyEvpSbWQmq1p9RtRKs"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hm2mrz", "is_robot_indexable": true, "report_reasons": null, "author": "DmitryTsepelev", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hm2mrz/rubocopgraphqla_rubocop_plugin_that_enforces/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/hm2mrz/rubocopgraphqla_rubocop_plugin_that_enforces/", "subreddit_subscribers": 66237, "created_utc": 1594017834.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_hm2mrz", "before": null}}