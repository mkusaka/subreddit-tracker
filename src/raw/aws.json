{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "aws", "selftext": "", "author_fullname": "t2_3jfxgxrh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Webscraper on steroids, using 2,000 Lambda invokes to scan 1,000,000 websites in under 7 minutes.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/aws", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "hide_score": false, "name": "t3_gd6xss", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 40, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "serverless", "can_mod_post": false, "score": 40, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "Python", "selftext": "I built this a while back, but over the long weekend went back to tweak the outputs. Manage to download the robots.txt  file from 1 Million websites in under 7 minutes (start to finish) --  with finish meaning the final 400+MB file is downloaded to the local machine.\n\nThe goal of the project,  is to be fast (nothing more!), and so far, this is the fastest I've  managed to get it to run. It spins up 2000 lambda invocations, but using  SQS to stagger the invocations over a short period. 100% written in python.\n\nThis isn't a serious project, just a fun weekend thing. Let me know your thoughts!!\n\n[https://github.com/keithrozario/potassium40](https://github.com/keithrozario/potassium40)", "author_fullname": "t2_3jfxgxrh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A serverless web scraper built on the lambda super-computer using Python.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "made-this", "downs": 0, "hide_score": false, "name": "t3_gcq18f", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "I Made This", "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588538867.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I built this a while back, but over the long weekend went back to tweak the outputs. Manage to download the robots.txt  file from 1 Million websites in under 7 minutes (start to finish) --  with finish meaning the final 400+MB file is downloaded to the local machine.&lt;/p&gt;\n\n&lt;p&gt;The goal of the project,  is to be fast (nothing more!), and so far, this is the fastest I&amp;#39;ve  managed to get it to run. It spins up 2000 lambda invocations, but using  SQS to stagger the invocations over a short period. 100% written in python.&lt;/p&gt;\n\n&lt;p&gt;This isn&amp;#39;t a serious project, just a fun weekend thing. Let me know your thoughts!!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/keithrozario/potassium40\"&gt;https://github.com/keithrozario/potassium40&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "d7dfae22-4113-11ea-b9fe-0e741fe75651", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gcq18f", "is_robot_indexable": true, "report_reasons": null, "author": "keithrozario", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/gcq18f/a_serverless_web_scraper_built_on_the_lambda/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/gcq18f/a_serverless_web_scraper_built_on_the_lambda/", "subreddit_subscribers": 564707, "created_utc": 1588510067.0, "num_crossposts": 2, "media": null, "is_video": false}], "created": 1588605557.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "ff0e4f90-fe51-11e8-995f-0e494176cf40", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh84", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "gd6xss", "is_robot_indexable": true, "stickied": false, "author": "keithrozario", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_gcq18f", "author_flair_text_color": null, "permalink": "/r/aws/comments/gd6xss/webscraper_on_steroids_using_2000_lambda_invokes/", "parent_whitelist_status": "all_ads", "report_reasons": null, "url": "/r/Python/comments/gcq18f/a_serverless_web_scraper_built_on_the_lambda/", "subreddit_subscribers": 120717, "created_utc": 1588576757.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "aws", "selftext": "So yes I know I messed up here. I was using AWS sometime last year to mess with linux VMs on higher end hardware than I have available, and messing with Plex on there.\n\nI stopped messing with it maybe around ~10 months ago due to other unrelated reasons. Before I switched it off I was having trouble encoding on t3 small and similar instances on plex, and was periodically switching them to e.g. the larger m5 machines.\n\nAnyway it looks (well this is what I guess) like I must have left an instance on a  much more powerful machine before the last time I stopped using it for ~10 months. At this time I also changed my email address to a custom domain, so any email notifications didn't get to me. They didn't bother sending any actual real life mail.\n\nI wanted to use AWS again today and signed in, only to find my account has been suspended with $3,700 worth of bills. These were accumulating at around $700/month. I don't know why they didn't suspend the account sooner, and let the debt reach $3,700 over several months,, but they did.\n\nI have spoke to support and submitted a request to have the bill amended/dropped, but am obviously worried it will not.\n\nMy question is, if they don't drop them, do they actually try to chase these debts, and at this value? Do they take people to court, or sell their debt to 3rd party companies?\n\nAlso do they file the unpaid bills on your credit report?", "author_fullname": "t2_65xuw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I unknowingly left EC2 instances running on an old account last year and accumulated $3,700 in charges. Does Amazon pursue/sell these debts? Do they file it against your credit report?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/aws", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "hide_score": false, "name": "t3_gcxbar", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.77, "author_flair_background_color": null, "subreddit_type": "public", "ups": 57, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "billing", "can_mod_post": false, "score": 57, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588565528.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.aws", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So yes I know I messed up here. I was using AWS sometime last year to mess with linux VMs on higher end hardware than I have available, and messing with Plex on there.&lt;/p&gt;\n\n&lt;p&gt;I stopped messing with it maybe around ~10 months ago due to other unrelated reasons. Before I switched it off I was having trouble encoding on t3 small and similar instances on plex, and was periodically switching them to e.g. the larger m5 machines.&lt;/p&gt;\n\n&lt;p&gt;Anyway it looks (well this is what I guess) like I must have left an instance on a  much more powerful machine before the last time I stopped using it for ~10 months. At this time I also changed my email address to a custom domain, so any email notifications didn&amp;#39;t get to me. They didn&amp;#39;t bother sending any actual real life mail.&lt;/p&gt;\n\n&lt;p&gt;I wanted to use AWS again today and signed in, only to find my account has been suspended with $3,700 worth of bills. These were accumulating at around $700/month. I don&amp;#39;t know why they didn&amp;#39;t suspend the account sooner, and let the debt reach $3,700 over several months,, but they did.&lt;/p&gt;\n\n&lt;p&gt;I have spoke to support and submitted a request to have the bill amended/dropped, but am obviously worried it will not.&lt;/p&gt;\n\n&lt;p&gt;My question is, if they don&amp;#39;t drop them, do they actually try to chase these debts, and at this value? Do they take people to court, or sell their debt to 3rd party companies?&lt;/p&gt;\n\n&lt;p&gt;Also do they file the unpaid bills on your credit report?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "b130294a-1811-11e9-a2ef-0e49548b5cda", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh84", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "gcxbar", "is_robot_indexable": true, "report_reasons": null, "author": "Lost4468", "discussion_type": null, "num_comments": 106, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/aws/comments/gcxbar/i_unknowingly_left_ec2_instances_running_on_an/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/aws/comments/gcxbar/i_unknowingly_left_ec2_instances_running_on_an/", "subreddit_subscribers": 120717, "created_utc": 1588536728.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "aws", "selftext": "In this article you can learn how to deploy your website and frontend applications on AWS using AWS S3, CloudFront and Route 53. We\u2019re going to be using S3 to store our source code and assets, CloudFront as a CDN to distribute our website and provide HTTPS support, and Route53 to create a custom DNS record that points to CloudFront distribution. Lets jump right through it:\n\n[https://medium.com/@khaledosman/deploying-a-web-app-on-aws-using-s3-cloudfront-45f77cd652c6](https://medium.com/@khaledosman/deploying-a-web-app-on-aws-using-s3-cloudfront-45f77cd652c6)", "author_fullname": "t2_3cl7e290", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to deploy web apps to AWS using S3 &amp; CloudFront", "link_flair_richtext": [], "subreddit_name_prefixed": "r/aws", "hidden": false, "pwls": 6, "link_flair_css_class": "article", "downs": 0, "hide_score": true, "name": "t3_gdbihm", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "article", "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588627346.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.aws", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In this article you can learn how to deploy your website and frontend applications on AWS using AWS S3, CloudFront and Route 53. We\u2019re going to be using S3 to store our source code and assets, CloudFront as a CDN to distribute our website and provide HTTPS support, and Route53 to create a custom DNS record that points to CloudFront distribution. Lets jump right through it:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://medium.com/@khaledosman/deploying-a-web-app-on-aws-using-s3-cloudfront-45f77cd652c6\"&gt;https://medium.com/@khaledosman/deploying-a-web-app-on-aws-using-s3-cloudfront-45f77cd652c6&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "85ab6b1a-b9e3-11e6-847a-0e8ffa087616", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh84", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "gdbihm", "is_robot_indexable": true, "report_reasons": null, "author": "EvoNext", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/aws/comments/gdbihm/how_to_deploy_web_apps_to_aws_using_s3_cloudfront/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/aws/comments/gdbihm/how_to_deploy_web_apps_to_aws_using_s3_cloudfront/", "subreddit_subscribers": 120717, "created_utc": 1588598546.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "aws", "selftext": "I'm deciding how to deploy my Nodejs API to AWS Elastic beanstalk. I have 2 options: deploy it as a normal nodejs service or deploy the api dockerized.\n\nIn which situations is it more recomendable to use docker over a normal nodejs service? (Giving the fact that I will use Elastic beanstalk)", "author_fullname": "t2_8yjbjl2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is it recommended to use Docker with AWS Elastic beanstalk?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/aws", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "hide_score": true, "name": "t3_gdbhmd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "technical question", "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588627251.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.aws", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m deciding how to deploy my Nodejs API to AWS Elastic beanstalk. I have 2 options: deploy it as a normal nodejs service or deploy the api dockerized.&lt;/p&gt;\n\n&lt;p&gt;In which situations is it more recomendable to use docker over a normal nodejs service? (Giving the fact that I will use Elastic beanstalk)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "e0acaab0-fe51-11e8-b457-0e86fa5111f4", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh84", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "gdbhmd", "is_robot_indexable": true, "report_reasons": null, "author": "c_ascanio", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/aws/comments/gdbhmd/is_it_recommended_to_use_docker_with_aws_elastic/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/aws/comments/gdbhmd/is_it_recommended_to_use_docker_with_aws_elastic/", "subreddit_subscribers": 120717, "created_utc": 1588598451.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "aws", "selftext": "Created a sample CI/CD ReactJS + AWS CDK project to deploy a website to S3, fronted by CloudFront. All of the resources are created with CDK (including Cognito and lambda functions). I'm using GitLab for the repo and CI/CD. The link to the project is in the description of the video.\n\nhttps://youtu.be/6OC6AqF-IMc", "author_fullname": "t2_4w8j8hdv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Setting up a CI/CD pipeline for a ReactJS app using GitLab and AWS CDK", "link_flair_richtext": [], "subreddit_name_prefixed": "r/aws", "hidden": false, "pwls": 6, "link_flair_css_class": "resource", "downs": 0, "hide_score": false, "name": "t3_gd0lj8", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "technical resource", "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588577412.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.aws", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Created a sample CI/CD ReactJS + AWS CDK project to deploy a website to S3, fronted by CloudFront. All of the resources are created with CDK (including Cognito and lambda functions). I&amp;#39;m using GitLab for the repo and CI/CD. The link to the project is in the description of the video.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://youtu.be/6OC6AqF-IMc\"&gt;https://youtu.be/6OC6AqF-IMc&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "90cdeee6-b9e3-11e6-8d35-0eabbe333632", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh84", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "gd0lj8", "is_robot_indexable": true, "report_reasons": null, "author": "LogicalHurricane", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/aws/comments/gd0lj8/setting_up_a_cicd_pipeline_for_a_reactjs_app/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/aws/comments/gd0lj8/setting_up_a_cicd_pipeline_for_a_reactjs_app/", "subreddit_subscribers": 120717, "created_utc": 1588548612.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "aws", "selftext": "Hello, I am towards the end of completing an application and the company has access to my aws account, I was charged a dollar when opening it and today was charged a dollar for another server in Mumbai where they're based off of. What permission can I remove to not give them ny access for purchases as I do not want to worry about receiving an expensive bill. Thank you!", "author_fullname": "t2_5cshs", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Confused on how to go e my IAM user permissions without access to using my credit card", "link_flair_richtext": [], "subreddit_name_prefixed": "r/aws", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "hide_score": true, "name": "t3_gdaoug", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "technical question", "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588624076.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.aws", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I am towards the end of completing an application and the company has access to my aws account, I was charged a dollar when opening it and today was charged a dollar for another server in Mumbai where they&amp;#39;re based off of. What permission can I remove to not give them ny access for purchases as I do not want to worry about receiving an expensive bill. Thank you!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "e0acaab0-fe51-11e8-b457-0e86fa5111f4", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh84", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "gdaoug", "is_robot_indexable": true, "report_reasons": null, "author": "Nas-psu", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/aws/comments/gdaoug/confused_on_how_to_go_e_my_iam_user_permissions/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/aws/comments/gdaoug/confused_on_how_to_go_e_my_iam_user_permissions/", "subreddit_subscribers": 120717, "created_utc": 1588595276.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "aws", "selftext": "Trigger Appsync mutation from lambda function\n\nHi,\n\nso  I keep getting this error message when I try to trigger a mutation  through lambda when I add/modify/delete items from DynamoDB : \"message\" :  \"Invalid request, \\`query\\` can't be null.\",\n\nSo  what  i am trying to do is whenever a modification is done directly on  dynamodb, the subscribed users will be notified with the changes.\n\nI have created the new mutation with None type data source. I tested it out directly on the query console and it works fine.\n\nI  have also created the lambda function based on Python that is able to  retrieve the dynamodb streams and have tested it out with cloudwatch.\n\nNow the issue is when I try to do a http post request from the lambda, i get:\n\nerror: MalformedHttpRequestException\n\nmessage: invalid request, \\`query\\` can't be null.\n\n\\-----------------------------------------------------------------------------------------------------------------------------------------------------\n\nname of mutation: addTodo\n\nthe data i am sending over post:\n\n{'operationName':  'addTodo', 'variables': {'id': '400', 'name': 'some name',   'description': 'some description', 'query': 'mutation addTodo($id:  ID,$name: String,  $description: String) {addTodo(id: $id, name: $name,  description:  $description) {id name description}}'}}", "author_fullname": "t2_5coihlbz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Trigger Appsync mutation from lambda function", "link_flair_richtext": [], "subreddit_name_prefixed": "r/aws", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "hide_score": true, "name": "t3_gdangk", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "discussion", "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588623914.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.aws", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Trigger Appsync mutation from lambda function&lt;/p&gt;\n\n&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;so  I keep getting this error message when I try to trigger a mutation  through lambda when I add/modify/delete items from DynamoDB : &amp;quot;message&amp;quot; :  &amp;quot;Invalid request, `query` can&amp;#39;t be null.&amp;quot;,&lt;/p&gt;\n\n&lt;p&gt;So  what  i am trying to do is whenever a modification is done directly on  dynamodb, the subscribed users will be notified with the changes.&lt;/p&gt;\n\n&lt;p&gt;I have created the new mutation with None type data source. I tested it out directly on the query console and it works fine.&lt;/p&gt;\n\n&lt;p&gt;I  have also created the lambda function based on Python that is able to  retrieve the dynamodb streams and have tested it out with cloudwatch.&lt;/p&gt;\n\n&lt;p&gt;Now the issue is when I try to do a http post request from the lambda, i get:&lt;/p&gt;\n\n&lt;p&gt;error: MalformedHttpRequestException&lt;/p&gt;\n\n&lt;p&gt;message: invalid request, `query` can&amp;#39;t be null.&lt;/p&gt;\n\n&lt;p&gt;-----------------------------------------------------------------------------------------------------------------------------------------------------&lt;/p&gt;\n\n&lt;p&gt;name of mutation: addTodo&lt;/p&gt;\n\n&lt;p&gt;the data i am sending over post:&lt;/p&gt;\n\n&lt;p&gt;{&amp;#39;operationName&amp;#39;:  &amp;#39;addTodo&amp;#39;, &amp;#39;variables&amp;#39;: {&amp;#39;id&amp;#39;: &amp;#39;400&amp;#39;, &amp;#39;name&amp;#39;: &amp;#39;some name&amp;#39;,   &amp;#39;description&amp;#39;: &amp;#39;some description&amp;#39;, &amp;#39;query&amp;#39;: &amp;#39;mutation addTodo($id:  ID,$name: String,  $description: String) {addTodo(id: $id, name: $name,  description:  $description) {id name description}}&amp;#39;}}&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "962d796e-fa9c-11e8-a3dc-0e1ba4fe1be4", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh84", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "gdangk", "is_robot_indexable": true, "report_reasons": null, "author": "MTPROJECTS", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/aws/comments/gdangk/trigger_appsync_mutation_from_lambda_function/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/aws/comments/gdangk/trigger_appsync_mutation_from_lambda_function/", "subreddit_subscribers": 120717, "created_utc": 1588595114.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "aws", "selftext": "I have a VPN tunnel using ec2 vms to establish communication from on prem (where ad is located) to AWS.\n\nCan i use AD connector without having to configure the AWS vpn?", "author_fullname": "t2_9793w", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "AD Connector with third party vpn?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/aws", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "hide_score": true, "name": "t3_gda6vs", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "technical question", "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588621909.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.aws", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a VPN tunnel using ec2 vms to establish communication from on prem (where ad is located) to AWS.&lt;/p&gt;\n\n&lt;p&gt;Can i use AD connector without having to configure the AWS vpn?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "e0acaab0-fe51-11e8-b457-0e86fa5111f4", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh84", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "gda6vs", "is_robot_indexable": true, "report_reasons": null, "author": "grasshopper645", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/aws/comments/gda6vs/ad_connector_with_third_party_vpn/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/aws/comments/gda6vs/ad_connector_with_third_party_vpn/", "subreddit_subscribers": 120717, "created_utc": 1588593109.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "aws", "selftext": "I'm a beginner developer and I have a basic question that I can't seem to find a concrete answer to online. Let's say I allow users to upload images and each image has a series of users who are allowed to view it. What is the best practice in node for securing these images to allow only the permitted users to view them? Should I just add my AWS credentials to the server and request the correct image and pass the entire image from the server to the client? Or should I generate a time-limited, publicly accessible URL and pass that down to the client so that the entire image object doesn't pass through my server? Just a bit confused on how node interacts with S3 when users are allowed to upload private photos that are only to be accessed by certain users.", "author_fullname": "t2_8nmzx", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Amazon S3 permissions question", "link_flair_richtext": [], "subreddit_name_prefixed": "r/aws", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "hide_score": false, "name": "t3_gd548h", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.76, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "eli5", "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588596288.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.aws", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m a beginner developer and I have a basic question that I can&amp;#39;t seem to find a concrete answer to online. Let&amp;#39;s say I allow users to upload images and each image has a series of users who are allowed to view it. What is the best practice in node for securing these images to allow only the permitted users to view them? Should I just add my AWS credentials to the server and request the correct image and pass the entire image from the server to the client? Or should I generate a time-limited, publicly accessible URL and pass that down to the client so that the entire image object doesn&amp;#39;t pass through my server? Just a bit confused on how node interacts with S3 when users are allowed to upload private photos that are only to be accessed by certain users.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "a429b1f4-5221-11e9-a522-0e255cafe3f8", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh84", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "gd548h", "is_robot_indexable": true, "report_reasons": null, "author": "banksied", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/aws/comments/gd548h/amazon_s3_permissions_question/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/aws/comments/gd548h/amazon_s3_permissions_question/", "subreddit_subscribers": 120717, "created_utc": 1588567488.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "aws", "selftext": "I'm researching using an AWS serverless stack instead of Heroku.  I'm building an API that's called synchronously, so I'd like to make architecture decisions that result in consistently fast responses.\n\nMy budget supports provisioned concurrency and never pausing Aurora Serverless.\n\nMy understanding is:\n\n* With Aurora Serverless, I don't need to worry about my lambdas exceeding a connection limit.\n* With Provisioned Concurrency, I don't need to worry about the time it takes to establish a database connection.\n* If I can pre-establish a database connection, running queries directly will always be faster than using the Data API.\n\nPutting together all these points, I believe I should use traditional database connections to Aurora Serverless instead of the Data API.  This should be fastest, and provisioned concurrency will allow me to avoid any cold starts.\n\nAm I thinking about this right?\n\nAlso - it appears I can do all of this with High Availability, with the exception that Aurora Serverless has an unknown failover delay: [https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.failover](https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.failover)\n\nIs that the primary caveat?\n\nthank you!", "author_fullname": "t2_143s10kh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Lambda provisioned concurrency with Aurora Serverless - should I use the Data API?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/aws", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "hide_score": false, "name": "t3_gcwtqt", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "serverless", "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588563809.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.aws", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m researching using an AWS serverless stack instead of Heroku.  I&amp;#39;m building an API that&amp;#39;s called synchronously, so I&amp;#39;d like to make architecture decisions that result in consistently fast responses.&lt;/p&gt;\n\n&lt;p&gt;My budget supports provisioned concurrency and never pausing Aurora Serverless.&lt;/p&gt;\n\n&lt;p&gt;My understanding is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;With Aurora Serverless, I don&amp;#39;t need to worry about my lambdas exceeding a connection limit.&lt;/li&gt;\n&lt;li&gt;With Provisioned Concurrency, I don&amp;#39;t need to worry about the time it takes to establish a database connection.&lt;/li&gt;\n&lt;li&gt;If I can pre-establish a database connection, running queries directly will always be faster than using the Data API.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Putting together all these points, I believe I should use traditional database connections to Aurora Serverless instead of the Data API.  This should be fastest, and provisioned concurrency will allow me to avoid any cold starts.&lt;/p&gt;\n\n&lt;p&gt;Am I thinking about this right?&lt;/p&gt;\n\n&lt;p&gt;Also - it appears I can do all of this with High Availability, with the exception that Aurora Serverless has an unknown failover delay: &lt;a href=\"https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.failover\"&gt;https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.how-it-works.html#aurora-serverless.failover&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Is that the primary caveat?&lt;/p&gt;\n\n&lt;p&gt;thank you!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "ff0e4f90-fe51-11e8-995f-0e494176cf40", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh84", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "gcwtqt", "is_robot_indexable": true, "report_reasons": null, "author": "buytoomuchforlife", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/aws/comments/gcwtqt/lambda_provisioned_concurrency_with_aurora/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/aws/comments/gcwtqt/lambda_provisioned_concurrency_with_aurora/", "subreddit_subscribers": 120717, "created_utc": 1588535009.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_gcwtqt", "before": null}}