{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "Please use this thread to discuss **cool** but relatively **unknown** gems you've found.\n\nYou **should not** post popular gems such as [those listed in wiki](https://www.reddit.com/r/rails/wiki/index#wiki_popular_gems) that are already well known.\n\nPlease include a **description** and a **link** to the gem's homepage in your comment.", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Gimme Gems Thursdays - Found an awesome new gem? Post it here!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ezrfed", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581019609.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Please use this thread to discuss &lt;strong&gt;cool&lt;/strong&gt; but relatively &lt;strong&gt;unknown&lt;/strong&gt; gems you&amp;#39;ve found.&lt;/p&gt;\n\n&lt;p&gt;You &lt;strong&gt;should not&lt;/strong&gt; post popular gems such as &lt;a href=\"https://www.reddit.com/r/rails/wiki/index#wiki_popular_gems\"&gt;those listed in wiki&lt;/a&gt; that are already well known.&lt;/p&gt;\n\n&lt;p&gt;Please include a &lt;strong&gt;description&lt;/strong&gt; and a &lt;strong&gt;link&lt;/strong&gt; to the gem&amp;#39;s homepage in your comment.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ezrfed", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 0, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/ezrfed/gimme_gems_thursdays_found_an_awesome_new_gem/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rails/comments/ezrfed/gimme_gems_thursdays_found_an_awesome_new_gem/", "subreddit_subscribers": 42028, "created_utc": 1580990809.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "Hello, I consider I have experience in Rails, but I want to go to the next level, for this I want to know if there's an advanced course on Rails which has some or most of the following topics:\n\n* Examples of good use of rails conventions (service objects, query object, null objects, creating concerns to DRY your controllers/models, etc.).\n* Make performant apps (performant queries, performant ruby code, fix n+1 queries, etc.).\n* Examples of good use of design patterns (observable, chain of responsibility, factory, strategy pattern, etc.).\n* Serializing data (blueprinter, fast json api, etc.)\n* Make performant tests (build or build_stubbed instead of create, parallel tests, etc.)\n\nOr even building your own gems, metaprogramming, etc. (I know this is ruby, but to be an advanced Rails developer you have to be an advanced Ruby developer too IMO)", "author_fullname": "t2_3klrtx8o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ruby on Rails advanced courses?", "link_flair_richtext": [{"e": "text", "t": "Question"}], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": "question", "downs": 0, "hide_score": false, "name": "t3_f00t14", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 28, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Question", "can_mod_post": false, "score": 28, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1581030337.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581058659.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I consider I have experience in Rails, but I want to go to the next level, for this I want to know if there&amp;#39;s an advanced course on Rails which has some or most of the following topics:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Examples of good use of rails conventions (service objects, query object, null objects, creating concerns to DRY your controllers/models, etc.).&lt;/li&gt;\n&lt;li&gt;Make performant apps (performant queries, performant ruby code, fix n+1 queries, etc.).&lt;/li&gt;\n&lt;li&gt;Examples of good use of design patterns (observable, chain of responsibility, factory, strategy pattern, etc.).&lt;/li&gt;\n&lt;li&gt;Serializing data (blueprinter, fast json api, etc.)&lt;/li&gt;\n&lt;li&gt;Make performant tests (build or build_stubbed instead of create, parallel tests, etc.)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Or even building your own gems, metaprogramming, etc. (I know this is ruby, but to be an advanced Rails developer you have to be an advanced Ruby developer too IMO)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "fdfc6806-aea7-11e4-bf37-22000b3889f5", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f00t14", "is_robot_indexable": true, "report_reasons": null, "author": "Finpla", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/f00t14/ruby_on_rails_advanced_courses/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/f00t14/ruby_on_rails_advanced_courses/", "subreddit_subscribers": 42028, "created_utc": 1581029859.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "I was at work, I installed ruby and rails using RBENV. \n\nMy senior colleague made me install RVM and uninstalled RBENV. Insists that RVM handles better somehow. \n\nWhat's your thought on this? \n\nWhat is the industrial standard?", "author_fullname": "t2_4k7m1uzh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "There are two Ruby version manager RVM vs RBENV. what's your choice? and why?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f009mb", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581056484.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was at work, I installed ruby and rails using RBENV. &lt;/p&gt;\n\n&lt;p&gt;My senior colleague made me install RVM and uninstalled RBENV. Insists that RVM handles better somehow. &lt;/p&gt;\n\n&lt;p&gt;What&amp;#39;s your thought on this? &lt;/p&gt;\n\n&lt;p&gt;What is the industrial standard?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f009mb", "is_robot_indexable": true, "report_reasons": null, "author": "Cokemax1", "discussion_type": null, "num_comments": 46, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/f009mb/there_are_two_ruby_version_manager_rvm_vs_rbenv/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/f009mb/there_are_two_ruby_version_manager_rvm_vs_rbenv/", "subreddit_subscribers": 42028, "created_utc": 1581027684.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "Hi guys,\n\nI've created a cheatsheet of Arel that collects my personal experience with it. I've decided to share it since Arel is pretty much undocumented, but I think it's a really powerful tool.\n\n[https://gist.github.com/ProGM/c6df08da14708dcc28b5ca325df37ceb](https://gist.github.com/ProGM/c6df08da14708dcc28b5ca325df37ceb)", "author_fullname": "t2_126r1x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Yet another Arel Cheatsheet, but on Steroids", "link_flair_richtext": [{"e": "text", "t": "Tutorial"}], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": "tutorial", "downs": 0, "hide_score": false, "name": "t3_ezuuup", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 35, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Tutorial", "can_mod_post": false, "score": 35, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581035714.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi guys,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve created a cheatsheet of Arel that collects my personal experience with it. I&amp;#39;ve decided to share it since Arel is pretty much undocumented, but I think it&amp;#39;s a really powerful tool.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gist.github.com/ProGM/c6df08da14708dcc28b5ca325df37ceb\"&gt;https://gist.github.com/ProGM/c6df08da14708dcc28b5ca325df37ceb&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "2a348462-af75-11e4-abe9-22000b3d0989", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ezuuup", "is_robot_indexable": true, "report_reasons": null, "author": "ProGM", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/ezuuup/yet_another_arel_cheatsheet_but_on_steroids/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/ezuuup/yet_another_arel_cheatsheet_but_on_steroids/", "subreddit_subscribers": 42028, "created_utc": 1581006914.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "Hi. I have an ongoing project which asks for many DB connections (9 total) in:\n\n-SQL Server\n-MySQL\n-Oracle SQL\n-PostgreSQL\n\nI never did something like this before, so i might ask for some advices or ideas.\n\nI'm using Rails 6.\n\nIn resume, it's a data warehouse. I must delevelop an ETL module which process all the data from these 9 databases and puts into only one DB (which is PostgreSQL). I'd like to read your experiences, advices or something like this.", "author_fullname": "t2_4z96z8mv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Multiple database connections?", "link_flair_richtext": [{"e": "text", "t": "Help"}], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": "help", "downs": 0, "hide_score": false, "name": "t3_f02fxm", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Help", "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581065530.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi. I have an ongoing project which asks for many DB connections (9 total) in:&lt;/p&gt;\n\n&lt;p&gt;-SQL Server\n-MySQL\n-Oracle SQL\n-PostgreSQL&lt;/p&gt;\n\n&lt;p&gt;I never did something like this before, so i might ask for some advices or ideas.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m using Rails 6.&lt;/p&gt;\n\n&lt;p&gt;In resume, it&amp;#39;s a data warehouse. I must delevelop an ETL module which process all the data from these 9 databases and puts into only one DB (which is PostgreSQL). I&amp;#39;d like to read your experiences, advices or something like this.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "eef0b990-adfb-11e4-8e15-22000b3889f5", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f02fxm", "is_robot_indexable": true, "report_reasons": null, "author": "Hanzor_", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/f02fxm/multiple_database_connections/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/f02fxm/multiple_database_connections/", "subreddit_subscribers": 42028, "created_utc": 1581036730.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "I've got a JSONB column in Postgres and I need to split out the JSONB data into individual columns. I've got all the new columns set up, but now I've got about 3 million records whose JSONB data needs to get split out into individual columns.\n\nWhat's the most performant way to basically run an UPDATE on every single row?\n\nRight now I'm doing this inside a Rails rake task:\n\n```ruby\nTrack.all.find_each do |track|\n  track.update_attributes(\n    key: track.audio_features['key'],\n    mode: track.audio_features['mode'],\n    tempo: track.audio_features['tempo'],\n    energy: track.audio_features['energy'],\n    valence: track.audio_features['valence'],\n    liveness: track.audio_features['liveness'],\n    loudness: track.audio_features['loudness'],\n    speechiness: track.audio_features['speechiness'],\n    acousticness: track.audio_features['acousticness'],\n    danceability: track.audio_features['danceability'],\n    time_signature: track.audio_features['time_signature'],\n    instrumentalness: track.audio_features['instrumentalness'],\n  )\nend\n```\n\nThat...will take a while for 3 million rows. Is there a faster way to do that?", "author_fullname": "t2_2kqv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to transition data in a JSONB column into separate columns for millions of rows in Rails/Postgres?", "link_flair_richtext": [{"e": "text", "t": "Help"}], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": "help", "downs": 0, "hide_score": false, "name": "t3_ezy875", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Help", "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581048807.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve got a JSONB column in Postgres and I need to split out the JSONB data into individual columns. I&amp;#39;ve got all the new columns set up, but now I&amp;#39;ve got about 3 million records whose JSONB data needs to get split out into individual columns.&lt;/p&gt;\n\n&lt;p&gt;What&amp;#39;s the most performant way to basically run an UPDATE on every single row?&lt;/p&gt;\n\n&lt;p&gt;Right now I&amp;#39;m doing this inside a Rails rake task:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;ruby\nTrack.all.find_each do |track|\n  track.update_attributes(\n    key: track.audio_features[&amp;#39;key&amp;#39;],\n    mode: track.audio_features[&amp;#39;mode&amp;#39;],\n    tempo: track.audio_features[&amp;#39;tempo&amp;#39;],\n    energy: track.audio_features[&amp;#39;energy&amp;#39;],\n    valence: track.audio_features[&amp;#39;valence&amp;#39;],\n    liveness: track.audio_features[&amp;#39;liveness&amp;#39;],\n    loudness: track.audio_features[&amp;#39;loudness&amp;#39;],\n    speechiness: track.audio_features[&amp;#39;speechiness&amp;#39;],\n    acousticness: track.audio_features[&amp;#39;acousticness&amp;#39;],\n    danceability: track.audio_features[&amp;#39;danceability&amp;#39;],\n    time_signature: track.audio_features[&amp;#39;time_signature&amp;#39;],\n    instrumentalness: track.audio_features[&amp;#39;instrumentalness&amp;#39;],\n  )\nend\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;That...will take a while for 3 million rows. Is there a faster way to do that?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "eef0b990-adfb-11e4-8e15-22000b3889f5", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ezy875", "is_robot_indexable": true, "report_reasons": null, "author": "Shpigford", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/ezy875/how_to_transition_data_in_a_jsonb_column_into/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/ezy875/how_to_transition_data_in_a_jsonb_column_into/", "subreddit_subscribers": 42028, "created_utc": 1581020007.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "I have a rule builder that ultimately builds up ActiveRecord queries by chaining multiple `where` calls, like so:\n\n```rails\nTrack.where(\"tracks.popularity &lt; ?\", 1).where(\"(audio_features -&gt;&gt; 'valence')::numeric between ? and ?\", 2, 5)\n```\n\nThen, if someone wants to sort the results randomly, it would append `order(\"random()\")`.\n\nHowever, given the table size, `random()` is extremely inefficient for ordering, so I need to use Postgres TABLESAMPLE-ing. \n\nIn a raw SQL query, that looks like this:\n\n```sql\nSELECT * FROM \"tracks\" TABLESAMPLE SYSTEM(0.1) LIMIT 250;\n```\n\nIs there some way to add that `TABLESAMPLE SYSTEM(0.1)` to the existing chain of ActiveRecord calls? Putting it inside a `where()` or `order()` doesn't work since it's not a WHERE or ORDER BY function.", "author_fullname": "t2_2kqv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to attach raw SQL to an existing Rails ActiveRecord chain?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ezwltk", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 6, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 6, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581042726.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have a rule builder that ultimately builds up ActiveRecord queries by chaining multiple &lt;code&gt;where&lt;/code&gt; calls, like so:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;rails\nTrack.where(&amp;quot;tracks.popularity &amp;lt; ?&amp;quot;, 1).where(&amp;quot;(audio_features -&amp;gt;&amp;gt; &amp;#39;valence&amp;#39;)::numeric between ? and ?&amp;quot;, 2, 5)\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Then, if someone wants to sort the results randomly, it would append &lt;code&gt;order(&amp;quot;random()&amp;quot;)&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;However, given the table size, &lt;code&gt;random()&lt;/code&gt; is extremely inefficient for ordering, so I need to use Postgres TABLESAMPLE-ing. &lt;/p&gt;\n\n&lt;p&gt;In a raw SQL query, that looks like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;sql\nSELECT * FROM &amp;quot;tracks&amp;quot; TABLESAMPLE SYSTEM(0.1) LIMIT 250;\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Is there some way to add that &lt;code&gt;TABLESAMPLE SYSTEM(0.1)&lt;/code&gt; to the existing chain of ActiveRecord calls? Putting it inside a &lt;code&gt;where()&lt;/code&gt; or &lt;code&gt;order()&lt;/code&gt; doesn&amp;#39;t work since it&amp;#39;s not a WHERE or ORDER BY function.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ezwltk", "is_robot_indexable": true, "report_reasons": null, "author": "Shpigford", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/ezwltk/how_to_attach_raw_sql_to_an_existing_rails/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/ezwltk/how_to_attach_raw_sql_to_an_existing_rails/", "subreddit_subscribers": 42028, "created_utc": 1581013926.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "I have an array of objects I want to send to my rails backend through the form of a param: `dish_section`:\n\n    [{dish_id: 1, section_id: 1}, {dish_id: 2, section_id: 1}]\n\nI've looked into a gem called [bulk\\_insert](https://github.com/jamis/bulk_insert) but for the life of me I can't translate my para an array without getting some type of ActionControllerParameter error. I wanted to check here to see what's usually the best pattern to handle bulk inserts coming from a JSON API. I'm currently on Rails 5 for this project so `insert_all` unfortunately an option isn't an option.", "author_fullname": "t2_9m2xw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best way to bulk create objects?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ezw57a", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581040896.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have an array of objects I want to send to my rails backend through the form of a param: &lt;code&gt;dish_section&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[{dish_id: 1, section_id: 1}, {dish_id: 2, section_id: 1}]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;ve looked into a gem called &lt;a href=\"https://github.com/jamis/bulk_insert\"&gt;bulk_insert&lt;/a&gt; but for the life of me I can&amp;#39;t translate my para an array without getting some type of ActionControllerParameter error. I wanted to check here to see what&amp;#39;s usually the best pattern to handle bulk inserts coming from a JSON API. I&amp;#39;m currently on Rails 5 for this project so &lt;code&gt;insert_all&lt;/code&gt; unfortunately an option isn&amp;#39;t an option.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ezw57a", "is_robot_indexable": true, "report_reasons": null, "author": "TKB21", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/ezw57a/best_way_to_bulk_create_objects/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/ezw57a/best_way_to_bulk_create_objects/", "subreddit_subscribers": 42028, "created_utc": 1581012096.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "I'm curious as to whether Rails actually generates a Html or json temporarily when you call the \"render\" method in Controller", "author_fullname": "t2_45jv00mz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Does Rails generate a JSON or HTML in tmp folder?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eztvim", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581031570.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m curious as to whether Rails actually generates a Html or json temporarily when you call the &amp;quot;render&amp;quot; method in Controller&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eztvim", "is_robot_indexable": true, "report_reasons": null, "author": "woodydark", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/eztvim/does_rails_generate_a_json_or_html_in_tmp_folder/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/eztvim/does_rails_generate_a_json_or_html_in_tmp_folder/", "subreddit_subscribers": 42028, "created_utc": 1581002770.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "Hi, I am following omniauth + devise integration.  \n[https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview](https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview)  \nIn the above url the guide recommends to create method in User model whereas I can do User.where and User.create in controller  \nI am trying to understand in what scenarios one has to create method in model and controller  \nThanks in Advance", "author_fullname": "t2_wyz5a", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What are the implications of creating methods in model rather than in controller", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eztu5y", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581031409.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I am following omniauth + devise integration.&lt;br/&gt;\n&lt;a href=\"https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview\"&gt;https://github.com/heartcombo/devise/wiki/OmniAuth:-Overview&lt;/a&gt;&lt;br/&gt;\nIn the above url the guide recommends to create method in User model whereas I can do User.where and User.create in controller&lt;br/&gt;\nI am trying to understand in what scenarios one has to create method in model and controller&lt;br/&gt;\nThanks in Advance&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eztu5y", "is_robot_indexable": true, "report_reasons": null, "author": "chakrihacker", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/eztu5y/what_are_the_implications_of_creating_methods_in/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/eztu5y/what_are_the_implications_of_creating_methods_in/", "subreddit_subscribers": 42028, "created_utc": 1581002609.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rails", "selftext": "The way I was taught database normalization, association tables do not need a primary key ID column. Their job is to point to the associated records, and may contain additional data related to the association.\n\nIn my case, a user\n\n    has_many :memberships\n    has_many :organizations, through: :memberships\n\nand \n\n    create_table \"memberships\", id: false, force: :cascade do |t|\n      t.bigint \"user_id\", null: false\n      t.bigint \"organization_id\", null: false\n      t.jsonb \"profile\"\n\nIn Rails however, this understandably confuses AR\n\n    o = Organization.first\n    u = User.first\n    m = u.memberships.where(organization: o).first\n\n    m.profile[\"favorite_color\"] = \"green\"\n    m.save\n\n    # =&gt; ActiveRecord::UnknownPrimaryKey: Unknown primary key for table memberships in model Membership.\n    # Cannot validate uniqueness for persisted record without primary key.\n\nOf course I can still do\n\n    updated_profile = m.profile.merge({\"favorite_color\" =&gt; \"green\"})\n    Memberships.where(organization: o, user: u).update_attributes(profile: updated_profile)\n\nbut it feels considerably less Rails-y. Although it feels cleaner given the schema and its intentions.\n\nSo, what do you do in your apps and *why*? Any downside in adding primary keys? \n\nI started without them, because I wanted a clean schema, and now am considering adding primary keys to make life easier but am a bit torn.\n\nEdit: clarity", "author_fullname": "t2_4rgn4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Do you add IDs to association tables?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ezo6rc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": 1580971070.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580999186.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The way I was taught database normalization, association tables do not need a primary key ID column. Their job is to point to the associated records, and may contain additional data related to the association.&lt;/p&gt;\n\n&lt;p&gt;In my case, a user&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;has_many :memberships\nhas_many :organizations, through: :memberships\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;create_table &amp;quot;memberships&amp;quot;, id: false, force: :cascade do |t|\n  t.bigint &amp;quot;user_id&amp;quot;, null: false\n  t.bigint &amp;quot;organization_id&amp;quot;, null: false\n  t.jsonb &amp;quot;profile&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In Rails however, this understandably confuses AR&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;o = Organization.first\nu = User.first\nm = u.memberships.where(organization: o).first\n\nm.profile[&amp;quot;favorite_color&amp;quot;] = &amp;quot;green&amp;quot;\nm.save\n\n# =&amp;gt; ActiveRecord::UnknownPrimaryKey: Unknown primary key for table memberships in model Membership.\n# Cannot validate uniqueness for persisted record without primary key.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course I can still do&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;updated_profile = m.profile.merge({&amp;quot;favorite_color&amp;quot; =&amp;gt; &amp;quot;green&amp;quot;})\nMemberships.where(organization: o, user: u).update_attributes(profile: updated_profile)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;but it feels considerably less Rails-y. Although it feels cleaner given the schema and its intentions.&lt;/p&gt;\n\n&lt;p&gt;So, what do you do in your apps and &lt;em&gt;why&lt;/em&gt;? Any downside in adding primary keys? &lt;/p&gt;\n\n&lt;p&gt;I started without them, because I wanted a clean schema, and now am considering adding primary keys to make life easier but am a bit torn.&lt;/p&gt;\n\n&lt;p&gt;Edit: clarity&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ezo6rc", "is_robot_indexable": true, "report_reasons": null, "author": "obviousoctopus", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/ezo6rc/do_you_add_ids_to_association_tables/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/ezo6rc/do_you_add_ids_to_association_tables/", "subreddit_subscribers": 42028, "created_utc": 1580970386.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_ezo6rc", "before": null}}