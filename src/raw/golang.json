{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello folks.\n\nI often find myself thinking that I often encounter a situation when I need to do some small prototyping (playing with goroutines, etc) and Go's playground often is faster solution than a dedicated IDE window. Unfortunately [play.golang.org](https://play.golang.org) is very primitive ([goplay.space](https://goplay.space) is better but not much), so I've decided to try to create something a bit better.\n\nAfter two days without a sleep managed to create some prototype and I want to share it with you.This playground offers file save and upload feature and some basic code autocomplete (package and function level).\n\nVery interested in your opinion :)\n\n&amp;#x200B;\n\nDemo: [http://goplay.x1unix.com/](http://goplay.x1unix.com/)\n\nSource: [https://github.com/x1unix/go-playground](https://github.com/x1unix/go-playground)", "author_fullname": "t2_178qc4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A slightly better version of Go Playground (maybe)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eqc3sa", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 67, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 67, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {"gid_1": 1}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579352223.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello folks.&lt;/p&gt;\n\n&lt;p&gt;I often find myself thinking that I often encounter a situation when I need to do some small prototyping (playing with goroutines, etc) and Go&amp;#39;s playground often is faster solution than a dedicated IDE window. Unfortunately &lt;a href=\"https://play.golang.org\"&gt;play.golang.org&lt;/a&gt; is very primitive (&lt;a href=\"https://goplay.space\"&gt;goplay.space&lt;/a&gt; is better but not much), so I&amp;#39;ve decided to try to create something a bit better.&lt;/p&gt;\n\n&lt;p&gt;After two days without a sleep managed to create some prototype and I want to share it with you.This playground offers file save and upload feature and some basic code autocomplete (package and function level).&lt;/p&gt;\n\n&lt;p&gt;Very interested in your opinion :)&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Demo: &lt;a href=\"http://goplay.x1unix.com/\"&gt;http://goplay.x1unix.com/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Source: &lt;a href=\"https://github.com/x1unix/go-playground\"&gt;https://github.com/x1unix/go-playground&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"count": 1, "is_enabled": true, "subreddit_id": null, "description": "Shows the Silver Award... and that's it.", "end_date": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png", "days_of_premium": 0, "is_new": false, "id": "gid_1", "icon_height": 512, "resized_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "days_of_drip_extension": 0, "award_type": "global", "start_date": null, "coin_price": 100, "icon_width": 512, "subreddit_coin_reward": 0, "name": "Silver"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eqc3sa", "is_robot_indexable": true, "report_reasons": null, "author": "x1-unix", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/eqc3sa/a_slightly_better_version_of_go_playground_maybe/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/eqc3sa/a_slightly_better_version_of_go_playground_maybe/", "subreddit_subscribers": 99904, "created_utc": 1579323423.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_5gsukvqu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go Gazette #90: comparing Python, Go and C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eqaopk", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 45, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 45, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1579344087.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "gogazette.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eqaopk", "is_robot_indexable": true, "report_reasons": null, "author": "Smart-Incident", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/eqaopk/go_gazette_90_comparing_python_go_and_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.gogazette.com/post/90-comparing-python-go-and-c", "subreddit_subscribers": 99904, "created_utc": 1579315287.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Just wondering...", "author_fullname": "t2_l391d", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why does \"go.mod\" have it's own format? It could have been JSON or YAML for example, but nope, it was decided a new syntax. I would really like to know the decision behind that.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eqf3dm", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579374009.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Just wondering...&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eqf3dm", "is_robot_indexable": true, "report_reasons": null, "author": "seaskyways", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/eqf3dm/why_does_gomod_have_its_own_format_it_could_have/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/eqf3dm/why_does_gomod_have_its_own_format_it_could_have/", "subreddit_subscribers": 99904, "created_utc": 1579345209.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I made neko, a neat docker app that can stream a browser to multiple clients, you can take control of the keyboard and mouse and browse the web with friends. The server uses  [pion](https://github.com/pion/webrtc) to stream the desktop through webrtc\n\nhttps://i.redd.it/4qs4uck1wab41.gif\n\n[https://github.com/nurdism/neko](https://github.com/nurdism/neko)", "author_fullname": "t2_287ao65q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I made something cool in go, wanted to share it here", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "media_metadata": {"4qs4uck1wab41": {"status": "valid", "e": "AnimatedImage", "s": {"y": 592, "gif": "https://i.redd.it/4qs4uck1wab41.gif", "mp4": "https://preview.redd.it/4qs4uck1wab41.gif?format=mp4&amp;s=06cc9fa74f266d8661baceeedc9e935b930b0ccb", "x": 784}, "m": "image/gif", "id": "4qs4uck1wab41"}}, "name": "t3_epxt1j", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 194, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 194, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579279201.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I made neko, a neat docker app that can stream a browser to multiple clients, you can take control of the keyboard and mouse and browse the web with friends. The server uses  &lt;a href=\"https://github.com/pion/webrtc\"&gt;pion&lt;/a&gt; to stream the desktop through webrtc&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://i.redd.it/4qs4uck1wab41.gif\"&gt;https://i.redd.it/4qs4uck1wab41.gif&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/nurdism/neko\"&gt;https://github.com/nurdism/neko&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "epxt1j", "is_robot_indexable": true, "report_reasons": null, "author": "nurdism", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/epxt1j/i_made_something_cool_in_go_wanted_to_share_it/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/epxt1j/i_made_something_cool_in_go_wanted_to_share_it/", "subreddit_subscribers": 99904, "created_utc": 1579250401.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_2c5yxngr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GitHub - e-wrks/edh: \u0110 (Edh) - The next-big-things ought to happen with Haskell not C/C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_eqg4p1", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1579381338.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eqg4p1", "is_robot_indexable": true, "report_reasons": null, "author": "complyue", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/eqg4p1/github_ewrksedh_\u0111_edh_the_nextbigthings_ought_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/e-wrks/edh", "subreddit_subscribers": 99904, "created_utc": 1579352538.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "When dealing with null values from a database,  numbers and time value sometimes have an empty for which Go's zero-value does not make sense. Two ways to deal with this are 1) null wrappers, available in some db libraries and standalone libs (e.g. [this](https://github.com/guregu/null)), and 2) pointers to the primitive value. I wanted to ask if anyone has tried both and which you would recommend", "author_fullname": "t2_19ekjgby", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "dealing with database null values, pointers vs null-wrappers", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eqaam0", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579341997.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;When dealing with null values from a database,  numbers and time value sometimes have an empty for which Go&amp;#39;s zero-value does not make sense. Two ways to deal with this are 1) null wrappers, available in some db libraries and standalone libs (e.g. &lt;a href=\"https://github.com/guregu/null\"&gt;this&lt;/a&gt;), and 2) pointers to the primitive value. I wanted to ask if anyone has tried both and which you would recommend&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eqaam0", "is_robot_indexable": true, "report_reasons": null, "author": "wagonn", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/eqaam0/dealing_with_database_null_values_pointers_vs/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/eqaam0/dealing_with_database_null_values_pointers_vs/", "subreddit_subscribers": 99904, "created_utc": 1579313197.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Feel free to comment on your favourite framework and we will upvote/downvote it!\n\nNo discussion of PROs and CONs here, just vote!\n\nComment format:\n\nFramework name:  \nWebsite:  \nGit URL:", "author_fullname": "t2_2zkbn4zt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Come vote for your favourite Golang framework!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_eqfkxu", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579377543.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Feel free to comment on your favourite framework and we will upvote/downvote it!&lt;/p&gt;\n\n&lt;p&gt;No discussion of PROs and CONs here, just vote!&lt;/p&gt;\n\n&lt;p&gt;Comment format:&lt;/p&gt;\n\n&lt;p&gt;Framework name:&lt;br/&gt;\nWebsite:&lt;br/&gt;\nGit URL:&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eqfkxu", "is_robot_indexable": true, "report_reasons": null, "author": "piscessky15", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/eqfkxu/come_vote_for_your_favourite_golang_framework/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/eqfkxu/come_vote_for_your_favourite_golang_framework/", "subreddit_subscribers": 99904, "created_utc": 1579348743.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Just started exploring Go. In languages like Java which require interfaces to be explicitly specified, the compiler throws an error if a class doesn't implement atleast one method, which makes sense and is helpful in a lot of cases.\n\nNow coming to Go, if an interface has 5 methods and I implement only 4 of them for a struct, the compiler doesn't complain at all, until I try to assign the struct to a variable of that interface type. I am having a hard time understanding why this decision was taken. Can someone please explain to me how this is considered a better design? \n\nThe only way a developer finds out that he partially implemented the interface is when he actually uses it somewhere, isn't it? Isn't there a reasonable and fairly possible chance that a developer might forget to implement a method or two in case of large interfaces?\n\nIsn't explicitly mentioning the intent of implementing an interface a better approach here? Or am I missing something?", "author_fullname": "t2_12i1cf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Understanding the advantages of implicit interfaces", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eqcfhz", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579354201.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Just started exploring Go. In languages like Java which require interfaces to be explicitly specified, the compiler throws an error if a class doesn&amp;#39;t implement atleast one method, which makes sense and is helpful in a lot of cases.&lt;/p&gt;\n\n&lt;p&gt;Now coming to Go, if an interface has 5 methods and I implement only 4 of them for a struct, the compiler doesn&amp;#39;t complain at all, until I try to assign the struct to a variable of that interface type. I am having a hard time understanding why this decision was taken. Can someone please explain to me how this is considered a better design? &lt;/p&gt;\n\n&lt;p&gt;The only way a developer finds out that he partially implemented the interface is when he actually uses it somewhere, isn&amp;#39;t it? Isn&amp;#39;t there a reasonable and fairly possible chance that a developer might forget to implement a method or two in case of large interfaces?&lt;/p&gt;\n\n&lt;p&gt;Isn&amp;#39;t explicitly mentioning the intent of implementing an interface a better approach here? Or am I missing something?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eqcfhz", "is_robot_indexable": true, "report_reasons": null, "author": "bhageerathreddy", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/eqcfhz/understanding_the_advantages_of_implicit/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/eqcfhz/understanding_the_advantages_of_implicit/", "subreddit_subscribers": 99904, "created_utc": 1579325401.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi, I am learning microservices, currently trying  to build something like Google's microservices demo ([https://github.com/GoogleCloudPlatform/microservices-demo](https://github.com/GoogleCloudPlatform/microservices-demo)) but with Node.js/Apollo GraphQL instead of frontend. So far, I can communicate between them successfully.\n\nNow I've discovered DDD and CQRS stuffs, still trying to understand what they are. I'm confused about those tools, NATS Streaming, Istio and Event Store.\n\nI don't mind learning all those tools, but I'm afraid some of them might be overlapping. \n\nCurrently I have GraphQL, gRPC, Docker and k8s in my stack. Should I add Istio or NATS, or both to apply DDD and CQRS, will they be overlapping? \n\nWhich stack would be more efficient and apply DDD and CQRS;\n\ngRPC, k8s, Istio - [https://github.com/GoogleCloudPlatform/microservices-demo](https://github.com/GoogleCloudPlatform/microservices-demo)\n\n(or)\n\nNATS, gRPC - [https://github.com/shijuvar/go-distributed-sys](https://github.com/shijuvar/go-distributed-sys)\n\nPlease enlighten me.", "author_fullname": "t2_wcyel", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[ASK] Beginner Microservices in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eqd868", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579359606.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I am learning microservices, currently trying  to build something like Google&amp;#39;s microservices demo (&lt;a href=\"https://github.com/GoogleCloudPlatform/microservices-demo\"&gt;https://github.com/GoogleCloudPlatform/microservices-demo&lt;/a&gt;) but with Node.js/Apollo GraphQL instead of frontend. So far, I can communicate between them successfully.&lt;/p&gt;\n\n&lt;p&gt;Now I&amp;#39;ve discovered DDD and CQRS stuffs, still trying to understand what they are. I&amp;#39;m confused about those tools, NATS Streaming, Istio and Event Store.&lt;/p&gt;\n\n&lt;p&gt;I don&amp;#39;t mind learning all those tools, but I&amp;#39;m afraid some of them might be overlapping. &lt;/p&gt;\n\n&lt;p&gt;Currently I have GraphQL, gRPC, Docker and k8s in my stack. Should I add Istio or NATS, or both to apply DDD and CQRS, will they be overlapping? &lt;/p&gt;\n\n&lt;p&gt;Which stack would be more efficient and apply DDD and CQRS;&lt;/p&gt;\n\n&lt;p&gt;gRPC, k8s, Istio - &lt;a href=\"https://github.com/GoogleCloudPlatform/microservices-demo\"&gt;https://github.com/GoogleCloudPlatform/microservices-demo&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(or)&lt;/p&gt;\n\n&lt;p&gt;NATS, gRPC - &lt;a href=\"https://github.com/shijuvar/go-distributed-sys\"&gt;https://github.com/shijuvar/go-distributed-sys&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Please enlighten me.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eqd868", "is_robot_indexable": true, "report_reasons": null, "author": "xzenuu", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/eqd868/ask_beginner_microservices_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/eqd868/ask_beginner_microservices_in_go/", "subreddit_subscribers": 99904, "created_utc": 1579330806.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I'm a junior developer, writing software at a startup. I have 1yr of experience in Go. Unfortunately i cannot provide src code.\n\nWrapping errors is something i do often. I have never done it in a recursive function tho! The jist is this:\n\nI have a struct. Sometimes it can encounter an error, let's say E, on a call it makes, in which case it needs to retry. It is created with a number N of max consecutive retries. It will fail, F, after exceeding N retries\n\nI would like a wrapped message kinda like:\nF @ N retries. Error=E\n\nAnyone have an experience, guides, or wisdom for wrapping errors, in recursive functions? \n\n\nTL;DR; I would love some insight in wrapping errors in a recursive function in Golang\n\nCheers!", "author_fullname": "t2_51qqrh27", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How Do I Wrap Errors in recursive functions?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_eq82vv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "steward_reports": [], "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1579331008.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m a junior developer, writing software at a startup. I have 1yr of experience in Go. Unfortunately i cannot provide src code.&lt;/p&gt;\n\n&lt;p&gt;Wrapping errors is something i do often. I have never done it in a recursive function tho! The jist is this:&lt;/p&gt;\n\n&lt;p&gt;I have a struct. Sometimes it can encounter an error, let&amp;#39;s say E, on a call it makes, in which case it needs to retry. It is created with a number N of max consecutive retries. It will fail, F, after exceeding N retries&lt;/p&gt;\n\n&lt;p&gt;I would like a wrapped message kinda like:\nF @ N retries. Error=E&lt;/p&gt;\n\n&lt;p&gt;Anyone have an experience, guides, or wisdom for wrapping errors, in recursive functions? &lt;/p&gt;\n\n&lt;p&gt;TL;DR; I would love some insight in wrapping errors in a recursive function in Golang&lt;/p&gt;\n\n&lt;p&gt;Cheers!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eq82vv", "is_robot_indexable": true, "report_reasons": null, "author": "irilivibi", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/eq82vv/how_do_i_wrap_errors_in_recursive_functions/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/eq82vv/how_do_i_wrap_errors_in_recursive_functions/", "subreddit_subscribers": 99904, "created_utc": 1579302208.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_eq82vv", "before": null}}