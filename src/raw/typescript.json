{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - September", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ik9rft", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.85, "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1598947533.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ik9rft", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 3, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ik9rft/whos_hiring_typescript_developers_september/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/ik9rft/whos_hiring_typescript_developers_september/", "subreddit_subscribers": 49016, "created_utc": 1598918733.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I had to use this inside a fetch request, I consider it hacky but it works:\n\n        mode: 'cors' as const, // allows string to match a string union type\n\nI learned this here but never found an explanation for it. why does asserting the string as a const variable suddenly let it match a string union type (which I saw in the error popup)?", "author_fullname": "t2_3ob6osi0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why does setting 'as const' allow a string to match a string union type?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iy8b7t", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600889306.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I had to use this inside a fetch request, I consider it hacky but it works:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    mode: &amp;#39;cors&amp;#39; as const, // allows string to match a string union type\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I learned this here but never found an explanation for it. why does asserting the string as a const variable suddenly let it match a string union type (which I saw in the error popup)?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iy8b7t", "is_robot_indexable": true, "report_reasons": null, "author": "embar5", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iy8b7t/why_does_setting_as_const_allow_a_string_to_match/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iy8b7t/why_does_setting_as_const_allow_a_string_to_match/", "subreddit_subscribers": 49016, "created_utc": 1600860506.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_6pfjsdhv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Most Popular Programming Languages on GitHub - 2011/2019", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 105, "top_awarded_type": null, "hide_score": false, "name": "t3_ixqlpu", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 46, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/eCUy0F-oVXA?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Most Popular Programming Languages on GitHub - 2011/2019", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/eCUy0F-oVXA?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Statistics and data", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/eCUy0F-oVXA/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCDFQRnMhoUK9miY3XmhBJbw"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/eCUy0F-oVXA?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/ixqlpu", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 46, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/X_zJJVc90FlGVggt86-a_StKT7e_d7tlLotm-pVKbvA.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "rich:video", "content_categories": null, "is_self": false, "mod_note": null, "created": 1600820275.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtu.be", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://youtu.be/eCUy0F-oVXA", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/PNuNh9X_0Ci2QESa8BT_29gvxnievgEvSDBu1ujIk9c.jpg?auto=webp&amp;s=096e4a7819d01c035e56fad7815550ad8a119b89", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/PNuNh9X_0Ci2QESa8BT_29gvxnievgEvSDBu1ujIk9c.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0cd6782e488d45b25833d44f47ae86b783cd6358", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/PNuNh9X_0Ci2QESa8BT_29gvxnievgEvSDBu1ujIk9c.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=9d03beafcbf1f0b80790c6686630442f2a8db2d6", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/PNuNh9X_0Ci2QESa8BT_29gvxnievgEvSDBu1ujIk9c.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a679f92420d6085cc7a9529466f339a5b1f88d83", "width": 320, "height": 240}], "variants": {}, "id": "HjiFvRyM4X0tt7Xxxmm_87qzgHqDe_vSVqcunN2kM8I"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ixqlpu", "is_robot_indexable": true, "report_reasons": null, "author": "accappatoiviola", "discussion_type": null, "num_comments": 18, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ixqlpu/most_popular_programming_languages_on_github/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://youtu.be/eCUy0F-oVXA", "subreddit_subscribers": 49016, "created_utc": 1600791475.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Most Popular Programming Languages on GitHub - 2011/2019", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/eCUy0F-oVXA?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Statistics and data", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/eCUy0F-oVXA/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCDFQRnMhoUK9miY3XmhBJbw"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi, I'm new to TypeScript. I have to create multiple tests and I want to ensure the setup is strongly typed.I was reading through the Generics documentation and I can understand the simple cases but I get lost with the advanced examples.\n\nI tried doing something similar to what's described [here](https://www.typescriptlang.org/docs/handbook/generics.html) in the last example.\n\nThere are two test function signatures that varies depending on the tested value and the condition value:\n\n    interface ITestFuncWithCond&lt;ValueType, ConditionType&gt; {\n       (value: ValueType, condition: ConditionType): boolean;\n    };\n    \n    interface ITestFuncNoCond&lt;ValueType&gt; {\n       (value: ValueType): boolean;\n    };\n\nThe idea is to do something like this with the tests (note the types):\n\n    // Example A\n    // No condition param\n    const testA: Tester = createTest(StringTestIsEmpty);\n    // Value param type must be string.\n    testA.test(\"myString\");\n    \n    // Example B\n    // condition param is number\n    const testB: Tester = createTest(StringLengthEquals, 2);\n    // Value param type must be string.\n    testB.test(\"myString\");\n    \n    // Example C\n    // condition param is string\n    const testC: Tester = createTest(StringEquals, \"myString\");\n    // Value param type must be string.\n    testC.test(\"myString\");\n    \n    // Example D\n    // condition param is number\n    const testD: Tester = createTest(NumberEquals, 10);\n    // Value param type must be number.\n    testD.test(5);\n\nAnd this is the pseudo code that I have for this, but as you can probably see, I need some guiding words to untangle this.\n\n    // Pseudo Internal setup\n    \n    interface ITestFuncWithCond&lt;ValueType, ConditionType&gt; {\n       (value: ValueType, condition: ConditionType): boolean;\n    };\n    \n    interface ITestFuncNoCond&lt;ValueType&gt; {\n       (value: ValueType): boolean;\n    };\n    \n    class Tester {\n       name: TestName;\n       // ConditionType???\n       condition?: ConditionType;\n       // ValueType??? ConditionType ???\n       testImpl: ITestFuncWithCond&lt;ValueType, ConditionType&gt; | ITestFuncNoCond&lt;ValueType&gt;\n    \n       // Test constructor with different signatures.\n       constructor(testName: TestName);\n       constructor(testName: TestName, condition: ConditionType);\n       constructor(testName: TestName, condition?: ConditionType) {\n          this.name = testName; this.condition = condition;\n          // Here, the testName is used to fetch the actual test function (testImpl)\n          testImpl = getTestImpl(testName)\n       \n          // After the testImpl has been fetched, check if condition type \"C\" is as defined in \"testImpl\".\n          if (condition) {\n             if ((testImpl condition parameter type) === ConditionType) {\n                // OK\n             } else {\n                // NOT OK\n             }\n          }\n       }\n    \n       // ValueType should be string for test A, B and C, and should be number for test D.\n       // \"this.condition\" should be undefined in test A.\n       // \"this.condition\" should be \"number for test B and D, and \"string\" for testC.\n       test(value: ValueType): boolean {\n          if (this.condition) {\n             return testImpl(value, this.condition);\n          } else {\n             return testImpl(value);\n          }\n       }\n    }", "author_fullname": "t2_iloia", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Generics and Interfaces Confusion", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ixwhns", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600838138.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, I&amp;#39;m new to TypeScript. I have to create multiple tests and I want to ensure the setup is strongly typed.I was reading through the Generics documentation and I can understand the simple cases but I get lost with the advanced examples.&lt;/p&gt;\n\n&lt;p&gt;I tried doing something similar to what&amp;#39;s described &lt;a href=\"https://www.typescriptlang.org/docs/handbook/generics.html\"&gt;here&lt;/a&gt; in the last example.&lt;/p&gt;\n\n&lt;p&gt;There are two test function signatures that varies depending on the tested value and the condition value:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface ITestFuncWithCond&amp;lt;ValueType, ConditionType&amp;gt; {\n   (value: ValueType, condition: ConditionType): boolean;\n};\n\ninterface ITestFuncNoCond&amp;lt;ValueType&amp;gt; {\n   (value: ValueType): boolean;\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The idea is to do something like this with the tests (note the types):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Example A\n// No condition param\nconst testA: Tester = createTest(StringTestIsEmpty);\n// Value param type must be string.\ntestA.test(&amp;quot;myString&amp;quot;);\n\n// Example B\n// condition param is number\nconst testB: Tester = createTest(StringLengthEquals, 2);\n// Value param type must be string.\ntestB.test(&amp;quot;myString&amp;quot;);\n\n// Example C\n// condition param is string\nconst testC: Tester = createTest(StringEquals, &amp;quot;myString&amp;quot;);\n// Value param type must be string.\ntestC.test(&amp;quot;myString&amp;quot;);\n\n// Example D\n// condition param is number\nconst testD: Tester = createTest(NumberEquals, 10);\n// Value param type must be number.\ntestD.test(5);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And this is the pseudo code that I have for this, but as you can probably see, I need some guiding words to untangle this.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// Pseudo Internal setup\n\ninterface ITestFuncWithCond&amp;lt;ValueType, ConditionType&amp;gt; {\n   (value: ValueType, condition: ConditionType): boolean;\n};\n\ninterface ITestFuncNoCond&amp;lt;ValueType&amp;gt; {\n   (value: ValueType): boolean;\n};\n\nclass Tester {\n   name: TestName;\n   // ConditionType???\n   condition?: ConditionType;\n   // ValueType??? ConditionType ???\n   testImpl: ITestFuncWithCond&amp;lt;ValueType, ConditionType&amp;gt; | ITestFuncNoCond&amp;lt;ValueType&amp;gt;\n\n   // Test constructor with different signatures.\n   constructor(testName: TestName);\n   constructor(testName: TestName, condition: ConditionType);\n   constructor(testName: TestName, condition?: ConditionType) {\n      this.name = testName; this.condition = condition;\n      // Here, the testName is used to fetch the actual test function (testImpl)\n      testImpl = getTestImpl(testName)\n\n      // After the testImpl has been fetched, check if condition type &amp;quot;C&amp;quot; is as defined in &amp;quot;testImpl&amp;quot;.\n      if (condition) {\n         if ((testImpl condition parameter type) === ConditionType) {\n            // OK\n         } else {\n            // NOT OK\n         }\n      }\n   }\n\n   // ValueType should be string for test A, B and C, and should be number for test D.\n   // &amp;quot;this.condition&amp;quot; should be undefined in test A.\n   // &amp;quot;this.condition&amp;quot; should be &amp;quot;number for test B and D, and &amp;quot;string&amp;quot; for testC.\n   test(value: ValueType): boolean {\n      if (this.condition) {\n         return testImpl(value, this.condition);\n      } else {\n         return testImpl(value);\n      }\n   }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ixwhns", "is_robot_indexable": true, "report_reasons": null, "author": "troglonoid", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ixwhns/generics_and_interfaces_confusion/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ixwhns/generics_and_interfaces_confusion/", "subreddit_subscribers": 49016, "created_utc": 1600809338.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hello everyone,\nI'm using react/redux with typescript (functional) and integrating a 3rd party api client. The models defined in the 3rd party are class definitions, however the redux store complaints when trying to add class objects to it. Is there a way to create an interface that uses the field definitions of a class or turn the class definition into a native object during runtime? I want to avoid having to redefine the models as interfaces in order to prevent possible schema desync between my and the 3rd party library.\n\nEdit: as pointed out by others in the comments, I actually want to cast to a native object not to an interface", "author_fullname": "t2_zzjelk0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Convert class to interface during runtime", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ixngm0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1600796236.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600810399.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everyone,\nI&amp;#39;m using react/redux with typescript (functional) and integrating a 3rd party api client. The models defined in the 3rd party are class definitions, however the redux store complaints when trying to add class objects to it. Is there a way to create an interface that uses the field definitions of a class or turn the class definition into a native object during runtime? I want to avoid having to redefine the models as interfaces in order to prevent possible schema desync between my and the 3rd party library.&lt;/p&gt;\n\n&lt;p&gt;Edit: as pointed out by others in the comments, I actually want to cast to a native object not to an interface&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ixngm0", "is_robot_indexable": true, "report_reasons": null, "author": "molotozz", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ixngm0/convert_class_to_interface_during_runtime/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ixngm0/convert_class_to_interface_during_runtime/", "subreddit_subscribers": 49016, "created_utc": 1600781599.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I am working with a fetching class that has methods to fetch different types of data. EX fetchDataA() fetchDataB(). I would like to extend this class basically so that I can provide an implicit wrapper to each instance method so I can specify request retrying, only fetching a single result, etc.   \n\n\nHow can I extend all the instance methods of a class without wrapping each individually?", "author_fullname": "t2_eid4zjs", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Extending class methods to wrap all class instance methods", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ixrblq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600822418.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am working with a fetching class that has methods to fetch different types of data. EX fetchDataA() fetchDataB(). I would like to extend this class basically so that I can provide an implicit wrapper to each instance method so I can specify request retrying, only fetching a single result, etc.   &lt;/p&gt;\n\n&lt;p&gt;How can I extend all the instance methods of a class without wrapping each individually?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ixrblq", "is_robot_indexable": true, "report_reasons": null, "author": "Mo_The_Legend", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ixrblq/extending_class_methods_to_wrap_all_class/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ixrblq/extending_class_methods_to_wrap_all_class/", "subreddit_subscribers": 49016, "created_utc": 1600793618.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_1gbt8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A SQL database implemented purely in TypeScript type annotations.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_iww4hs", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 110, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 110, "approved_by": null, "author_premium": true, "thumbnail": "https://b.thumbs.redditmedia.com/FwJDLWVb0OKWkZP09BUSwGywtjxKeC2b35Tgrbm9crM.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1600703875.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/codemix/ts-sql", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/XqN0e5WR1OfW6JR9IUG4MOgEHzYGaPM2YkXl4p4p6_0.jpg?auto=webp&amp;s=6e3b91e3dec0feab890c1b809132d945241d0b8b", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/XqN0e5WR1OfW6JR9IUG4MOgEHzYGaPM2YkXl4p4p6_0.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=fbea96f27ebca46067bdfb3395ceaace06c107a7", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/XqN0e5WR1OfW6JR9IUG4MOgEHzYGaPM2YkXl4p4p6_0.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=de643183914b00bb9b91efa39c56bbd5b5294ff1", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/XqN0e5WR1OfW6JR9IUG4MOgEHzYGaPM2YkXl4p4p6_0.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=f840e6caa4b3bf560edf08217921082bb8d08a42", "width": 320, "height": 320}], "variants": {}, "id": "1qpkCse-FLIz-Wzq-XzK9XwBdhbc8qGNvIXDkliCtb8"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iww4hs", "is_robot_indexable": true, "report_reasons": null, "author": "moltar", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iww4hs/a_sql_database_implemented_purely_in_typescript/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/codemix/ts-sql", "subreddit_subscribers": 49016, "created_utc": 1600675075.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Currently the Clipboard interface in lib.d.ts only has readText and writeText.  When are we likely to see read and write, given they are pretty widely supported now?\n\nTrying to decide if I should try to hack around this or wait.\n\nThanks", "author_fullname": "t2_3ncctkqx", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "When are we likely to see updated Clipboard access from typescript?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ix861c", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600747577.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Currently the Clipboard interface in lib.d.ts only has readText and writeText.  When are we likely to see read and write, given they are pretty widely supported now?&lt;/p&gt;\n\n&lt;p&gt;Trying to decide if I should try to hack around this or wait.&lt;/p&gt;\n\n&lt;p&gt;Thanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ix861c", "is_robot_indexable": true, "report_reasons": null, "author": "jonesienz", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ix861c/when_are_we_likely_to_see_updated_clipboard/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ix861c/when_are_we_likely_to_see_updated_clipboard/", "subreddit_subscribers": 49016, "created_utc": 1600718777.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_7tkrlqup", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Debug Visualizer A VS Code extension for visualizing data structures while debugging. Like the VS Code's watch view, but with rich visualizations of the watched value.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 70, "top_awarded_type": null, "hide_score": false, "name": "t3_iwpzbm", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.85, "author_flair_background_color": null, "subreddit_type": "public", "ups": 23, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 70, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 23, "approved_by": null, "author_premium": true, "thumbnail": "https://a.thumbs.redditmedia.com/lRgLhbWbeFRegENw6rEIxVq0Mk1VdQ1kCgw5P5_WG44.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1600677209.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "marketplace.visualstudio.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://marketplace.visualstudio.com/items?itemName=hediet.debug-visualizer&amp;1", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/rQdjkaOrVqb09BIIpPHsdU0A8L6dFnZiCEVaWFM2m1A.jpg?auto=webp&amp;s=0ed3a4ff38eba5b7a650ca796cdc3aa1b8fef4d2", "width": 129, "height": 129}, "resolutions": [{"url": "https://external-preview.redd.it/rQdjkaOrVqb09BIIpPHsdU0A8L6dFnZiCEVaWFM2m1A.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=3f267e074fcb74d45faa55f1da23e9bd9ca8c1bf", "width": 108, "height": 108}], "variants": {}, "id": "fMR3L1A0KzzHRHBGMu4JyCFm90o0iHHBlahKOhntfXk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iwpzbm", "is_robot_indexable": true, "report_reasons": null, "author": "damianome", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iwpzbm/debug_visualizer_a_vs_code_extension_for/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://marketplace.visualstudio.com/items?itemName=hediet.debug-visualizer&amp;1", "subreddit_subscribers": 49016, "created_utc": 1600648409.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": " I'm having my whole ts react project in a namespace and now I want to cover this project with tests but I can't figure out how to import props so, I can access desired components that I want to test or import 'render from testing-library/react' in my test. For Example, my component looks like this:  \n**MyComponent.tsx**\n\n    module MainModule {\n    \n        interface Props extends ReactTabComponentProps {\n        }\n    \n        interface State extends ReactComponentState {\n        }\n    \n        export class MyComponent extends ReactTabComponent&lt;Props, State&gt; {\n            constructor(props: Props) {\n                super(props);\n    \n                this.state = {\n                };\n            }\n    \n            setTitle = () =&gt; {\n                this.props.tab.setTitle(\n                    &lt;span&gt;\n                        &lt;Icon name=\"calculator\" fixedWidth /&gt;\n                        MainComponent\n                    &lt;/span&gt;\n                );\n            }\n    \n            render() {\n                return (\n                    \n                );\n            }\n        }\n    }\n\n\nMy test file looks like this:  \n**MyComponent.test.tsx**\n\n    module MainModule {\n    \n     import { MainComponent } from '../Main/components/MainComponent';\n     import { render } from '@testing-library/react';\n     \n        describe(\"mainComponentTest\", () =&gt; {\n            it(\"should renders correctly\", async () =&gt; { \n               \n            });\n    \n    \n        });\n    }\n\n With this, I get TS errors, Error: `(TS)Import declarations in a namespace cannot reference a module.`   \n And if I remove module from my test or write imports outside of module then I get the error:   \n \n\n`(TS)Cannot compile modules using option 'outFile' unless the '--module'flag is 'amd' or 'system'.`  \nAny help would be highly appreciated!", "author_fullname": "t2_521wazxf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Jest Testing: How to import react components when the whole react app is in a typescript namespace and using C# ScriptBundle", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ix2rmw", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600731444.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m having my whole ts react project in a namespace and now I want to cover this project with tests but I can&amp;#39;t figure out how to import props so, I can access desired components that I want to test or import &amp;#39;render from testing-library/react&amp;#39; in my test. For Example, my component looks like this:&lt;br/&gt;\n&lt;strong&gt;MyComponent.tsx&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module MainModule {\n\n    interface Props extends ReactTabComponentProps {\n    }\n\n    interface State extends ReactComponentState {\n    }\n\n    export class MyComponent extends ReactTabComponent&amp;lt;Props, State&amp;gt; {\n        constructor(props: Props) {\n            super(props);\n\n            this.state = {\n            };\n        }\n\n        setTitle = () =&amp;gt; {\n            this.props.tab.setTitle(\n                &amp;lt;span&amp;gt;\n                    &amp;lt;Icon name=&amp;quot;calculator&amp;quot; fixedWidth /&amp;gt;\n                    MainComponent\n                &amp;lt;/span&amp;gt;\n            );\n        }\n\n        render() {\n            return (\n\n            );\n        }\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My test file looks like this:&lt;br/&gt;\n&lt;strong&gt;MyComponent.test.tsx&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;module MainModule {\n\n import { MainComponent } from &amp;#39;../Main/components/MainComponent&amp;#39;;\n import { render } from &amp;#39;@testing-library/react&amp;#39;;\n\n    describe(&amp;quot;mainComponentTest&amp;quot;, () =&amp;gt; {\n        it(&amp;quot;should renders correctly&amp;quot;, async () =&amp;gt; { \n\n        });\n\n\n    });\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;With this, I get TS errors, Error: &lt;code&gt;(TS)Import declarations in a namespace cannot reference a module.&lt;/code&gt;&lt;br/&gt;\n And if I remove module from my test or write imports outside of module then I get the error:   &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;(TS)Cannot compile modules using option &amp;#39;outFile&amp;#39; unless the &amp;#39;--module&amp;#39;flag is &amp;#39;amd&amp;#39; or &amp;#39;system&amp;#39;.&lt;/code&gt;&lt;br/&gt;\nAny help would be highly appreciated!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ix2rmw", "is_robot_indexable": true, "report_reasons": null, "author": "Shah_G_", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ix2rmw/jest_testing_how_to_import_react_components_when/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ix2rmw/jest_testing_how_to_import_react_components_when/", "subreddit_subscribers": 49016, "created_utc": 1600702644.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Is it possible to create a lookup table in typescript with functions that accept different type arguments?\nI'm have a function that returns  a discriminated union with a type property that determines the type of data it holds, I would like to then use the type property as a key to an object with functions that accept types that the discriminated union was formed from\nFor example\n\n    type a = {\n        type:\"obj1\";\n        foo:string;\n    }\n    type b={\n        type:\"obj2\";\n        bar:number;\n    }\n    type union= a or b;\n    const lookupTable={\n        obj1:({foo}:a)=&gt;foo.toLowerCase();\n        obj2:({bar}:b)=&gt;(bar**2).toString(); // all the functions return the same type\n    }\n    //That all works, my issue comes when attempting to do something like\n    const unionObj:union = {type:\"obj1\", foo:\"str\"}; // my code returns this from a function\n    const result = lookupTable[unionObj.type](unionObj);\n    // complicated type errors cause it can't tell that unionObj has been narrowed down to the right type\n\nCan anyone please help with this", "author_fullname": "t2_3fiyykou", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Safe Lookup Table in typescript", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iwsfwl", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1600660134.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600686775.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is it possible to create a lookup table in typescript with functions that accept different type arguments?\nI&amp;#39;m have a function that returns  a discriminated union with a type property that determines the type of data it holds, I would like to then use the type property as a key to an object with functions that accept types that the discriminated union was formed from\nFor example&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type a = {\n    type:&amp;quot;obj1&amp;quot;;\n    foo:string;\n}\ntype b={\n    type:&amp;quot;obj2&amp;quot;;\n    bar:number;\n}\ntype union= a or b;\nconst lookupTable={\n    obj1:({foo}:a)=&amp;gt;foo.toLowerCase();\n    obj2:({bar}:b)=&amp;gt;(bar**2).toString(); // all the functions return the same type\n}\n//That all works, my issue comes when attempting to do something like\nconst unionObj:union = {type:&amp;quot;obj1&amp;quot;, foo:&amp;quot;str&amp;quot;}; // my code returns this from a function\nconst result = lookupTable[unionObj.type](unionObj);\n// complicated type errors cause it can&amp;#39;t tell that unionObj has been narrowed down to the right type\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Can anyone please help with this&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iwsfwl", "is_robot_indexable": true, "report_reasons": null, "author": "CloudsOfMagellan", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iwsfwl/safe_lookup_table_in_typescript/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iwsfwl/safe_lookup_table_in_typescript/", "subreddit_subscribers": 49016, "created_utc": 1600657975.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_iwsfwl", "before": null}}