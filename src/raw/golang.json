{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I looked around but couldn't find anything useful. Do we not consume GraphQL apis from go? Or do we simply use raw HTTP requests?", "author_fullname": "t2_2zqnshjs", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is there a good GraphQL client for go?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gez4h1", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 31, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 31, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588851459.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I looked around but couldn&amp;#39;t find anything useful. Do we not consume GraphQL apis from go? Or do we simply use raw HTTP requests?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gez4h1", "is_robot_indexable": true, "report_reasons": null, "author": "YourTechBud", "discussion_type": null, "num_comments": 15, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gez4h1/is_there_a_good_graphql_client_for_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gez4h1/is_there_a_good_graphql_client_for_go/", "subreddit_subscribers": 111684, "created_utc": 1588822659.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_456t5sw5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "smex - a cli app to extract and convert sitemaps", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gf43cd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588876215.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gf43cd", "is_robot_indexable": true, "report_reasons": null, "author": "hbish_", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gf43cd/smex_a_cli_app_to_extract_and_convert_sitemaps/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/hbish/smex", "subreddit_subscribers": 111684, "created_utc": 1588847415.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I need to get road direction data into my go project. I'm using http requests to OSRM but it is a bottleneck and wanted to bring it into the application as a library. As OSRM is written in C++14 it seems challenging to integrate into Go with SWIG for example.\n\nNeed to make a large number of requests as part of a pre processing pass for a web service. The faster the better.\n\nOn a related note if I was to tackle the bindings is SWIG the right approach for C++ libraries in Go?", "author_fullname": "t2_j2bjh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Are there are Go bindings to libosrm or any high performance routing alternatives?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gf45ae", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588876493.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I need to get road direction data into my go project. I&amp;#39;m using http requests to OSRM but it is a bottleneck and wanted to bring it into the application as a library. As OSRM is written in C++14 it seems challenging to integrate into Go with SWIG for example.&lt;/p&gt;\n\n&lt;p&gt;Need to make a large number of requests as part of a pre processing pass for a web service. The faster the better.&lt;/p&gt;\n\n&lt;p&gt;On a related note if I was to tackle the bindings is SWIG the right approach for C++ libraries in Go?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gf45ae", "is_robot_indexable": true, "report_reasons": null, "author": "dignz", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gf45ae/are_there_are_go_bindings_to_libosrm_or_any_high/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gf45ae/are_there_are_go_bindings_to_libosrm_or_any_high/", "subreddit_subscribers": 111684, "created_utc": 1588847693.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_l3mfxei", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rob Pike interview: \u201cGo has indeed become the language of cloud infrastructure\u201c", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gegxe4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "public", "ups": 203, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 203, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588787006.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "evrone.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gegxe4", "is_robot_indexable": true, "report_reasons": null, "author": "Rick_Nolan", "discussion_type": null, "num_comments": 38, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gegxe4/rob_pike_interview_go_has_indeed_become_the/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://evrone.com/rob-pike-interview", "subreddit_subscribers": 111684, "created_utc": 1588758206.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4fhyq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Learn go with tests: HTTP handlers revisited", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_gf6d3u", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588886241.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "quii.gitbook.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gf6d3u", "is_robot_indexable": true, "report_reasons": null, "author": "quiI", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gf6d3u/learn_go_with_tests_http_handlers_revisited/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://quii.gitbook.io/learn-go-with-tests/questions-and-answers/http-handlers-revisited", "subreddit_subscribers": 111684, "created_utc": 1588857441.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_3trg70mi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "ent: a graph-based ORM for Go, from Facebook", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gem8el", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 46, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 46, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588807984.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "entgo.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gem8el", "is_robot_indexable": true, "report_reasons": null, "author": "lperkins-cncf", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gem8el/ent_a_graphbased_orm_for_go_from_facebook/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://entgo.io", "subreddit_subscribers": 111684, "created_utc": 1588779184.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi guys.\n\nI've been working professionally for about 4 months (as a backend developer working primarily on Rails), and I've been looking into Golang lately.\n\nI thought I'd try building a simple LRU Cache as a pet project. In the process, I realised how the flexibility Ruby offers you can be extremely helpful. The ability to pass named arguments into a function, and then retrieve them easily, or choose a default value if the value is absent is pretty cool. For instance: -\n\n&amp;#x200B;\n\n    def initialize(name, **args): \n\nargs is basically a Hash (hash map). All named arguments after the first argument to initialize() will be a part of the Hash.\n\nAssign 'name' to instance variable '@name'\n\n        @name = name \n\nIf 'height' is present in args, assign it to '@height'. Else args\\[:height\\]  will evaluate to nil, and DEFAULT\\_HEIGHT is assigned to '@height' instead.\n\n        @height = args[:height] || DEFAULT_HEIGHT\n\n&amp;#x200B;\n\nI thought I'd build a small package that allows me to at least come close to this and this resulted in: [https://github.com/dannypz97/arghpacker](https://github.com/dannypz97/arghpacker). I can create a variable of type *ArgPacker* (which is basically a map) and can then add/modify values, or retrieve values  by key (or a default value if the key is not present in ArgPacker).\n\nThe code itself is very small - about 30 lines.\n\nI plan to use this in my projects. I want to know if it's a bad idea since I don't want any weird ideas (or too many weird ideas) in my projects. I understand that this might have some overhead of its own, but I think this might have some benefits as well.\n\nI want to know what you guys think. Constructive criticism is appreciated.", "author_fullname": "t2_1ilvay3z", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Packing args into a type for passing data into functions easily?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_gf4vzz", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1588852029.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588880235.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi guys.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been working professionally for about 4 months (as a backend developer working primarily on Rails), and I&amp;#39;ve been looking into Golang lately.&lt;/p&gt;\n\n&lt;p&gt;I thought I&amp;#39;d try building a simple LRU Cache as a pet project. In the process, I realised how the flexibility Ruby offers you can be extremely helpful. The ability to pass named arguments into a function, and then retrieve them easily, or choose a default value if the value is absent is pretty cool. For instance: -&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def initialize(name, **args): \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;args is basically a Hash (hash map). All named arguments after the first argument to initialize() will be a part of the Hash.&lt;/p&gt;\n\n&lt;p&gt;Assign &amp;#39;name&amp;#39; to instance variable &amp;#39;@name&amp;#39;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    @name = name \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If &amp;#39;height&amp;#39; is present in args, assign it to &amp;#39;@height&amp;#39;. Else args[:height]  will evaluate to nil, and DEFAULT_HEIGHT is assigned to &amp;#39;@height&amp;#39; instead.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    @height = args[:height] || DEFAULT_HEIGHT\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I thought I&amp;#39;d build a small package that allows me to at least come close to this and this resulted in: &lt;a href=\"https://github.com/dannypz97/arghpacker\"&gt;https://github.com/dannypz97/arghpacker&lt;/a&gt;. I can create a variable of type &lt;em&gt;ArgPacker&lt;/em&gt; (which is basically a map) and can then add/modify values, or retrieve values  by key (or a default value if the key is not present in ArgPacker).&lt;/p&gt;\n\n&lt;p&gt;The code itself is very small - about 30 lines.&lt;/p&gt;\n\n&lt;p&gt;I plan to use this in my projects. I want to know if it&amp;#39;s a bad idea since I don&amp;#39;t want any weird ideas (or too many weird ideas) in my projects. I understand that this might have some overhead of its own, but I think this might have some benefits as well.&lt;/p&gt;\n\n&lt;p&gt;I want to know what you guys think. Constructive criticism is appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gf4vzz", "is_robot_indexable": true, "report_reasons": null, "author": "dpz97", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gf4vzz/packing_args_into_a_type_for_passing_data_into/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gf4vzz/packing_args_into_a_type_for_passing_data_into/", "subreddit_subscribers": 111684, "created_utc": 1588851435.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello everyone!\n\nI have this problem and I am not able to solve it and I want to discuss it with you in case someone can give me another point of view.\n\nI usually have a remote terminal open against one of the servers where I run the dnstop command to get query statistics to DNS.\n\nSo far everything is clear, but as my head never stops I began to think that instead of having a terminal it would be practical to be able to consult or run the dnstop but via the website. And well ... I got down to work, I searched ..... I documented ... and in the end I found what for me was the most suitable solution, which was to use GoTTY.\n\nThe idea itself was good, from the console it executed `gotty dnstop -4 -6 -Q -R l3 eth0`and automatically had on the web page [`http://xxx.xxx.xxx.xxx:8080`](http://xxx.xxx.xxx.xxx:8080/) the command dnstop showing me statistics.\n\nSo far fantastic, but my desire for perfectionism led me to automate it, in reality a not complex process and I solved it as follows by creating this script:\n\n`#! / bin / bash`\n\n`set -e`\n\n`set -x`\n\n`TERM = linux`\n\n`echo \"Executing GoTTY for DNStop ...\"`\n\n`/ usr / local / go_projects / bin / gotty --term xterm dnstop -4 -6 -Q -R -l 3 eth0`\n\nthen with crontab -e create the cron:\n\n`@ reboot (sleep 30 ; /usr/local/execute_gotty.sh)`\n\nIf I manually launch the script it works, but if I let it auto-run after a reboot, when accessing via web, this is the result.\n\n**error opening terminal: unknow**\n\nDoes anyone come up with a solution?\n\nThanks for the help", "author_fullname": "t2_1zw61qqn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GOTTY error opening terminal: unknow", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gf4onq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588879237.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everyone!&lt;/p&gt;\n\n&lt;p&gt;I have this problem and I am not able to solve it and I want to discuss it with you in case someone can give me another point of view.&lt;/p&gt;\n\n&lt;p&gt;I usually have a remote terminal open against one of the servers where I run the dnstop command to get query statistics to DNS.&lt;/p&gt;\n\n&lt;p&gt;So far everything is clear, but as my head never stops I began to think that instead of having a terminal it would be practical to be able to consult or run the dnstop but via the website. And well ... I got down to work, I searched ..... I documented ... and in the end I found what for me was the most suitable solution, which was to use GoTTY.&lt;/p&gt;\n\n&lt;p&gt;The idea itself was good, from the console it executed &lt;code&gt;gotty dnstop -4 -6 -Q -R l3 eth0&lt;/code&gt;and automatically had on the web page &lt;a href=\"http://xxx.xxx.xxx.xxx:8080/\"&gt;&lt;code&gt;http://xxx.xxx.xxx.xxx:8080&lt;/code&gt;&lt;/a&gt; the command dnstop showing me statistics.&lt;/p&gt;\n\n&lt;p&gt;So far fantastic, but my desire for perfectionism led me to automate it, in reality a not complex process and I solved it as follows by creating this script:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;#! / bin / bash&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;set -e&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;set -x&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;TERM = linux&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;echo &amp;quot;Executing GoTTY for DNStop ...&amp;quot;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;/ usr / local / go_projects / bin / gotty --term xterm dnstop -4 -6 -Q -R -l 3 eth0&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;then with crontab -e create the cron:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;@ reboot (sleep 30 ; /usr/local/execute_gotty.sh)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;If I manually launch the script it works, but if I let it auto-run after a reboot, when accessing via web, this is the result.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;error opening terminal: unknow&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Does anyone come up with a solution?&lt;/p&gt;\n\n&lt;p&gt;Thanks for the help&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gf4onq", "is_robot_indexable": true, "report_reasons": null, "author": "jacrespo", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gf4onq/gotty_error_opening_terminal_unknow/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gf4onq/gotty_error_opening_terminal_unknow/", "subreddit_subscribers": 111684, "created_utc": 1588850437.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_1icxk6y4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Could golang be a good alternative to rails in terms of occupying 80%+ of a backend of a livestreaming webapp", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gevbmd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588837044.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gevbmd", "is_robot_indexable": true, "report_reasons": null, "author": "DGKSK8LIFE", "discussion_type": null, "num_comments": 31, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gevbmd/could_golang_be_a_good_alternative_to_rails_in/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gevbmd/could_golang_be_a_good_alternative_to_rails_in/", "subreddit_subscribers": 111684, "created_utc": 1588808244.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "So a software project has strings/integers/other type constants that need to be referenced all over the place. Whats the best practice for handling this in go? \n\nSay for example you're rebuilding an application like [Plaid](https://plaid.com/?utm_source=google&amp;utm_medium=search&amp;utm_campaign=Search_G_Brand_Exact&amp;utm_content=Com&amp;utm_term=plaid&amp;utm_creative=205872015494) and you have several banks you need to store the name of and reference later\n\nIs creating a single \"const\" package a bad practice here ?\n\n    package const\n    \n    type BankName string\n    \n    const (\n      BOA BankName = \"bank of america\"\n      HSBC BankName = \"the hongkong and shanghai banking corporation\"\n      BangkokBank BankName = \"bangkok bank\"  \n      ...\n    )\n    \n    // elsewhere\n    func DebitAccount(bank BankName) error{\n      switch bank {\n       case: BOA\n       // ...\n      }\n    }", "author_fullname": "t2_dk6futc", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[question] How to properly manage common constants for a project in Go?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_geyqwl", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588849873.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So a software project has strings/integers/other type constants that need to be referenced all over the place. Whats the best practice for handling this in go? &lt;/p&gt;\n\n&lt;p&gt;Say for example you&amp;#39;re rebuilding an application like &lt;a href=\"https://plaid.com/?utm_source=google&amp;amp;utm_medium=search&amp;amp;utm_campaign=Search_G_Brand_Exact&amp;amp;utm_content=Com&amp;amp;utm_term=plaid&amp;amp;utm_creative=205872015494\"&gt;Plaid&lt;/a&gt; and you have several banks you need to store the name of and reference later&lt;/p&gt;\n\n&lt;p&gt;Is creating a single &amp;quot;const&amp;quot; package a bad practice here ?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;package const\n\ntype BankName string\n\nconst (\n  BOA BankName = &amp;quot;bank of america&amp;quot;\n  HSBC BankName = &amp;quot;the hongkong and shanghai banking corporation&amp;quot;\n  BangkokBank BankName = &amp;quot;bangkok bank&amp;quot;  \n  ...\n)\n\n// elsewhere\nfunc DebitAccount(bank BankName) error{\n  switch bank {\n   case: BOA\n   // ...\n  }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "geyqwl", "is_robot_indexable": true, "report_reasons": null, "author": "etherrob", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/geyqwl/question_how_to_properly_manage_common_constants/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/geyqwl/question_how_to_properly_manage_common_constants/", "subreddit_subscribers": 111684, "created_utc": 1588821073.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_geyqwl", "before": null}}