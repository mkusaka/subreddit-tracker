{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I've seen this question on a few other subreddits, so I thought i'd ask here. Apart from your main job or full time work, do you make any side income from Ruby? Even if it's only a small amount, I would love to hear about it. Come tell all!!", "author_fullname": "t2_44vkz7eb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ruby income from side projects. Do you?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hnav7i", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594212985.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve seen this question on a few other subreddits, so I thought i&amp;#39;d ask here. Apart from your main job or full time work, do you make any side income from Ruby? Even if it&amp;#39;s only a small amount, I would love to hear about it. Come tell all!!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hnav7i", "is_robot_indexable": true, "report_reasons": null, "author": "mashuganutt", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hnav7i/ruby_income_from_side_projects_do_you/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/hnav7i/ruby_income_from_side_projects_do_you/", "subreddit_subscribers": 66245, "created_utc": 1594184185.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I am working on my own programming language, with a native compiler.  \n\n\nSince LLVM is kinda slow, I thought that maybe making a GCC front-end will be faster (and indeed it is).  \n\n\nYesterday, I saw an article about Ruby3\\*3 and all that stuff, including optimizations of MJIT (the current JIT compiler for Ruby) and for a second I had a crazy idea: making Ruby as fast as C/Crystal by compiling it to native code, with a simple garbage collector and runtime.  \n\n\nThanks to the gem \\`parser\\` a Ruby to abstract syntax tree compiler isn't even needed, I can call the MRI from C via \\`fork()\\` and then \\`execv()\\` (will probably take up to 10 seconds more than a parser written in pure C).  \n\n\nI already know about the pain of porting the core library and standard library and a package manager like RubyGems, but probably the most painful thing will be adding the possibility for creating C extensions, of course.  \n\n\nWhat do you guys about this idea?", "author_fullname": "t2_57t3n9fq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Performance -- What about making a GCC front-end for Ruby?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_hnfz58", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Meta", "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594239263.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am working on my own programming language, with a native compiler.  &lt;/p&gt;\n\n&lt;p&gt;Since LLVM is kinda slow, I thought that maybe making a GCC front-end will be faster (and indeed it is).  &lt;/p&gt;\n\n&lt;p&gt;Yesterday, I saw an article about Ruby3*3 and all that stuff, including optimizations of MJIT (the current JIT compiler for Ruby) and for a second I had a crazy idea: making Ruby as fast as C/Crystal by compiling it to native code, with a simple garbage collector and runtime.  &lt;/p&gt;\n\n&lt;p&gt;Thanks to the gem `parser` a Ruby to abstract syntax tree compiler isn&amp;#39;t even needed, I can call the MRI from C via `fork()` and then `execv()` (will probably take up to 10 seconds more than a parser written in pure C).  &lt;/p&gt;\n\n&lt;p&gt;I already know about the pain of porting the core library and standard library and a package manager like RubyGems, but probably the most painful thing will be adding the possibility for creating C extensions, of course.  &lt;/p&gt;\n\n&lt;p&gt;What do you guys about this idea?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "2592a8bc-873e-11e9-9cf0-0e7b98d79ac4", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hnfz58", "is_robot_indexable": true, "report_reasons": null, "author": "GPhykos", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hnfz58/performance_what_about_making_a_gcc_frontend_for/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/hnfz58/performance_what_about_making_a_gcc_frontend_for/", "subreddit_subscribers": 66245, "created_utc": 1594210463.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I'm really excited to share a project I've been working on for a few months now, as the title says, I'm writing an online book about reimplementing Redis, but in Ruby:\n\n[https://redis.pjam.me/](https://redis.pjam.me/)\n\nWhy you may ask? Because I think it's a lot of fun and there's a lot to learn on the way, tcp servers, tcp sockets, system calls (select, read, ...), threads, processes, we'll touch on all of these.\n\nThere are three chapters currently available, \"Creating a Basic TCP server\", \"Implementing the first commands, GET &amp; SET\", and \"Handling multiple clients\".\n\nI laid out what I think the next chapters will be: [https://redis.pjam.me/chapters](https://redis.pjam.me/chapters)\n\nIf you have feedback, please let me know, and I hope you'll enjoy it as much as I enjoy writing it.\n\nOne of the inspirations for this is this ebook that I love and absolutely recommend: [https://shop.jcoglan.com/building-git/](https://shop.jcoglan.com/building-git/)", "author_fullname": "t2_9njg6s8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Redis in Ruby - A work in progress online book about reimplementing redis ... in ruby", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hmxcgv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 63, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Blog post", "can_mod_post": false, "score": 63, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1594159413.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594166668.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m really excited to share a project I&amp;#39;ve been working on for a few months now, as the title says, I&amp;#39;m writing an online book about reimplementing Redis, but in Ruby:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://redis.pjam.me/\"&gt;https://redis.pjam.me/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Why you may ask? Because I think it&amp;#39;s a lot of fun and there&amp;#39;s a lot to learn on the way, tcp servers, tcp sockets, system calls (select, read, ...), threads, processes, we&amp;#39;ll touch on all of these.&lt;/p&gt;\n\n&lt;p&gt;There are three chapters currently available, &amp;quot;Creating a Basic TCP server&amp;quot;, &amp;quot;Implementing the first commands, GET &amp;amp; SET&amp;quot;, and &amp;quot;Handling multiple clients&amp;quot;.&lt;/p&gt;\n\n&lt;p&gt;I laid out what I think the next chapters will be: &lt;a href=\"https://redis.pjam.me/chapters\"&gt;https://redis.pjam.me/chapters&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;If you have feedback, please let me know, and I hope you&amp;#39;ll enjoy it as much as I enjoy writing it.&lt;/p&gt;\n\n&lt;p&gt;One of the inspirations for this is this ebook that I love and absolutely recommend: &lt;a href=\"https://shop.jcoglan.com/building-git/\"&gt;https://shop.jcoglan.com/building-git/&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "c8896134-873c-11e9-8edb-0e1f22813c3e", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmxcgv", "is_robot_indexable": true, "report_reasons": null, "author": "peery_trimet", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmxcgv/redis_in_ruby_a_work_in_progress_online_book/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/hmxcgv/redis_in_ruby_a_work_in_progress_online_book/", "subreddit_subscribers": 66245, "created_utc": 1594137868.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_63yf9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A Fast Car Needs Good Brakes: How We Added Client Rate Throttling to the Platform API Gem", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 73, "top_awarded_type": null, "hide_score": true, "name": "t3_hngu5n", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": "", "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/cSarL59w3BBAKLeHgTpff6ikkdGbAFBfqyyZUpJDhIg.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1594242844.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.heroku.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://blog.heroku.com/rate-throttle-api-client", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/n6Jwh10LfEEPHYfAc-ESAYIAxd-JfJdl5b8wh1GEw08.jpg?auto=webp&amp;s=173f6a925de27682dd6390e5ed895a888053d98a", "width": 1200, "height": 630}, "resolutions": [{"url": "https://external-preview.redd.it/n6Jwh10LfEEPHYfAc-ESAYIAxd-JfJdl5b8wh1GEw08.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=d28ad1c9c5d967873d1c515fb943f4ad0058d6b8", "width": 108, "height": 56}, {"url": "https://external-preview.redd.it/n6Jwh10LfEEPHYfAc-ESAYIAxd-JfJdl5b8wh1GEw08.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=fc3ad2d061280dee253ae6a074df9510b0a43f21", "width": 216, "height": 113}, {"url": "https://external-preview.redd.it/n6Jwh10LfEEPHYfAc-ESAYIAxd-JfJdl5b8wh1GEw08.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=128f0777798864b355de96b6adf43d5c2113e9d2", "width": 320, "height": 168}, {"url": "https://external-preview.redd.it/n6Jwh10LfEEPHYfAc-ESAYIAxd-JfJdl5b8wh1GEw08.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3185e50d471fa9059fa9629f626c9dd7526920a6", "width": 640, "height": 336}, {"url": "https://external-preview.redd.it/n6Jwh10LfEEPHYfAc-ESAYIAxd-JfJdl5b8wh1GEw08.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=63e34c82e95157792bac3651776523d803f0176e", "width": 960, "height": 504}, {"url": "https://external-preview.redd.it/n6Jwh10LfEEPHYfAc-ESAYIAxd-JfJdl5b8wh1GEw08.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=8dbb9a4ccc464f3c3ec3ce74ae8135afccac965f", "width": 1080, "height": 567}], "variants": {}, "id": "ytF0g4pJsmZVCAnikCbsm8GOBW2uj5z1I-pCNzeWkfk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "Puma maintainer", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hngu5n", "is_robot_indexable": true, "report_reasons": null, "author": "schneems", "discussion_type": null, "num_comments": 0, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/ruby/comments/hngu5n/a_fast_car_needs_good_brakes_how_we_added_client/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://blog.heroku.com/rate-throttle-api-client", "subreddit_subscribers": 66245, "created_utc": 1594214044.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_11ltpa", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Anonymous Struct Literals Might Be Coming To Ruby", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 93, "top_awarded_type": null, "hide_score": false, "name": "t3_hmvn1k", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 18, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 18, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/rqdL5KfbNjbM2ssGjmBxtJnTUh5-4b6eJsSpQkAnqXc.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1594161223.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "supergood.software", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://supergood.software/ruby-anonymous-struct-literals/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/roJLYP8qgOje-1Fkh8mPjBnKwg4Cj1Y5j4HJBtp8uls.jpg?auto=webp&amp;s=36399c4b069b058194fe80f9692acd101304c6ff", "width": 500, "height": 333}, "resolutions": [{"url": "https://external-preview.redd.it/roJLYP8qgOje-1Fkh8mPjBnKwg4Cj1Y5j4HJBtp8uls.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e30e73c5e2fc80a8a4a89befbfba8f366c73dd7d", "width": 108, "height": 71}, {"url": "https://external-preview.redd.it/roJLYP8qgOje-1Fkh8mPjBnKwg4Cj1Y5j4HJBtp8uls.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b2a7e16e2df3d2b1838e9bf6af2ccc80335b2bc3", "width": 216, "height": 143}, {"url": "https://external-preview.redd.it/roJLYP8qgOje-1Fkh8mPjBnKwg4Cj1Y5j4HJBtp8uls.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=a866a0d63eb78a3ddafb88877276b7f1a169e186", "width": 320, "height": 213}], "variants": {}, "id": "k3MFbTOaTp8W13hr5pVlGhCtTFHGPKKbsfeKqZ-QP7M"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmvn1k", "is_robot_indexable": true, "report_reasons": null, "author": "creepywizard", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmvn1k/anonymous_struct_literals_might_be_coming_to_ruby/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://supergood.software/ruby-anonymous-struct-literals/", "subreddit_subscribers": 66245, "created_utc": 1594132423.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "So I used the Shopify Script Generator to generate a script that discounts Shipping Rates by a number or percentage. However I want to adapt this code so I can just hardcode the price rather than discount it, so for example I can explicitly set it to \u00a35 for arguments sake, I'm more of a Python dev so I'm having alot of trouble adapting! Code below  \n\n\n    class Campaign\n      def initialize(condition, *qualifiers)\n        @condition = (condition.to_s + '?').to_sym\n        @qualifiers = PostCartAmountQualifier ? [] : [] rescue qualifiers.compact\n        @line_item_selector = qualifiers.last unless @line_item_selector\n        qualifiers.compact.each do |qualifier|\n          is_multi_select = qualifier.instance_variable_get(:@conditions).is_a?(Array)\n          if is_multi_select\n            qualifier.instance_variable_get(:@conditions).each do |nested_q|\n              @post_amount_qualifier = nested_q if nested_q.is_a?(PostCartAmountQualifier)\n              @qualifiers &lt;&lt; qualifier\n            end\n          else\n            @post_amount_qualifier = qualifier if qualifier.is_a?(PostCartAmountQualifier)\n            @qualifiers &lt;&lt; qualifier\n          end\n        end if @qualifiers.empty?\n      end\n      def qualifies?(cart)\n        return true if @qualifiers.empty?\n        @unmodified_line_items = cart.line_items.map do |item|\n          new_item = item.dup\n          new_item.instance_variables.each do |var|\n            val = item.instance_variable_get(var)\n            new_item.instance_variable_set(var, val.dup) if val.respond_to?(:dup)\n          end\n          new_item\n        end if @post_amount_qualifier\n        @qualifiers.send(@condition) do |qualifier|\n          is_selector = false\n          if qualifier.is_a?(Selector) || qualifier.instance_variable_get(:@conditions).any? { |q| q.is_a?(Selector) }\n            is_selector = true\n          end rescue nil\n          if is_selector\n            raise \"Missing line item match type\" if @li_match_type.nil?\n            cart.line_items.send(@li_match_type) { |item| qualifier.match?(item) }\n          else\n            qualifier.match?(cart, @line_item_selector)\n          end\n        end\n      end\n      def run_with_hooks(cart)\n        before_run(cart) if respond_to?(:before_run)\n        run(cart)\n        after_run(cart)\n      end\n      def after_run(cart)\n        @discount.apply_final_discount if @discount &amp;&amp; @discount.respond_to?(:apply_final_discount)\n        revert_changes(cart) unless @post_amount_qualifier.nil? || @post_amount_qualifier.match?(cart)\n      end\n      def revert_changes(cart)\n        cart.instance_variable_set(:@line_items, @unmodified_line_items)\n      end\n    end\n    class ShippingDiscount &lt; Campaign\n      def initialize(condition, customer_qualifier, cart_qualifier, li_match_type, line_item_qualifier, rate_selector, discount)\n        super(condition, customer_qualifier, cart_qualifier, line_item_qualifier)\n        @li_match_type = (li_match_type.to_s + '?').to_sym\n        @rate_selector = rate_selector\n        @discount = discount\n      end\n      def run(rates, cart)\n        raise \"Campaign requires a discount\" unless @discount\n        return unless qualifies?(cart)\n        rates.each do |rate|\n          next unless @rate_selector.nil? || @rate_selector.match?(rate)\n          @discount.apply(rate)\n        end\n      end\n    end\n    class Selector\n      def partial_match(match_type, item_info, possible_matches)\n        match_type = (match_type.to_s + '?').to_sym\n        if item_info.kind_of?(Array)\n          possible_matches.any? do |possibility|\n            item_info.any? do |search|\n              search.send(match_type, possibility)\n            end\n          end\n        else\n          possible_matches.any? do |possibility|\n            item_info.send(match_type, possibility)\n          end\n        end\n      end\n    end\n    class RateNameSelector &lt; Selector\n      def initialize(match_type, match_condition, names)\n        @match_condition = match_condition\n        @invert = match_type == :does_not\n        @names = names.map(&amp;:downcase)\n      end\n      def match?(shipping_rate)\n        name = shipping_rate.name.downcase\n        case @match_condition\n          when :match\n            return @invert ^ @names.include?(name)\n          else\n            return @invert ^ partial_match(@match_condition, name, @names)\n        end\n      end\n    end\n    class FixedDiscount\n      def initialize(amount, message)\n        @amount = Money.new(cents: amount * 100)\n        @message = message\n      end\n      def apply(rate)\n        discount_amount = rate.price - @amount &lt; Money.zero ? rate.price : @amount\n        rate.apply_discount(discount_amount, { message: @message })\n      end\n    end\n    CAMPAIGNS = [\n      ShippingDiscount.new(\n        :any,\n        nil,\n        nil,\n        :any,\n        nil,\n        RateNameSelector.new(\n          :does,\n          :match,\n          [\"Saturday Delivery (order by 11pm Fri)\"]\n        ),\n        FixedDiscount.new(\n          3,\n          \"\"\n        )\n      ),\n      ShippingDiscount.new(\n        :any,\n        nil,\n        nil,\n        :any,\n        nil,\n        RateNameSelector.new(\n          :does,\n          :match,\n          [\"Saturday Delivery (order by 11pm Fri)\"]\n        ),\n        FixedDiscount.new(\n          2,\n          \"\"\n        )\n      )\n    ].freeze\n    CAMPAIGNS.each do |campaign|\n      campaign.run(Input.shipping_rates, Input.cart)\n    end\n    \n    Output.shipping_rates = Input.shipping_rates", "author_fullname": "t2_ak3o2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hard Code Price - Shopify Script", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hmu1mh", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.77, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594155427.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I used the Shopify Script Generator to generate a script that discounts Shipping Rates by a number or percentage. However I want to adapt this code so I can just hardcode the price rather than discount it, so for example I can explicitly set it to \u00a35 for arguments sake, I&amp;#39;m more of a Python dev so I&amp;#39;m having alot of trouble adapting! Code below  &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class Campaign\n  def initialize(condition, *qualifiers)\n    @condition = (condition.to_s + &amp;#39;?&amp;#39;).to_sym\n    @qualifiers = PostCartAmountQualifier ? [] : [] rescue qualifiers.compact\n    @line_item_selector = qualifiers.last unless @line_item_selector\n    qualifiers.compact.each do |qualifier|\n      is_multi_select = qualifier.instance_variable_get(:@conditions).is_a?(Array)\n      if is_multi_select\n        qualifier.instance_variable_get(:@conditions).each do |nested_q|\n          @post_amount_qualifier = nested_q if nested_q.is_a?(PostCartAmountQualifier)\n          @qualifiers &amp;lt;&amp;lt; qualifier\n        end\n      else\n        @post_amount_qualifier = qualifier if qualifier.is_a?(PostCartAmountQualifier)\n        @qualifiers &amp;lt;&amp;lt; qualifier\n      end\n    end if @qualifiers.empty?\n  end\n  def qualifies?(cart)\n    return true if @qualifiers.empty?\n    @unmodified_line_items = cart.line_items.map do |item|\n      new_item = item.dup\n      new_item.instance_variables.each do |var|\n        val = item.instance_variable_get(var)\n        new_item.instance_variable_set(var, val.dup) if val.respond_to?(:dup)\n      end\n      new_item\n    end if @post_amount_qualifier\n    @qualifiers.send(@condition) do |qualifier|\n      is_selector = false\n      if qualifier.is_a?(Selector) || qualifier.instance_variable_get(:@conditions).any? { |q| q.is_a?(Selector) }\n        is_selector = true\n      end rescue nil\n      if is_selector\n        raise &amp;quot;Missing line item match type&amp;quot; if @li_match_type.nil?\n        cart.line_items.send(@li_match_type) { |item| qualifier.match?(item) }\n      else\n        qualifier.match?(cart, @line_item_selector)\n      end\n    end\n  end\n  def run_with_hooks(cart)\n    before_run(cart) if respond_to?(:before_run)\n    run(cart)\n    after_run(cart)\n  end\n  def after_run(cart)\n    @discount.apply_final_discount if @discount &amp;amp;&amp;amp; @discount.respond_to?(:apply_final_discount)\n    revert_changes(cart) unless @post_amount_qualifier.nil? || @post_amount_qualifier.match?(cart)\n  end\n  def revert_changes(cart)\n    cart.instance_variable_set(:@line_items, @unmodified_line_items)\n  end\nend\nclass ShippingDiscount &amp;lt; Campaign\n  def initialize(condition, customer_qualifier, cart_qualifier, li_match_type, line_item_qualifier, rate_selector, discount)\n    super(condition, customer_qualifier, cart_qualifier, line_item_qualifier)\n    @li_match_type = (li_match_type.to_s + &amp;#39;?&amp;#39;).to_sym\n    @rate_selector = rate_selector\n    @discount = discount\n  end\n  def run(rates, cart)\n    raise &amp;quot;Campaign requires a discount&amp;quot; unless @discount\n    return unless qualifies?(cart)\n    rates.each do |rate|\n      next unless @rate_selector.nil? || @rate_selector.match?(rate)\n      @discount.apply(rate)\n    end\n  end\nend\nclass Selector\n  def partial_match(match_type, item_info, possible_matches)\n    match_type = (match_type.to_s + &amp;#39;?&amp;#39;).to_sym\n    if item_info.kind_of?(Array)\n      possible_matches.any? do |possibility|\n        item_info.any? do |search|\n          search.send(match_type, possibility)\n        end\n      end\n    else\n      possible_matches.any? do |possibility|\n        item_info.send(match_type, possibility)\n      end\n    end\n  end\nend\nclass RateNameSelector &amp;lt; Selector\n  def initialize(match_type, match_condition, names)\n    @match_condition = match_condition\n    @invert = match_type == :does_not\n    @names = names.map(&amp;amp;:downcase)\n  end\n  def match?(shipping_rate)\n    name = shipping_rate.name.downcase\n    case @match_condition\n      when :match\n        return @invert ^ @names.include?(name)\n      else\n        return @invert ^ partial_match(@match_condition, name, @names)\n    end\n  end\nend\nclass FixedDiscount\n  def initialize(amount, message)\n    @amount = Money.new(cents: amount * 100)\n    @message = message\n  end\n  def apply(rate)\n    discount_amount = rate.price - @amount &amp;lt; Money.zero ? rate.price : @amount\n    rate.apply_discount(discount_amount, { message: @message })\n  end\nend\nCAMPAIGNS = [\n  ShippingDiscount.new(\n    :any,\n    nil,\n    nil,\n    :any,\n    nil,\n    RateNameSelector.new(\n      :does,\n      :match,\n      [&amp;quot;Saturday Delivery (order by 11pm Fri)&amp;quot;]\n    ),\n    FixedDiscount.new(\n      3,\n      &amp;quot;&amp;quot;\n    )\n  ),\n  ShippingDiscount.new(\n    :any,\n    nil,\n    nil,\n    :any,\n    nil,\n    RateNameSelector.new(\n      :does,\n      :match,\n      [&amp;quot;Saturday Delivery (order by 11pm Fri)&amp;quot;]\n    ),\n    FixedDiscount.new(\n      2,\n      &amp;quot;&amp;quot;\n    )\n  )\n].freeze\nCAMPAIGNS.each do |campaign|\n  campaign.run(Input.shipping_rates, Input.cart)\nend\n\nOutput.shipping_rates = Input.shipping_rates\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmu1mh", "is_robot_indexable": true, "report_reasons": null, "author": "HutchLAD", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmu1mh/hard_code_price_shopify_script/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/hmu1mh/hard_code_price_shopify_script/", "subreddit_subscribers": 66245, "created_utc": 1594126627.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_70372", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why validation matchers are the only Shoulda matchers I use", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_hmmdza", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.74, "author_flair_background_color": "", "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/MDqFdEvJFGzucQbDsolqq8rFCH2m-qAFEeKp5q_AWYo.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1594119387.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "codewithjason.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.codewithjason.com/validation-matchers-shoulda-matchers-use/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/n0Gj1pbe3MdIRXolM24PPTWLAr6pXTa4II6qD5yQv48.jpg?auto=webp&amp;s=8434e4704dc5ddabc9f51f764f7984f6fa8a7317", "width": 754, "height": 809}, "resolutions": [{"url": "https://external-preview.redd.it/n0Gj1pbe3MdIRXolM24PPTWLAr6pXTa4II6qD5yQv48.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c1378bb49c5ad7f3d4aa627af09f5bfc3a693c5b", "width": 108, "height": 115}, {"url": "https://external-preview.redd.it/n0Gj1pbe3MdIRXolM24PPTWLAr6pXTa4II6qD5yQv48.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=71e3a6754179065d77d8cf8be8553407fe9012ea", "width": 216, "height": 231}, {"url": "https://external-preview.redd.it/n0Gj1pbe3MdIRXolM24PPTWLAr6pXTa4II6qD5yQv48.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=39871fab5bbdea8a738291fcf4cfd56cb1c6d22e", "width": 320, "height": 343}, {"url": "https://external-preview.redd.it/n0Gj1pbe3MdIRXolM24PPTWLAr6pXTa4II6qD5yQv48.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=4eca2f6e77ea7e05a7e7cba093ed5ed70944ba60", "width": 640, "height": 686}], "variants": {}, "id": "3drNhwiSGExmramCDw1VKG6tY70Ozdnn7KggVG-2yKM"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "Rails with Jason", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmmdza", "is_robot_indexable": true, "report_reasons": null, "author": "jasonswett", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/ruby/comments/hmmdza/why_validation_matchers_are_the_only_shoulda/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.codewithjason.com/validation-matchers-shoulda-matchers-use/", "subreddit_subscribers": 66245, "created_utc": 1594090587.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Hey,\n\nI\u2019m looking for suggestions on a really good advanced Ruby course. It can start with the basics, but it should also ramp up and get into the weeds.\n\nTo better \u201cexplain\u201d what I\u2019m looking for, I once followed a course for JavaScript that went into the source code for V8 several times to explain concepts. It explained It also outlined how some of the major JS frameworks (at the time) where built.\n\nAt the end of this, I want to understand all the major mechanics surrounding the ruby language.\n\nThank you for your suggestions!\n\n\u2014\u2014\n\nEdit:\n\nI\u2019m currently reading Why\u2019s guide to Ruby. And I\u2019m learning a bunch. I\u2019ve also considered just reading a bunch of docs etc. But sometimes something in video format is easier to digest. Or a more carefully written (series of) articles.", "author_fullname": "t2_123zv7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best deep-dive Ruby course?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hmg444", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Question", "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1594068757.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594097065.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey,&lt;/p&gt;\n\n&lt;p&gt;I\u2019m looking for suggestions on a really good advanced Ruby course. It can start with the basics, but it should also ramp up and get into the weeds.&lt;/p&gt;\n\n&lt;p&gt;To better \u201cexplain\u201d what I\u2019m looking for, I once followed a course for JavaScript that went into the source code for V8 several times to explain concepts. It explained It also outlined how some of the major JS frameworks (at the time) where built.&lt;/p&gt;\n\n&lt;p&gt;At the end of this, I want to understand all the major mechanics surrounding the ruby language.&lt;/p&gt;\n\n&lt;p&gt;Thank you for your suggestions!&lt;/p&gt;\n\n&lt;p&gt;\u2014\u2014&lt;/p&gt;\n\n&lt;p&gt;Edit:&lt;/p&gt;\n\n&lt;p&gt;I\u2019m currently reading Why\u2019s guide to Ruby. And I\u2019m learning a bunch. I\u2019ve also considered just reading a bunch of docs etc. But sometimes something in video format is easier to digest. Or a more carefully written (series of) articles.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "d3392e70-873c-11e9-af37-0eea3fce36a6", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmg444", "is_robot_indexable": true, "report_reasons": null, "author": "jessevdp", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmg444/best_deepdive_ruby_course/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/hmg444/best_deepdive_ruby_course/", "subreddit_subscribers": 66245, "created_utc": 1594068265.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_6wd3l", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "All About Ruby", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_hmgjql", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1594098448.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/@jinglis12/all-about-ruby-fc83a0a18bd3", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmgjql", "is_robot_indexable": true, "report_reasons": null, "author": "lackoftactics", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmgjql/all_about_ruby/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@jinglis12/all-about-ruby-fc83a0a18bd3", "subreddit_subscribers": 66245, "created_utc": 1594069648.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_5wjhomqi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Continuous Integration Testing: Basics + What to Test", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": 105, "top_awarded_type": null, "hide_score": false, "name": "t3_hmb5qu", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/f-1Q896R1no?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"oembed": {"provider_url": "https://www.youtube.com/", "title": "Continuous Integration Testing: Basics + What to Test", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/f-1Q896R1no?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "height": 338, "width": 600, "version": "1.0", "author_name": "Semicolon&amp;Sons", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/f-1Q896R1no/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UC17mJJnvzAa_e9qQqLIfIeQ"}, "type": "youtube.com"}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/f-1Q896R1no?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/hmb5qu", "height": 338}, "link_flair_text": "Screencast", "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/feMNnAoRyljOqOwov4aC82HHzc03SWTet6NBLLlslRk.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "rich:video", "content_categories": null, "is_self": false, "mod_note": null, "created": 1594082730.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=f-1Q896R1no", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/scrjHHPejZeSBfx8v8iN4uA92fzOCdqz5ktvAPKRjwE.jpg?auto=webp&amp;s=3c5470934940397b56012e738d4a81b7c40a62bb", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/scrjHHPejZeSBfx8v8iN4uA92fzOCdqz5ktvAPKRjwE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=2481ca13aba37ed46dc2ea37f761523aabd425a2", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/scrjHHPejZeSBfx8v8iN4uA92fzOCdqz5ktvAPKRjwE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a612cefcfbc2c46bd47c7f585ddf5b4ab4ad994b", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/scrjHHPejZeSBfx8v8iN4uA92fzOCdqz5ktvAPKRjwE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=c58fdb02c0b764b72744e1b9705f05ff8b5028ff", "width": 320, "height": 240}], "variants": {}, "id": "TLZCVLZh7OfzRktk9SE1-Dh19FpfmKXWBRRCOkgdcZ8"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "dad5ecb8-873c-11e9-ad88-0e1f22813c3e", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hmb5qu", "is_robot_indexable": true, "report_reasons": null, "author": "semicolonandsons", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/hmb5qu/continuous_integration_testing_basics_what_to_test/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=f-1Q896R1no", "subreddit_subscribers": 66245, "created_utc": 1594053930.0, "num_crossposts": 0, "media": {"oembed": {"provider_url": "https://www.youtube.com/", "title": "Continuous Integration Testing: Basics + What to Test", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/f-1Q896R1no?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "height": 338, "width": 600, "version": "1.0", "author_name": "Semicolon&amp;Sons", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/f-1Q896R1no/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UC17mJJnvzAa_e9qQqLIfIeQ"}, "type": "youtube.com"}, "is_video": false}}], "after": "t3_hmb5qu", "before": null}}