{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_13l74d", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Just found that golang has a gopher design guide.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h8yqql", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 570, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 570, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592187399.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "golang.org", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h8yqql", "is_robot_indexable": true, "report_reasons": null, "author": "yolossn", "discussion_type": null, "num_comments": 23, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h8yqql/just_found_that_golang_has_a_gopher_design_guide/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://golang.org/doc/gopher/modelsheet.jpg", "subreddit_subscribers": 115930, "created_utc": 1592158599.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_66yi7lfi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C binding to get NIC details (Linux)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h9a6pv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592229612.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h9a6pv", "is_robot_indexable": true, "report_reasons": null, "author": "solstice-net", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h9a6pv/c_binding_to_get_nic_details_linux/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/rootVIII/goifaddrs", "subreddit_subscribers": 115930, "created_utc": 1592200812.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello Gophers, I recently released an X11 Hotkey Daemon, that is heavily inspired by sxhkd and competes with it! It has everything sxhkd has, except chord chains , which will be implemented soon! Read the README file to find out why you would prefer my hotkey daemon over sxhkd. https://github.com/dakyskye/dxhd", "author_fullname": "t2_4m7fzlck", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "keybinding daemon", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_h9f716", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592252259.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello Gophers, I recently released an X11 Hotkey Daemon, that is heavily inspired by sxhkd and competes with it! It has everything sxhkd has, except chord chains , which will be implemented soon! Read the README file to find out why you would prefer my hotkey daemon over sxhkd. &lt;a href=\"https://github.com/dakyskye/dxhd\"&gt;https://github.com/dakyskye/dxhd&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h9f716", "is_robot_indexable": true, "report_reasons": null, "author": "dakyskye339", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h9f716/keybinding_daemon/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/h9f716/keybinding_daemon/", "subreddit_subscribers": 115930, "created_utc": 1592223459.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_6ptsgy9t", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I made a tool in Go that makes me faster listing AWS resources and their attributes", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_h9g60e", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592255831.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h9g60e", "is_robot_indexable": true, "report_reasons": null, "author": "jckuester", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h9g60e/i_made_a_tool_in_go_that_makes_me_faster_listing/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/jckuester/awsls", "subreddit_subscribers": 115930, "created_utc": 1592227031.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_qtig0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Create your first Web scraper in Go with goQuery", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_h9epxo", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592250316.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h9epxo", "is_robot_indexable": true, "report_reasons": null, "author": "Fewthp", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h9epxo/create_your_first_web_scraper_in_go_with_goquery/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com//create-your-first-web-scraper-in-go-with-goquery-2dcd45743165?source=friends_link&amp;sk=b9cf14b214093848324ce2923375ee41", "subreddit_subscribers": 115930, "created_utc": 1592221516.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am using Go Migrate to create tables, should I also use this process to seed my database with default data? For example, have a migration file that inserts some default users into a users table? Or is this bad practice?", "author_fullname": "t2_ak5m8wp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Seeding a database", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h9666n", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592213025.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am using Go Migrate to create tables, should I also use this process to seed my database with default data? For example, have a migration file that inserts some default users into a users table? Or is this bad practice?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h9666n", "is_robot_indexable": true, "report_reasons": null, "author": "freetoplay123", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h9666n/seeding_a_database/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/h9666n/seeding_a_database/", "subreddit_subscribers": 115930, "created_utc": 1592184225.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Context:\n\nI am creating a proxy service that proxies websocket Send and Recv data to grpc using flatbuffers.\n\nClient (sends data to proxy using flatbuffers encoding) -&gt; proxy (\\[\\]byte data is received from websocket Recv method and send it as it is to another service via grpc bidirectional stream) -&gt; another service (receives the flatbuffers message in stream Recv method).\n\n&amp;#x200B;\n\nNow I am facing problem when I want to send the flatbuffers raw \\[\\]byte data from websocket to grpc. The autogenerated code for grpc only accepts \\*flatbuffers.Builder object as sender, constructing a builder requires unpacking the \\[\\]byte data to a message and reconstructing the message, this involves a copy, is there any way to do the same with zero data copy?\n\n&amp;#x200B;\n\nHere is my flatbuffers schema:\n\n*namespace* packet;  \n*table* Message {  \n command:string;  \n data:\\[ubyte\\];  \n}  \nrpc\\_service Packet {  \n Send(Message):Message (streaming: \"bidi\");  \n}\n\n&amp;#x200B;\n\nHere is the command used to generate go files:\n\n`flatc --grpc --go --gen-object-api packet/packet.fbs`\n\nHere is the autogenerated GRPC interface (as u can see write accepts only builder):\n\n*type* PacketClient *interface*{  \n Send(ctx context.Context,   \nopts... grpc.CallOption) (Packet\\_SendClient, error)    \n}\n\n*type* Packet\\_SendClient *interface* {  \n Send(\\*flatbuffers.Builder) error  \n Recv() (\\*Message, error)  \n  grpc.ClientStream  \n}\n\nHere is the code currently I am using to receive the binary data from websocket and send it to other service via grpc:\n\n*func* (handler \\*handler) *runIngress*() {  \n *for* true {  \n data, err := handler.client.Read()  \nfmt.Println(err, data)  \n *if* err != nil {  \nfmt.Println(err)  \n *break*  \n}  \n // *I want to avoid doing this part*  \n // *-------------------------------*  \n message := packet.GetRootAsMessage(data, 0)  \n builder := flatbuffers.NewBuilder(0)  \nbuilder.Finish(message.UnPack().Pack(builder))  \n // *-------------------------------*  \n   \n // *The actual write*  \n err = handler.tunnel.Write(context.Background(), builder)  \n *if* err != nil {  \nfmt.Println(err)  \n}  \n}  \n}\n\nHow can I do in zero copy?", "author_fullname": "t2_h31a1iu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Help Wanted : How to convert flatbuffers raw []byte data received from websocket to *flatBuffers.Builder so that it can be passed to flatbuffers grpc method?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h9e5uc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1592219523.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592247945.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Context:&lt;/p&gt;\n\n&lt;p&gt;I am creating a proxy service that proxies websocket Send and Recv data to grpc using flatbuffers.&lt;/p&gt;\n\n&lt;p&gt;Client (sends data to proxy using flatbuffers encoding) -&amp;gt; proxy ([]byte data is received from websocket Recv method and send it as it is to another service via grpc bidirectional stream) -&amp;gt; another service (receives the flatbuffers message in stream Recv method).&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Now I am facing problem when I want to send the flatbuffers raw []byte data from websocket to grpc. The autogenerated code for grpc only accepts *flatbuffers.Builder object as sender, constructing a builder requires unpacking the []byte data to a message and reconstructing the message, this involves a copy, is there any way to do the same with zero data copy?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Here is my flatbuffers schema:&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;namespace&lt;/em&gt; packet;&lt;br/&gt;\n&lt;em&gt;table&lt;/em&gt; Message {&lt;br/&gt;\n command:string;&lt;br/&gt;\n data:[ubyte];&lt;br/&gt;\n}&lt;br/&gt;\nrpc_service Packet {&lt;br/&gt;\n Send(Message):Message (streaming: &amp;quot;bidi&amp;quot;);&lt;br/&gt;\n}&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Here is the command used to generate go files:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;flatc --grpc --go --gen-object-api packet/packet.fbs&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Here is the autogenerated GRPC interface (as u can see write accepts only builder):&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;type&lt;/em&gt; PacketClient &lt;em&gt;interface&lt;/em&gt;{&lt;br/&gt;\n Send(ctx context.Context,&lt;br/&gt;\nopts... grpc.CallOption) (Packet_SendClient, error)&lt;br/&gt;\n}&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;type&lt;/em&gt; Packet_SendClient &lt;em&gt;interface&lt;/em&gt; {&lt;br/&gt;\n Send(*flatbuffers.Builder) error&lt;br/&gt;\n Recv() (*Message, error)&lt;br/&gt;\n  grpc.ClientStream&lt;br/&gt;\n}&lt;/p&gt;\n\n&lt;p&gt;Here is the code currently I am using to receive the binary data from websocket and send it to other service via grpc:&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;func&lt;/em&gt; (handler *handler) &lt;em&gt;runIngress&lt;/em&gt;() {&lt;br/&gt;\n &lt;em&gt;for&lt;/em&gt; true {&lt;br/&gt;\n data, err := handler.client.Read()&lt;br/&gt;\nfmt.Println(err, data)&lt;br/&gt;\n &lt;em&gt;if&lt;/em&gt; err != nil {&lt;br/&gt;\nfmt.Println(err)&lt;br/&gt;\n &lt;em&gt;break&lt;/em&gt;&lt;br/&gt;\n}&lt;br/&gt;\n // &lt;em&gt;I want to avoid doing this part&lt;/em&gt;&lt;br/&gt;\n // &lt;em&gt;-------------------------------&lt;/em&gt;&lt;br/&gt;\n message := packet.GetRootAsMessage(data, 0)&lt;br/&gt;\n builder := flatbuffers.NewBuilder(0)&lt;br/&gt;\nbuilder.Finish(message.UnPack().Pack(builder))&lt;br/&gt;\n // &lt;em&gt;-------------------------------&lt;/em&gt;  &lt;/p&gt;\n\n&lt;p&gt;// &lt;em&gt;The actual write&lt;/em&gt;&lt;br/&gt;\n err = handler.tunnel.Write(context.Background(), builder)&lt;br/&gt;\n &lt;em&gt;if&lt;/em&gt; err != nil {&lt;br/&gt;\nfmt.Println(err)&lt;br/&gt;\n}&lt;br/&gt;\n}&lt;br/&gt;\n}&lt;/p&gt;\n\n&lt;p&gt;How can I do in zero copy?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h9e5uc", "is_robot_indexable": true, "report_reasons": null, "author": "kunaldawn", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h9e5uc/help_wanted_how_to_convert_flatbuffers_raw_byte/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/h9e5uc/help_wanted_how_to_convert_flatbuffers_raw_byte/", "subreddit_subscribers": 115930, "created_utc": 1592219145.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ggszd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Has anyone used the Tengo language in a project? I'd love to get their feedback. Tengo looks like a nice Python-esque scripting language with full Go-interop", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h9dm8t", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592245508.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "tengolang.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h9dm8t", "is_robot_indexable": true, "report_reasons": null, "author": "preslavrachev", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h9dm8t/has_anyone_used_the_tengo_language_in_a_project/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://tengolang.com/", "subreddit_subscribers": 115930, "created_utc": 1592216708.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_16dghyko", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "multiplexing tcp client/serve for socks5 back-connect forward", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h9d3jo", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592243159.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h9d3jo", "is_robot_indexable": true, "report_reasons": null, "author": "ChristianLisov", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h9d3jo/multiplexing_tcp_clientserve_for_socks5/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/OrlovEvgeny/sctun", "subreddit_subscribers": 115930, "created_utc": 1592214359.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I'm a software developer who's been using the Microsoft ecosystem for 8 years. In particular .Net. I'm trying to figure out the next programming language I want to learn.  \n  \n   \nI want to use it as long as possible, for as many things as possible without having to learn new features/tooling all the time. I want something stable and self contained.  \n  \nI have seen Microsoft hype many tools, only to abandon them quietly once developers were invested and comfortable using them. No more of this for me.  \n\n  \nRecently I was migrating a MVC website from .Net framework to .Net core and getting frustrating at all the breaking changes.  \nI was spending my time Googling error messages or method names to find their equivalent in .net core.   \n  \nI have always been annoyed at the magic behind the scene that makes things implicit. Even simple things like how Views map to controller/actions, or the Injection Dependency built in .net core.  \nI know all this stuff is useful when you master it... But I'm tired of learning the technicalities of yet another flavor of the same old wheel.  \nI like to read code and just get it.  \n  \nThe stuff I code includes:  \n-video games for fun (where Xna/Monogame libraries are really useful)  \n-web apps backend (I don't mind using a JS based framework for the frontend)    \n-data integration  \n-financial computation  \n  \nI want my programming experience to be about mastering a tool and using it to create value.  \nI don't want my programming experience to be about learning many tools and keeping up with their evolution so that I spend little time on creating value.  \n\nI have not used C since school, but I have always liked how plain C ANSI is a self contained tool that can be mastered once for all.  \n  \nWould you say Golang matches my requirements?  \n  \nThanks.", "author_fullname": "t2_qxkc7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Tired of .Net's bloat, hidden magic and constant changes. Is Golang for me?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h99p1k", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1592199041.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592227440.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m a software developer who&amp;#39;s been using the Microsoft ecosystem for 8 years. In particular .Net. I&amp;#39;m trying to figure out the next programming language I want to learn.  &lt;/p&gt;\n\n&lt;p&gt;I want to use it as long as possible, for as many things as possible without having to learn new features/tooling all the time. I want something stable and self contained.  &lt;/p&gt;\n\n&lt;p&gt;I have seen Microsoft hype many tools, only to abandon them quietly once developers were invested and comfortable using them. No more of this for me.  &lt;/p&gt;\n\n&lt;p&gt;Recently I was migrating a MVC website from .Net framework to .Net core and getting frustrating at all the breaking changes.&lt;br/&gt;\nI was spending my time Googling error messages or method names to find their equivalent in .net core.   &lt;/p&gt;\n\n&lt;p&gt;I have always been annoyed at the magic behind the scene that makes things implicit. Even simple things like how Views map to controller/actions, or the Injection Dependency built in .net core.&lt;br/&gt;\nI know all this stuff is useful when you master it... But I&amp;#39;m tired of learning the technicalities of yet another flavor of the same old wheel.&lt;br/&gt;\nI like to read code and just get it.  &lt;/p&gt;\n\n&lt;p&gt;The stuff I code includes:&lt;br/&gt;\n-video games for fun (where Xna/Monogame libraries are really useful)&lt;br/&gt;\n-web apps backend (I don&amp;#39;t mind using a JS based framework for the frontend)&lt;br/&gt;\n-data integration&lt;br/&gt;\n-financial computation  &lt;/p&gt;\n\n&lt;p&gt;I want my programming experience to be about mastering a tool and using it to create value.&lt;br/&gt;\nI don&amp;#39;t want my programming experience to be about learning many tools and keeping up with their evolution so that I spend little time on creating value.  &lt;/p&gt;\n\n&lt;p&gt;I have not used C since school, but I have always liked how plain C ANSI is a self contained tool that can be mastered once for all.  &lt;/p&gt;\n\n&lt;p&gt;Would you say Golang matches my requirements?  &lt;/p&gt;\n\n&lt;p&gt;Thanks.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h99p1k", "is_robot_indexable": true, "report_reasons": null, "author": "BGoodej", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h99p1k/tired_of_nets_bloat_hidden_magic_and_constant/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/h99p1k/tired_of_nets_bloat_hidden_magic_and_constant/", "subreddit_subscribers": 115930, "created_utc": 1592198640.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_h99p1k", "before": null}}