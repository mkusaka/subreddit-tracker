{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Rules For Individuals\n---------------------\n\n* **Don't** create top-level comments - those are for employers.\n* Feel free to reply to top-level comments with **on-topic** questions.\n* I will create top-level comments for **meta** discussion and **individuals looking for work**.\n\nRules For Employers\n---------------------\n\n* You must be hiring **directly**. No third-party recruiters.\n* **One** top-level comment per employer. If you have multiple job openings, that's great, but please consolidate their descriptions or mention them in replies to your own top-level comment.\n* **Don't** use URL shorteners. [reddiquette](https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette) forbids them because they're opaque to the spam filter.\n* Templates are awesome. Please **use** the following template. As the \"formatting help\" says, use \\*\\*two stars\\*\\* to **bold text**. Use empty lines to separate sections.\n* **Proofread** your comment after posting it, and edit any formatting mistakes.\n\n---\n\n\\*\\*Company:\\*\\* [Company name; also, use the \"formatting help\" to make it a link to your company's website, or a specific careers page if you have one.]\n\n&amp;nbsp;\n\n\\*\\*Type:\\*\\* [Full time, part time, internship, contract, etc.]\n\n&amp;nbsp;\n\n\\*\\*Description:\\*\\* [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]\n\n&amp;nbsp;\n\n\\*\\*Location:\\*\\* [Where's your office - or if you're hiring at multiple offices, list them. If your workplace language isn't English, please specify it.]\n\n&amp;nbsp;\n\n\\*\\*Remote:\\*\\* [Do you offer the option of working remotely (permanently, or for the duration of the pandemic)? If so, do you require employees to live in certain areas or time zones?]\n\n&amp;nbsp;\n\n\\*\\*Visa Sponsorship:\\*\\* [Does your company sponsor visas?]\n\n&amp;nbsp;\n\n\\*\\*Technologies:\\*\\* [Required: do you mainly use C++98/03, C++11, C++14, C++17, or C++20? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]\n\n&amp;nbsp;\n\n\\*\\*Contact:\\*\\* [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]\n\n---\n\nPrevious Post\n--------------\n\n* [C++ Jobs - Q2 2020](https://www.reddit.com/r/cpp/comments/ft77lv/c_jobs_q2_2020/)", "author_fullname": "t2_21c1y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++ Jobs - Q3 2020", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hjnaf2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": "", "subreddit_type": "public", "ups": 61, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 61, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": "", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593680441.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;Rules For Individuals&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; create top-level comments - those are for employers.&lt;/li&gt;\n&lt;li&gt;Feel free to reply to top-level comments with &lt;strong&gt;on-topic&lt;/strong&gt; questions.&lt;/li&gt;\n&lt;li&gt;I will create top-level comments for &lt;strong&gt;meta&lt;/strong&gt; discussion and &lt;strong&gt;individuals looking for work&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Rules For Employers&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You must be hiring &lt;strong&gt;directly&lt;/strong&gt;. No third-party recruiters.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;One&lt;/strong&gt; top-level comment per employer. If you have multiple job openings, that&amp;#39;s great, but please consolidate their descriptions or mention them in replies to your own top-level comment.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; use URL shorteners. &lt;a href=\"https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette\"&gt;reddiquette&lt;/a&gt; forbids them because they&amp;#39;re opaque to the spam filter.&lt;/li&gt;\n&lt;li&gt;Templates are awesome. Please &lt;strong&gt;use&lt;/strong&gt; the following template. As the &amp;quot;formatting help&amp;quot; says, use **two stars** to &lt;strong&gt;bold text&lt;/strong&gt;. Use empty lines to separate sections.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Proofread&lt;/strong&gt; your comment after posting it, and edit any formatting mistakes.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;**Company:** [Company name; also, use the &amp;quot;formatting help&amp;quot; to make it a link to your company&amp;#39;s website, or a specific careers page if you have one.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Type:** [Full time, part time, internship, contract, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Description:** [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Location:** [Where&amp;#39;s your office - or if you&amp;#39;re hiring at multiple offices, list them. If your workplace language isn&amp;#39;t English, please specify it.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Remote:** [Do you offer the option of working remotely (permanently, or for the duration of the pandemic)? If so, do you require employees to live in certain areas or time zones?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Visa Sponsorship:** [Does your company sponsor visas?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Technologies:** [Required: do you mainly use C++98/03, C++11, C++14, C++17, or C++20? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Contact:** [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Previous Post&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.reddit.com/r/cpp/comments/ft77lv/c_jobs_q2_2020/\"&gt;C++ Jobs - Q2 2020&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "MSVC STL Dev", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hjnaf2", "is_robot_indexable": true, "report_reasons": null, "author": "STL", "discussion_type": null, "num_comments": 49, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/hjnaf2/c_jobs_q3_2020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/cpp/comments/hjnaf2/c_jobs_q3_2020/", "subreddit_subscribers": 150614, "created_utc": 1593651641.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "I'd like to present a small library from my bsc project. It can be used to parse command line arguments by defining a simple struct. It's a wrapper aroung GNU argp, but I didn't like how you have to manually define callbacks there. I also didn't like how boost::program\\_options or other libraries where defining things, so I wrote my own thing.\n\n[https://github.com/stilgarpl/bsc/tree/master/src/parser](https://github.com/stilgarpl/bsc/tree/master/src/parser)\n\nFields in the struct hold the information if the field was set and how many times it was set (for things like -vvvvv) and of course the value. operator() returns std::optional&lt;T&gt; for Parameter&lt;T&gt; and const T&amp; for DefaultParameter&lt;T&gt; (which always have value)\n\nA sample of how it works:\n\n    struct HelloWorldParameters : CommandLineParameters {\n        Flag flag                    = {{.shortKey = 'f', .longKey = \"flag\", .doc = \"Flag\"}};\n        DefaultParameter&lt;int&gt; number = {{.shortKey = 'i', .longKey = \"number\", .argumentName = \"INT\", .doc = \"An integer number\", .defaultValue = 5}};\n        Parameter&lt;float&gt; realNumber = {{.shortKey = 'F', .longKey = \"float\", .argumentName=\"FLOAT\", .doc = \"A floating point number\"}};\n        Group g                     = {\"Path group:\"};\n        DefaultParameter&lt;std::map&lt;short, std::filesystem::path&gt;&gt; numbersToPathsMap = {{.longKey = \"map\", .argumentName=\"MAP\", .doc = \"Numbers to path map\"}};\n        Argument&lt;std::string&gt; stringArgument;\n        Argument&lt;int&gt; intArgument;\n    };\n    \n    int main(int argc, char* argv[]) {\n        const auto&amp; params = CommandLineParser::defaultParse&lt;HelloWorldParameters&gt;(argc, argv);\n        \n            if (params.flag()) {\n                std::cout &lt;&lt; \"Flag is set\" &lt;&lt; std::endl;\n            }\n        \n            std::cout &lt;&lt; \"Number is \" &lt;&lt; std::to_string(params.number()) &lt;&lt; std::endl;\n            if (params.realNumber()) {\n                std::cout &lt;&lt; \"Real number was set and it is: \" &lt;&lt; std::to_string(*params.realNumber()) &lt;&lt; std::endl;\n            } else {\n                std::cout &lt;&lt; \"Real number was not set\" &lt;&lt; std::endl;\n            }\n        \n            std::cout &lt;&lt; \"Path map:  \"&lt;&lt; std::endl;\n            for (const auto&amp; [key, value] : params.numbersToPathsMap()) {\n                std::cout &lt;&lt; std::to_string(key) &lt;&lt; \"=[\" &lt;&lt; value.string() &lt;&lt; \"]\"&lt;&lt; std::endl;\n            }\n        \n            std::cout &lt;&lt; \"Required argument 1 (string): \" &lt;&lt; params.stringArgument() &lt;&lt; std::endl\n                      &lt;&lt; \"Required argument 2 (int): \" &lt;&lt; params.intArgument() &lt;&lt; std::endl;\n        return 0;\n    }\n\nOf course, this project isn't finished yet, so things may still evolve, may maybe someone will find it useful.", "author_fullname": "t2_35phtg7s", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "bsc::parser - C++20 command line arguments parser", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_id8mq0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.79, "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597952191.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;d like to present a small library from my bsc project. It can be used to parse command line arguments by defining a simple struct. It&amp;#39;s a wrapper aroung GNU argp, but I didn&amp;#39;t like how you have to manually define callbacks there. I also didn&amp;#39;t like how boost::program_options or other libraries where defining things, so I wrote my own thing.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/stilgarpl/bsc/tree/master/src/parser\"&gt;https://github.com/stilgarpl/bsc/tree/master/src/parser&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Fields in the struct hold the information if the field was set and how many times it was set (for things like -vvvvv) and of course the value. operator() returns std::optional&amp;lt;T&amp;gt; for Parameter&amp;lt;T&amp;gt; and const T&amp;amp; for DefaultParameter&amp;lt;T&amp;gt; (which always have value)&lt;/p&gt;\n\n&lt;p&gt;A sample of how it works:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;struct HelloWorldParameters : CommandLineParameters {\n    Flag flag                    = {{.shortKey = &amp;#39;f&amp;#39;, .longKey = &amp;quot;flag&amp;quot;, .doc = &amp;quot;Flag&amp;quot;}};\n    DefaultParameter&amp;lt;int&amp;gt; number = {{.shortKey = &amp;#39;i&amp;#39;, .longKey = &amp;quot;number&amp;quot;, .argumentName = &amp;quot;INT&amp;quot;, .doc = &amp;quot;An integer number&amp;quot;, .defaultValue = 5}};\n    Parameter&amp;lt;float&amp;gt; realNumber = {{.shortKey = &amp;#39;F&amp;#39;, .longKey = &amp;quot;float&amp;quot;, .argumentName=&amp;quot;FLOAT&amp;quot;, .doc = &amp;quot;A floating point number&amp;quot;}};\n    Group g                     = {&amp;quot;Path group:&amp;quot;};\n    DefaultParameter&amp;lt;std::map&amp;lt;short, std::filesystem::path&amp;gt;&amp;gt; numbersToPathsMap = {{.longKey = &amp;quot;map&amp;quot;, .argumentName=&amp;quot;MAP&amp;quot;, .doc = &amp;quot;Numbers to path map&amp;quot;}};\n    Argument&amp;lt;std::string&amp;gt; stringArgument;\n    Argument&amp;lt;int&amp;gt; intArgument;\n};\n\nint main(int argc, char* argv[]) {\n    const auto&amp;amp; params = CommandLineParser::defaultParse&amp;lt;HelloWorldParameters&amp;gt;(argc, argv);\n\n        if (params.flag()) {\n            std::cout &amp;lt;&amp;lt; &amp;quot;Flag is set&amp;quot; &amp;lt;&amp;lt; std::endl;\n        }\n\n        std::cout &amp;lt;&amp;lt; &amp;quot;Number is &amp;quot; &amp;lt;&amp;lt; std::to_string(params.number()) &amp;lt;&amp;lt; std::endl;\n        if (params.realNumber()) {\n            std::cout &amp;lt;&amp;lt; &amp;quot;Real number was set and it is: &amp;quot; &amp;lt;&amp;lt; std::to_string(*params.realNumber()) &amp;lt;&amp;lt; std::endl;\n        } else {\n            std::cout &amp;lt;&amp;lt; &amp;quot;Real number was not set&amp;quot; &amp;lt;&amp;lt; std::endl;\n        }\n\n        std::cout &amp;lt;&amp;lt; &amp;quot;Path map:  &amp;quot;&amp;lt;&amp;lt; std::endl;\n        for (const auto&amp;amp; [key, value] : params.numbersToPathsMap()) {\n            std::cout &amp;lt;&amp;lt; std::to_string(key) &amp;lt;&amp;lt; &amp;quot;=[&amp;quot; &amp;lt;&amp;lt; value.string() &amp;lt;&amp;lt; &amp;quot;]&amp;quot;&amp;lt;&amp;lt; std::endl;\n        }\n\n        std::cout &amp;lt;&amp;lt; &amp;quot;Required argument 1 (string): &amp;quot; &amp;lt;&amp;lt; params.stringArgument() &amp;lt;&amp;lt; std::endl\n                  &amp;lt;&amp;lt; &amp;quot;Required argument 2 (int): &amp;quot; &amp;lt;&amp;lt; params.intArgument() &amp;lt;&amp;lt; std::endl;\n    return 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Of course, this project isn&amp;#39;t finished yet, so things may still evolve, may maybe someone will find it useful.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "id8mq0", "is_robot_indexable": true, "report_reasons": null, "author": "stilgarpl", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/id8mq0/bscparser_c20_command_line_arguments_parser/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/id8mq0/bscparser_c20_command_line_arguments_parser/", "subreddit_subscribers": 150614, "created_utc": 1597923391.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_4enklo9p", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "awesome-hpp: A curated list of awesome header-only C++ libraries", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_icm8g1", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 224, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 224, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1597867003.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/p-ranav/awesome-hpp", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "icm8g1", "is_robot_indexable": true, "report_reasons": null, "author": "p_ranav", "discussion_type": null, "num_comments": 62, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/icm8g1/awesomehpp_a_curated_list_of_awesome_headeronly_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/p-ranav/awesome-hpp", "subreddit_subscribers": 150614, "created_utc": 1597838203.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "I recently re-watched Jason Turner's *C++ Code Smells* talk, and in it he has an example of declaring a string which, when cleaned up, essentially boils down to\n\n    #include &lt;string&gt;\n\n    int main() {\n        std::string const greet1 = \"Hello\";\n        std::string const greet2 = \", world!\";\n    }\n\nAt that time, he was using gcc-9 in godbolt, and the codegen was just two instructions: all of the memory allocation business in `std::string` was elided. I was very excited as clang has had this for some time. I tried it again in [godbolt](https://godbolt.org/z/vb9oKq) with gcc-10.X, and the elisions were no longer working!\n\nI tried searching the gcc Bugzilla, but I couldn't find anything that quite matched (admittedly, my Bugzilla-search-foo may well be insufficient). Is this a known regression?\n\nParticularly confounding is that it *does* work in gcc-10.X when you have only one string object, and it *doesn't* work in any gcc when you have three or more string objects. clang handles all of these cases. This suggests it may be a QoI issue.", "author_fullname": "t2_g095r", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Regression in gcc's memory allocation elision optimization?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ics6dj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 26, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 26, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597886979.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I recently re-watched Jason Turner&amp;#39;s &lt;em&gt;C++ Code Smells&lt;/em&gt; talk, and in it he has an example of declaring a string which, when cleaned up, essentially boils down to&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;#include &amp;lt;string&amp;gt;\n\nint main() {\n    std::string const greet1 = &amp;quot;Hello&amp;quot;;\n    std::string const greet2 = &amp;quot;, world!&amp;quot;;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;At that time, he was using gcc-9 in godbolt, and the codegen was just two instructions: all of the memory allocation business in &lt;code&gt;std::string&lt;/code&gt; was elided. I was very excited as clang has had this for some time. I tried it again in &lt;a href=\"https://godbolt.org/z/vb9oKq\"&gt;godbolt&lt;/a&gt; with gcc-10.X, and the elisions were no longer working!&lt;/p&gt;\n\n&lt;p&gt;I tried searching the gcc Bugzilla, but I couldn&amp;#39;t find anything that quite matched (admittedly, my Bugzilla-search-foo may well be insufficient). Is this a known regression?&lt;/p&gt;\n\n&lt;p&gt;Particularly confounding is that it &lt;em&gt;does&lt;/em&gt; work in gcc-10.X when you have only one string object, and it &lt;em&gt;doesn&amp;#39;t&lt;/em&gt; work in any gcc when you have three or more string objects. clang handles all of these cases. This suggests it may be a QoI issue.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ics6dj", "is_robot_indexable": true, "report_reasons": null, "author": "OmegaNaughtEquals1", "discussion_type": null, "num_comments": 6, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/ics6dj/regression_in_gccs_memory_allocation_elision/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/ics6dj/regression_in_gccs_memory_allocation_elision/", "subreddit_subscribers": 150614, "created_utc": 1597858179.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_q13p9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "The implication of const or reference member variables in C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_icw0gk", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1597898666.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "lesleylai.info", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://lesleylai.info/en/const-and-reference-member-variables/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "icw0gk", "is_robot_indexable": true, "report_reasons": null, "author": "anticrisisg", "discussion_type": null, "num_comments": 14, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/icw0gk/the_implication_of_const_or_reference_member/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://lesleylai.info/en/const-and-reference-member-variables/", "subreddit_subscribers": 150614, "created_utc": 1597869866.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Hello,\n\nI have recently been perusing the Rust language book and found it really well-organized and presenting all the important topics concisely and ready-to-go.\n\nIs there something similar for C++ language? I know there are some WG movements to create the ONE book for learning C++ as many other modern languages do. However, I feel that for now apart from some well-written books from gurus like Scott Meyers, there is a RTFM approach to learning this language. Or am I wrong?  \n\n\nI would be happy to discuss this topic in detail, because I believe that without such book C++ is quite unapproachable for newcomers.", "author_fullname": "t2_ydini", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A Rust-style guide for C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ickurq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.7, "author_flair_background_color": null, "subreddit_type": "public", "ups": 22, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 22, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1597831772.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597860362.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello,&lt;/p&gt;\n\n&lt;p&gt;I have recently been perusing the Rust language book and found it really well-organized and presenting all the important topics concisely and ready-to-go.&lt;/p&gt;\n\n&lt;p&gt;Is there something similar for C++ language? I know there are some WG movements to create the ONE book for learning C++ as many other modern languages do. However, I feel that for now apart from some well-written books from gurus like Scott Meyers, there is a RTFM approach to learning this language. Or am I wrong?  &lt;/p&gt;\n\n&lt;p&gt;I would be happy to discuss this topic in detail, because I believe that without such book C++ is quite unapproachable for newcomers.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ickurq", "is_robot_indexable": true, "report_reasons": null, "author": "xDinger", "discussion_type": null, "num_comments": 30, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/ickurq/a_ruststyle_guide_for_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/ickurq/a_ruststyle_guide_for_c/", "subreddit_subscribers": 150614, "created_utc": 1597831562.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": " [https://medium.com/a-devs-life/designing-an-ideal-class-in-c-d205516c03ab](https://medium.com/a-devs-life/designing-an-ideal-class-in-c-d205516c03ab) \n\nGuys, please provide your valuable comments.", "author_fullname": "t2_7jrtjs1p", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Writing ideal class definition in C++", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_icijxj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.77, "author_flair_background_color": null, "subreddit_type": "public", "ups": 30, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 30, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597847669.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://medium.com/a-devs-life/designing-an-ideal-class-in-c-d205516c03ab\"&gt;https://medium.com/a-devs-life/designing-an-ideal-class-in-c-d205516c03ab&lt;/a&gt; &lt;/p&gt;\n\n&lt;p&gt;Guys, please provide your valuable comments.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "icijxj", "is_robot_indexable": true, "report_reasons": null, "author": "anupam_mz", "discussion_type": null, "num_comments": 36, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/icijxj/writing_ideal_class_definition_in_c/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/icijxj/writing_ideal_class_definition_in_c/", "subreddit_subscribers": 150614, "created_utc": 1597818869.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_21c1y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "VS 2019 16.7.2 is now available", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_icabt5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": "", "subreddit_type": "public", "ups": 108, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 108, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": "", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1597815426.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/microsoft/STL/wiki/Changelog#vs-2019-167", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 30, "id": "award_80d4d339-95d0-43ac-b051-bc3fe0a9bab8", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png", "days_of_premium": 0, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png?width=16&amp;height=16&amp;auto=webp&amp;s=b1a8234a0a122785991d6e6f8a4e0342525196fb", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png?width=32&amp;height=32&amp;auto=webp&amp;s=d18080390a3a15888b1fb45f6310b0362e97d1c9", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png?width=48&amp;height=48&amp;auto=webp&amp;s=d19c39d1fcfc71fe7f4eb2ba1a52d18d8f063b6e", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png?width=64&amp;height=64&amp;auto=webp&amp;s=d4bdebbc07f33dcb808bcdd14ca3a0095719bb13", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png?width=128&amp;height=128&amp;auto=webp&amp;s=c569e8342e4e2c9c8fb9f4afab3b8e51a9fe3b2a", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "description": "Keep the community and yourself healthy and happy.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Wearing is Caring", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png?width=16&amp;height=16&amp;auto=webp&amp;s=b1a8234a0a122785991d6e6f8a4e0342525196fb", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png?width=32&amp;height=32&amp;auto=webp&amp;s=d18080390a3a15888b1fb45f6310b0362e97d1c9", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png?width=48&amp;height=48&amp;auto=webp&amp;s=d19c39d1fcfc71fe7f4eb2ba1a52d18d8f063b6e", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png?width=64&amp;height=64&amp;auto=webp&amp;s=d4bdebbc07f33dcb808bcdd14ca3a0095719bb13", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png?width=128&amp;height=128&amp;auto=webp&amp;s=c569e8342e4e2c9c8fb9f4afab3b8e51a9fe3b2a", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/lcswc5d07hb51_WearingisCaring.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "MSVC STL Dev", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "icabt5", "is_robot_indexable": true, "report_reasons": null, "author": "STL", "discussion_type": null, "num_comments": 23, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/icabt5/vs_2019_1672_is_now_available/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/microsoft/STL/wiki/Changelog#vs-2019-167", "subreddit_subscribers": 150614, "created_utc": 1597786626.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_knnib", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "sol 3: modern lua and C++ integration", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ic8ru0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 74, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 74, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1597810531.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "sol2.readthedocs.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://sol2.readthedocs.io/en/latest/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ic8ru0", "is_robot_indexable": true, "report_reasons": null, "author": "bbmario", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/ic8ru0/sol_3_modern_lua_and_c_integration/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://sol2.readthedocs.io/en/latest/", "subreddit_subscribers": 150614, "created_utc": 1597781731.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "I noticed some time ago that in c++20 mode the &lt;algorithm&gt; header in libstdc++ is substantially bigger than in c++11 mode :\n\n`echo \"#include &lt;algorithm&gt;\" | gcc -std=c++11 -P -E -x c++ - | wc -l`\n\nevaluates to 11760 loc, while\n\n`echo \"#include &lt;algorithm&gt;\" | gcc -std=c++20 -P -E -x c++ - | wc -l`\n\nevaluates to 45219 loc. Clicking through the header apparently in c++20 we have the include chain\n\n&lt;algorithm&gt; -&gt; &lt;bits/ranges\\_algo.h&gt; -&gt; &lt;bits/ranges\\_algobase.h&gt; -&gt; &lt;range&gt;.\n\nHow could that happen? Measuring the compile time of file only including the &lt;algorithm&gt; header I get with the c++11 switch 120 ms and with the c++20 switch **600 ms** (empty file is 100 ms). I a bit baffled that while standardizing the &lt;range&gt; header this either slipped through the cracks or it was actively decided that this is ok. The &lt;algorithm&gt; header is virtually anywhere and with c++20 flag enabled every file including the &lt;algorithm&gt; header will compile half a second slower...\n\n&amp;#x200B;\n\n**Edit:**\n\nApparently the &lt;vector&gt; header also increased by a huge amount from 9530 loc to 19818 loc for libstdc++ due to now including &lt;bits/stl\\_algo.h&gt; (this seems to be a known [issue](https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92546) though). Compiling an empty header file only including &lt;vector&gt; is now up to 230 ms from 130 ms. ", "author_fullname": "t2_7944uh90", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "libstdc++ &lt;algorithm&gt; header transitively including &lt;range&gt;", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ibz0m2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 141, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 141, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1597759205.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597777838.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I noticed some time ago that in c++20 mode the &amp;lt;algorithm&amp;gt; header in libstdc++ is substantially bigger than in c++11 mode :&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;echo &amp;quot;#include &amp;lt;algorithm&amp;gt;&amp;quot; | gcc -std=c++11 -P -E -x c++ - | wc -l&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;evaluates to 11760 loc, while&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;echo &amp;quot;#include &amp;lt;algorithm&amp;gt;&amp;quot; | gcc -std=c++20 -P -E -x c++ - | wc -l&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;evaluates to 45219 loc. Clicking through the header apparently in c++20 we have the include chain&lt;/p&gt;\n\n&lt;p&gt;&amp;lt;algorithm&amp;gt; -&amp;gt; &amp;lt;bits/ranges\\_algo.h&amp;gt; -&amp;gt; &amp;lt;bits/ranges\\_algobase.h&amp;gt; -&amp;gt; &amp;lt;range&amp;gt;.&lt;/p&gt;\n\n&lt;p&gt;How could that happen? Measuring the compile time of file only including the &amp;lt;algorithm&amp;gt; header I get with the c++11 switch 120 ms and with the c++20 switch &lt;strong&gt;600 ms&lt;/strong&gt; (empty file is 100 ms). I a bit baffled that while standardizing the &amp;lt;range&amp;gt; header this either slipped through the cracks or it was actively decided that this is ok. The &amp;lt;algorithm&amp;gt; header is virtually anywhere and with c++20 flag enabled every file including the &amp;lt;algorithm&amp;gt; header will compile half a second slower...&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Edit:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Apparently the &amp;lt;vector&amp;gt; header also increased by a huge amount from 9530 loc to 19818 loc for libstdc++ due to now including &amp;lt;bits/stl\\_algo.h&amp;gt; (this seems to be a known &lt;a href=\"https://gcc.gnu.org/bugzilla/show_bug.cgi?id=92546\"&gt;issue&lt;/a&gt; though). Compiling an empty header file only including &amp;lt;vector&amp;gt; is now up to 230 ms from 130 ms. &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ibz0m2", "is_robot_indexable": true, "report_reasons": null, "author": "janos1995", "discussion_type": null, "num_comments": 89, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/ibz0m2/libstdc_algorithm_header_transitively_including/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/ibz0m2/libstdc_algorithm_header_transitively_including/", "subreddit_subscribers": 150614, "created_utc": 1597749038.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "I am writing a C++20 SQLite wrapper with expressive code in mind. The code must run fast.\n\n    sql::open(\"dev.db\")\n    | sql::query(\"select name, salary from person\")\n    | sql::for_each([](std::string_view name, float salary)\n      { std::cout &lt;&lt; name &lt;&lt; \",\" &lt;&lt; salary &lt;&lt; std::endl; })\n    | sql::onerror([](auto e){ std::cout &lt;&lt; e &lt;&lt; std::endl; });\n\nI have some benchmarks to compare with solutions using the SQLite library. The usage of pipe operators to chain operations is optional and there is an API that throws C++ exceptions instead of using `result&lt;T&gt;` to report errors. \n\n[github.com/ricardocosme/msqlite](https://github.com/ricardocosme/msqlite)\n\nWhat do you think? Any comments or feedbacks are welcome!", "author_fullname": "t2_5it0nepm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++20 SQLite wrapper", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_ic629n", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 32, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 32, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1597802314.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am writing a C++20 SQLite wrapper with expressive code in mind. The code must run fast.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;sql::open(&amp;quot;dev.db&amp;quot;)\n| sql::query(&amp;quot;select name, salary from person&amp;quot;)\n| sql::for_each([](std::string_view name, float salary)\n  { std::cout &amp;lt;&amp;lt; name &amp;lt;&amp;lt; &amp;quot;,&amp;quot; &amp;lt;&amp;lt; salary &amp;lt;&amp;lt; std::endl; })\n| sql::onerror([](auto e){ std::cout &amp;lt;&amp;lt; e &amp;lt;&amp;lt; std::endl; });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I have some benchmarks to compare with solutions using the SQLite library. The usage of pipe operators to chain operations is optional and there is an API that throws C++ exceptions instead of using &lt;code&gt;result&amp;lt;T&amp;gt;&lt;/code&gt; to report errors. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ricardocosme/msqlite\"&gt;github.com/ricardocosme/msqlite&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;What do you think? Any comments or feedbacks are welcome!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ic629n", "is_robot_indexable": true, "report_reasons": null, "author": "rcdemc", "discussion_type": null, "num_comments": 24, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/ic629n/c20_sqlite_wrapper/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/ic629n/c20_sqlite_wrapper/", "subreddit_subscribers": 150614, "created_utc": 1597773514.0, "num_crossposts": 1, "media": null, "is_video": false}}], "after": "t3_ic629n", "before": null}}