{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once. If you want your code reviewed or review other's code, there's a [codereview stackexchange](https://codereview.stackexchange.com/questions/tagged/rust), too. If you need to test your code, maybe [the Rust playground](https://play.rust-lang.org) is for you.\n\nHere are some other venues where help may be found:\n\n[/r/learnrust](https://www.reddit.com/r/learnrust) is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/).\n\nThe official Rust Programming Language Discord: [https://discord.gg/rust-lang](https://discord.gg/rust-lang)\n\nThe unofficial Rust community Discord: [https://bit.ly/rust-community](https://bit.ly/rust-community)\n\nAlso check out [last week's thread](https://reddit.com/r/rust/comments/g0erq1/hey_rustaceans_got_an_easy_question_ask_here/) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nAlso if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hey Rustaceans! Got an easy question? Ask here (17/2020)!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g4nu6j", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587393988.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven&amp;#39;t been written yet.&lt;/p&gt;\n\n&lt;p&gt;If you have a &lt;a href=\"http://stackoverflow.com/\"&gt;StackOverflow&lt;/a&gt; account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it &lt;a href=\"http://stackoverflow.com/questions/tagged/rust\"&gt;the &amp;quot;Rust&amp;quot; tag&lt;/a&gt; for maximum visibility). Note that this site is very interested in question quality. I&amp;#39;ve been asked to read a RFC I authored once. If you want your code reviewed or review other&amp;#39;s code, there&amp;#39;s a &lt;a href=\"https://codereview.stackexchange.com/questions/tagged/rust\"&gt;codereview stackexchange&lt;/a&gt;, too. If you need to test your code, maybe &lt;a href=\"https://play.rust-lang.org\"&gt;the Rust playground&lt;/a&gt; is for you.&lt;/p&gt;\n\n&lt;p&gt;Here are some other venues where help may be found:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/learnrust\"&gt;/r/learnrust&lt;/a&gt; is a subreddit to share your questions and epiphanies learning Rust programming.&lt;/p&gt;\n\n&lt;p&gt;The official Rust user forums: &lt;a href=\"https://users.rust-lang.org/\"&gt;https://users.rust-lang.org/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The official Rust Programming Language Discord: &lt;a href=\"https://discord.gg/rust-lang\"&gt;https://discord.gg/rust-lang&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The unofficial Rust community Discord: &lt;a href=\"https://bit.ly/rust-community\"&gt;https://bit.ly/rust-community&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also check out &lt;a href=\"https://reddit.com/r/rust/comments/g0erq1/hey_rustaceans_got_an_easy_question_ask_here/\"&gt;last week&amp;#39;s thread&lt;/a&gt; with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.&lt;/p&gt;\n\n&lt;p&gt;Also if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g4nu6j", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 150, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/g4nu6j/hey_rustaceans_got_an_easy_question_ask_here/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/g4nu6j/hey_rustaceans_got_an_easy_question_ask_here/", "subreddit_subscribers": 97727, "created_utc": 1587365188.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_pmcr0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "This Week in Rust 335", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g6d0ac", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 119, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 119, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587631030.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "this-week-in-rust.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "twir", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g6d0ac", "is_robot_indexable": true, "report_reasons": null, "author": "nasa42", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/g6d0ac/this_week_in_rust_335/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://this-week-in-rust.org/blog/2020/04/21/this-week-in-rust-335/", "subreddit_subscribers": 97727, "created_utc": 1587602230.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_6jlon", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Teleforking a process onto a different computer!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8v041", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 206, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 206, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587996742.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "thume.ca", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8v041", "is_robot_indexable": true, "report_reasons": null, "author": "WellMakeItSomehow", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/g8v041/teleforking_a_process_onto_a_different_computer/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://thume.ca/2020/04/18/telefork-forking-a-process-onto-a-different-computer/", "subreddit_subscribers": 97727, "created_utc": 1587967942.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_f5d2i", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "First official release of rust-analyzer", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_g8zzdy", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 56, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 56, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588020191.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "rust-analyzer.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "rust-analyzer", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8zzdy", "is_robot_indexable": true, "report_reasons": null, "author": "matklad", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/g8zzdy/first_official_release_of_rustanalyzer/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://rust-analyzer.github.io/blog/2020/04/20/first-release.html", "subreddit_subscribers": 97727, "created_utc": 1587991391.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_3dqpyxf9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Cargo Bloat Action: Track Rust binary sizes across builds/pull requests using Github Actions", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8xgoh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 27, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 27, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588008182.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8xgoh", "is_robot_indexable": true, "report_reasons": null, "author": "Big_badBlobby_mofo", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/g8xgoh/cargo_bloat_action_track_rust_binary_sizes_across/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/orf/cargo-bloat-action/", "subreddit_subscribers": 97727, "created_utc": 1587979382.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_3z3dt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "(Almost) Lockless Stream Buffering", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8qgkj", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 32, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 32, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587977734.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "mcfelix.me", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8qgkj", "is_robot_indexable": true, "report_reasons": null, "author": "Mach60KAS", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/g8qgkj/almost_lockless_stream_buffering/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://mcfelix.me/blog/shared-buffers/", "subreddit_subscribers": 97727, "created_utc": 1587948934.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_ldb39", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Maximum Sum of Subarrays (Leetcode) in Rust (+ benchmarking)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8y2w8", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/G1deF4Rehlw?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Maximum Sum of Subarrays (Leetcode) in Rust", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/G1deF4Rehlw?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Venkos", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/G1deF4Rehlw/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/jamesmcm03"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/G1deF4Rehlw?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/g8y2w8", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "learnrust", "selftext": "", "author_fullname": "t2_ldb39", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Maximum Sum of Subarrays (Leetcode) in Rust (+ benchmarking)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/learnrust", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8ho8i", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/G1deF4Rehlw?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Maximum Sum of Subarrays (Leetcode) in Rust", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/G1deF4Rehlw?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Venkos", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/G1deF4Rehlw/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/jamesmcm03"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/G1deF4Rehlw?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/g8ho8i", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587948501.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_3amtr", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8ho8i", "is_robot_indexable": true, "report_reasons": null, "author": "nivenkos", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/learnrust/comments/g8ho8i/maximum_sum_of_subarrays_leetcode_in_rust/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.youtube.com/watch?v=G1deF4Rehlw", "subreddit_subscribers": 3913, "created_utc": 1587919701.0, "num_crossposts": 2, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Maximum Sum of Subarrays (Leetcode) in Rust", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/G1deF4Rehlw?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Venkos", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/G1deF4Rehlw/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/jamesmcm03"}}, "is_video": false}], "created": 1588011172.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8y2w8", "is_robot_indexable": true, "report_reasons": null, "author": "nivenkos", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_g8ho8i", "author_flair_text_color": null, "permalink": "/r/rust/comments/g8y2w8/maximum_sum_of_subarrays_leetcode_in_rust/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=G1deF4Rehlw", "subreddit_subscribers": 97727, "created_utc": 1587982372.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Maximum Sum of Subarrays (Leetcode) in Rust", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/G1deF4Rehlw?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Venkos", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/G1deF4Rehlw/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/jamesmcm03"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "~~This is in response to [this](https://www.reddit.com/r/rust/comments/g7s4ss/rust_needs_a_wiki/) post where people expressed support for creating a Rust wiki.~~\n\n~~For anyone that is interested in helping us create this wiki, please join the new [Slack workspace](https://join.slack.com/t/rustwiki/shared_invite/zt-e674kvf4-vIHNSAG3nTLbG4ef7ECnhA) so we can discuss options and coordinate efforts.~~\n\nWe've moved to the community Discord under the #wiki channel: https://discord.gg/fwSRAx\n\nThank you!", "author_fullname": "t2_dgoq0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rust Wiki: Slack workspace for coordination", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8j871", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 89, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 89, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1587939131.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587953501.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;del&gt;This is in response to &lt;a href=\"https://www.reddit.com/r/rust/comments/g7s4ss/rust_needs_a_wiki/\"&gt;this&lt;/a&gt; post where people expressed support for creating a Rust wiki.&lt;/del&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;del&gt;For anyone that is interested in helping us create this wiki, please join the new &lt;a href=\"https://join.slack.com/t/rustwiki/shared_invite/zt-e674kvf4-vIHNSAG3nTLbG4ef7ECnhA\"&gt;Slack workspace&lt;/a&gt; so we can discuss options and coordinate efforts.&lt;/del&gt;&lt;/p&gt;\n\n&lt;p&gt;We&amp;#39;ve moved to the community Discord under the #wiki channel: &lt;a href=\"https://discord.gg/fwSRAx\"&gt;https://discord.gg/fwSRAx&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Thank you!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8j871", "is_robot_indexable": true, "report_reasons": null, "author": "chris13524", "discussion_type": null, "num_comments": 51, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/g8j871/rust_wiki_slack_workspace_for_coordination/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/g8j871/rust_wiki_slack_workspace_for_coordination/", "subreddit_subscribers": 97727, "created_utc": 1587924701.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "My understanding was that initializing a vector with `vec!` or `Vec::with_capacity` performed an initial allocation and guaranteed that no other allocations would take place so long as the Vector's length stays below that initial capacity.\n\nHowever, I have been running some tests, and the actual memory use of my program isn't consistent with that understanding.  As a test, I initialized a Vector in three different ways:\n\n1) `Vec::with_capacity(0x4_000_000)`\n\n2) `vec![0_u8; 0x4_000_000]`\n\n3) `vec![47_u8; 0x4_000_000]`\n\nIn each case, I complied my program in release mode, ran it, and measured its total memory use with [ps_mem](https://github.com/pixelb/ps_mem).  When I'd initialized the Vector in either of the first two ways, my program's memory use was unchanged from not creating the large Vector at all, but when I initialized it using #3, my program's memory use increased by the expected amount (~67 MiB).\n\nDoes that mean that `with_capacity` does *not* actually allocate the full capacity (and thus could still require subsequent allocations to reach that capacity)?  Or is it allocating that memory, but not in a way that ps_mem is counting as used (which seems odd \u2013 it the memory has been allocated, it's not available for other programs, which seems like use to me).\n\n(Before anyone says anything, my *actual* use case will not involve allocating a 67 MiB Vector!  I'm just testing with large numbers because they make the effects more obvious :)  But I would like to understand how I need to initialize a vector to guarantee that I can subsequently use it without triggering any allocations)", "author_fullname": "t2_1qohraix", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Do vec![0; n] and Vec::with_capacity(n) sometimes not allocate?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8o113", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 35, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 35, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587969150.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;My understanding was that initializing a vector with &lt;code&gt;vec!&lt;/code&gt; or &lt;code&gt;Vec::with_capacity&lt;/code&gt; performed an initial allocation and guaranteed that no other allocations would take place so long as the Vector&amp;#39;s length stays below that initial capacity.&lt;/p&gt;\n\n&lt;p&gt;However, I have been running some tests, and the actual memory use of my program isn&amp;#39;t consistent with that understanding.  As a test, I initialized a Vector in three different ways:&lt;/p&gt;\n\n&lt;p&gt;1) &lt;code&gt;Vec::with_capacity(0x4_000_000)&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;2) &lt;code&gt;vec![0_u8; 0x4_000_000]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;3) &lt;code&gt;vec![47_u8; 0x4_000_000]&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;In each case, I complied my program in release mode, ran it, and measured its total memory use with &lt;a href=\"https://github.com/pixelb/ps_mem\"&gt;ps_mem&lt;/a&gt;.  When I&amp;#39;d initialized the Vector in either of the first two ways, my program&amp;#39;s memory use was unchanged from not creating the large Vector at all, but when I initialized it using #3, my program&amp;#39;s memory use increased by the expected amount (~67 MiB).&lt;/p&gt;\n\n&lt;p&gt;Does that mean that &lt;code&gt;with_capacity&lt;/code&gt; does &lt;em&gt;not&lt;/em&gt; actually allocate the full capacity (and thus could still require subsequent allocations to reach that capacity)?  Or is it allocating that memory, but not in a way that ps_mem is counting as used (which seems odd \u2013 it the memory has been allocated, it&amp;#39;s not available for other programs, which seems like use to me).&lt;/p&gt;\n\n&lt;p&gt;(Before anyone says anything, my &lt;em&gt;actual&lt;/em&gt; use case will not involve allocating a 67 MiB Vector!  I&amp;#39;m just testing with large numbers because they make the effects more obvious :)  But I would like to understand how I need to initialize a vector to guarantee that I can subsequently use it without triggering any allocations)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8o113", "is_robot_indexable": true, "report_reasons": null, "author": "codesections", "discussion_type": null, "num_comments": 41, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/g8o113/do_vec0_n_and_vecwith_capacityn_sometimes_not/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/g8o113/do_vec0_n_and_vecwith_capacityn_sometimes_not/", "subreddit_subscribers": 97727, "created_utc": 1587940350.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hey there! Hope we're all keeping healthy and happy.\n\nI'm looking to implement a torrenting client just for experience. As part of that, I need to create a buffer that is looks like this [(from BEP)](http://www.bittorrent.org/beps/bep_0015.html):\n\n| Offset | Size           | Name           | Value                           |   |\n|--------|----------------|----------------|---------------------------------|---|\n| 0      | 64-bit integer | protocol_id    | 0x41727101980 // magic constant |   |\n| 8      | 32-bit integer | action         | 0 // connect                    |   |\n| 12     | 32-bit integer | transaction_id | // Randomised ID                |   |\n| 16     |                |                |                                 |   |\n\nThe thing is, I can't find a library that specifically allows me to set offsets for these buffer elements. Has anyone used something similar?\n\nThanks for your time with this, it's super appreciated!\nJake.", "author_fullname": "t2_mg0pd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Creating a buffer with specific indices for UDP messaging", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8v7xi", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587997771.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey there! Hope we&amp;#39;re all keeping healthy and happy.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m looking to implement a torrenting client just for experience. As part of that, I need to create a buffer that is looks like this &lt;a href=\"http://www.bittorrent.org/beps/bep_0015.html\"&gt;(from BEP)&lt;/a&gt;:&lt;/p&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Offset&lt;/th&gt;\n&lt;th&gt;Size&lt;/th&gt;\n&lt;th&gt;Name&lt;/th&gt;\n&lt;th&gt;Value&lt;/th&gt;\n&lt;th&gt;&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;0&lt;/td&gt;\n&lt;td&gt;64-bit integer&lt;/td&gt;\n&lt;td&gt;protocol_id&lt;/td&gt;\n&lt;td&gt;0x41727101980 // magic constant&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;8&lt;/td&gt;\n&lt;td&gt;32-bit integer&lt;/td&gt;\n&lt;td&gt;action&lt;/td&gt;\n&lt;td&gt;0 // connect&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;12&lt;/td&gt;\n&lt;td&gt;32-bit integer&lt;/td&gt;\n&lt;td&gt;transaction_id&lt;/td&gt;\n&lt;td&gt;// Randomised ID&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;16&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;p&gt;The thing is, I can&amp;#39;t find a library that specifically allows me to set offsets for these buffer elements. Has anyone used something similar?&lt;/p&gt;\n\n&lt;p&gt;Thanks for your time with this, it&amp;#39;s super appreciated!\nJake.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8v7xi", "is_robot_indexable": true, "report_reasons": null, "author": "jakequade", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/g8v7xi/creating_a_buffer_with_specific_indices_for_udp/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/g8v7xi/creating_a_buffer_with_specific_indices_for_udp/", "subreddit_subscribers": 97727, "created_utc": 1587968971.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_90l7z", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Educational Rust live coding - Building a git CLI [video]", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8z0xg", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/YFzF1AHYjes?start=301&amp;feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": "4c3a495a-89df-11e3-a482-12313d27e9a3", "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Educational Rust live coding - Building a git CLI", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/YFzF1AHYjes?start=301&amp;feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "David Pedersen", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/YFzF1AHYjes/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCDmSWx6SK0zCU2NqPJ0VmDQ"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/YFzF1AHYjes?start=301&amp;feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/g8z0xg", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588015886.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtu.be", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "juniper-from-schema \u00b7 juniper-eager-loading", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8z0xg", "is_robot_indexable": true, "report_reasons": null, "author": "davidpdrsn", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/g8z0xg/educational_rust_live_coding_building_a_git_cli/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://youtu.be/YFzF1AHYjes?t=301", "subreddit_subscribers": 97727, "created_utc": 1587987086.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Educational Rust live coding - Building a git CLI", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/YFzF1AHYjes?start=301&amp;feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "David Pedersen", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/YFzF1AHYjes/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCDmSWx6SK0zCU2NqPJ0VmDQ"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I'm screwing around with Rust now and learning iterators. All other iterator methods like filter, find and map have worked exactly as I'd expect them to, but I can't use 'any' properly. My current implementation is like this:\n\n`for\u00a0i\u00a0in\u00a0subscriptions.iter().any(|&amp;x|\u00a0x.price\u00a0&lt;\u00a010.0)\u00a0{`  \n   \n\u00a0\u00a0\u00a0\u00a0`}`\n\nWhere 'subscriptions' is a vector of custom structs. This throws a `bool is not an iterator` error, which sounds odd considering that every other operation I've done on an iterator has resolved to a bool at some point. I can't tell exactly why this particular method isn't working like the others, but I have to use it for an assignment, so any help is greatly appreciated.", "author_fullname": "t2_2ey1nh2j", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Confused with how 'any()' works on an iterator.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8xp17", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588009325.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m screwing around with Rust now and learning iterators. All other iterator methods like filter, find and map have worked exactly as I&amp;#39;d expect them to, but I can&amp;#39;t use &amp;#39;any&amp;#39; properly. My current implementation is like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;for\u00a0i\u00a0in\u00a0subscriptions.iter().any(|&amp;amp;x|\u00a0x.price\u00a0&amp;lt;\u00a010.0)\u00a0{&lt;/code&gt;  &lt;/p&gt;\n\n&lt;p&gt;\u00a0\u00a0\u00a0\u00a0&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Where &amp;#39;subscriptions&amp;#39; is a vector of custom structs. This throws a &lt;code&gt;bool is not an iterator&lt;/code&gt; error, which sounds odd considering that every other operation I&amp;#39;ve done on an iterator has resolved to a bool at some point. I can&amp;#39;t tell exactly why this particular method isn&amp;#39;t working like the others, but I have to use it for an assignment, so any help is greatly appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8xp17", "is_robot_indexable": true, "report_reasons": null, "author": "redditishellagay", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/g8xp17/confused_with_how_any_works_on_an_iterator/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/g8xp17/confused_with_how_any_works_on_an_iterator/", "subreddit_subscribers": 97727, "created_utc": 1587980525.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_g8xp17", "before": null}}