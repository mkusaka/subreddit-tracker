{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - August", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_i1ikj5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 30, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 30, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1596269158.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "i1ikj5", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 3, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/i1ikj5/whos_hiring_typescript_developers_august/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/i1ikj5/whos_hiring_typescript_developers_august/", "subreddit_subscribers": 47337, "created_utc": 1596240358.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Other than `sourceMap: true`, do any other settings need to be configured to get stack traces to point to typescript files? My stack traces are hard to follow because they point to the compiled js files.\n\ncurrent settings in tsconfig.json:\n\n    {\n      \"compilerOptions\": {\n        \"target\": \"es5\",\n        \"lib\": [\n          \"dom\",\n          \"dom.iterable\",\n          \"esnext\"\n        ],\n        \"allowJs\": true,\n        \"skipLibCheck\": true,\n        \"esModuleInterop\": true,\n        \"allowSyntheticDefaultImports\": true,\n        \"strict\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"module\": \"CommonJS\",\n        \"moduleResolution\": \"node\",\n        \"resolveJsonModule\": true,\n        \"isolatedModules\": true,\n        \"sourceMap\": true,\n        \"rootDir\": \"src\",\n        \"outDir\": \"compiled\"\n      },\n      \"include\": [\n        \"src\", \"src/__mocks__\"\n      ],\n      \"exclude\": [\"node_modules\", \"**/*.test.ts\", \"compiled\"]\n    }", "author_fullname": "t2_3dgvi4uq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "stack traces not pointing back to source (ts) files", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_ijc1g3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598819883.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Other than &lt;code&gt;sourceMap: true&lt;/code&gt;, do any other settings need to be configured to get stack traces to point to typescript files? My stack traces are hard to follow because they point to the compiled js files.&lt;/p&gt;\n\n&lt;p&gt;current settings in tsconfig.json:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n  &amp;quot;compilerOptions&amp;quot;: {\n    &amp;quot;target&amp;quot;: &amp;quot;es5&amp;quot;,\n    &amp;quot;lib&amp;quot;: [\n      &amp;quot;dom&amp;quot;,\n      &amp;quot;dom.iterable&amp;quot;,\n      &amp;quot;esnext&amp;quot;\n    ],\n    &amp;quot;allowJs&amp;quot;: true,\n    &amp;quot;skipLibCheck&amp;quot;: true,\n    &amp;quot;esModuleInterop&amp;quot;: true,\n    &amp;quot;allowSyntheticDefaultImports&amp;quot;: true,\n    &amp;quot;strict&amp;quot;: true,\n    &amp;quot;forceConsistentCasingInFileNames&amp;quot;: true,\n    &amp;quot;module&amp;quot;: &amp;quot;CommonJS&amp;quot;,\n    &amp;quot;moduleResolution&amp;quot;: &amp;quot;node&amp;quot;,\n    &amp;quot;resolveJsonModule&amp;quot;: true,\n    &amp;quot;isolatedModules&amp;quot;: true,\n    &amp;quot;sourceMap&amp;quot;: true,\n    &amp;quot;rootDir&amp;quot;: &amp;quot;src&amp;quot;,\n    &amp;quot;outDir&amp;quot;: &amp;quot;compiled&amp;quot;\n  },\n  &amp;quot;include&amp;quot;: [\n    &amp;quot;src&amp;quot;, &amp;quot;src/__mocks__&amp;quot;\n  ],\n  &amp;quot;exclude&amp;quot;: [&amp;quot;node_modules&amp;quot;, &amp;quot;**/*.test.ts&amp;quot;, &amp;quot;compiled&amp;quot;]\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ijc1g3", "is_robot_indexable": true, "report_reasons": null, "author": "javascript_dev", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ijc1g3/stack_traces_not_pointing_back_to_source_ts_files/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ijc1g3/stack_traces_not_pointing_back_to_source_ts_files/", "subreddit_subscribers": 47337, "created_utc": 1598791083.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Currently, when extending a type that has index signatures, like this:\n    \n    type DataRecord = { [key in string]: string | number };\n    interface LoginRecord extends DataRecord {\n      account: string,\n      time: number,\n    }\nNo compilation error will occur when assigning a object with more properties to it,\n\n    const record: LoginRecord = {\n      account: 'Admin',\n      time: 0,\n      password: 'admin',\n    }; // no error\n\nCurrently I'm using a utility type to help me:\n\n    type ExtendProperty&lt;B, T extends Record&lt;keyof T, B&gt;&gt; = T;\n    type RecordProperty = string | number;\n    type LoginRecord = ExtendProperty&lt;RecordProperty, {\n      account: string,\n      time: number,\n    }&gt;;\n    const record: LoginRecord = {\n      account: 'Admin',\n      time: 0,\n      password: 'admin',\n    }; // error: ...'password' does not exist in type...\nI wonder if there are other ways to do it?", "author_fullname": "t2_5nvwp30e", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ways to ensure the properties of an interface are of certain types?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iixvio", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 10, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598755781.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Currently, when extending a type that has index signatures, like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type DataRecord = { [key in string]: string | number };\ninterface LoginRecord extends DataRecord {\n  account: string,\n  time: number,\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;No compilation error will occur when assigning a object with more properties to it,&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const record: LoginRecord = {\n  account: &amp;#39;Admin&amp;#39;,\n  time: 0,\n  password: &amp;#39;admin&amp;#39;,\n}; // no error\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Currently I&amp;#39;m using a utility type to help me:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type ExtendProperty&amp;lt;B, T extends Record&amp;lt;keyof T, B&amp;gt;&amp;gt; = T;\ntype RecordProperty = string | number;\ntype LoginRecord = ExtendProperty&amp;lt;RecordProperty, {\n  account: string,\n  time: number,\n}&amp;gt;;\nconst record: LoginRecord = {\n  account: &amp;#39;Admin&amp;#39;,\n  time: 0,\n  password: &amp;#39;admin&amp;#39;,\n}; // error: ...&amp;#39;password&amp;#39; does not exist in type...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I wonder if there are other ways to do it?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iixvio", "is_robot_indexable": true, "report_reasons": null, "author": "Chemical-Quote", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iixvio/ways_to_ensure_the_properties_of_an_interface_are/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iixvio/ways_to_ensure_the_properties_of_an_interface_are/", "subreddit_subscribers": 47337, "created_utc": 1598726981.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I want to create a function which accepts a class and a callback, which also accepts this class and returns its instances. It's not very practical, but it is a simplified example of my problem.\n\nMy code looks like this ([playground link](https://www.typescriptlang.org/play?ts=4.0.2#code/C4TwDgpgBAwg9gOwM7AE4FcDGw6qgXigQgHcAKAOioENUBzJALimoRAG0BdASgID4WbANwAoEQDN0CbAEtEUYBBQAeACpQIAD0UIAJkliIUGbLj5ladZqoA0USQmYX613vgEBJZMFaYIq8Ag1Pi5eAG8RKCioVAhgdFQEeylnOm5RAF8xTAAbaiQDAFkQGDyCqDCskQB6aqhVAAtoGQQdXQhdKHQkajpmgzgAayoKEUUUMmLS-KQ7AH1cmf4odmISKAWypDJuOzWNxYKdnlEauqoAI3RgKA8oTFYWbHRqHJyQGLiEpNpUahABuJBB8EEYIMhoOJUHAALbJBAAQjO9Sa9jgbzgJBadCgSAacHQOU6eMxgg0qGhqDsVxuMhuujgSgQAHJgEjxsBJiUtvNDgZ3CsAIwAJgAzHZmeI4HALrRmScgA)):\n\n    type Constructor = new(...args: any[]) =&gt; any;\n\n    function test&lt;T extends Constructor&gt;(arg: T, fun: (arg: T) =&gt; InstanceType&lt;T&gt;[]) \n    {\n        return fun(arg);\n    }\n\n    class MyClass {}\n\n    // The intended usage is ok...\n    test(MyClass, _class =&gt; [new _class(), new _class()]);\n\n    // ..but I can actually return arrays of any nonsense from fun!\n    // The following should show an error, but it doesn't!\n    test(MyClass, _class =&gt; [123, 'foobar']);\n\nThe second call to `test` allows me to return anything from the callback, despite its type clearly inferred as `(arg: typeof MyClass) =&gt; MyClass[]`. It seems wrong to me that a `(string | number)[]` return type is assignable to `MyClass[]`.\n\nIs there a way to fix this and make it report the correct error?\n\nThanks!", "author_fullname": "t2_sss3a", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why is any nonsense assignable to InstanceType&lt;...&gt;[] here?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iiqcv9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.87, "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598726427.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I want to create a function which accepts a class and a callback, which also accepts this class and returns its instances. It&amp;#39;s not very practical, but it is a simplified example of my problem.&lt;/p&gt;\n\n&lt;p&gt;My code looks like this (&lt;a href=\"https://www.typescriptlang.org/play?ts=4.0.2#code/C4TwDgpgBAwg9gOwM7AE4FcDGw6qgXigQgHcAKAOioENUBzJALimoRAG0BdASgID4WbANwAoEQDN0CbAEtEUYBBQAeACpQIAD0UIAJkliIUGbLj5ladZqoA0USQmYX613vgEBJZMFaYIq8Ag1Pi5eAG8RKCioVAhgdFQEeylnOm5RAF8xTAAbaiQDAFkQGDyCqDCskQB6aqhVAAtoGQQdXQhdKHQkajpmgzgAayoKEUUUMmLS-KQ7AH1cmf4odmISKAWypDJuOzWNxYKdnlEauqoAI3RgKA8oTFYWbHRqHJyQGLiEpNpUahABuJBB8EEYIMhoOJUHAALbJBAAQjO9Sa9jgbzgJBadCgSAacHQOU6eMxgg0qGhqDsVxuMhuujgSgQAHJgEjxsBJiUtvNDgZ3CsAIwAJgAzHZmeI4HALrRmScgA\"&gt;playground link&lt;/a&gt;):&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Constructor = new(...args: any[]) =&amp;gt; any;\n\nfunction test&amp;lt;T extends Constructor&amp;gt;(arg: T, fun: (arg: T) =&amp;gt; InstanceType&amp;lt;T&amp;gt;[]) \n{\n    return fun(arg);\n}\n\nclass MyClass {}\n\n// The intended usage is ok...\ntest(MyClass, _class =&amp;gt; [new _class(), new _class()]);\n\n// ..but I can actually return arrays of any nonsense from fun!\n// The following should show an error, but it doesn&amp;#39;t!\ntest(MyClass, _class =&amp;gt; [123, &amp;#39;foobar&amp;#39;]);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The second call to &lt;code&gt;test&lt;/code&gt; allows me to return anything from the callback, despite its type clearly inferred as &lt;code&gt;(arg: typeof MyClass) =&amp;gt; MyClass[]&lt;/code&gt;. It seems wrong to me that a &lt;code&gt;(string | number)[]&lt;/code&gt; return type is assignable to &lt;code&gt;MyClass[]&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;Is there a way to fix this and make it report the correct error?&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iiqcv9", "is_robot_indexable": true, "report_reasons": null, "author": "smthamazing", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iiqcv9/why_is_any_nonsense_assignable_to_instancetype/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iiqcv9/why_is_any_nonsense_assignable_to_instancetype/", "subreddit_subscribers": 47337, "created_utc": 1598697627.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi there! Quick question to the functional buffs out there:\n\nWhat's the advantage of using a `Maybe&lt;string&gt;` type over using `string | null`? With strict null checking you still need to handle the null case, but you avoid using external libraries and having to introduce new concepts to the other developers on the team.\n\nSame for `Either&lt;Error, string&gt;` and `string | Error`.", "author_fullname": "t2_60jcq180", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Maybe&lt;string&gt; vs string | null", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ii88m3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 31, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 31, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598654413.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi there! Quick question to the functional buffs out there:&lt;/p&gt;\n\n&lt;p&gt;What&amp;#39;s the advantage of using a &lt;code&gt;Maybe&amp;lt;string&amp;gt;&lt;/code&gt; type over using &lt;code&gt;string | null&lt;/code&gt;? With strict null checking you still need to handle the null case, but you avoid using external libraries and having to introduce new concepts to the other developers on the team.&lt;/p&gt;\n\n&lt;p&gt;Same for &lt;code&gt;Either&amp;lt;Error, string&amp;gt;&lt;/code&gt; and &lt;code&gt;string | Error&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ii88m3", "is_robot_indexable": true, "report_reasons": null, "author": "dbartholomae", "discussion_type": null, "num_comments": 53, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ii88m3/maybestring_vs_string_null/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ii88m3/maybestring_vs_string_null/", "subreddit_subscribers": 47337, "created_utc": 1598625613.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "So I have a function (lets call it parent) which has the single responsibility to accept a big list of  arguments and then provide the appropriate parameters to a sequence of functions that are executed (17 functions in total,lets call them children) . There is also some minor logic inside parent that involves some returned values from child functions ,some type checking and argument initialization, but it is nothing special or complex .\n\nI think injecting 17 functions as parameters is an anti pattern in general . Also these child functions do not depend on injected dependencies and have a clear and simple single responsibility .\n\nWhat I thought would be an easy to reason with , but also testable solution ,is to gather all those functions in a big class as methods . The class instances will expose those methods so they will be testable . But the class will expose also the parent function which executes all the child functions .\n\nSo I can go write a test file that can test each child function in isolation but also in combination (in fact whatever combination I like) with the other child functions .\n\nWhat would you do in this case ? Does the big class sound good ? I am unable to reason with dependency injection here . I find that it does more harm than good. The child functions are really specific for the parent function and I believe they will never be reused anywhere else .", "author_fullname": "t2_1ihbqq55", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Writing testable code that is easy to reason with . A function that executes a sequence of injected functions (17 functions injected in total, that none has a dependency injected). Should I make it a class with no dependency injection , and expose the functions as methods (so they are testable)?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iie9f4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.79, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1598700950.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598673457.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I have a function (lets call it parent) which has the single responsibility to accept a big list of  arguments and then provide the appropriate parameters to a sequence of functions that are executed (17 functions in total,lets call them children) . There is also some minor logic inside parent that involves some returned values from child functions ,some type checking and argument initialization, but it is nothing special or complex .&lt;/p&gt;\n\n&lt;p&gt;I think injecting 17 functions as parameters is an anti pattern in general . Also these child functions do not depend on injected dependencies and have a clear and simple single responsibility .&lt;/p&gt;\n\n&lt;p&gt;What I thought would be an easy to reason with , but also testable solution ,is to gather all those functions in a big class as methods . The class instances will expose those methods so they will be testable . But the class will expose also the parent function which executes all the child functions .&lt;/p&gt;\n\n&lt;p&gt;So I can go write a test file that can test each child function in isolation but also in combination (in fact whatever combination I like) with the other child functions .&lt;/p&gt;\n\n&lt;p&gt;What would you do in this case ? Does the big class sound good ? I am unable to reason with dependency injection here . I find that it does more harm than good. The child functions are really specific for the parent function and I believe they will never be reused anywhere else .&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iie9f4", "is_robot_indexable": true, "report_reasons": null, "author": "liaguris", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iie9f4/writing_testable_code_that_is_easy_to_reason_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iie9f4/writing_testable_code_that_is_easy_to_reason_with/", "subreddit_subscribers": 47337, "created_utc": 1598644657.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "More specifically I happen to test a function and I give to it some parameters of wrong type .", "author_fullname": "t2_1ihbqq55", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "ts-expect-error . Is it justified to use it when in tests ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iic8jx", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.85, "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598667055.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;More specifically I happen to test a function and I give to it some parameters of wrong type .&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iic8jx", "is_robot_indexable": true, "report_reasons": null, "author": "liaguris", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iic8jx/tsexpecterror_is_it_justified_to_use_it_when_in/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iic8jx/tsexpecterror_is_it_justified_to_use_it_when_in/", "subreddit_subscribers": 47337, "created_utc": 1598638255.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm trying to setup source mapping so that VsCode can attach a debugger session to my TS source files but I can tell from the stack traces that the node process is still pointing to the JS files inside `/compiled`\n\nWhat else needs to be done before a debugger can map to TS source files? The process I'm running is at `./compiled/server.js`\n\nMy tsconfig.json:\n\n    {\n      \"compilerOptions\": {\n        \"target\": \"es5\",\n        \"lib\": [\n          \"dom\",\n          \"dom.iterable\",\n          \"esnext\"\n        ],\n        \"allowJs\": true,\n        \"skipLibCheck\": true,\n        \"esModuleInterop\": true,\n        \"allowSyntheticDefaultImports\": true,\n        \"strict\": true,\n        \"forceConsistentCasingInFileNames\": true,\n        \"module\": \"CommonJS\",\n        \"moduleResolution\": \"node\",\n        \"resolveJsonModule\": true,\n        \"isolatedModules\": true,\n        \"sourceMap\": true,\n        \"rootDir\": \"src\",\n        \"outDir\": \"compiled\"\n      },\n      \"include\": [\n        \"src\", \"src/__mocks__\"\n      ],\n      \"exclude\": [\"node_modules\", \"**/*.test.ts\", \"compiled\"]\n    }", "author_fullname": "t2_4w51o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "what else besides \"sourceMap\": true is needed to setup source mapping?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_iidy9b", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1598644128.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598672459.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to setup source mapping so that VsCode can attach a debugger session to my TS source files but I can tell from the stack traces that the node process is still pointing to the JS files inside &lt;code&gt;/compiled&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;What else needs to be done before a debugger can map to TS source files? The process I&amp;#39;m running is at &lt;code&gt;./compiled/server.js&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;My tsconfig.json:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n  &amp;quot;compilerOptions&amp;quot;: {\n    &amp;quot;target&amp;quot;: &amp;quot;es5&amp;quot;,\n    &amp;quot;lib&amp;quot;: [\n      &amp;quot;dom&amp;quot;,\n      &amp;quot;dom.iterable&amp;quot;,\n      &amp;quot;esnext&amp;quot;\n    ],\n    &amp;quot;allowJs&amp;quot;: true,\n    &amp;quot;skipLibCheck&amp;quot;: true,\n    &amp;quot;esModuleInterop&amp;quot;: true,\n    &amp;quot;allowSyntheticDefaultImports&amp;quot;: true,\n    &amp;quot;strict&amp;quot;: true,\n    &amp;quot;forceConsistentCasingInFileNames&amp;quot;: true,\n    &amp;quot;module&amp;quot;: &amp;quot;CommonJS&amp;quot;,\n    &amp;quot;moduleResolution&amp;quot;: &amp;quot;node&amp;quot;,\n    &amp;quot;resolveJsonModule&amp;quot;: true,\n    &amp;quot;isolatedModules&amp;quot;: true,\n    &amp;quot;sourceMap&amp;quot;: true,\n    &amp;quot;rootDir&amp;quot;: &amp;quot;src&amp;quot;,\n    &amp;quot;outDir&amp;quot;: &amp;quot;compiled&amp;quot;\n  },\n  &amp;quot;include&amp;quot;: [\n    &amp;quot;src&amp;quot;, &amp;quot;src/__mocks__&amp;quot;\n  ],\n  &amp;quot;exclude&amp;quot;: [&amp;quot;node_modules&amp;quot;, &amp;quot;**/*.test.ts&amp;quot;, &amp;quot;compiled&amp;quot;]\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iidy9b", "is_robot_indexable": true, "report_reasons": null, "author": "fpuen", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/iidy9b/what_else_besides_sourcemap_true_is_needed_to/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/iidy9b/what_else_besides_sourcemap_true_is_needed_to/", "subreddit_subscribers": 47337, "created_utc": 1598643659.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Is there a way to get TypeScript to warn me about the following code?\n\n```typescript\ntype Name = string\nfunction f (_: Name): void {}\n\nconst s: string = 'test'\n// This should ideally give me an error:\n// Argument of type 'string' is not assignable to parameter of type 'Name'\nf(s)\n```\n\nI know that in most cases you would not want to get an error, but in this case it would allow me to combine it with a type guard like:\n\n```typescript\nfunction isName (name: string): name is Name {\n  return name.length &lt; 30\n}\n```\n\nI think there was a discussion on this topic in the TypeScript repo, but I cannot find it anymore.", "author_fullname": "t2_60jcq180", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Disable duck typing for literal types", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ii4vsf", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598640551.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is there a way to get TypeScript to warn me about the following code?&lt;/p&gt;\n\n&lt;p&gt;```typescript\ntype Name = string\nfunction f (_: Name): void {}&lt;/p&gt;\n\n&lt;p&gt;const s: string = &amp;#39;test&amp;#39;\n// This should ideally give me an error:\n// Argument of type &amp;#39;string&amp;#39; is not assignable to parameter of type &amp;#39;Name&amp;#39;\nf(s)\n```&lt;/p&gt;\n\n&lt;p&gt;I know that in most cases you would not want to get an error, but in this case it would allow me to combine it with a type guard like:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;typescript\nfunction isName (name: string): name is Name {\n  return name.length &amp;lt; 30\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I think there was a discussion on this topic in the TypeScript repo, but I cannot find it anymore.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ii4vsf", "is_robot_indexable": true, "report_reasons": null, "author": "dbartholomae", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ii4vsf/disable_duck_typing_for_literal_types/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ii4vsf/disable_duck_typing_for_literal_types/", "subreddit_subscribers": 47337, "created_utc": 1598611751.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi All,\n\nWhat is your opinion on always mentioning return types on each of your method? I mean for simple methods like `checkSomething(),`it's obvious to me it should not be returning and it most likely a void. Or something like `getURL`, also seems something which will return a string. Do you guys have any strong opinions on why adding types should be absolutely necessary?", "author_fullname": "t2_5qsut", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Opinion on explicit return types?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ihpnme", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": null, "subreddit_type": "public", "ups": 26, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 26, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1598579069.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi All,&lt;/p&gt;\n\n&lt;p&gt;What is your opinion on always mentioning return types on each of your method? I mean for simple methods like &lt;code&gt;checkSomething(),&lt;/code&gt;it&amp;#39;s obvious to me it should not be returning and it most likely a void. Or something like &lt;code&gt;getURL&lt;/code&gt;, also seems something which will return a string. Do you guys have any strong opinions on why adding types should be absolutely necessary?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ihpnme", "is_robot_indexable": true, "report_reasons": null, "author": "himanshuarora", "discussion_type": null, "num_comments": 29, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ihpnme/opinion_on_explicit_return_types/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ihpnme/opinion_on_explicit_return_types/", "subreddit_subscribers": 47337, "created_utc": 1598550269.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_10lff6ct", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Faven: a web tool to generate favicons with alpinejs", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_ihpw9k", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 24, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 24, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1598579813.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "faven.netlify.app", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://faven.netlify.app/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ihpw9k", "is_robot_indexable": true, "report_reasons": null, "author": "22mahmoud_", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ihpw9k/faven_a_web_tool_to_generate_favicons_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://faven.netlify.app/", "subreddit_subscribers": 47337, "created_utc": 1598551013.0, "num_crossposts": 1, "media": null, "is_video": false}}], "after": "t3_ihpw9k", "before": null}}