{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am extremely new to Golang and I have been using a Udemy course to learn about the language. I am starting a new job as a back-end developer and my first task is to create an API using Golang. If anyone has any good guides/youtubes to throw my way that would be great. Or if anyone has any pointers or best practices please give me all the knowledge. Thanks!", "author_fullname": "t2_34tpbi0t", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Writing an API using Golang", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gt84cm", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.87, "author_flair_background_color": null, "subreddit_type": "public", "ups": 51, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 51, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590842061.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am extremely new to Golang and I have been using a Udemy course to learn about the language. I am starting a new job as a back-end developer and my first task is to create an API using Golang. If anyone has any good guides/youtubes to throw my way that would be great. Or if anyone has any pointers or best practices please give me all the knowledge. Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gt84cm", "is_robot_indexable": true, "report_reasons": null, "author": "DuhCoCo", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gt84cm/writing_an_api_using_golang/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gt84cm/writing_an_api_using_golang/", "subreddit_subscribers": 114307, "created_utc": 1590813261.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_6asjkigb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Digging deeper into the analysis of Go-code", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gtblh7", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1590860125.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "nakabonne.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gtblh7", "is_robot_indexable": true, "report_reasons": null, "author": "nakabonne", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gtblh7/digging_deeper_into_the_analysis_of_gocode/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://nakabonne.dev/posts/digging-deeper-into-the-analysis-of-go-code", "subreddit_subscribers": 114307, "created_utc": 1590831325.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "We have some models that are shared across some microservices and they are a pita to support. Changes to the models usually have to be merged in tandem or CI breaks, same for deployments. Some people are suggesting joining the repos into a monorepo for the services.", "author_fullname": "t2_2oucmh34", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How do you set up shared models for microservices in your project?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_gtdys7", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590872649.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;We have some models that are shared across some microservices and they are a pita to support. Changes to the models usually have to be merged in tandem or CI breaks, same for deployments. Some people are suggesting joining the repos into a monorepo for the services.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gtdys7", "is_robot_indexable": true, "report_reasons": null, "author": "WrongJudgment6", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gtdys7/how_do_you_set_up_shared_models_for_microservices/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gtdys7/how_do_you_set_up_shared_models_for_microservices/", "subreddit_subscribers": 114307, "created_utc": 1590843849.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ataps", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GoLand 2020.2 Early Access Program starts", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gswlfj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.87, "author_flair_background_color": null, "subreddit_type": "public", "ups": 82, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 82, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1590800002.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.jetbrains.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gswlfj", "is_robot_indexable": true, "report_reasons": null, "author": "dlsniper", "discussion_type": null, "num_comments": 62, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gswlfj/goland_20202_early_access_program_starts/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://blog.jetbrains.com/go/2020/05/29/goland-2020-2-eap-is-open/", "subreddit_subscribers": 114307, "created_utc": 1590771202.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_3hftxvc0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "immudb released version 0.6 - a lightweight, high-speed immutable database for systems and applications. New website https://immudb.io including documentation released as well. Open Source and wrtten in Go.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gsyjwa", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 28, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 28, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1590806255.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gsyjwa", "is_robot_indexable": true, "report_reasons": null, "author": "codenotary", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gsyjwa/immudb_released_version_06_a_lightweight/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/codenotary/immudb", "subreddit_subscribers": 114307, "created_utc": 1590777455.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I want to share with you a project I am currently working on.\n\nnitr-agent is a crossplatform remote monitoring tool written in Golang, providing system and hardware information through a JSON APIproviding system and hardware information through a JSON API.\n\n[https://github.com/juanhuttemann/nitr-agent](https://github.com/juanhuttemann/nitr-agent)\n\nAny comments on this will be highly appreciated.", "author_fullname": "t2_10aozr", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "nitr-agent Remote Monitoring Tool", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gt9euo", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590848346.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I want to share with you a project I am currently working on.&lt;/p&gt;\n\n&lt;p&gt;nitr-agent is a crossplatform remote monitoring tool written in Golang, providing system and hardware information through a JSON APIproviding system and hardware information through a JSON API.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/juanhuttemann/nitr-agent\"&gt;https://github.com/juanhuttemann/nitr-agent&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Any comments on this will be highly appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gt9euo", "is_robot_indexable": true, "report_reasons": null, "author": "juanhuttemann", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gt9euo/nitragent_remote_monitoring_tool/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gt9euo/nitragent_remote_monitoring_tool/", "subreddit_subscribers": 114307, "created_utc": 1590819546.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Just to be clear, I've looked at typical options like gox and xgo which do cross compiling but ultimately I'm stuck with the issue my app has a few difficult caveats to deal with namely I need libnfc and libasound2 as there are some C libraries being used by the app's dependencies to make the app work.\n\nI've already got the app building and running on a Raspberry Pi 4. This is mainly just an exercise of curiosity.\n\nIs there a good way of cross compiling with dependencies in place? I'm writing my code on a Mac and I can do a little testing of it there but for simplicity I'd love to compile it their as well and be able to just push the build to a raspberry pi. Originally looked at just making making a docker image so I could boot up the container and compile it there, seems when I try though the build fails and I don't necessarily know a lot about compiling across different architectures. I'm still very much a beginner when it comes to using Go as it is.", "author_fullname": "t2_l3p68", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best way to cross compile a Golang app onto a raspberry pi?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gszi0d", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.8, "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590809274.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Just to be clear, I&amp;#39;ve looked at typical options like gox and xgo which do cross compiling but ultimately I&amp;#39;m stuck with the issue my app has a few difficult caveats to deal with namely I need libnfc and libasound2 as there are some C libraries being used by the app&amp;#39;s dependencies to make the app work.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve already got the app building and running on a Raspberry Pi 4. This is mainly just an exercise of curiosity.&lt;/p&gt;\n\n&lt;p&gt;Is there a good way of cross compiling with dependencies in place? I&amp;#39;m writing my code on a Mac and I can do a little testing of it there but for simplicity I&amp;#39;d love to compile it their as well and be able to just push the build to a raspberry pi. Originally looked at just making making a docker image so I could boot up the container and compile it there, seems when I try though the build fails and I don&amp;#39;t necessarily know a lot about compiling across different architectures. I&amp;#39;m still very much a beginner when it comes to using Go as it is.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gszi0d", "is_robot_indexable": true, "report_reasons": null, "author": "slyfoxy12", "discussion_type": null, "num_comments": 21, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gszi0d/best_way_to_cross_compile_a_golang_app_onto_a/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gszi0d/best_way_to_cross_compile_a_golang_app_onto_a/", "subreddit_subscribers": 114307, "created_utc": 1590780474.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_knt9w", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Generate a REST API from a PostgreSQL database with pagination, sorting, filtering, and JWT-based authentication", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gsl7sp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "public", "ups": 136, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 136, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1590752189.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "eatonphil.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gsl7sp", "is_robot_indexable": true, "report_reasons": null, "author": "eatonphil", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gsl7sp/generate_a_rest_api_from_a_postgresql_database/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://eatonphil.github.io/dbcore/", "subreddit_subscribers": 114307, "created_utc": 1590723389.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi guys!\n\nI'm implementing in-memory cache with golang. I store values as `[]byte` representation in a cache shards \u2013 that is `[]byte` slice with N length \u2013 to omit GC (similar to what BigCache do).\n\nI need an opportunity to delete values from `[]byte` slice from A index to B index. \n\nI've tried several approaches to accomplish this task but encountered the following problems:\n\u2013 long execution time\n\u2013 a lof of memory allocations\n\nThe more memory I allocate to my `[]byte` slice (it's length must be fixed all the time) \u2013 the more time it takes to delete elements from it and more memory being allocated at this time. Which is quite logical, yes. \n\nFor example, I initialize a 128mb shard \u2013 `shard := make([]byte, 128*1024*1024)` and store 3 responses as []byte:\n\n\u2013 response `A` from `0` to `100 000` index;\n\n\u2013 response `B` from `10000` to `15 000 000` index\n\n\u2013 response `C` from `15 000 000` to `78 000 000` index\n\n\nNow I want to delete `B` response, because it's TTL has expired. I've tried these approaches:\n\nApproach #1. \n\n    valueSize := 14990000\n    index := 10000\n    shard = append(shard[:index], shard[index+valueSize:]...)\n    shard = append(shard, make([]byte, valueSize)...)\n\nApproach #2.\n\n    valueSize := 14990000\n    index := 10000\n    for i := index; i &lt; len(shard) - valueSize; i++ {\n        shard[i] = shard[i+valueSize]\n    }\n\nApproach #3.\n\n    valueSize := 14990000\n    index := 10000\n    tmpBuffer := make([]byte, len(shard))\n    copy(tmpBuffer[0:], shard[:index])\n    copy(tmpBuffer[index:], shard[index+valueSize:])\n    shard = tmpBuffer\n\n\nIn the #1 we have a lot of memory allocations because each `append` returns new slice. Things go really hard with big slices (even 128mb).\n\nIn the #2 there is no allocations, as far as I understand, but the more elements \u2013 the more time it'll take. With 128mb shard and ~14.29mb value it takes up to 5-7 seconds on my machine.\n\nIn the #3 we have only 1 additional allocation (right?) at the `make()`, but `copy()` takes quite much time \u2013 something around ~4-6 seconds.\n\nNone of the cases suits me: either it makes a lot of allocations and rss jumps above the roof, or it takes a lot of time.\n\nThis is why I'm looking for an optimised way to accomplish my task. I might be doing things **very** wrong at the moment, but I can't find other options. \n\nI will be really grateful for any kind of help! If you have any additional questions to clarify the things \u2013 I'll give a prompt reply!\n\nThanks in advance.", "author_fullname": "t2_jc62e", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to cut elements from []byte slice with minimum mallocs and time without changing it's total length?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gsyyl8", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590807586.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi guys!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m implementing in-memory cache with golang. I store values as &lt;code&gt;[]byte&lt;/code&gt; representation in a cache shards \u2013 that is &lt;code&gt;[]byte&lt;/code&gt; slice with N length \u2013 to omit GC (similar to what BigCache do).&lt;/p&gt;\n\n&lt;p&gt;I need an opportunity to delete values from &lt;code&gt;[]byte&lt;/code&gt; slice from A index to B index. &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve tried several approaches to accomplish this task but encountered the following problems:\n\u2013 long execution time\n\u2013 a lof of memory allocations&lt;/p&gt;\n\n&lt;p&gt;The more memory I allocate to my &lt;code&gt;[]byte&lt;/code&gt; slice (it&amp;#39;s length must be fixed all the time) \u2013 the more time it takes to delete elements from it and more memory being allocated at this time. Which is quite logical, yes. &lt;/p&gt;\n\n&lt;p&gt;For example, I initialize a 128mb shard \u2013 &lt;code&gt;shard := make([]byte, 128*1024*1024)&lt;/code&gt; and store 3 responses as []byte:&lt;/p&gt;\n\n&lt;p&gt;\u2013 response &lt;code&gt;A&lt;/code&gt; from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;100 000&lt;/code&gt; index;&lt;/p&gt;\n\n&lt;p&gt;\u2013 response &lt;code&gt;B&lt;/code&gt; from &lt;code&gt;10000&lt;/code&gt; to &lt;code&gt;15 000 000&lt;/code&gt; index&lt;/p&gt;\n\n&lt;p&gt;\u2013 response &lt;code&gt;C&lt;/code&gt; from &lt;code&gt;15 000 000&lt;/code&gt; to &lt;code&gt;78 000 000&lt;/code&gt; index&lt;/p&gt;\n\n&lt;p&gt;Now I want to delete &lt;code&gt;B&lt;/code&gt; response, because it&amp;#39;s TTL has expired. I&amp;#39;ve tried these approaches:&lt;/p&gt;\n\n&lt;p&gt;Approach #1. &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;valueSize := 14990000\nindex := 10000\nshard = append(shard[:index], shard[index+valueSize:]...)\nshard = append(shard, make([]byte, valueSize)...)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Approach #2.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;valueSize := 14990000\nindex := 10000\nfor i := index; i &amp;lt; len(shard) - valueSize; i++ {\n    shard[i] = shard[i+valueSize]\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Approach #3.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;valueSize := 14990000\nindex := 10000\ntmpBuffer := make([]byte, len(shard))\ncopy(tmpBuffer[0:], shard[:index])\ncopy(tmpBuffer[index:], shard[index+valueSize:])\nshard = tmpBuffer\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;In the #1 we have a lot of memory allocations because each &lt;code&gt;append&lt;/code&gt; returns new slice. Things go really hard with big slices (even 128mb).&lt;/p&gt;\n\n&lt;p&gt;In the #2 there is no allocations, as far as I understand, but the more elements \u2013 the more time it&amp;#39;ll take. With 128mb shard and ~14.29mb value it takes up to 5-7 seconds on my machine.&lt;/p&gt;\n\n&lt;p&gt;In the #3 we have only 1 additional allocation (right?) at the &lt;code&gt;make()&lt;/code&gt;, but &lt;code&gt;copy()&lt;/code&gt; takes quite much time \u2013 something around ~4-6 seconds.&lt;/p&gt;\n\n&lt;p&gt;None of the cases suits me: either it makes a lot of allocations and rss jumps above the roof, or it takes a lot of time.&lt;/p&gt;\n\n&lt;p&gt;This is why I&amp;#39;m looking for an optimised way to accomplish my task. I might be doing things &lt;strong&gt;very&lt;/strong&gt; wrong at the moment, but I can&amp;#39;t find other options. &lt;/p&gt;\n\n&lt;p&gt;I will be really grateful for any kind of help! If you have any additional questions to clarify the things \u2013 I&amp;#39;ll give a prompt reply!&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gsyyl8", "is_robot_indexable": true, "report_reasons": null, "author": "Pijng", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gsyyl8/how_to_cut_elements_from_byte_slice_with_minimum/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gsyyl8/how_to_cut_elements_from_byte_slice_with_minimum/", "subreddit_subscribers": 114307, "created_utc": 1590778786.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": " Go-Guardian is a golang library that provides a simple, clean, and idiomatic way to create powerful modern API and web authentication. \n\nhere a beginner tutorial about it. \n\n[https://medium.com/@hajsanad/authentication-in-golang-using-go-guardian-b1cd47da47a0](https://medium.com/@hajsanad/authentication-in-golang-using-go-guardian-b1cd47da47a0)\n\ngithub repo: \n\n[https://github.com/shaj13/go-guardian](https://github.com/shaj13/go-guardian)", "author_fullname": "t2_5ypal81k", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "go-guardian an awesome authentication library for go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gt4anb", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.47, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1590825967.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Go-Guardian is a golang library that provides a simple, clean, and idiomatic way to create powerful modern API and web authentication. &lt;/p&gt;\n\n&lt;p&gt;here a beginner tutorial about it. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://medium.com/@hajsanad/authentication-in-golang-using-go-guardian-b1cd47da47a0\"&gt;https://medium.com/@hajsanad/authentication-in-golang-using-go-guardian-b1cd47da47a0&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;github repo: &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/shaj13/go-guardian\"&gt;https://github.com/shaj13/go-guardian&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gt4anb", "is_robot_indexable": true, "report_reasons": null, "author": "shaj13", "discussion_type": null, "num_comments": 0, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/gt4anb/goguardian_an_awesome_authentication_library_for/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/gt4anb/goguardian_an_awesome_authentication_library_for/", "subreddit_subscribers": 114307, "created_utc": 1590797167.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_gt4anb", "before": null}}