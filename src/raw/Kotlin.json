{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "", "author_fullname": "t2_u5x7h", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Should I use lambda here or not ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8wroh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588004939.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8wroh", "is_robot_indexable": true, "report_reasons": null, "author": "hempllama", "discussion_type": null, "num_comments": 23, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/g8wroh/should_i_use_lambda_here_or_not/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://i.redd.it/xe9hw3csmbv41.png", "subreddit_subscribers": 30729, "created_utc": 1587976139.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "", "author_fullname": "t2_fdyhv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "JS/TS package for using Kotlin's Scope Function Extensions (with Optional Chaining support)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8o2c1", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 16, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "javascript", "selftext": "", "author_fullname": "t2_fdyhv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "JS/TS package for using Kotlin's Scope Function Extensions (with Optional Chaining support)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/javascript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8o011", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587969057.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh30", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8o011", "is_robot_indexable": true, "report_reasons": null, "author": "TheDavidDelta", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/javascript/comments/g8o011/jsts_package_for_using_kotlins_scope_function/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/TheDavidDelta/scope-extensions-js", "subreddit_subscribers": 909606, "created_utc": 1587940257.0, "num_crossposts": 1, "media": null, "is_video": false}], "created": 1587969271.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8o2c1", "is_robot_indexable": true, "report_reasons": null, "author": "TheDavidDelta", "discussion_type": null, "num_comments": 2, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_g8o011", "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/g8o2c1/jsts_package_for_using_kotlins_scope_function/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/TheDavidDelta/scope-extensions-js", "subreddit_subscribers": 30729, "created_utc": 1587940471.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "Sometimes it's necessary to listen to a Reactor `Flux`, handle messages in it and then propagate them to a downstream consumer. Besides you probably want to send some 'timeout' messages if your upstream keeps silence for a too long time. Project Reactor has special series of methods for such timeouts which predictably called `timeout`, but in my case those methods turned out to be a little bit useless. I wished to propagate timeouts when the upstream is silent for a too long period, but then I wished to continue listening. Moreover, I wanted to be ready for further timeouts when I returned to a listening of the upstream.\n\nExisting Project Reactor `timeout` methods don't consider such a requirement - they switch me to a brand new flux when a timeout occures. I attempted to use such a behavior to implement my requirements using an approach similar to this:\n\n    fun subscriber() {\n      upstream\n        .timeout(timeoutDuration, timeoutEventPublisher, { subscriber() } )\t\t\n        ...\n    }\n\nProbably I mixed up the arguments now but the main idea is right - I attempted to call the same stream with the same timeouts handler when a timeout occurs. Unfortunately, it doesn't work - only the very first timeout event would be propagated, all the further timeout events would be swallowed somewhere. Maybe I work incorrectly with the `.timeout` method - I don't know.\n\nAnyway, I successfully used another approach. I just merge my regular stream and the stream of timeout events which I emit occasionally, and then somewhere at downstream I handle a received event. I look whether the event is instance of timeout event or not. Further handling depends on my business logic. In short:\n\n    provider\n    \t.getUpstream()\n    \t.mergeWith(getHeartBeats())\n    \t.map {\n    \t\t...\n    \t}\n    \t\n    /**\n     * Occasionally emits empty lists as heartbeat-signals\n     */\n    private fun getHeartBeats(): Flux&lt;List&lt;Moment&gt;&gt; {\n    \tval heartbeat = emptyList&lt;Moment&gt;()\n    \treturn Flux.interval(Duration.ofMillis(500)).map { heartbeat }\n    }", "author_fullname": "t2_3pjjcuxn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Reactor Flux timeouts", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_g8zp0k", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588018996.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Sometimes it&amp;#39;s necessary to listen to a Reactor &lt;code&gt;Flux&lt;/code&gt;, handle messages in it and then propagate them to a downstream consumer. Besides you probably want to send some &amp;#39;timeout&amp;#39; messages if your upstream keeps silence for a too long time. Project Reactor has special series of methods for such timeouts which predictably called &lt;code&gt;timeout&lt;/code&gt;, but in my case those methods turned out to be a little bit useless. I wished to propagate timeouts when the upstream is silent for a too long period, but then I wished to continue listening. Moreover, I wanted to be ready for further timeouts when I returned to a listening of the upstream.&lt;/p&gt;\n\n&lt;p&gt;Existing Project Reactor &lt;code&gt;timeout&lt;/code&gt; methods don&amp;#39;t consider such a requirement - they switch me to a brand new flux when a timeout occures. I attempted to use such a behavior to implement my requirements using an approach similar to this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;fun subscriber() {\n  upstream\n    .timeout(timeoutDuration, timeoutEventPublisher, { subscriber() } )     \n    ...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Probably I mixed up the arguments now but the main idea is right - I attempted to call the same stream with the same timeouts handler when a timeout occurs. Unfortunately, it doesn&amp;#39;t work - only the very first timeout event would be propagated, all the further timeout events would be swallowed somewhere. Maybe I work incorrectly with the &lt;code&gt;.timeout&lt;/code&gt; method - I don&amp;#39;t know.&lt;/p&gt;\n\n&lt;p&gt;Anyway, I successfully used another approach. I just merge my regular stream and the stream of timeout events which I emit occasionally, and then somewhere at downstream I handle a received event. I look whether the event is instance of timeout event or not. Further handling depends on my business logic. In short:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;provider\n    .getUpstream()\n    .mergeWith(getHeartBeats())\n    .map {\n        ...\n    }\n\n/**\n * Occasionally emits empty lists as heartbeat-signals\n */\nprivate fun getHeartBeats(): Flux&amp;lt;List&amp;lt;Moment&amp;gt;&amp;gt; {\n    val heartbeat = emptyList&amp;lt;Moment&amp;gt;()\n    return Flux.interval(Duration.ofMillis(500)).map { heartbeat }\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8zp0k", "is_robot_indexable": true, "report_reasons": null, "author": "vadlit", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/g8zp0k/reactor_flux_timeouts/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/g8zp0k/reactor_flux_timeouts/", "subreddit_subscribers": 30729, "created_utc": 1587990196.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "", "author_fullname": "t2_noyby", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Android Custom Toast in Kotlin with Example", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_g8zi66", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588018139.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "kotlin-android.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8zi66", "is_robot_indexable": true, "report_reasons": null, "author": "waheed388", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/g8zi66/android_custom_toast_in_kotlin_with_example/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://kotlin-android.com/android-custom-toast-kotlin/", "subreddit_subscribers": 30729, "created_utc": 1587989339.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "Just trying to get into something new and was wondering the best way to learn kotlin. Would it be books or courses or what? Any advice would be great.", "author_fullname": "t2_p925blj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best way to learn kotlin?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8qv91", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587979342.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Just trying to get into something new and was wondering the best way to learn kotlin. Would it be books or courses or what? Any advice would be great.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8qv91", "is_robot_indexable": true, "report_reasons": null, "author": "justinkm95", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/g8qv91/best_way_to_learn_kotlin/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/g8qv91/best_way_to_learn_kotlin/", "subreddit_subscribers": 30729, "created_utc": 1587950542.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "Hello all,\n\nI was working on an Android app that requires some linear algebra with matrices. The matrices will be somewhat medium-sized as they are not too small or too big. I was originally using jBlas because of the benchmarks I have seen online but after visiting multiple forums, they have all said that jBlas would be nowhere near as fast as what the benchmarks originally state. I have also heard about the Snapdragon Math Library to help improve the speed but I have not heard too much about it. From the general community, what linear-algebra libraries do you recommend that will be the fastest to use on Android? All help is greatly appreciated!", "author_fullname": "t2_1ofdh96m", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Fastest Matrix Library for Android", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8vq0e", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588000087.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello all,&lt;/p&gt;\n\n&lt;p&gt;I was working on an Android app that requires some linear algebra with matrices. The matrices will be somewhat medium-sized as they are not too small or too big. I was originally using jBlas because of the benchmarks I have seen online but after visiting multiple forums, they have all said that jBlas would be nowhere near as fast as what the benchmarks originally state. I have also heard about the Snapdragon Math Library to help improve the speed but I have not heard too much about it. From the general community, what linear-algebra libraries do you recommend that will be the fastest to use on Android? All help is greatly appreciated!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8vq0e", "is_robot_indexable": true, "report_reasons": null, "author": "aditya_mangalampalli", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/g8vq0e/fastest_matrix_library_for_android/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/g8vq0e/fastest_matrix_library_for_android/", "subreddit_subscribers": 30729, "created_utc": 1587971287.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "", "author_fullname": "t2_1o9pueq4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Learn, practice &amp; master the basics of Kotlin - The Android Language by registering to a FREE course in Sparkle - https://sparkle.adroitcorp.com.au", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8wkc2", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588004014.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8wkc2", "is_robot_indexable": true, "report_reasons": null, "author": "pruthvikumarbk", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/g8wkc2/learn_practice_master_the_basics_of_kotlin_the/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://i.redd.it/57cbc5lrjbv41.jpg", "subreddit_subscribers": 30729, "created_utc": 1587975214.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "", "author_fullname": "t2_obpis", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Deep recursion with coroutines", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g819ai", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 59, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 59, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587877262.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g819ai", "is_robot_indexable": true, "report_reasons": null, "author": "dayanruben", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/g819ai/deep_recursion_with_coroutines/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@elizarov/deep-recursion-with-coroutines-7c53e15993e3", "subreddit_subscribers": 30729, "created_utc": 1587848462.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "For this application my weapon of choice is Micronaut but I'm pretty sure the issue would be the same had I used Spring.\n\nI have a lot entities that I want to synchronize with various clients.\n\nAll the entities are exposed through a repository and on top of that a service.\n\nEach repository implements a method as illustrated below\n\n    interface EntityRepository {\n        fun findByUpdatedAfter(updatedDateTime: LocalDateTime): Iterable&lt;Entity&gt;\n    }\n\nAnd then in the service a similar (entity specific) method is implemented.\n\nSince this is duplicated for all repositories and services I thought I'd make it a bit more generic.\n\nSo I created an interface for my entities to ensure that a property called `updated` would exists\n\n    interface DateUpdatedEntity&lt;T&gt; {\n        val updated: T\n    }\n\nA generic repository\n\n    interface UpdatedAfterRepository&lt;E : DateUpdatedEntity&lt;T&gt;, T&gt; {\n        fun findByUpdatedAfter(updatedDateTime: T): Iterable&lt;E&gt;\n    }\n\nAnd a service interface with a default implementation of a method called `findAllAfter` as illustrated below\n\n    interface UpdatedAfterService&lt;E : DateUpdatedEntity&lt;T&gt;, T&gt; {\n        val updatedAfterRepository: UpdatedAfterRepository&lt;E, T&gt;\n        fun findAllAfter(updatedDateTime: T): Iterable&lt;E&gt; = updatedAfterRepository.findByUpdatedAfter(updatedDateTime)\n    }\n\nHowever when I try to implement the above in one of my services as illustrated below\n\n    @Singleton\n    @Transactional\n    class ExerciseServiceImpl(\n            override val updatedAfterRepository: UpdatedAfterRepository&lt;Exercise, LocalDateTime&gt;,\n            ...\n    ) : ExerciseService {\n    ...\n    }\n\nI get the following error message telling me that dependency injection has failed.\n\n    Message: Multiple possible bean candidates found: [dk.fitfit.fitlog.repository.WorkoutRepository$Intercepted, dk.fitfit.fitlog.repository.VideoRepository$Intercepted, dk.fitfit.fitlog.repository.SessionExerciseRepository$Intercepted, dk.fitfit.fitlog.repository.PictureRepository$Intercepted, dk.fitfit.fitlog.repository.SessionRepository$Intercepted, dk.fitfit.fitlog.repository.SessionRoundRepository$Intercepted, dk.fitfit.fitlog.repository.RoundRepository$Intercepted, dk.fitfit.fitlog.repository.RoundExerciseRepository$Intercepted, dk.fitfit.fitlog.repository.ExerciseRepository$Intercepted]\n\nI'm guessing it's because of type erasure but is there anything I can do about it? Or can anyone here suggest me an alternative approach? So I don't have to have repeating code in all my repositories and services", "author_fullname": "t2_4av7n0ta", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Generic repository/service method", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g8ae4n", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587915767.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For this application my weapon of choice is Micronaut but I&amp;#39;m pretty sure the issue would be the same had I used Spring.&lt;/p&gt;\n\n&lt;p&gt;I have a lot entities that I want to synchronize with various clients.&lt;/p&gt;\n\n&lt;p&gt;All the entities are exposed through a repository and on top of that a service.&lt;/p&gt;\n\n&lt;p&gt;Each repository implements a method as illustrated below&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface EntityRepository {\n    fun findByUpdatedAfter(updatedDateTime: LocalDateTime): Iterable&amp;lt;Entity&amp;gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then in the service a similar (entity specific) method is implemented.&lt;/p&gt;\n\n&lt;p&gt;Since this is duplicated for all repositories and services I thought I&amp;#39;d make it a bit more generic.&lt;/p&gt;\n\n&lt;p&gt;So I created an interface for my entities to ensure that a property called &lt;code&gt;updated&lt;/code&gt; would exists&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface DateUpdatedEntity&amp;lt;T&amp;gt; {\n    val updated: T\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;A generic repository&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface UpdatedAfterRepository&amp;lt;E : DateUpdatedEntity&amp;lt;T&amp;gt;, T&amp;gt; {\n    fun findByUpdatedAfter(updatedDateTime: T): Iterable&amp;lt;E&amp;gt;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And a service interface with a default implementation of a method called &lt;code&gt;findAllAfter&lt;/code&gt; as illustrated below&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;interface UpdatedAfterService&amp;lt;E : DateUpdatedEntity&amp;lt;T&amp;gt;, T&amp;gt; {\n    val updatedAfterRepository: UpdatedAfterRepository&amp;lt;E, T&amp;gt;\n    fun findAllAfter(updatedDateTime: T): Iterable&amp;lt;E&amp;gt; = updatedAfterRepository.findByUpdatedAfter(updatedDateTime)\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;However when I try to implement the above in one of my services as illustrated below&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;@Singleton\n@Transactional\nclass ExerciseServiceImpl(\n        override val updatedAfterRepository: UpdatedAfterRepository&amp;lt;Exercise, LocalDateTime&amp;gt;,\n        ...\n) : ExerciseService {\n...\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I get the following error message telling me that dependency injection has failed.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;Message: Multiple possible bean candidates found: [dk.fitfit.fitlog.repository.WorkoutRepository$Intercepted, dk.fitfit.fitlog.repository.VideoRepository$Intercepted, dk.fitfit.fitlog.repository.SessionExerciseRepository$Intercepted, dk.fitfit.fitlog.repository.PictureRepository$Intercepted, dk.fitfit.fitlog.repository.SessionRepository$Intercepted, dk.fitfit.fitlog.repository.SessionRoundRepository$Intercepted, dk.fitfit.fitlog.repository.RoundRepository$Intercepted, dk.fitfit.fitlog.repository.RoundExerciseRepository$Intercepted, dk.fitfit.fitlog.repository.ExerciseRepository$Intercepted]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m guessing it&amp;#39;s because of type erasure but is there anything I can do about it? Or can anyone here suggest me an alternative approach? So I don&amp;#39;t have to have repeating code in all my repositories and services&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g8ae4n", "is_robot_indexable": true, "report_reasons": null, "author": "baconialis", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/g8ae4n/generic_repositoryservice_method/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/g8ae4n/generic_repositoryservice_method/", "subreddit_subscribers": 30729, "created_utc": 1587886967.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "", "author_fullname": "t2_jqi5fhx", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Preview of Harmony: A multi-process safe SharedPreference", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g838so", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "androiddev", "selftext": "[https://github.com/pablobaxter/HarmonyPreferences](https://github.com/pablobaxter/HarmonyPreferences)\n\nI know there are other \"multi-process SharedPreference\" libraries out there like Tray ([https://github.com/grandcentrix/tray](https://github.com/grandcentrix/tray)) and Tencent's MMKV ([https://github.com/Tencent/MMKV](https://github.com/Tencent/MMKV)), but what bothered me about them was the use of either NDK or that it used a ContentProvider. I didn't want something to depend on a second process starting, especially if I needed the preference data early.\n\nHarmony uses no ContentProviders, is available as quickly as SharedPreferences (first read does memory caching), and has no native code (NDK). It implements the `SharedPreference` interface, and is completely functional. All you have to do to get it is call `Harmony.getSharedPreferences(context, \"pref_name\")` in Java or `Context.getHarmonyPrefs(\"pref_name\")` in Kotlin.\n\nI'm still actively developing on it (mostly unit and performance tests), so use it at your own risk if you decide to run with it. I know some of us have suffered dealing with multi-process apps and sharing app data between it, so I'm hoping some find this potentially useful.", "author_fullname": "t2_jqi5fhx", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Preview of Harmony: A multi-process safe SharedPreference", "link_flair_richtext": [{"e": "text", "t": "Library"}], "subreddit_name_prefixed": "r/androiddev", "hidden": false, "pwls": 6, "link_flair_css_class": "library", "downs": 0, "hide_score": false, "name": "t3_g835oy", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Library", "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1587864271.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587884091.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.androiddev", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/pablobaxter/HarmonyPreferences\"&gt;https://github.com/pablobaxter/HarmonyPreferences&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I know there are other &amp;quot;multi-process SharedPreference&amp;quot; libraries out there like Tray (&lt;a href=\"https://github.com/grandcentrix/tray\"&gt;https://github.com/grandcentrix/tray&lt;/a&gt;) and Tencent&amp;#39;s MMKV (&lt;a href=\"https://github.com/Tencent/MMKV\"&gt;https://github.com/Tencent/MMKV&lt;/a&gt;), but what bothered me about them was the use of either NDK or that it used a ContentProvider. I didn&amp;#39;t want something to depend on a second process starting, especially if I needed the preference data early.&lt;/p&gt;\n\n&lt;p&gt;Harmony uses no ContentProviders, is available as quickly as SharedPreferences (first read does memory caching), and has no native code (NDK). It implements the &lt;code&gt;SharedPreference&lt;/code&gt; interface, and is completely functional. All you have to do to get it is call &lt;code&gt;Harmony.getSharedPreferences(context, &amp;quot;pref_name&amp;quot;)&lt;/code&gt; in Java or &lt;code&gt;Context.getHarmonyPrefs(&amp;quot;pref_name&amp;quot;)&lt;/code&gt; in Kotlin.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m still actively developing on it (mostly unit and performance tests), so use it at your own risk if you decide to run with it. I know some of us have suffered dealing with multi-process apps and sharing app data between it, so I&amp;#39;m hoping some find this potentially useful.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "1174b8d6-e885-11e4-a11e-22000b268490", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2r26y", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g835oy", "is_robot_indexable": true, "report_reasons": null, "author": "soaboz", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/androiddev/comments/g835oy/preview_of_harmony_a_multiprocess_safe/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/androiddev/comments/g835oy/preview_of_harmony_a_multiprocess_safe/", "subreddit_subscribers": 141088, "created_utc": 1587855291.0, "num_crossposts": 1, "media": null, "is_video": false}], "created": 1587884425.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.androiddev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g838so", "is_robot_indexable": true, "report_reasons": null, "author": "soaboz", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_g835oy", "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/g838so/preview_of_harmony_a_multiprocess_safe/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "/r/androiddev/comments/g835oy/preview_of_harmony_a_multiprocess_safe/", "subreddit_subscribers": 30729, "created_utc": 1587855625.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_g838so", "before": null}}