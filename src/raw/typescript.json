{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - February", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ewxjh2", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 43, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 43, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1580544318.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ewxjh2", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 7, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ewxjh2/whos_hiring_typescript_developers_february/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/ewxjh2/whos_hiring_typescript_developers_february/", "subreddit_subscribers": 32467, "created_utc": 1580515518.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_7u9v7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Typeclasses in Typescript with fp-ts", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_f2kokc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 25, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 25, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1581506844.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "paulgray.net", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2kokc", "is_robot_indexable": true, "report_reasons": null, "author": "paulgrizzay", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/f2kokc/typeclasses_in_typescript_with_fpts/", "parent_whitelist_status": null, "stickied": false, "url": "https://paulgray.net/typeclasses-in-typescript/", "subreddit_subscribers": 32467, "created_utc": 1581478044.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_4o8y8t2b", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "PeerTube v2.1 released! (PeerTube is an Open Source &amp; Decentralized YouTube Alternative)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_f2a539", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 35, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 35, "approved_by": null, "author_premium": true, "thumbnail": "https://b.thumbs.redditmedia.com/YoVohgOfXaaCoX99MOqEfIlznsqqn8gguJZs921ajcA.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "freesoftware", "selftext": "", "author_fullname": "t2_4o8y8t2b", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "PeerTube v2.1 released with: UI improvements, performance improvements, ability to disable WebTorrent (and only enable HLS), new internal video privacy mode, ability to transcode videos in an audio only video container, comments improvements, bug fixes &amp; much more!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/freesoftware", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_f268qi", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 93, "total_awards_received": 1, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 93, "approved_by": null, "author_premium": true, "thumbnail": "https://b.thumbs.redditmedia.com/YoVohgOfXaaCoX99MOqEfIlznsqqn8gguJZs921ajcA.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 1}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1581443617.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/DQ6m-6pG3PMdZDg30fsir6Typop2TS6Kyleza8wWaXs.jpg?auto=webp&amp;s=18527cdf257301e4d52be4afebc922e21e009a44", "width": 200, "height": 200}, "resolutions": [{"url": "https://external-preview.redd.it/DQ6m-6pG3PMdZDg30fsir6Typop2TS6Kyleza8wWaXs.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0ad66d0ce0e94b1d42d1add8471e5d48b1f998e9", "width": 108, "height": 108}], "variants": {}, "id": "27fzDsjVShv5Zys13XZJVFrk4P0NdgYXPId1c5PD65Y"}], "enabled": false}, "all_awardings": [{"count": 1, "is_enabled": true, "subreddit_id": null, "description": "Shows the Silver Award... and that's it.", "end_date": null, "coin_reward": 0, "icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png", "days_of_premium": 0, "coin_price": 100, "is_new": false, "icon_format": null, "award_sub_type": "GLOBAL", "resized_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_height": 512, "award_type": "global", "start_date": null, "days_of_drip_extension": 0, "id": "gid_1", "icon_width": 512, "subreddit_coin_reward": 0, "name": "Silver"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhx9", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f268qi", "is_robot_indexable": true, "report_reasons": null, "author": "CDr0m", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/freesoftware/comments/f268qi/peertube_v21_released_with_ui_improvements/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/Chocobozzz/PeerTube/releases/tag/v2.1.0", "subreddit_subscribers": 15270, "created_utc": 1581414817.0, "num_crossposts": 8, "media": null, "is_video": false}], "created": 1581464868.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/DQ6m-6pG3PMdZDg30fsir6Typop2TS6Kyleza8wWaXs.jpg?auto=webp&amp;s=18527cdf257301e4d52be4afebc922e21e009a44", "width": 200, "height": 200}, "resolutions": [{"url": "https://external-preview.redd.it/DQ6m-6pG3PMdZDg30fsir6Typop2TS6Kyleza8wWaXs.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0ad66d0ce0e94b1d42d1add8471e5d48b1f998e9", "width": 108, "height": 108}], "variants": {}, "id": "27fzDsjVShv5Zys13XZJVFrk4P0NdgYXPId1c5PD65Y"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2a539", "is_robot_indexable": true, "report_reasons": null, "author": "CDr0m", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_f268qi", "author_flair_text_color": null, "permalink": "/r/typescript/comments/f2a539/peertube_v21_released_peertube_is_an_open_source/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/Chocobozzz/PeerTube/releases/tag/v2.1.0", "subreddit_subscribers": 32467, "created_utc": 1581436068.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_14qwtz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Immutable objects in TypeScript", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 81, "hide_score": false, "name": "t3_f2nr76", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/tsXpqTx0ptl4MpPHdGPbOlMiK3CSfljXwA1K4LR6CgQ.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1581522405.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "nehalist.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/DvCmz7vuT9KXve0Zn5g_kF25DIFQwOLh8NYwqyxG3EM.jpg?auto=webp&amp;s=d17ed875473f00e1fe5f503e46a54d00f006686f", "width": 1200, "height": 700}, "resolutions": [{"url": "https://external-preview.redd.it/DvCmz7vuT9KXve0Zn5g_kF25DIFQwOLh8NYwqyxG3EM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=9a955ed28dcd5c5e41d383137cd2d5d17f0409e9", "width": 108, "height": 63}, {"url": "https://external-preview.redd.it/DvCmz7vuT9KXve0Zn5g_kF25DIFQwOLh8NYwqyxG3EM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d855de3c721dc8c36366ac07b178de25b5408486", "width": 216, "height": 126}, {"url": "https://external-preview.redd.it/DvCmz7vuT9KXve0Zn5g_kF25DIFQwOLh8NYwqyxG3EM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=91ed803908cdc14a03363bbd4d4f1f34a045edc0", "width": 320, "height": 186}, {"url": "https://external-preview.redd.it/DvCmz7vuT9KXve0Zn5g_kF25DIFQwOLh8NYwqyxG3EM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3c13b69be4ccd05bd7cb5bd9454cfc3a102ee34d", "width": 640, "height": 373}, {"url": "https://external-preview.redd.it/DvCmz7vuT9KXve0Zn5g_kF25DIFQwOLh8NYwqyxG3EM.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=9129d2f5a04e6131895da1af47165d8ab7f81ddd", "width": 960, "height": 560}, {"url": "https://external-preview.redd.it/DvCmz7vuT9KXve0Zn5g_kF25DIFQwOLh8NYwqyxG3EM.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=cc563c9359bffc96af38dfb2fabf681be8941cb7", "width": 1080, "height": 630}], "variants": {}, "id": "3noJgVqyfbyaEu5rm9bs_ietxaQPzeI_ZSgAk-S8wag"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2nr76", "is_robot_indexable": true, "report_reasons": null, "author": "nehalist", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/f2nr76/immutable_objects_in_typescript/", "parent_whitelist_status": null, "stickied": false, "url": "https://nehalist.io/immutable-objects-in-typescript/", "subreddit_subscribers": 32467, "created_utc": 1581493605.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm trying to understand generics in typescript using the example here, but am having issues:  [https://pastebin.com/Pekq7RC6](https://pastebin.com/Pekq7RC6)   \n\n\nThe generic gets created like this:  const miniMaxSum = &lt;arrType&gt;( ) but when I try to assign it to my variables and parameters inside the function, i get TS errors.\n\n&amp;#x200B;\n```\nlet maxSum : arrType = 0; // Error -&gt; '0' is assignable to the constraint of type 'arrType', but 'arrType' could be instantiated with a different subtype of constraint 'number'.\nlet minSum : arrType = 0;\n```\n\n```\nmaxSum = maxSum + item; // Type 'number' is not assignable to type 'arrType'. 'number' is assignable to the constraint of type 'arrType', but 'arrType' could be instantiated with a different subtype of constraint 'number'.\n```\nThere is also a similar error why trying to add integers to the maxSum and minSum variables. I cant seem to understand why its happening,", "author_fullname": "t2_4nye751n", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Issue understanding Generics in Typescript", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_f2muhz", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1581517186.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to understand generics in typescript using the example here, but am having issues:  &lt;a href=\"https://pastebin.com/Pekq7RC6\"&gt;https://pastebin.com/Pekq7RC6&lt;/a&gt;   &lt;/p&gt;\n\n&lt;p&gt;The generic gets created like this:  const miniMaxSum = &amp;lt;arrType&amp;gt;( ) but when I try to assign it to my variables and parameters inside the function, i get TS errors.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;\n&lt;code&gt;\nlet maxSum : arrType = 0; // Error -&amp;gt; &amp;#39;0&amp;#39; is assignable to the constraint of type &amp;#39;arrType&amp;#39;, but &amp;#39;arrType&amp;#39; could be instantiated with a different subtype of constraint &amp;#39;number&amp;#39;.\nlet minSum : arrType = 0;\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nmaxSum = maxSum + item; // Type &amp;#39;number&amp;#39; is not assignable to type &amp;#39;arrType&amp;#39;. &amp;#39;number&amp;#39; is assignable to the constraint of type &amp;#39;arrType&amp;#39;, but &amp;#39;arrType&amp;#39; could be instantiated with a different subtype of constraint &amp;#39;number&amp;#39;.\n&lt;/code&gt;\nThere is also a similar error why trying to add integers to the maxSum and minSum variables. I cant seem to understand why its happening,&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/rc2Fna9bJ_J6PFVDuZUOKJl5CH9700Qyi0-ll1mn4C4.jpg?auto=webp&amp;s=e28867cccd2864fc170848b64bc44e6a778116b9", "width": 250, "height": 250}, "resolutions": [{"url": "https://external-preview.redd.it/rc2Fna9bJ_J6PFVDuZUOKJl5CH9700Qyi0-ll1mn4C4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=6b38a59d6140109bc38ed4f88b98bd4436dfe09b", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/rc2Fna9bJ_J6PFVDuZUOKJl5CH9700Qyi0-ll1mn4C4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=203ad20eac023d67d122c5f834516a4670799f63", "width": 216, "height": 216}], "variants": {}, "id": "tEFaKdpbTuSBBWpWQ-kmQ1l_KwNUpQtPpUtOwmLiL-A"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2muhz", "is_robot_indexable": true, "report_reasons": null, "author": "blayoosk", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/f2muhz/issue_understanding_generics_in_typescript/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/f2muhz/issue_understanding_generics_in_typescript/", "subreddit_subscribers": 32467, "created_utc": 1581488386.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hey,\n\nI'm planning to give a presentation to provide insights about TypeScript at work soon and I was wondering what's the most advanced thing you can do with TypeScript?\n\nSo this is about TS itself and not an advanced project/app using it. A search on Google or the official docs gave me some examples but I was wondering if someone knows some handy things :) Or maybe some solution for a problem you would have needed a bigger workaround without TypeScript, etc.", "author_fullname": "t2_wt11x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What's the most advanced thing you know within TypeScript?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_f25ux0", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 28, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 28, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581440861.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m planning to give a presentation to provide insights about TypeScript at work soon and I was wondering what&amp;#39;s the most advanced thing you can do with TypeScript?&lt;/p&gt;\n\n&lt;p&gt;So this is about TS itself and not an advanced project/app using it. A search on Google or the official docs gave me some examples but I was wondering if someone knows some handy things :) Or maybe some solution for a problem you would have needed a bigger workaround without TypeScript, etc.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f25ux0", "is_robot_indexable": true, "report_reasons": null, "author": "MrMimmet", "discussion_type": null, "num_comments": 38, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/f25ux0/whats_the_most_advanced_thing_you_know_within/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/f25ux0/whats_the_most_advanced_thing_you_know_within/", "subreddit_subscribers": 32467, "created_utc": 1581412061.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": " Hi,\n\nI love TypeScript, but let's say you're writing plain JS, without any of that pseudo TypeScript with the comments (params i think they're called?)\n\n  \n(I'm using VS Code by the way)\n\nlet's say i have a simple function ...\n\n`let returnTypeOfArgument = input =&gt; {`  \n `return\u00a0typeof input;`  \n`};`  \n`console.log(returnTypeOfArgument(\"abcdefghij\"));`\n\nIs there a way that we can infer type from argument that the function is being called with?\n\nSo, here i immediately call the function with a string, can the function body infer input to be type string because that's what it's being called with outside the body, and therefore i can get some basic type checking, without any use of TypeScript features?\n\nThank you", "author_fullname": "t2_1iv9u0qf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Infer type from argument", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_f2dcxh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581477570.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;I love TypeScript, but let&amp;#39;s say you&amp;#39;re writing plain JS, without any of that pseudo TypeScript with the comments (params i think they&amp;#39;re called?)&lt;/p&gt;\n\n&lt;p&gt;(I&amp;#39;m using VS Code by the way)&lt;/p&gt;\n\n&lt;p&gt;let&amp;#39;s say i have a simple function ...&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;let returnTypeOfArgument = input =&amp;gt; {&lt;/code&gt;&lt;br/&gt;\n &lt;code&gt;return\u00a0typeof input;&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;};&lt;/code&gt;&lt;br/&gt;\n&lt;code&gt;console.log(returnTypeOfArgument(&amp;quot;abcdefghij&amp;quot;));&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Is there a way that we can infer type from argument that the function is being called with?&lt;/p&gt;\n\n&lt;p&gt;So, here i immediately call the function with a string, can the function body infer input to be type string because that&amp;#39;s what it&amp;#39;s being called with outside the body, and therefore i can get some basic type checking, without any use of TypeScript features?&lt;/p&gt;\n\n&lt;p&gt;Thank you&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2dcxh", "is_robot_indexable": true, "report_reasons": null, "author": "weather-headed", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/f2dcxh/infer_type_from_argument/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/f2dcxh/infer_type_from_argument/", "subreddit_subscribers": 32467, "created_utc": 1581448770.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "EDIT: ignore, stupid error, solved now!\n\nHi, I am getting the error:\n```\nArgument of type '{} | \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\"' is not assignable to parameter of type 'string'.\n  Type '{}' is not assignable to type 'string'.(2345)\n```\n\nbut TS should know it is a string, I am checking just before with `typeof`.\n\nI want the callback function to see if the value of the key `fileContents` is an object, then it assumes it is JSON and uses `JSON.stringify`, or if it is a string to just write a string.\n\nhttps://www.typescriptlang.org/play/?ssl=1&amp;ssc=1&amp;pln=36&amp;pc=1#code/LAKAxg9gdgzgLgAjgTwA4FMDKYBOBLVOAFXQFtUAbAQznQC4EBvUBBAMzwvQDkrT6E8fFADmAbhbtO6AMLRaUODAaMAvggA+guMPGhVAbQC6CALwIDk1sxCs7Urr34MA5By4BGFwBord97Ly6IrKTH72ACboMLgEcHjQrugAHnyU6D7hCKp+qr62dowOPHwCbtIATD7FcorBSkmp5FwIVdmSRhIgoKAA9ABU-Sz9ZqZj4xOTU9Mzs3Pzs8MIAOr4tEgQCBF4MADWSwuHR8cnU8O9oFQwyFBg7ACut-HQCADua+hEEAAiO7sAFAEnAIhHhRN4tjQqAxQaIAJQMAAKOAgpB26AAPAA3CB4CIAPjC3RAOWJKAw2HwhBIzRo6AAdGwIDgAKJUMAAC3+tFp61MhJsrDwbAQ3LIlDpjOktQUSlG5hcEAARgArdBgOAuOFE+zvPC0L6-Pb-LI8iW0KWOUr5eysABSmAA8tx6bCRMLkGLeQyAjL6jAIVB7hQKBCKnC-HCuqx1OgKDB0AhhaKzdQLb6giF5Ug0OgICKXG6tTq7HqDT8-l7zT7pMCIanJRm6iEo5JSapW8SgA\n\nIs there a better way to type this, or a way to solve the error? If I use `as string` it compiles and runs.", "author_fullname": "t2_1a4ifotz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why does my type guard not work?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_f2bk53", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1581444576.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581470590.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;EDIT: ignore, stupid error, solved now!&lt;/p&gt;\n\n&lt;p&gt;Hi, I am getting the error:\n&lt;code&gt;\nArgument of type &amp;#39;{} | &amp;quot;string&amp;quot; | &amp;quot;number&amp;quot; | &amp;quot;bigint&amp;quot; | &amp;quot;boolean&amp;quot; | &amp;quot;symbol&amp;quot; | &amp;quot;undefined&amp;quot; | &amp;quot;object&amp;quot; | &amp;quot;function&amp;quot;&amp;#39; is not assignable to parameter of type &amp;#39;string&amp;#39;.\n  Type &amp;#39;{}&amp;#39; is not assignable to type &amp;#39;string&amp;#39;.(2345)\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;but TS should know it is a string, I am checking just before with &lt;code&gt;typeof&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I want the callback function to see if the value of the key &lt;code&gt;fileContents&lt;/code&gt; is an object, then it assumes it is JSON and uses &lt;code&gt;JSON.stringify&lt;/code&gt;, or if it is a string to just write a string.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.typescriptlang.org/play/?ssl=1&amp;amp;ssc=1&amp;amp;pln=36&amp;amp;pc=1#code/LAKAxg9gdgzgLgAjgTwA4FMDKYBOBLVOAFXQFtUAbAQznQC4EBvUBBAMzwvQDkrT6E8fFADmAbhbtO6AMLRaUODAaMAvggA+guMPGhVAbQC6CALwIDk1sxCs7Urr34MA5By4BGFwBord97Ly6IrKTH72ACboMLgEcHjQrugAHnyU6D7hCKp+qr62dowOPHwCbtIATD7FcorBSkmp5FwIVdmSRhIgoKAA9ABU-Sz9ZqZj4xOTU9Mzs3Pzs8MIAOr4tEgQCBF4MADWSwuHR8cnU8O9oFQwyFBg7ACut-HQCADua+hEEAAiO7sAFAEnAIhHhRN4tjQqAxQaIAJQMAAKOAgpB26AAPAA3CB4CIAPjC3RAOWJKAw2HwhBIzRo6AAdGwIDgAKJUMAAC3+tFp61MhJsrDwbAQ3LIlDpjOktQUSlG5hcEAARgArdBgOAuOFE+zvPC0L6-Pb-LI8iW0KWOUr5eysABSmAA8tx6bCRMLkGLeQyAjL6jAIVB7hQKBCKnC-HCuqx1OgKDB0AhhaKzdQLb6giF5Ug0OgICKXG6tTq7HqDT8-l7zT7pMCIanJRm6iEo5JSapW8SgA\"&gt;https://www.typescriptlang.org/play/?ssl=1&amp;amp;ssc=1&amp;amp;pln=36&amp;amp;pc=1#code/LAKAxg9gdgzgLgAjgTwA4FMDKYBOBLVOAFXQFtUAbAQznQC4EBvUBBAMzwvQDkrT6E8fFADmAbhbtO6AMLRaUODAaMAvggA+guMPGhVAbQC6CALwIDk1sxCs7Urr34MA5By4BGFwBord97Ly6IrKTH72ACboMLgEcHjQrugAHnyU6D7hCKp+qr62dowOPHwCbtIATD7FcorBSkmp5FwIVdmSRhIgoKAA9ABU-Sz9ZqZj4xOTU9Mzs3Pzs8MIAOr4tEgQCBF4MADWSwuHR8cnU8O9oFQwyFBg7ACut-HQCADua+hEEAAiO7sAFAEnAIhHhRN4tjQqAxQaIAJQMAAKOAgpB26AAPAA3CB4CIAPjC3RAOWJKAw2HwhBIzRo6AAdGwIDgAKJUMAAC3+tFp61MhJsrDwbAQ3LIlDpjOktQUSlG5hcEAARgArdBgOAuOFE+zvPC0L6-Pb-LI8iW0KWOUr5eysABSmAA8tx6bCRMLkGLeQyAjL6jAIVB7hQKBCKnC-HCuqx1OgKDB0AhhaKzdQLb6giF5Ug0OgICKXG6tTq7HqDT8-l7zT7pMCIanJRm6iEo5JSapW8SgA&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Is there a better way to type this, or a way to solve the error? If I use &lt;code&gt;as string&lt;/code&gt; it compiles and runs.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2bk53", "is_robot_indexable": true, "report_reasons": null, "author": "HarmonicAscendant", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/f2bk53/why_does_my_type_guard_not_work/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/f2bk53/why_does_my_type_guard_not_work/", "subreddit_subscribers": 32467, "created_utc": 1581441790.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_wchl5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Visual Debugging in VS Code", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 72, "hide_score": false, "name": "t3_f1shn6", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 72, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 72, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/cA9LDtOcawGbuadd1Hmty41RAN3tjjj0i58BXj1hKeg.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "image", "content_categories": null, "is_self": false, "mod_note": null, "created": 1581379963.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?format=png8&amp;s=d762740b7ed67b2f68ba8e6a9283db6a2d3d53e6", "width": 1732, "height": 899}, "resolutions": [{"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=108&amp;crop=smart&amp;format=png8&amp;s=c6567801780a93406183b6feccd72c88f038461b", "width": 108, "height": 56}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=216&amp;crop=smart&amp;format=png8&amp;s=cbf5b3bcc184e86cee7f78daf13ae5a0623c3902", "width": 216, "height": 112}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=320&amp;crop=smart&amp;format=png8&amp;s=30204c9c51d0db603cfa1f00ce5c96c0f14ab6e7", "width": 320, "height": 166}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=640&amp;crop=smart&amp;format=png8&amp;s=a2ee979c4f30161f1d46fbd69d87d0bff4d61a6f", "width": 640, "height": 332}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=960&amp;crop=smart&amp;format=png8&amp;s=ea25f440979c2296f2c7b9f634e7daaa1c2ad1b1", "width": 960, "height": 498}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=1080&amp;crop=smart&amp;format=png8&amp;s=f98fd4215807125cd47a3624aea160515289f88c", "width": 1080, "height": 560}], "variants": {"gif": {"source": {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?s=c2c129095294ebdd4c229ff4d3eb48d94123e2d8", "width": 1732, "height": 899}, "resolutions": [{"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=108&amp;crop=smart&amp;s=6a93418d853b57fbd9d1c7e2f5ebd61a88e83ab7", "width": 108, "height": 56}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=216&amp;crop=smart&amp;s=8b92d371f8c021d472cf613d53f258b3955743f3", "width": 216, "height": 112}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=320&amp;crop=smart&amp;s=2d2104f64c94b95453b8218e03b42b0d8c75fb36", "width": 320, "height": 166}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=640&amp;crop=smart&amp;s=46b7dfec8738e54002a92181eb18d046352f397a", "width": 640, "height": 332}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=960&amp;crop=smart&amp;s=29406bd0d7325b1b84c5bb5d886399e401f3af99", "width": 960, "height": 498}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=1080&amp;crop=smart&amp;s=e3c1685dfe3eb1ef661311c11f7c3602c360c923", "width": 1080, "height": 560}]}, "mp4": {"source": {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?format=mp4&amp;s=393f53d39777d38cfe7810e123b2a48ebc3aaf3a", "width": 1732, "height": 899}, "resolutions": [{"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=108&amp;format=mp4&amp;s=efbd38d6828a54f6d2690cc09280bc98a6a4a2f9", "width": 108, "height": 56}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=216&amp;format=mp4&amp;s=9a1bf6184c4e5a24969b1e3afb321483b3d3dee8", "width": 216, "height": 112}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=320&amp;format=mp4&amp;s=84488a331c6e7d3a5f912972689290a280184d90", "width": 320, "height": 166}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=640&amp;format=mp4&amp;s=c78d766b809051dff7a526bd125ad8823f4d4412", "width": 640, "height": 332}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=960&amp;format=mp4&amp;s=147544be019a8726b4047f1aa99be72074d170dc", "width": 960, "height": 498}, {"url": "https://preview.redd.it/pdi1ucn2f4g41.gif?width=1080&amp;format=mp4&amp;s=68f59772f2eea72461b74216d5afd80872d13975", "width": 1080, "height": 560}]}}, "id": "GpMvQ2zh8rrMuS6EmqbfB24FbEkC47V_1Unr0UV-sNY"}], "enabled": true}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f1shn6", "is_robot_indexable": true, "report_reasons": null, "author": "Gehinnn", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/f1shn6/visual_debugging_in_vs_code/", "parent_whitelist_status": null, "stickied": false, "url": "https://i.redd.it/pdi1ucn2f4g41.gif", "subreddit_subscribers": 32467, "created_utc": 1581351163.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Is there any ORM (or query builder) that provides dynamic typing for the result of a query? For example, if I call `findOne` in TypeORM like this:\n\n```\nconst user = await connection.getRepository(User).findOne({ select: ['firstName'] })\n```\n\nit would be nice if the `user` variable was typed to include only the `firstName` field and not all fields associated with the model. Ditto for eagerly loaded associations. However, that doesn't appear to be the case. Are the any libraries that do in fact do that?", "author_fullname": "t2_11f6rt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is there any ORM that has dynamically typed query results?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_f1zky5", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581408199.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Is there any ORM (or query builder) that provides dynamic typing for the result of a query? For example, if I call &lt;code&gt;findOne&lt;/code&gt; in TypeORM like this:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nconst user = await connection.getRepository(User).findOne({ select: [&amp;#39;firstName&amp;#39;] })\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;it would be nice if the &lt;code&gt;user&lt;/code&gt; variable was typed to include only the &lt;code&gt;firstName&lt;/code&gt; field and not all fields associated with the model. Ditto for eagerly loaded associations. However, that doesn&amp;#39;t appear to be the case. Are the any libraries that do in fact do that?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f1zky5", "is_robot_indexable": true, "report_reasons": null, "author": "danielrearden", "discussion_type": null, "num_comments": 17, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/f1zky5/is_there_any_orm_that_has_dynamically_typed_query/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/f1zky5/is_there_any_orm_that_has_dynamically_typed_query/", "subreddit_subscribers": 32467, "created_utc": 1581379399.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm trying to find or write a utility type which would have the behavior of the hypothetical `ReverseLookup` type in this example:\n\n```\ninterface User {\n  name: string\n}\n\ninterface Article {\n  title: string\n}\n\ninterface Shapes {\n  author: User,\n  editor: User,\n  article: Article,\n}\n\n// these would compile\nconst a: ReverseLookup&lt;Shapes, User&gt; = 'author'; // \u2713\nconst b: ReverseLookup&lt;Shapes, User&gt; = 'editor'; // \u2713\n\n// these would cause an error\nconst c: ReverseLookup&lt;Shapes, User&gt; = 'article'; // \u2717 ts error\nconst d: ReverseLookup&lt;Shapes, Article&gt; = 'editor'; // \u2717 ts error\n```\n\nWhere `ReverseLookup` equals a specific key within an interface given the type which that key is mapped to. So given `Shapes` and `User`, `ReverseLookup` is any key within `Shapes` which is mapped to type `User` .", "author_fullname": "t2_19ekjgby", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "utility type that equals a specific key within an interface given the type which that key is mapped to", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_f23wx8", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581428383.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m trying to find or write a utility type which would have the behavior of the hypothetical &lt;code&gt;ReverseLookup&lt;/code&gt; type in this example:&lt;/p&gt;\n\n&lt;p&gt;```\ninterface User {\n  name: string\n}&lt;/p&gt;\n\n&lt;p&gt;interface Article {\n  title: string\n}&lt;/p&gt;\n\n&lt;p&gt;interface Shapes {\n  author: User,\n  editor: User,\n  article: Article,\n}&lt;/p&gt;\n\n&lt;p&gt;// these would compile\nconst a: ReverseLookup&amp;lt;Shapes, User&amp;gt; = &amp;#39;author&amp;#39;; // \u2713\nconst b: ReverseLookup&amp;lt;Shapes, User&amp;gt; = &amp;#39;editor&amp;#39;; // \u2713&lt;/p&gt;\n\n&lt;p&gt;// these would cause an error\nconst c: ReverseLookup&amp;lt;Shapes, User&amp;gt; = &amp;#39;article&amp;#39;; // \u2717 ts error\nconst d: ReverseLookup&amp;lt;Shapes, Article&amp;gt; = &amp;#39;editor&amp;#39;; // \u2717 ts error\n```&lt;/p&gt;\n\n&lt;p&gt;Where &lt;code&gt;ReverseLookup&lt;/code&gt; equals a specific key within an interface given the type which that key is mapped to. So given &lt;code&gt;Shapes&lt;/code&gt; and &lt;code&gt;User&lt;/code&gt;, &lt;code&gt;ReverseLookup&lt;/code&gt; is any key within &lt;code&gt;Shapes&lt;/code&gt; which is mapped to type &lt;code&gt;User&lt;/code&gt; .&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f23wx8", "is_robot_indexable": true, "report_reasons": null, "author": "wagonn", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/f23wx8/utility_type_that_equals_a_specific_key_within_an/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/f23wx8/utility_type_that_equals_a_specific_key_within_an/", "subreddit_subscribers": 32467, "created_utc": 1581399583.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_f23wx8", "before": null}}