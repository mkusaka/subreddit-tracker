{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_12ak0k", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Would you use unmarshal nested json package like this ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h8m01d", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 85, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 85, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592132658.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h8m01d", "is_robot_indexable": true, "report_reasons": null, "author": "m7shapan", "discussion_type": null, "num_comments": 36, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h8m01d/would_you_use_unmarshal_nested_json_package_like/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://i.redd.it/gu1in1wnks451.jpg", "subreddit_subscribers": 115826, "created_utc": 1592103858.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "It's a lightweight, fast, **Terminal-UI based Golang app**.\n\n[https://github.com/ajaxray/geek-life](https://github.com/ajaxray/geek-life)\n\nI was finding for a generic To-do list manager in CLI with \"Project =&gt; TaskList\" view. Didn't find any. So, I started developing one for myself and anyone who -\n\n* Loves and live with his dark terminal\n* Thinks and writes in markdown\n\nIf you're a geek, try it. It's free and open source.\n\nIf you're a go developer, contribution and suggestion is much appreciated! (Also, don't forget to \ud83c\udf1f the repo)\n\n&amp;#x200B;\n\n[Geek-life task manager screenshot](https://preview.redd.it/7pb7oze84r451.png?width=1270&amp;format=png&amp;auto=webp&amp;s=e5f5b2c951de6143731d0828d2118294bd2975b1)", "author_fullname": "t2_3a49ib9w", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Geek-life: A full featured CLI Task / To-do List Manager for Geeks", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "media_metadata": {"7pb7oze84r451": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 60, "x": 108, "u": "https://preview.redd.it/7pb7oze84r451.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=2b4445ca04c69343c0ad9ad7e088d057184be4cf"}, {"y": 120, "x": 216, "u": "https://preview.redd.it/7pb7oze84r451.png?width=216&amp;crop=smart&amp;auto=webp&amp;s=f2c2b121dc53992e902f6b8f706861d9d71bc5e4"}, {"y": 179, "x": 320, "u": "https://preview.redd.it/7pb7oze84r451.png?width=320&amp;crop=smart&amp;auto=webp&amp;s=a88d66a2870b429c2e8cd4de0ccf990954998918"}, {"y": 358, "x": 640, "u": "https://preview.redd.it/7pb7oze84r451.png?width=640&amp;crop=smart&amp;auto=webp&amp;s=d7cacc79bd99617832a0b25d226c1d7e7b79425e"}, {"y": 537, "x": 960, "u": "https://preview.redd.it/7pb7oze84r451.png?width=960&amp;crop=smart&amp;auto=webp&amp;s=09950e21be1394db8d9b131b23662187c20384b9"}, {"y": 604, "x": 1080, "u": "https://preview.redd.it/7pb7oze84r451.png?width=1080&amp;crop=smart&amp;auto=webp&amp;s=a14c7eb8fc34240667874a145c4c589cac691d22"}], "s": {"y": 711, "x": 1270, "u": "https://preview.redd.it/7pb7oze84r451.png?width=1270&amp;format=png&amp;auto=webp&amp;s=e5f5b2c951de6143731d0828d2118294bd2975b1"}, "id": "7pb7oze84r451"}}, "name": "t3_h8f6jl", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.87, "author_flair_background_color": null, "subreddit_type": "public", "ups": 37, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 37, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1592086230.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592109063.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;It&amp;#39;s a lightweight, fast, &lt;strong&gt;Terminal-UI based Golang app&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ajaxray/geek-life\"&gt;https://github.com/ajaxray/geek-life&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I was finding for a generic To-do list manager in CLI with &amp;quot;Project =&amp;gt; TaskList&amp;quot; view. Didn&amp;#39;t find any. So, I started developing one for myself and anyone who -&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Loves and live with his dark terminal&lt;/li&gt;\n&lt;li&gt;Thinks and writes in markdown&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;If you&amp;#39;re a geek, try it. It&amp;#39;s free and open source.&lt;/p&gt;\n\n&lt;p&gt;If you&amp;#39;re a go developer, contribution and suggestion is much appreciated! (Also, don&amp;#39;t forget to \ud83c\udf1f the repo)&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/7pb7oze84r451.png?width=1270&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=e5f5b2c951de6143731d0828d2118294bd2975b1\"&gt;Geek-life task manager screenshot&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h8f6jl", "is_robot_indexable": true, "report_reasons": null, "author": "ajaxray", "discussion_type": null, "num_comments": 15, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h8f6jl/geeklife_a_full_featured_cli_task_todo_list/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/h8f6jl/geeklife_a_full_featured_cli_task_todo_list/", "subreddit_subscribers": 115826, "created_utc": 1592080263.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_1u2pb6nw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "unexpected-go.com: my wip list of stuff that a beginner doesn't expect in golang", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h851d9", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 194, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 194, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592072774.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "unexpected-go.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h851d9", "is_robot_indexable": true, "report_reasons": null, "author": "lambroso", "discussion_type": null, "num_comments": 48, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h851d9/unexpectedgocom_my_wip_list_of_stuff_that_a/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://unexpected-go.com/", "subreddit_subscribers": 115826, "created_utc": 1592043974.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4bfukne8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ardan Labs: Up &amp; Running with Dgraph", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_h8tsj8", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BVj4b7UUHyA?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Up &amp; Running with Dgraph", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BVj4b7UUHyA?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Ardan Labs", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/BVj4b7UUHyA/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCCgGRKeRM1b0LTDqqb4NqjA"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BVj4b7UUHyA?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/h8tsj8", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592169924.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h8tsj8", "is_robot_indexable": true, "report_reasons": null, "author": "dope2theear", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h8tsj8/ardan_labs_up_running_with_dgraph/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=BVj4b7UUHyA", "subreddit_subscribers": 115826, "created_utc": 1592141124.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Up &amp; Running with Dgraph", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/BVj4b7UUHyA?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Ardan Labs", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/BVj4b7UUHyA/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCCgGRKeRM1b0LTDqqb4NqjA"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_3vcbsjj2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[fsweeper] The file management automation tool", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h8qq2b", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592155944.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h8qq2b", "is_robot_indexable": true, "report_reasons": null, "author": "petaoctet", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h8qq2b/fsweeper_the_file_management_automation_tool/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/reugn/fsweeper", "subreddit_subscribers": 115826, "created_utc": 1592127144.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_8joyes", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "An Introduction to Producing and Consuming Kafka Messages in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h898df", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 52, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 52, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592089655.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "aaronraff.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h898df", "is_robot_indexable": true, "report_reasons": null, "author": "aaronraff", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h898df/an_introduction_to_producing_and_consuming_kafka/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.aaronraff.dev/blog/an-introduction-to-producing-and-consuming-kafka-messages-in-go", "subreddit_subscribers": 115826, "created_utc": 1592060855.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey everyone. I'm new to go and come from a PHP MVC background. I have a very basic project working in go that accesses a table in mysql and passes the content via an API endpoint to a Vue component. All of the go code is written in main.go\n\nBefore I continue learning and experimenting I would like to get the basic structure of the project files correct so that I practice good habits from the get go.\n\nWould any of you be able to recommend a decent project structure and a good example of how to split code into different kinds of responsibilities (and what those responsibilities might be).\n\nAn example in PHP that I would often use would be a folder for controllers, a router file that calls the controllers, a model folder that holds instances from the database, resources including views+js+css, repositories (and factories) which generate and manipulate models, services which abstract out controller logic into reusable methods\n\nMany thanks", "author_fullname": "t2_kv3xsxt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Recommended Vue/go/mysql project structure?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h8qbsc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1592125480.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592153928.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone. I&amp;#39;m new to go and come from a PHP MVC background. I have a very basic project working in go that accesses a table in mysql and passes the content via an API endpoint to a Vue component. All of the go code is written in main.go&lt;/p&gt;\n\n&lt;p&gt;Before I continue learning and experimenting I would like to get the basic structure of the project files correct so that I practice good habits from the get go.&lt;/p&gt;\n\n&lt;p&gt;Would any of you be able to recommend a decent project structure and a good example of how to split code into different kinds of responsibilities (and what those responsibilities might be).&lt;/p&gt;\n\n&lt;p&gt;An example in PHP that I would often use would be a folder for controllers, a router file that calls the controllers, a model folder that holds instances from the database, resources including views+js+css, repositories (and factories) which generate and manipulate models, services which abstract out controller logic into reusable methods&lt;/p&gt;\n\n&lt;p&gt;Many thanks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h8qbsc", "is_robot_indexable": true, "report_reasons": null, "author": "mansG", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h8qbsc/recommended_vuegomysql_project_structure/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/h8qbsc/recommended_vuegomysql_project_structure/", "subreddit_subscribers": 115826, "created_utc": 1592125128.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_iq7f5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Proposal: selector-specific control flow &amp; gofmt rules to improve error-checking readability", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h8q8o0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.33, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592153480.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h8q8o0", "is_robot_indexable": true, "report_reasons": null, "author": "Splizard", "discussion_type": null, "num_comments": 1, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h8q8o0/proposal_selectorspecific_control_flow_gofmt/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/golang/go/issues/39372", "subreddit_subscribers": 115826, "created_utc": 1592124680.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am new to GO and writing program in GO and also RMQ consumer with go channel and came to these scenarios.\n\n**\"go forever channel\" blocks the main thread until it gets stop signal from other go routine\".**\n\nBut below program 1 tells deadlock error, and **program 2** works fine without deadlock error,\n\nwhy it's happening?  \n\n\n**Program 1** : Go routine printing element in loop and deadlock error\n\n        package main\n        import \"fmt\"\n        \n        func main() {\n            stopProgram := make(chan bool)\n            \n            go func() {\n              for i := 0; i &lt; 5; i++ {\n                 fmt.Println(\"hello \",i)\n              }\n              // Send signal through stopProgram to stop loop\n              //stopProgram &lt;- true\n            }()\n    \n    \n           // your problem will wait here until it get stop signal through channel\n           &lt;-stopProgram\n           fmt.Println(\"after forever channel\")\n        }\n\n**Output**                                                                                                                                            \n\n    hello  0                                                                                                                                                      \n        hello  1                                                                                                                                                      \n        hello  2                                                                                                                                                      \n        hello  3                                                                                                                                                      \n        hello  4                                                                                                                                                      \n        fatal error: all goroutines are asleep - deadlock!                                                                                                            \n                                                                                                                                                                      \n        goroutine 1 [chan receive]:                                                                                                                                   \n        main.main()                                                                                                                                                   \n                /home/main.go:26 +0x73                                                                                                                                \n                                        \n\n**Program 2:** Go routing receiving RMQ deliveries in loop and no deadlock\n\n          \n        package main\n        import (\n            \"fmt\"\n            )\n        func main() {\n            conn, err := amqp.Dial(\"amqp://guest:guest@localhost:5672/\")\n            failOnError(err, \"Failed to connect to RabbitMQ\")\n            defer conn.Close()\n    \n            ch, err := conn.Channel()\n            failOnError(err, \"Failed to open a channel\")\n            defer ch.Close()\n    \n            err = ch.ExchangeDeclare(\n                    \"stn-msg-exc\",   // name\n                    \"topic\", // type\n                    true,     // durable\n                    false,    // auto-deleted\n                    false,    // internal\n                    false,    // no-wait\n                    nil,      // arguments\n            )\n            failOnError(err, \"Failed to declare an exchange\")\n    \n            q, err := ch.QueueDeclare(\n                    \"stn-msg-queue\",    // name\n                    false, // durable\n                    false, // delete when unused\n                    true,  // exclusive\n                    false, // no-wait\n                    nil,   // arguments\n            )\n            failOnError(err, \"Failed to declare a queue\")\n    \n            err = ch.QueueBind(\n                    q.Name, // queue name\n                    \"stn.#\",     // binding key\n                    \"stn-msg-exc\", // exchange\n                    false,\n                    nil,\n            )\n            failOnError(err, \"Failed to bind a queue\")\n        \n           msgs, err := ch.Consume(\n                        q.Name, // queue\n                        \"\",     // consumer\n                        true,   // auto-ack\n                        false,  // exclusive\n                        false,  // no-local\n                        false,  // no-wait\n                        nil,    // args\n            )\n            \n            stopProgram := make(chan bool)\n        \n            go func() {\n                    for d := range msgs {\n                          fmt.Println(\"reveived message \",d.Body)\n                            \n                    }\n            }()\n          \n            // your problem will wait here until it get stop signal through channel\n            &lt;-stopProgram\n            fmt.Println(\"after forever channel\")\n        }\n\nCan anybody clear the things here(i am new to GO) that how forever channel works here ?\n\n**My assumption** \\- In program 1, go routing ends after printing hello 5 times and there is no infinite execution in current routine/any other routine or stop signal to forever go channel.\n\nIf we want to use forever go channel(or block the main Go routine to stay in a specific go routine), we have to make sure these things \n\n 1. Either go routines ensures the infinite execution OR \n\n 2. Go routine sends the stop signal to forever channel.", "author_fullname": "t2_6k49kagu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Forever channel terminating the program and go channel with RabbitMQ consumer", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h8psve", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592151138.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am new to GO and writing program in GO and also RMQ consumer with go channel and came to these scenarios.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&amp;quot;go forever channel&amp;quot; blocks the main thread until it gets stop signal from other go routine&amp;quot;.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;But below program 1 tells deadlock error, and &lt;strong&gt;program 2&lt;/strong&gt; works fine without deadlock error,&lt;/p&gt;\n\n&lt;p&gt;why it&amp;#39;s happening?  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Program 1&lt;/strong&gt; : Go routine printing element in loop and deadlock error&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    package main\n    import &amp;quot;fmt&amp;quot;\n\n    func main() {\n        stopProgram := make(chan bool)\n\n        go func() {\n          for i := 0; i &amp;lt; 5; i++ {\n             fmt.Println(&amp;quot;hello &amp;quot;,i)\n          }\n          // Send signal through stopProgram to stop loop\n          //stopProgram &amp;lt;- true\n        }()\n\n\n       // your problem will wait here until it get stop signal through channel\n       &amp;lt;-stopProgram\n       fmt.Println(&amp;quot;after forever channel&amp;quot;)\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Output&lt;/strong&gt;                                                                                                                                            &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;hello  0                                                                                                                                                      \n    hello  1                                                                                                                                                      \n    hello  2                                                                                                                                                      \n    hello  3                                                                                                                                                      \n    hello  4                                                                                                                                                      \n    fatal error: all goroutines are asleep - deadlock!                                                                                                            \n\n    goroutine 1 [chan receive]:                                                                                                                                   \n    main.main()                                                                                                                                                   \n            /home/main.go:26 +0x73                                                                                                                                \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;Program 2:&lt;/strong&gt; Go routing receiving RMQ deliveries in loop and no deadlock&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    package main\n    import (\n        &amp;quot;fmt&amp;quot;\n        )\n    func main() {\n        conn, err := amqp.Dial(&amp;quot;amqp://guest:guest@localhost:5672/&amp;quot;)\n        failOnError(err, &amp;quot;Failed to connect to RabbitMQ&amp;quot;)\n        defer conn.Close()\n\n        ch, err := conn.Channel()\n        failOnError(err, &amp;quot;Failed to open a channel&amp;quot;)\n        defer ch.Close()\n\n        err = ch.ExchangeDeclare(\n                &amp;quot;stn-msg-exc&amp;quot;,   // name\n                &amp;quot;topic&amp;quot;, // type\n                true,     // durable\n                false,    // auto-deleted\n                false,    // internal\n                false,    // no-wait\n                nil,      // arguments\n        )\n        failOnError(err, &amp;quot;Failed to declare an exchange&amp;quot;)\n\n        q, err := ch.QueueDeclare(\n                &amp;quot;stn-msg-queue&amp;quot;,    // name\n                false, // durable\n                false, // delete when unused\n                true,  // exclusive\n                false, // no-wait\n                nil,   // arguments\n        )\n        failOnError(err, &amp;quot;Failed to declare a queue&amp;quot;)\n\n        err = ch.QueueBind(\n                q.Name, // queue name\n                &amp;quot;stn.#&amp;quot;,     // binding key\n                &amp;quot;stn-msg-exc&amp;quot;, // exchange\n                false,\n                nil,\n        )\n        failOnError(err, &amp;quot;Failed to bind a queue&amp;quot;)\n\n       msgs, err := ch.Consume(\n                    q.Name, // queue\n                    &amp;quot;&amp;quot;,     // consumer\n                    true,   // auto-ack\n                    false,  // exclusive\n                    false,  // no-local\n                    false,  // no-wait\n                    nil,    // args\n        )\n\n        stopProgram := make(chan bool)\n\n        go func() {\n                for d := range msgs {\n                      fmt.Println(&amp;quot;reveived message &amp;quot;,d.Body)\n\n                }\n        }()\n\n        // your problem will wait here until it get stop signal through channel\n        &amp;lt;-stopProgram\n        fmt.Println(&amp;quot;after forever channel&amp;quot;)\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Can anybody clear the things here(i am new to GO) that how forever channel works here ?&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;My assumption&lt;/strong&gt; - In program 1, go routing ends after printing hello 5 times and there is no infinite execution in current routine/any other routine or stop signal to forever go channel.&lt;/p&gt;\n\n&lt;p&gt;If we want to use forever go channel(or block the main Go routine to stay in a specific go routine), we have to make sure these things &lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Either go routines ensures the infinite execution OR &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Go routine sends the stop signal to forever channel.&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h8psve", "is_robot_indexable": true, "report_reasons": null, "author": "SrmHitter9062", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h8psve/forever_channel_terminating_the_program_and_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/h8psve/forever_channel_terminating_the_program_and_go/", "subreddit_subscribers": 115826, "created_utc": 1592122338.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_146xxl4f", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GitHub Actions for Go Developers!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_h88ted", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 19, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/KVrL_UHJ7kQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "GitHub Actions for Go Developers!", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/KVrL_UHJ7kQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "TutorialEdge", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/KVrL_UHJ7kQ/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCwFl9Y49sWChrddQTD9QhRA"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/KVrL_UHJ7kQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/h88ted", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 19, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592088256.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtu.be", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "h88ted", "is_robot_indexable": true, "report_reasons": null, "author": "elliotforbes", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/h88ted/github_actions_for_go_developers/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://youtu.be/KVrL_UHJ7kQ", "subreddit_subscribers": 115826, "created_utc": 1592059456.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "GitHub Actions for Go Developers!", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/KVrL_UHJ7kQ?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "TutorialEdge", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/KVrL_UHJ7kQ/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCwFl9Y49sWChrddQTD9QhRA"}}, "is_video": false}}], "after": "t3_h88ted", "before": null}}