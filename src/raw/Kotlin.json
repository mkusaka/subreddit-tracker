{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "TL;DR let the Kotlin compiler generate the boilerplate code for reifying typeargs in order to circumvent type erasure. Or, in other words, a `reified` keyword for class / non-inline function typeargs.\n\nWorking with Java (and reflection) a lot, I frequently feel the urge of banging my head against the table because of type erasure. Kotlin having a `reified` keyword for inline function typeargs is already a helpful thing, but I feel like there could be done more. In order to manually reify typeargs, I found myself using this boilerplate pattern:\n\n1. Store a `Class&lt;?&gt;` instance in the class (this usually requires passing that instance to the constructor)\n2. Perform instance checks using `clazz.isInstance(obj)`\n3. Perform an unchecked cast to the requested typearg.\n\nKotlin is already known as a language that mostly uses syntactic sugar to improve Java, while still ensuring interoperability. Therefore it would be quite fitting if Kotlin provided an universally usable `reified` keyword that hides the boilerplate pattern from you and lets you use your typearg as if it wasn't subject to type erasure. So you could do\n\n```\nvar inner: T\n// ...\nfun set(newval: Any) {\n    if (newval is T) {\n        inner = newval // smartcast\n    }\n}\n```\n\nWhich would actually store the KClass representation of T and performs an isInstance check in the background.\n\nWhat are your thoughts? Is this a good idea? Is it useful? How would you improve it? And ultimately, do you think it should be a feature request on YouTrack?", "author_fullname": "t2_35jd3ykl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Discussion: Do you think this would be a cool feature?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hexe8l", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593016408.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;TL;DR let the Kotlin compiler generate the boilerplate code for reifying typeargs in order to circumvent type erasure. Or, in other words, a &lt;code&gt;reified&lt;/code&gt; keyword for class / non-inline function typeargs.&lt;/p&gt;\n\n&lt;p&gt;Working with Java (and reflection) a lot, I frequently feel the urge of banging my head against the table because of type erasure. Kotlin having a &lt;code&gt;reified&lt;/code&gt; keyword for inline function typeargs is already a helpful thing, but I feel like there could be done more. In order to manually reify typeargs, I found myself using this boilerplate pattern:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;Store a &lt;code&gt;Class&amp;lt;?&amp;gt;&lt;/code&gt; instance in the class (this usually requires passing that instance to the constructor)&lt;/li&gt;\n&lt;li&gt;Perform instance checks using &lt;code&gt;clazz.isInstance(obj)&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Perform an unchecked cast to the requested typearg.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Kotlin is already known as a language that mostly uses syntactic sugar to improve Java, while still ensuring interoperability. Therefore it would be quite fitting if Kotlin provided an universally usable &lt;code&gt;reified&lt;/code&gt; keyword that hides the boilerplate pattern from you and lets you use your typearg as if it wasn&amp;#39;t subject to type erasure. So you could do&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nvar inner: T\n// ...\nfun set(newval: Any) {\n    if (newval is T) {\n        inner = newval // smartcast\n    }\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Which would actually store the KClass representation of T and performs an isInstance check in the background.&lt;/p&gt;\n\n&lt;p&gt;What are your thoughts? Is this a good idea? Is it useful? How would you improve it? And ultimately, do you think it should be a feature request on YouTrack?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hexe8l", "is_robot_indexable": true, "report_reasons": null, "author": "Raph0007", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/hexe8l/discussion_do_you_think_this_would_be_a_cool/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/hexe8l/discussion_do_you_think_this_would_be_a_cool/", "subreddit_subscribers": 33805, "created_utc": 1592987608.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "", "author_fullname": "t2_4zy7pmxi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Kotlin Coroutines vs Java Threads", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hecrel", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "public", "ups": 40, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 40, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592939812.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "piotrminkowski.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://piotrminkowski.com/2020/06/23/kotlin-coroutines-vs-java-threads/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hecrel", "is_robot_indexable": true, "report_reasons": null, "author": "piotr_minkowski", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/hecrel/kotlin_coroutines_vs_java_threads/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://piotrminkowski.com/2020/06/23/kotlin-coroutines-vs-java-threads/", "subreddit_subscribers": 33805, "created_utc": 1592911012.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "", "author_fullname": "t2_obpis", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "SQLDelight 1.4.0 released", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hdvn5g", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": null, "subreddit_type": "public", "ups": 44, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 44, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592872461.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/cashapp/sqldelight/releases/tag/1.4.0", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hdvn5g", "is_robot_indexable": true, "report_reasons": null, "author": "dayanruben", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/hdvn5g/sqldelight_140_released/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/cashapp/sqldelight/releases/tag/1.4.0", "subreddit_subscribers": 33805, "created_utc": 1592843661.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "Hey everyone, trying to learn Kotlin, coming from Java.\n\nWhy did Kotlin decide to switch the variable name and the type positions around? Is there a good reason for this?  \nI find it so much easier to write code like this:\n\nDog dog; (Something like D&lt;ctrl-space&gt;&lt;space&gt;&lt;ctrl-space&gt;&lt;enter&gt;)\n\nvs.\n\ndog: Dog (Where the autocomplete is only available towards the end of the line)\n\nWhat advantages are there to do it the Kotlin way?", "author_fullname": "t2_1w25913x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "variable name vs type position", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hedgeg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592943011.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey everyone, trying to learn Kotlin, coming from Java.&lt;/p&gt;\n\n&lt;p&gt;Why did Kotlin decide to switch the variable name and the type positions around? Is there a good reason for this?&lt;br/&gt;\nI find it so much easier to write code like this:&lt;/p&gt;\n\n&lt;p&gt;Dog dog; (Something like D&amp;lt;ctrl-space&amp;gt;&amp;lt;space&amp;gt;&amp;lt;ctrl-space&amp;gt;&amp;lt;enter&amp;gt;)&lt;/p&gt;\n\n&lt;p&gt;vs.&lt;/p&gt;\n\n&lt;p&gt;dog: Dog (Where the autocomplete is only available towards the end of the line)&lt;/p&gt;\n\n&lt;p&gt;What advantages are there to do it the Kotlin way?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hedgeg", "is_robot_indexable": true, "report_reasons": null, "author": "Shnorkylutyun", "discussion_type": null, "num_comments": 18, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/hedgeg/variable_name_vs_type_position/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/hedgeg/variable_name_vs_type_position/", "subreddit_subscribers": 33805, "created_utc": 1592914211.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "Should I use `variable == null`, `variable === null` or something else?", "author_fullname": "t2_1h1hfeve", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What's the best way to check if something is null in Kotlin?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_he5792", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592904263.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Should I use &lt;code&gt;variable == null&lt;/code&gt;, &lt;code&gt;variable === null&lt;/code&gt; or something else?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "he5792", "is_robot_indexable": true, "report_reasons": null, "author": "AgreeableLandscape3", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/he5792/whats_the_best_way_to_check_if_something_is_null/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/he5792/whats_the_best_way_to_check_if_something_is_null/", "subreddit_subscribers": 33805, "created_utc": 1592875463.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "I like to throw exceptions built into the language with a custom message explaining the error when possible, instead of making my own exceptions every time. Howver, I couldn't find a definitive list of all the exceptions Kotlin defines in the standard library and their usages. Does such a list exist? Is this way of throwing exceptions even a good idea?", "author_fullname": "t2_1h1hfeve", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Where can I see a list of the built-in exceptions in Kotlin?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_he6nv6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592909985.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I like to throw exceptions built into the language with a custom message explaining the error when possible, instead of making my own exceptions every time. Howver, I couldn&amp;#39;t find a definitive list of all the exceptions Kotlin defines in the standard library and their usages. Does such a list exist? Is this way of throwing exceptions even a good idea?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "he6nv6", "is_robot_indexable": true, "report_reasons": null, "author": "AgreeableLandscape3", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/he6nv6/where_can_i_see_a_list_of_the_builtin_exceptions/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/he6nv6/where_can_i_see_a_list_of_the_builtin_exceptions/", "subreddit_subscribers": 33805, "created_utc": 1592881185.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "", "author_fullname": "t2_48dua", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "New Dokka - Designed for Fearless Creativity", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hdxgj4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/OvFoTRhqaKg?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Pawe\u0142 Marks - New Dokka - Designed for Fearless Creativity", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/OvFoTRhqaKg?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Kotliners", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/OvFoTRhqaKg/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCk680H4N8NHgbKvvtAtR9tg"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/OvFoTRhqaKg?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/hdxgj4", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1592878215.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=OvFoTRhqaKg", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hdxgj4", "is_robot_indexable": true, "report_reasons": null, "author": "sureshg", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/hdxgj4/new_dokka_designed_for_fearless_creativity/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=OvFoTRhqaKg", "subreddit_subscribers": 33805, "created_utc": 1592849415.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "Pawe\u0142 Marks - New Dokka - Designed for Fearless Creativity", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/OvFoTRhqaKg?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Kotliners", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/OvFoTRhqaKg/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCk680H4N8NHgbKvvtAtR9tg"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "Does Kotlin have a REPL? Something like JShell or Ipython?", "author_fullname": "t2_sxpebiu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Kotlin REPL?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hdsppd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.85, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592862712.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Does Kotlin have a REPL? Something like JShell or Ipython?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hdsppd", "is_robot_indexable": true, "report_reasons": null, "author": "Lanfranc_di_Cambria", "discussion_type": null, "num_comments": 10, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/hdsppd/kotlin_repl/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/hdsppd/kotlin_repl/", "subreddit_subscribers": 33805, "created_utc": 1592833912.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "SOLVED :D\n\n\\-------\n\nHey all,\n\nJust quickly wanted to say thanks again to the guys that helped me out a few days ago, thanks this sub :D\n\nI'm getting the following error message when I try to add some new values to a text view on my app.\n\n    android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.\n\nThe strangest thing is that this problem sometimes happens, and sometimes doesnt.\n\nI'm running it within an overriden onResponse() method within a OkHttpClient. Everything has been working great, but now it's gotten to a point where I can't add any more values to my weather app without the app crashing.\n\nSome examples of code that works currently:\n\n    threeDay.text = getNextDay(twoDay.text.toString())\n    threeWeather.text = weatherData.daily[2].weather[0].main\n    cityText.text = getLocalLocation(weatherData.timezone)\n    weatherSummaryText.text = weatherData.current.weather[0].description\n\nAnd then some error code, which when I test in a println method gives me exactly the value I want:\n\n    nowTemp.text = kelvinToCelsius(weatherData.hourly[0].temp).toString()\n    oneTemp.text = kelvinToCelsius(weatherData.hourly[1].temp).toString()\n\nWhere kelvinToCelsius is just a converter method I made.\n\n&amp;#x200B;\n\nCan anyone give me any insight into this strange problem?\n\nCheers\n\n&amp;#x200B;\n\nEDIT:\n\n&amp;#x200B;\n\nthe onResponse method where I am doing inputting all my information from the API.\n\n    private fun fetchJson() {\n    \n            val url = \"https://api.openweathermap.org/data/2.5/onecall?lat=51.51&amp;lon=-0.19&amp;exclude=minutely&amp;appid=MYKEY\"\n    \n            val request = Request.Builder().url(url).build()\n    \n            client.newCall(request).enqueue(object : Callback {\n    \n                override fun onFailure(call: Call, e: IOException) {\n                    println(\"Failed to execute request\")\n                }\n    \n                override fun onResponse(call: Call, response: Response) {\n                    val body = response.body?.string()\n                    println(body)\n    \n                    val gson = GsonBuilder().create()\n    \n                    val weatherData = gson.fromJson(body, WeatherData::class.java)\n    \n                    /**\n                     * ERROR: High/Low temps not registering.\n                     * android.view.ViewRootImpl$CalledFromWrongThreadException: Only         the original thread that created a view hierarchy can touch its views.\n                     * Sometimes works, sometimes doesn't???\n                     */\n    \n                    //Fill out info from top to bottom.\n                    //Top\n                    cityText.text = getLocalLocation(weatherData.timezone)\n                    weatherSummaryText.text = weatherData.current.weather[0].description\n                    tempText.text = kelvinToCelsius(weatherData.current.temp).toString() + \"\u00b0\"\n    \n                    /////////////////////////Hourly\n                    currentDayText.text = getDateDay(weatherData.current.dt)\n    \n    //                nowTemp.text = kelvinToCelsius(weatherData.hourly[0].temp).toString()\n    //\n    //                oneTemp.text = kelvinToCelsius(weatherData.hourly[1].temp).toString()\n    //\n    //                twoTemp.text = kelvinToCelsius(weatherData.hourly[2].temp).toString()\n    //\n    //                threeTemp.text = kelvinToCelsius(weatherData.hourly[3].temp).toString()\n    //\n    //                fourTemp.text = kelvinToCelsius(weatherData.hourly[4].temp).toString()\n    //\n    //                fiveTemp.text = kelvinToCelsius(weatherData.hourly[5].temp).toString()\n    //\n    //                sixTemp.text = kelvinToCelsius(weatherData.hourly[6].temp).toString()\n    //\n    //                sevenTemp.text = kelvinToCelsius(weatherData.hourly[7].temp).toString()\n    //\n    //                eightTemp.text = kelvinToCelsius(weatherData.hourly[8].temp).toString()\n    //\n    //                nineTemp.text = kelvinToCelsius(weatherData.hourly[9].temp).toString()\n    //\n    //                tenTemp.text = kelvinToCelsius(weatherData.hourly[10].temp).toString()\n    //\n    //                elevenTemp.text = kelvinToCelsius(weatherData.hourly[11].temp).toString()\n    //\n    //                twelveTemp.text = kelvinToCelsius(weatherData.hourly[12].temp).toString()\n    \n    \n                    /////////////////////////Daily\n                    oneDay.text = getNextDay(currentDayText.text.toString())\n                    oneWeather.text = weatherData.daily[0].weather[0].main\n    //                oneHighTemp.text = kelvinToCelsius(weatherData.daily[0].temp.max).toString()\n    //                oneLowTemp.text = kelvinToCelsius(weatherData.daily[0].temp.min).toString()\n    \n                    twoDay.text = getNextDay(oneDay.text.toString())\n                    twoWeather.text = weatherData.daily[1].weather[0].main\n    //                twoHighTemp.text = kelvinToCelsius(weatherData.daily[1].temp.max).toString()\n    //                twoLowTemp.text = kelvinToCelsius(weatherData.daily[1].temp.min).toString()\n    \n                    threeDay.text = getNextDay(twoDay.text.toString())\n                    threeWeather.text = weatherData.daily[2].weather[0].main\n    //                threeHighTemp.text = kelvinToCelsius(weatherData.daily[2].temp.max).toString()\n    //                threeLowTemp.text = kelvinToCelsius(weatherData.daily[2].temp.min).toString()\n    \n                    fourDay.text = getNextDay(threeDay.text.toString())\n                    fourWeather.text = weatherData.daily[3].weather[0].main\n    //                fourHighTemp.text = kelvinToCelsius(weatherData.daily[3].temp.max).toString()\n    //                fourLowTemp.text = kelvinToCelsius(weatherData.daily[3].temp.min).toString()\n    \n                    fiveDay.text = getNextDay(fourDay.text.toString())\n                    fiveWeather.text = weatherData.daily[4].weather[0].main\n    //                fiveHighTemp.text = kelvinToCelsius(weatherData.daily[4].temp.max).toString()\n    //                fiveLowTemp.text = kelvinToCelsius(weatherData.daily[4].temp.min).toString()\n    \n                    sixDay.text = getNextDay(fiveDay.text.toString())\n                    sixWeather.text = weatherData.daily[5].weather[0].main\n    //                sixHighTemp.text = kelvinToCelsius(weatherData.daily[5].temp.max).toString()\n    //                sixLowTemp.text = kelvinToCelsius(weatherData.daily[5].temp.min).toString()\n    \n                    sevenDay.text = getNextDay(sixDay.text.toString())\n                    sevenWeather.text = weatherData.daily[6].weather[0].main\n    //                sevenHighTemp.text = kelvinToCelsius(weatherData.daily[6].temp.max).toString()\n    //                sevenLowTemp.text = kelvinToCelsius(weatherData.daily[6].temp.min).toString()\n    \n                }\n            })\n    \n    \n        }\n\n&amp;#x200B;", "author_fullname": "t2_374f0l3h", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Android | Having a strange WrongThread error that I can't figure out", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hdzap2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1592862912.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592883840.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;SOLVED :D&lt;/p&gt;\n\n&lt;p&gt;-------&lt;/p&gt;\n\n&lt;p&gt;Hey all,&lt;/p&gt;\n\n&lt;p&gt;Just quickly wanted to say thanks again to the guys that helped me out a few days ago, thanks this sub :D&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m getting the following error message when I try to add some new values to a text view on my app.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;android.view.ViewRootImpl$CalledFromWrongThreadException: Only the original thread that created a view hierarchy can touch its views.\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;The strangest thing is that this problem sometimes happens, and sometimes doesnt.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m running it within an overriden onResponse() method within a OkHttpClient. Everything has been working great, but now it&amp;#39;s gotten to a point where I can&amp;#39;t add any more values to my weather app without the app crashing.&lt;/p&gt;\n\n&lt;p&gt;Some examples of code that works currently:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;threeDay.text = getNextDay(twoDay.text.toString())\nthreeWeather.text = weatherData.daily[2].weather[0].main\ncityText.text = getLocalLocation(weatherData.timezone)\nweatherSummaryText.text = weatherData.current.weather[0].description\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And then some error code, which when I test in a println method gives me exactly the value I want:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;nowTemp.text = kelvinToCelsius(weatherData.hourly[0].temp).toString()\noneTemp.text = kelvinToCelsius(weatherData.hourly[1].temp).toString()\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Where kelvinToCelsius is just a converter method I made.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Can anyone give me any insight into this strange problem?&lt;/p&gt;\n\n&lt;p&gt;Cheers&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;EDIT:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;the onResponse method where I am doing inputting all my information from the API.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;private fun fetchJson() {\n\n        val url = &amp;quot;https://api.openweathermap.org/data/2.5/onecall?lat=51.51&amp;amp;lon=-0.19&amp;amp;exclude=minutely&amp;amp;appid=MYKEY&amp;quot;\n\n        val request = Request.Builder().url(url).build()\n\n        client.newCall(request).enqueue(object : Callback {\n\n            override fun onFailure(call: Call, e: IOException) {\n                println(&amp;quot;Failed to execute request&amp;quot;)\n            }\n\n            override fun onResponse(call: Call, response: Response) {\n                val body = response.body?.string()\n                println(body)\n\n                val gson = GsonBuilder().create()\n\n                val weatherData = gson.fromJson(body, WeatherData::class.java)\n\n                /**\n                 * ERROR: High/Low temps not registering.\n                 * android.view.ViewRootImpl$CalledFromWrongThreadException: Only         the original thread that created a view hierarchy can touch its views.\n                 * Sometimes works, sometimes doesn&amp;#39;t???\n                 */\n\n                //Fill out info from top to bottom.\n                //Top\n                cityText.text = getLocalLocation(weatherData.timezone)\n                weatherSummaryText.text = weatherData.current.weather[0].description\n                tempText.text = kelvinToCelsius(weatherData.current.temp).toString() + &amp;quot;\u00b0&amp;quot;\n\n                /////////////////////////Hourly\n                currentDayText.text = getDateDay(weatherData.current.dt)\n\n//                nowTemp.text = kelvinToCelsius(weatherData.hourly[0].temp).toString()\n//\n//                oneTemp.text = kelvinToCelsius(weatherData.hourly[1].temp).toString()\n//\n//                twoTemp.text = kelvinToCelsius(weatherData.hourly[2].temp).toString()\n//\n//                threeTemp.text = kelvinToCelsius(weatherData.hourly[3].temp).toString()\n//\n//                fourTemp.text = kelvinToCelsius(weatherData.hourly[4].temp).toString()\n//\n//                fiveTemp.text = kelvinToCelsius(weatherData.hourly[5].temp).toString()\n//\n//                sixTemp.text = kelvinToCelsius(weatherData.hourly[6].temp).toString()\n//\n//                sevenTemp.text = kelvinToCelsius(weatherData.hourly[7].temp).toString()\n//\n//                eightTemp.text = kelvinToCelsius(weatherData.hourly[8].temp).toString()\n//\n//                nineTemp.text = kelvinToCelsius(weatherData.hourly[9].temp).toString()\n//\n//                tenTemp.text = kelvinToCelsius(weatherData.hourly[10].temp).toString()\n//\n//                elevenTemp.text = kelvinToCelsius(weatherData.hourly[11].temp).toString()\n//\n//                twelveTemp.text = kelvinToCelsius(weatherData.hourly[12].temp).toString()\n\n\n                /////////////////////////Daily\n                oneDay.text = getNextDay(currentDayText.text.toString())\n                oneWeather.text = weatherData.daily[0].weather[0].main\n//                oneHighTemp.text = kelvinToCelsius(weatherData.daily[0].temp.max).toString()\n//                oneLowTemp.text = kelvinToCelsius(weatherData.daily[0].temp.min).toString()\n\n                twoDay.text = getNextDay(oneDay.text.toString())\n                twoWeather.text = weatherData.daily[1].weather[0].main\n//                twoHighTemp.text = kelvinToCelsius(weatherData.daily[1].temp.max).toString()\n//                twoLowTemp.text = kelvinToCelsius(weatherData.daily[1].temp.min).toString()\n\n                threeDay.text = getNextDay(twoDay.text.toString())\n                threeWeather.text = weatherData.daily[2].weather[0].main\n//                threeHighTemp.text = kelvinToCelsius(weatherData.daily[2].temp.max).toString()\n//                threeLowTemp.text = kelvinToCelsius(weatherData.daily[2].temp.min).toString()\n\n                fourDay.text = getNextDay(threeDay.text.toString())\n                fourWeather.text = weatherData.daily[3].weather[0].main\n//                fourHighTemp.text = kelvinToCelsius(weatherData.daily[3].temp.max).toString()\n//                fourLowTemp.text = kelvinToCelsius(weatherData.daily[3].temp.min).toString()\n\n                fiveDay.text = getNextDay(fourDay.text.toString())\n                fiveWeather.text = weatherData.daily[4].weather[0].main\n//                fiveHighTemp.text = kelvinToCelsius(weatherData.daily[4].temp.max).toString()\n//                fiveLowTemp.text = kelvinToCelsius(weatherData.daily[4].temp.min).toString()\n\n                sixDay.text = getNextDay(fiveDay.text.toString())\n                sixWeather.text = weatherData.daily[5].weather[0].main\n//                sixHighTemp.text = kelvinToCelsius(weatherData.daily[5].temp.max).toString()\n//                sixLowTemp.text = kelvinToCelsius(weatherData.daily[5].temp.min).toString()\n\n                sevenDay.text = getNextDay(sixDay.text.toString())\n                sevenWeather.text = weatherData.daily[6].weather[0].main\n//                sevenHighTemp.text = kelvinToCelsius(weatherData.daily[6].temp.max).toString()\n//                sevenLowTemp.text = kelvinToCelsius(weatherData.daily[6].temp.min).toString()\n\n            }\n        })\n\n\n    }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hdzap2", "is_robot_indexable": true, "report_reasons": null, "author": "aSwanson96", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/hdzap2/android_having_a_strange_wrongthread_error_that_i/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/hdzap2/android_having_a_strange_wrongthread_error_that_i/", "subreddit_subscribers": 33805, "created_utc": 1592855040.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Kotlin", "selftext": "Enjoy!", "author_fullname": "t2_3h5id", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Within 24 hours, kotlin will overtake the scala subreddit in subscriber count", "link_flair_richtext": [], "subreddit_name_prefixed": "r/Kotlin", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hdbqs1", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 120, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 120, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1592792604.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Kotlin", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Enjoy!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2so2r", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hdbqs1", "is_robot_indexable": true, "report_reasons": null, "author": "pure_x01", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Kotlin/comments/hdbqs1/within_24_hours_kotlin_will_overtake_the_scala/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/Kotlin/comments/hdbqs1/within_24_hours_kotlin_will_overtake_the_scala/", "subreddit_subscribers": 33805, "created_utc": 1592763804.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_hdbqs1", "before": null}}