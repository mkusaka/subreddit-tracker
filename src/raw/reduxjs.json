{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "", "author_fullname": "t2_2a9xoaxu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Experimental state management lib for React from Facebook", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gkahrf", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589582998.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.graphqleditor.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gkahrf", "is_robot_indexable": true, "report_reasons": null, "author": "oczekkk", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/gkahrf/experimental_state_management_lib_for_react_from/", "parent_whitelist_status": null, "stickied": false, "url": "https://blog.graphqleditor.com/recoil-react-state-management-library/", "subreddit_subscribers": 3449, "created_utc": 1589554198.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I want to know useful patterns/arquitecture for big enterprise projects used in nextjs(react) with redux. \ni've seen some recomendations like [this](https://laniewski.me/javascript/react/redux/2019/02/28/enterprise-scale-react-redux-project-architecture.html) or [this](https://www.pluralsight.com/guides/how-to-organize-your-react-+-redux-codebase)  where application is split in `modules` that encapsulates all related things with it, Redux(actions, reducers, sagas), utils, ts-types, and jsx|tsx components and have one folder for shared things. I like this concept because it is easy to identify the related elements between the store and the ui layer inside modules, but I don't know if it's really scalable for big enterprise projects. I would like to hear recommendations and/or suggested articles.", "author_fullname": "t2_64xn5tht", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Recomendations for Enterprise-scale Nextjs(React)/Redux/Typescript arquitecture", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gjrykm", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1589522239.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589509563.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I want to know useful patterns/arquitecture for big enterprise projects used in nextjs(react) with redux. \ni&amp;#39;ve seen some recomendations like &lt;a href=\"https://laniewski.me/javascript/react/redux/2019/02/28/enterprise-scale-react-redux-project-architecture.html\"&gt;this&lt;/a&gt; or &lt;a href=\"https://www.pluralsight.com/guides/how-to-organize-your-react-+-redux-codebase\"&gt;this&lt;/a&gt;  where application is split in &lt;code&gt;modules&lt;/code&gt; that encapsulates all related things with it, Redux(actions, reducers, sagas), utils, ts-types, and jsx|tsx components and have one folder for shared things. I like this concept because it is easy to identify the related elements between the store and the ui layer inside modules, but I don&amp;#39;t know if it&amp;#39;s really scalable for big enterprise projects. I would like to hear recommendations and/or suggested articles.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gjrykm", "is_robot_indexable": true, "report_reasons": null, "author": "crisf_design", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/gjrykm/recomendations_for_enterprisescale/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/gjrykm/recomendations_for_enterprisescale/", "subreddit_subscribers": 3449, "created_utc": 1589480763.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "So I have this component in React.  The {props.size} and {props.algorithm} only show up after I have submitted them. Upon init, my component's props are `options`, and `dispatch`, as opposed to `size` and `algorithm` as specified in `mapStateToProps`. \n\nmapDispatchToProp is given by default. It appears to work normally as the size and algorithm of the value does render on the page. But if I want to access size and algorithms before hitting submit, I have to do `{props.options.size}` and `{props.options.algorithm}`. After submitting `props.options` become undefined\n\nHere's my component:\n\n    const Options_Component = (props) =&gt; {\n        const {register, handleSubmit, errors, reset} = useForm({\n            validateCriteriaMode: 'all',\n            mode: 'onSubmit',\n            reValidateMode: 'onSubmit',\n            defaultValues: {\n                size: INITIAL_SIZE,\n                algorithm: INITIAL_ALGORITHM\n            }\n        });\n        \n        const onSubmit = values =&gt; {\n            const inputs = changeOptions({size: 50})\n            props.dispatch(inputs);\n        }\n    \n        return (\n            &lt;header&gt;\n                &lt;form onSubmit={handleSubmit(onSubmit)}&gt;\n                    &lt;div&gt;{props.size}&lt;/div&gt;\n                    &lt;div&gt;{props.algorithm}&lt;/div&gt;\n                    &lt;input type=\"submit\"/&gt;\n                    &lt;input type=\"button\" value=\"Reset to default\" onClick={()=&gt; reset()}/&gt;\n                &lt;/form&gt;\n            &lt;/header&gt;\n        );\n    }\n    \n    const mapStateToProps = (state, ownProps) =&gt; ({\n        size: state.options.size,\n        algorithm: state.options.algorithm\n    })\n    \n    export default connect(mapStateToProps)(Options_Component)\n\nMy App - Option component is a child of SortVisualizer\n\n    function App() {\n      return (&lt;Provider store={OptionStore}&gt;\n        &lt;SortVisualizer/&gt;\n      &lt;/Provider&gt;)\n    }\n    \n    export default App;\n    \n\nReducer and createStore:\n\n    export default function (state = initialState, {type, payload}) {\n        console.log({type, payload})\n        switch (type) {\n            case CHANGE_OPTIONS:\n                console.log(type, payload)\n                const {size = initialValue.INITIAL_SIZE, algorithm = initialValue.INITIAL_ALGORITHM} = payload\n                return {size: size, algorithm: algorithm}\n            default: return {...state}\n        }\n    }\n    \n    export const changeOptions = options =&gt; ({\n        type: CHANGE_OPTIONS,\n        payload: options\n    })\n    \n    export default combineReducers({options}); &lt;--- Root Reducer\n    \n    export default createStore(rootReducer);", "author_fullname": "t2_o2w5r", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[HELP] Redux store/mapping not available on init", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gitfgq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589379770.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So I have this component in React.  The {props.size} and {props.algorithm} only show up after I have submitted them. Upon init, my component&amp;#39;s props are &lt;code&gt;options&lt;/code&gt;, and &lt;code&gt;dispatch&lt;/code&gt;, as opposed to &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;algorithm&lt;/code&gt; as specified in &lt;code&gt;mapStateToProps&lt;/code&gt;. &lt;/p&gt;\n\n&lt;p&gt;mapDispatchToProp is given by default. It appears to work normally as the size and algorithm of the value does render on the page. But if I want to access size and algorithms before hitting submit, I have to do &lt;code&gt;{props.options.size}&lt;/code&gt; and &lt;code&gt;{props.options.algorithm}&lt;/code&gt;. After submitting &lt;code&gt;props.options&lt;/code&gt; become undefined&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s my component:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const Options_Component = (props) =&amp;gt; {\n    const {register, handleSubmit, errors, reset} = useForm({\n        validateCriteriaMode: &amp;#39;all&amp;#39;,\n        mode: &amp;#39;onSubmit&amp;#39;,\n        reValidateMode: &amp;#39;onSubmit&amp;#39;,\n        defaultValues: {\n            size: INITIAL_SIZE,\n            algorithm: INITIAL_ALGORITHM\n        }\n    });\n\n    const onSubmit = values =&amp;gt; {\n        const inputs = changeOptions({size: 50})\n        props.dispatch(inputs);\n    }\n\n    return (\n        &amp;lt;header&amp;gt;\n            &amp;lt;form onSubmit={handleSubmit(onSubmit)}&amp;gt;\n                &amp;lt;div&amp;gt;{props.size}&amp;lt;/div&amp;gt;\n                &amp;lt;div&amp;gt;{props.algorithm}&amp;lt;/div&amp;gt;\n                &amp;lt;input type=&amp;quot;submit&amp;quot;/&amp;gt;\n                &amp;lt;input type=&amp;quot;button&amp;quot; value=&amp;quot;Reset to default&amp;quot; onClick={()=&amp;gt; reset()}/&amp;gt;\n            &amp;lt;/form&amp;gt;\n        &amp;lt;/header&amp;gt;\n    );\n}\n\nconst mapStateToProps = (state, ownProps) =&amp;gt; ({\n    size: state.options.size,\n    algorithm: state.options.algorithm\n})\n\nexport default connect(mapStateToProps)(Options_Component)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My App - Option component is a child of SortVisualizer&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;function App() {\n  return (&amp;lt;Provider store={OptionStore}&amp;gt;\n    &amp;lt;SortVisualizer/&amp;gt;\n  &amp;lt;/Provider&amp;gt;)\n}\n\nexport default App;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Reducer and createStore:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export default function (state = initialState, {type, payload}) {\n    console.log({type, payload})\n    switch (type) {\n        case CHANGE_OPTIONS:\n            console.log(type, payload)\n            const {size = initialValue.INITIAL_SIZE, algorithm = initialValue.INITIAL_ALGORITHM} = payload\n            return {size: size, algorithm: algorithm}\n        default: return {...state}\n    }\n}\n\nexport const changeOptions = options =&amp;gt; ({\n    type: CHANGE_OPTIONS,\n    payload: options\n})\n\nexport default combineReducers({options}); &amp;lt;--- Root Reducer\n\nexport default createStore(rootReducer);\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gitfgq", "is_robot_indexable": true, "report_reasons": null, "author": "TriLamSr", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/gitfgq/help_redux_storemapping_not_available_on_init/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/gitfgq/help_redux_storemapping_not_available_on_init/", "subreddit_subscribers": 3449, "created_utc": 1589350970.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Just refactoring a small app to use Redux and hooks and noticing something strange. In index.js I have:   \n\n\n    ...\n    \n    import { createStore } from 'redux';\n    import { Provider } from 'react-redux';\n    import { rootReducer } from './reducers/rootReducer.js';\n    const store = createStore(rootReducer);\n    \n    ReactDOM.render(\n      &lt;Provider store={store}&gt;\n        &lt;React.StrictMode&gt;\n          &lt;App /&gt;\n        &lt;/React.StrictMode&gt;\n      &lt;/Provider&gt;,\n      document.getElementById('root')\n    );\n\nMy root reducer is defined in another file I am importing and I have confirmed that is firing in the console. Yet for some reason when I inspect the redux dev tools I see a bunch of data related to my reddit user acccount oddly enough and not the initial state I defined in rootReducer which is passed to createStore  \n\n\nAt this point should I not be able to see my store in redux dev tools?", "author_fullname": "t2_n3fb7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "At this point should my state (store) be viewable in the Redux dev tools? I am seeing Reddit's store there which is strange", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gi1cxi", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589276289.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Just refactoring a small app to use Redux and hooks and noticing something strange. In index.js I have:   &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;...\n\nimport { createStore } from &amp;#39;redux&amp;#39;;\nimport { Provider } from &amp;#39;react-redux&amp;#39;;\nimport { rootReducer } from &amp;#39;./reducers/rootReducer.js&amp;#39;;\nconst store = createStore(rootReducer);\n\nReactDOM.render(\n  &amp;lt;Provider store={store}&amp;gt;\n    &amp;lt;React.StrictMode&amp;gt;\n      &amp;lt;App /&amp;gt;\n    &amp;lt;/React.StrictMode&amp;gt;\n  &amp;lt;/Provider&amp;gt;,\n  document.getElementById(&amp;#39;root&amp;#39;)\n);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;My root reducer is defined in another file I am importing and I have confirmed that is firing in the console. Yet for some reason when I inspect the redux dev tools I see a bunch of data related to my reddit user acccount oddly enough and not the initial state I defined in rootReducer which is passed to createStore  &lt;/p&gt;\n\n&lt;p&gt;At this point should I not be able to see my store in redux dev tools?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gi1cxi", "is_robot_indexable": true, "report_reasons": null, "author": "mayaswelltrythis", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/gi1cxi/at_this_point_should_my_state_store_be_viewable/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/gi1cxi/at_this_point_should_my_state_store_be_viewable/", "subreddit_subscribers": 3449, "created_utc": 1589247489.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I have an application with two reducers, both with tons of action creators, and 99% of the actions creators have to use data from another reducer to do some logic. I feel comfortable doing it, but I don't know if it is a bad or good pattern.\n\n(Sorry guys, my English is bad)", "author_fullname": "t2_4tknb3xl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is it ok to make actions creators to depend of other reducers?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ghu3wx", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1589224247.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589252764.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have an application with two reducers, both with tons of action creators, and 99% of the actions creators have to use data from another reducer to do some logic. I feel comfortable doing it, but I don&amp;#39;t know if it is a bad or good pattern.&lt;/p&gt;\n\n&lt;p&gt;(Sorry guys, my English is bad)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ghu3wx", "is_robot_indexable": true, "report_reasons": null, "author": "MuriloRibas", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/ghu3wx/is_it_ok_to_make_actions_creators_to_depend_of/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/ghu3wx/is_it_ok_to_make_actions_creators_to_depend_of/", "subreddit_subscribers": 3449, "created_utc": 1589223964.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "I created a new library for use with redux: [https://lusito.github.io/tsrux/](https://lusito.github.io/tsrux/)\n\nIt only weighs 300 Byte, but gives you type-safety for your actions and reducers and helps to reduce boilerplate code.\n\nPreviously I used [deox](https://deox.js.org/) (which inspired this library), but at work we have issues with the bundle size, since deox includes RXJS and without treeshaking (which we can't use for several reasons), this adds a lot of weight to the application.\n\nFull documentation, unit-tests with 100% code-coverage and type-tests already included.\n\nLet me know what you think.", "author_fullname": "t2_odw52y5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "tsrux: Typesafe and painless action creators and reducers for redux.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggi41k", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589069429.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I created a new library for use with redux: &lt;a href=\"https://lusito.github.io/tsrux/\"&gt;https://lusito.github.io/tsrux/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;It only weighs 300 Byte, but gives you type-safety for your actions and reducers and helps to reduce boilerplate code.&lt;/p&gt;\n\n&lt;p&gt;Previously I used &lt;a href=\"https://deox.js.org/\"&gt;deox&lt;/a&gt; (which inspired this library), but at work we have issues with the bundle size, since deox includes RXJS and without treeshaking (which we can&amp;#39;t use for several reasons), this adds a lot of weight to the application.&lt;/p&gt;\n\n&lt;p&gt;Full documentation, unit-tests with 100% code-coverage and type-tests already included.&lt;/p&gt;\n\n&lt;p&gt;Let me know what you think.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggi41k", "is_robot_indexable": true, "report_reasons": null, "author": "Lus1to", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/ggi41k/tsrux_typesafe_and_painless_action_creators_and/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/ggi41k/tsrux_typesafe_and_painless_action_creators_and/", "subreddit_subscribers": 3449, "created_utc": 1589040629.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Hello,\n\nI've been using the Rails style of folder structure for a while and I think I've come to hate it. Splitting actions, reducers, and containers has lead to a lot of bloat in file structure and I've found it confusing to explain redux to jr devs given how spread out the logic is from each other.\n\nI've recently spiked Redux-Saga and Redux-toolkit (late to the party, been a while since I've had to create a store from scratch), and I like both.\n\nI've typically broken down stuff like this:  \nrouter (contains my route logic)\n\ncomponents (globally shared components)\n\npages (individual pages that are imported into the router, contain components local to the page)\n\nservices, helpers, hooks and the like up there.\n\nIf I do a more feature style, should I encompass a page and a Navbar under a /features folder? Or how have projects you've worked on done it?", "author_fullname": "t2_50ht9snf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How do you organize your file structure with Redux, Redux-Toolkit, react-router, and Redux-Saga?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gf9eo7", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588896529.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been using the Rails style of folder structure for a while and I think I&amp;#39;ve come to hate it. Splitting actions, reducers, and containers has lead to a lot of bloat in file structure and I&amp;#39;ve found it confusing to explain redux to jr devs given how spread out the logic is from each other.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve recently spiked Redux-Saga and Redux-toolkit (late to the party, been a while since I&amp;#39;ve had to create a store from scratch), and I like both.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve typically broken down stuff like this:&lt;br/&gt;\nrouter (contains my route logic)&lt;/p&gt;\n\n&lt;p&gt;components (globally shared components)&lt;/p&gt;\n\n&lt;p&gt;pages (individual pages that are imported into the router, contain components local to the page)&lt;/p&gt;\n\n&lt;p&gt;services, helpers, hooks and the like up there.&lt;/p&gt;\n\n&lt;p&gt;If I do a more feature style, should I encompass a page and a Navbar under a /features folder? Or how have projects you&amp;#39;ve worked on done it?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gf9eo7", "is_robot_indexable": true, "report_reasons": null, "author": "Ethdev256", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/gf9eo7/how_do_you_organize_your_file_structure_with/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/gf9eo7/how_do_you_organize_your_file_structure_with/", "subreddit_subscribers": 3449, "created_utc": 1588867729.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Hi,\n\nI generated an application using the redux template and store my component state in slices. I have some sample data I want to feed into my component, but it's not something I want to put in my slice file as preloaded state. How do I populate it during initialization of the application? In the App component? Do I dispatch an action from App or outside of it?\n\nAny suggestion will be appreciated!\n\nThanks,  \nGuoliang Cao", "author_fullname": "t2_bswjf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Question about initializing state in the store", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gem4gj", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588807617.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;I generated an application using the redux template and store my component state in slices. I have some sample data I want to feed into my component, but it&amp;#39;s not something I want to put in my slice file as preloaded state. How do I populate it during initialization of the application? In the App component? Do I dispatch an action from App or outside of it?&lt;/p&gt;\n\n&lt;p&gt;Any suggestion will be appreciated!&lt;/p&gt;\n\n&lt;p&gt;Thanks,&lt;br/&gt;\nGuoliang Cao&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gem4gj", "is_robot_indexable": true, "report_reasons": null, "author": "gcao99", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/gem4gj/question_about_initializing_state_in_the_store/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/gem4gj/question_about_initializing_state_in_the_store/", "subreddit_subscribers": 3449, "created_utc": 1588778817.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Ive been struggling to find a good answer/explanation to this.  \n\n\nwhat does the '...' mean in the redux initial state reducer method.\n\nEXAMPLE:\n\n&amp;#x200B;\n\n `export default function (state = {} , action) {`\n\n`switch(action.type) {` \n\n`case GET_ORDER_STATUS:` \n\n`return { ...state, orderStatusData: action.payload.orderStatus };`   \n\n\n`default: return state; }` \n\n`}`", "author_fullname": "t2_etsfx", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Im trying to figure out what '...' means in return{... x, y, x}", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_geajse", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.72, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588756875.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Ive been struggling to find a good answer/explanation to this.  &lt;/p&gt;\n\n&lt;p&gt;what does the &amp;#39;...&amp;#39; mean in the redux initial state reducer method.&lt;/p&gt;\n\n&lt;p&gt;EXAMPLE:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;export default function (state = {} , action) {&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;switch(action.type) {&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;case GET_ORDER_STATUS:&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;return { ...state, orderStatusData: action.payload.orderStatus };&lt;/code&gt;   &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;default: return state; }&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;}&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "geajse", "is_robot_indexable": true, "report_reasons": null, "author": "CharmlessKarma", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/geajse/im_trying_to_figure_out_what_means_in_return_x_y_x/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/geajse/im_trying_to_figure_out_what_means_in_return_x_y_x/", "subreddit_subscribers": 3449, "created_utc": 1588728075.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "reduxjs", "selftext": "Up until now I've only used Axios (fetch) requests from an API in my actions. What if I just want to change the Redux state from a React component like \\`logout\\`? If my function to \\`logout()\\` looks like this:\n\n&amp;#x200B;\n\n    logout = () =&gt; {localStorage.clear();this.props.clearCurrentUser()}\n\n&amp;#x200B;\n\n&amp;#x200B;\n\nand my Reducer looks like this:\n\n&amp;#x200B;\n\n    const initialState = {currentUser: [],};\n    \n    export const currentUserReducer = (state = initialState, action) =&gt; {\n    switch (action.type) {\n    case \"SET_CURRENT_USER\":\n    return { ...state, currentUser: action.payload }\n    case \"GET_CURRENT_USER\":\n    return { ...state, currentUser: action.payload }\n    case \"CLEAR_CURRENT_USER\":\n    return { ...state, currentUser: null }\n    default:\n    return state;}};\n\n&amp;#x200B;\n\nHow do I write this in an \\`action\\`?", "author_fullname": "t2_ci0js", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Dispatching to non-Axios Actions?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/reduxjs", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gdzzhn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588721847.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.reduxjs", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Up until now I&amp;#39;ve only used Axios (fetch) requests from an API in my actions. What if I just want to change the Redux state from a React component like `logout`? If my function to `logout()` looks like this:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;logout = () =&amp;gt; {localStorage.clear();this.props.clearCurrentUser()}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;and my Reducer looks like this:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const initialState = {currentUser: [],};\n\nexport const currentUserReducer = (state = initialState, action) =&amp;gt; {\nswitch (action.type) {\ncase &amp;quot;SET_CURRENT_USER&amp;quot;:\nreturn { ...state, currentUser: action.payload }\ncase &amp;quot;GET_CURRENT_USER&amp;quot;:\nreturn { ...state, currentUser: action.payload }\ncase &amp;quot;CLEAR_CURRENT_USER&amp;quot;:\nreturn { ...state, currentUser: null }\ndefault:\nreturn state;}};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;How do I write this in an `action`?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_39l3a", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gdzzhn", "is_robot_indexable": true, "report_reasons": null, "author": "dsound", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/reduxjs/comments/gdzzhn/dispatching_to_nonaxios_actions/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/reduxjs/comments/gdzzhn/dispatching_to_nonaxios_actions/", "subreddit_subscribers": 3449, "created_utc": 1588693047.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_gdzzhn", "before": null}}