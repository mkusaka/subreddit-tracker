{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Did the tour, read Effective Go, still perplexed. I'm slow to learn new languages. My background is Node and C#. Last time I did C++ was 15 years ago in college.", "author_fullname": "t2_62goxexn", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Coming from Javascript and I'm on a Go project now. I'm flummoxed by pointers and references and so on. Anyone got a good blog post that will help?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g5o3k4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 71, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 71, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587533234.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Did the tour, read Effective Go, still perplexed. I&amp;#39;m slow to learn new languages. My background is Node and C#. Last time I did C++ was 15 years ago in college.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 25, "id": "award_b92370bb-b7de-4fb3-9608-c5b4a22f714a", "penny_donate": 0, "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/fukjtec638u41_TreeHug.png", "days_of_premium": 0, "icon_height": 2048, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/fukjtec638u41_TreeHug.png?width=16&amp;height=16&amp;auto=webp&amp;s=bbe4efb7b7ea2ecacd9609c937941282019a511f", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/fukjtec638u41_TreeHug.png?width=32&amp;height=32&amp;auto=webp&amp;s=7aa65fa1bbd9dd3482e18cae220a6acbbabd6452", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/fukjtec638u41_TreeHug.png?width=48&amp;height=48&amp;auto=webp&amp;s=a7b1d9f0629a00bc081d6db45a01c14720841969", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/fukjtec638u41_TreeHug.png?width=64&amp;height=64&amp;auto=webp&amp;s=ee0ceaa18ec2902fcb59a89bb93dfb440ce7bcf5", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/fukjtec638u41_TreeHug.png?width=128&amp;height=128&amp;auto=webp&amp;s=f3c3ed580426898ffd2df864e1111c957f71adf3", "width": 128, "height": 128}], "icon_width": 2048, "start_date": null, "is_enabled": true, "description": "Show nature some love. Happy Earth Day!", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "name": "Tree Hug", "icon_format": "PNG", "award_sub_type": "GLOBAL", "penny_price": 0, "award_type": "global"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g5o3k4", "is_robot_indexable": true, "report_reasons": null, "author": "protomoleculezero", "discussion_type": null, "num_comments": 42, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/g5o3k4/coming_from_javascript_and_im_on_a_go_project_now/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/g5o3k4/coming_from_javascript_and_im_on_a_go_project_now/", "subreddit_subscribers": 109870, "created_utc": 1587504434.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_qnt5p69", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "linfangrong/redismodule-ratelimit: Redis module that provides ratelimit in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_g60012", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587586272.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g60012", "is_robot_indexable": true, "report_reasons": null, "author": "mastabadtomm", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/g60012/linfangrongredismoduleratelimit_redis_module_that/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/linfangrong/redismodule-ratelimit", "subreddit_subscribers": 109870, "created_utc": 1587557472.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": " \n\n# What is the future of the Golang programming language for 2020-2021? Does it make sense to learn it as the first language for backend development? Can I find a job as a junior in the USA?", "author_fullname": "t2_5j64vygu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What is the future of the Golang programming language for 2020-2021?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_g5zm8u", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587584503.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;What is the future of the Golang programming language for 2020-2021? Does it make sense to learn it as the first language for backend development? Can I find a job as a junior in the USA?&lt;/h1&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g5zm8u", "is_robot_indexable": true, "report_reasons": null, "author": "JoshLory", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/g5zm8u/what_is_the_future_of_the_golang_programming/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/g5zm8u/what_is_the_future_of_the_golang_programming/", "subreddit_subscribers": 109870, "created_utc": 1587555703.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_owlu3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Using 'Go Generate' To Deploy Multi-Process Apps", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_g613zk", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587590902.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "qvault.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g613zk", "is_robot_indexable": true, "report_reasons": null, "author": "kvothe1956", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/g613zk/using_go_generate_to_deploy_multiprocess_apps/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://qvault.io/2020/04/22/using-go-generate-to-deploy-multi-process-apps/", "subreddit_subscribers": 109870, "created_utc": 1587562102.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hello guys!\n\nI'm creating a REST API with go for an iOS application and I want the option to upload and download images.\n\nI saw one GitHub repo but it was about 4 years old.\n\nI thought about uploading the image to Google's Firebase from the client, and when I get the url to send a request to the server, and save the url I got in the database so I can have the url whenever I need it.\n\nOne problem I got with it is that for one image upload, I need two network calls, and that does not seem so efficient.", "author_fullname": "t2_i4bgf0s", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Image uploading with go?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g5zir7", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587584038.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello guys!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m creating a REST API with go for an iOS application and I want the option to upload and download images.&lt;/p&gt;\n\n&lt;p&gt;I saw one GitHub repo but it was about 4 years old.&lt;/p&gt;\n\n&lt;p&gt;I thought about uploading the image to Google&amp;#39;s Firebase from the client, and when I get the url to send a request to the server, and save the url I got in the database so I can have the url whenever I need it.&lt;/p&gt;\n\n&lt;p&gt;One problem I got with it is that for one image upload, I need two network calls, and that does not seem so efficient.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g5zir7", "is_robot_indexable": true, "report_reasons": null, "author": "ZwapDawg", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/g5zir7/image_uploading_with_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/g5zir7/image_uploading_with_go/", "subreddit_subscribers": 109870, "created_utc": 1587555238.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_26w24xwe", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "a library for creating ISO disk images in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g5c9ut", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 106, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 106, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587490975.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g5c9ut", "is_robot_indexable": true, "report_reasons": null, "author": "Dramatic_Shirt", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/g5c9ut/a_library_for_creating_iso_disk_images_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/kdomanski/iso9660", "subreddit_subscribers": 109870, "created_utc": 1587462175.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi everyone! I'm learning go and I wanna use it for backend so I wonder if there's a free ebook for using go with mySQL and mongoDB", "author_fullname": "t2_4ghik7xs", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ebook for backend", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g5s2jq", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587547607.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone! I&amp;#39;m learning go and I wanna use it for backend so I wonder if there&amp;#39;s a free ebook for using go with mySQL and mongoDB&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g5s2jq", "is_robot_indexable": true, "report_reasons": null, "author": "Aken_man", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/g5s2jq/ebook_for_backend/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/g5s2jq/ebook_for_backend/", "subreddit_subscribers": 109870, "created_utc": 1587518807.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "So maybe I'm doing this wrong, but I need to cache queries to Redis before the actual query is called. At the moment I wrote this function which works completely fine until it's given an unsafe pointer. Triggers `reflect: call of reflect.Value.Elem on unsafe.Pointer Value` when I use the `v.Elem()` with it. I need it to nest through the value type it finds and converts it to a string which then I call MD5 hash function on.\n\n    func GenerateQueryCacheKey(args ...interface{}) string {\n    \tvar argumentString = \"\"\n    \n    \tfor _, arg := range args {\n    \t\targumentString += generateRawValueKey(reflect.ValueOf(arg))\n    \t}\n    \n    \th := md5.New()\n    \tio.WriteString(h, argumentString)\n    \n    \treturn fmt.Sprintf(\"%x\", h.Sum(nil))\n    }\n    \n    func generateRawValueKey(v reflect.Value) string {\n    \n    \tfmt.Println(\"generateRawValueKey\", v.Kind())\n    \tswitch v.Kind() {\n    \tcase reflect.Bool:\n    \t\treturn strconv.FormatBool(v.Bool())\n    \tcase reflect.String:\n    \t\treturn v.String()\n    \tcase reflect.Int, reflect.Int32, reflect.Int64:\n    \t\treturn strconv.Itoa(int(v.Int()))\n    \tcase reflect.Uint, reflect.Uint64, reflect.Uint8, reflect.Uint32:\n    \t\treturn strconv.Itoa(int(v.Uint()))\n    \tcase reflect.Float64, reflect.Float32:\n    \t\treturn strconv.FormatFloat(v.Float(), 'E', -1, 32)\n    \tcase reflect.Struct:\n    \t\ttoken := \"\"\n    \t\tfor i := 0; i &lt; v.NumField(); i++ {\n    \t\t\ttoken += generateRawValueKey(v.Field(i))\n    \t\t}\n    \n    \t\treturn token\n    \tcase reflect.Ptr, reflect.UnsafePointer:\n    \t\tif v.IsNil() {\n    \t\t\treturn \"null\"\n    \t\t}\n    \n    \t\treturn generateRawValueKey(v.Elem()) // &lt;&lt;&lt; [PANIC RECOVER] reflect: call of reflect.Value.Elem on unsafe.Pointer Value\n    \tcase reflect.Array, reflect.Slice:\n    \t\ttoken := \"\"\n    \n    \t\tfor i := 0; i &lt; v.Len(); i++ {\n    \t\t\ttoken += generateRawValueKey(v.Field(i))\n    \t\t}\n    \n    \t\tfmt.Println(\"Array token:\", token)\n    \t\treturn token\n    \tcase reflect.Map:\n    \t\ttoken := \"\"\n    \t\tfor _, key := range v.MapKeys() {\n    \t\t\ttoken += generateRawValueKey(key)\n    \t\t\ttoken += generateRawValueKey(v.MapIndex(key))\n    \t\t}\n    \n    \t\treturn token\n    \tcase reflect.Func:\n    \t\treturn \"\"\n    \tdefault:\n    \t\treturn \"nil\"\n    \t}\n    }\n\nI'm not sure if it means anything, but the struct that is being passed into this also has a `reflect.Value` inside which keeps that unsafe pointer I assume which is giving me issues. [https://github.com/go-pg/pg/blob/master/types/array.go#L9](https://github.com/go-pg/pg/blob/master/types/array.go#L9)", "author_fullname": "t2_14jfma", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to handle unsafe pointers when recursively generate a hash key string for caching?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g5vixh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1587534473.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1587562912.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;So maybe I&amp;#39;m doing this wrong, but I need to cache queries to Redis before the actual query is called. At the moment I wrote this function which works completely fine until it&amp;#39;s given an unsafe pointer. Triggers &lt;code&gt;reflect: call of reflect.Value.Elem on unsafe.Pointer Value&lt;/code&gt; when I use the &lt;code&gt;v.Elem()&lt;/code&gt; with it. I need it to nest through the value type it finds and converts it to a string which then I call MD5 hash function on.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func GenerateQueryCacheKey(args ...interface{}) string {\n    var argumentString = &amp;quot;&amp;quot;\n\n    for _, arg := range args {\n        argumentString += generateRawValueKey(reflect.ValueOf(arg))\n    }\n\n    h := md5.New()\n    io.WriteString(h, argumentString)\n\n    return fmt.Sprintf(&amp;quot;%x&amp;quot;, h.Sum(nil))\n}\n\nfunc generateRawValueKey(v reflect.Value) string {\n\n    fmt.Println(&amp;quot;generateRawValueKey&amp;quot;, v.Kind())\n    switch v.Kind() {\n    case reflect.Bool:\n        return strconv.FormatBool(v.Bool())\n    case reflect.String:\n        return v.String()\n    case reflect.Int, reflect.Int32, reflect.Int64:\n        return strconv.Itoa(int(v.Int()))\n    case reflect.Uint, reflect.Uint64, reflect.Uint8, reflect.Uint32:\n        return strconv.Itoa(int(v.Uint()))\n    case reflect.Float64, reflect.Float32:\n        return strconv.FormatFloat(v.Float(), &amp;#39;E&amp;#39;, -1, 32)\n    case reflect.Struct:\n        token := &amp;quot;&amp;quot;\n        for i := 0; i &amp;lt; v.NumField(); i++ {\n            token += generateRawValueKey(v.Field(i))\n        }\n\n        return token\n    case reflect.Ptr, reflect.UnsafePointer:\n        if v.IsNil() {\n            return &amp;quot;null&amp;quot;\n        }\n\n        return generateRawValueKey(v.Elem()) // &amp;lt;&amp;lt;&amp;lt; [PANIC RECOVER] reflect: call of reflect.Value.Elem on unsafe.Pointer Value\n    case reflect.Array, reflect.Slice:\n        token := &amp;quot;&amp;quot;\n\n        for i := 0; i &amp;lt; v.Len(); i++ {\n            token += generateRawValueKey(v.Field(i))\n        }\n\n        fmt.Println(&amp;quot;Array token:&amp;quot;, token)\n        return token\n    case reflect.Map:\n        token := &amp;quot;&amp;quot;\n        for _, key := range v.MapKeys() {\n            token += generateRawValueKey(key)\n            token += generateRawValueKey(v.MapIndex(key))\n        }\n\n        return token\n    case reflect.Func:\n        return &amp;quot;&amp;quot;\n    default:\n        return &amp;quot;nil&amp;quot;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m not sure if it means anything, but the struct that is being passed into this also has a &lt;code&gt;reflect.Value&lt;/code&gt; inside which keeps that unsafe pointer I assume which is giving me issues. &lt;a href=\"https://github.com/go-pg/pg/blob/master/types/array.go#L9\"&gt;https://github.com/go-pg/pg/blob/master/types/array.go#L9&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g5vixh", "is_robot_indexable": true, "report_reasons": null, "author": "ajm3232", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/g5vixh/how_to_handle_unsafe_pointers_when_recursively/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/g5vixh/how_to_handle_unsafe_pointers_when_recursively/", "subreddit_subscribers": 109870, "created_utc": 1587534112.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_520hq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to Manage Database Timeouts and Cancellations in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g59fdv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 67, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 67, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587475968.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "alexedwards.net", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g59fdv", "is_robot_indexable": true, "report_reasons": null, "author": "alexedwards", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/g59fdv/how_to_manage_database_timeouts_and_cancellations/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.alexedwards.net/blog/how-to-manage-database-timeouts-and-cancellations-in-go", "subreddit_subscribers": 109870, "created_utc": 1587447168.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_5ydwf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "WebRTC For Gophers: Learn to build sub-second decentralized real-time communications software", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_g4xsws", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 172, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/FdgoOrJH8ok?start=989&amp;feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "PNW Remote Go Meetup - 14 April 2020", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/FdgoOrJH8ok?start=989&amp;feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Vanessa Naff", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/FdgoOrJH8ok/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCmZpOJi5OaFzadtk2t9Eo0w"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/FdgoOrJH8ok?start=989&amp;feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/g4xsws", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 172, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1587434493.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "g4xsws", "is_robot_indexable": true, "report_reasons": null, "author": "Sean-Der", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/g4xsws/webrtc_for_gophers_learn_to_build_subsecond/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=FdgoOrJH8ok&amp;feature=youtu.be&amp;t=989", "subreddit_subscribers": 109870, "created_utc": 1587405693.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "PNW Remote Go Meetup - 14 April 2020", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/FdgoOrJH8ok?start=989&amp;feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Vanessa Naff", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/FdgoOrJH8ok/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCmZpOJi5OaFzadtk2t9Eo0w"}}, "is_video": false}}], "after": "t3_g4xsws", "before": null}}