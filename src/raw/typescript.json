{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\nPosting top level comments that aren't job postings, [that's a paddlin](https://i.imgur.com/FxMKfnY.jpg)\n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - October", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_j2xtzq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 35, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 35, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1601539524.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;Posting top level comments that aren&amp;#39;t job postings, &lt;a href=\"https://i.imgur.com/FxMKfnY.jpg\"&gt;that&amp;#39;s a paddlin&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?auto=webp&amp;s=e7ed7da8371b4e16c167355386ca2a5744ead415", "width": 500, "height": 361}, "resolutions": [{"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=66a18e0a3c52817ab852fa4b7c250a55c579d165", "width": 108, "height": 77}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2025ba1460e8c8c9834f11cb40ba4e3832a2d3e9", "width": 216, "height": 155}, {"url": "https://external-preview.redd.it/VyGnlbKCiZgJWJ1wbp_MHOxxVM8sKYuGRykp5LnDnGo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3329109c390c2bd989b508c72a7ebf0d2bad3697", "width": 320, "height": 231}], "variants": {}, "id": "L_ccfLuUd62HPSmub7C2gCgZ5motXBmWQ__1MAuL6is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "j2xtzq", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 5, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/j2xtzq/whos_hiring_typescript_developers_october/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/j2xtzq/whos_hiring_typescript_developers_october/", "subreddit_subscribers": 50932, "created_utc": 1601510724.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_qr0axwi", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is there any different on this two? var x = foo as any; var x: any = foo;", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jgi10h", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.87, "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603464758.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jgi10h", "is_robot_indexable": true, "report_reasons": null, "author": "yusunglee2074", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jgi10h/is_there_any_different_on_this_two_var_x_foo_as/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jgi10h/is_there_any_different_on_this_two_var_x_foo_as/", "subreddit_subscribers": 50932, "created_utc": 1603435958.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "&gt; I know this is a biased source. But it's better than not asking...\n\n&gt; [This question was originally posted][original] on r/dartlang.\n\n[My blog][fanaro.com.br] is currently made with WordPress. But I've been wanting to revamp it with a more minimal design and pure code in the backend for quite a while now. The 2 reasons I've been avoiding this were: (1) my own experience as a developer and (2) the technologies I would use. My level of experience with HTML &amp; CSS is ok, but I have only minimal experience with JS and TS. While, with Dart, I think I'm already pretty advanced &amp;mdash; see [this browser extension][youtube_kbd_nav] I've created in the past month.\n\nSo I come here to ask if anyone would help me deciding if I could/should go with Dart for revamping my blog website. Is it on par with TS for this purpose? Or should I still go for TS?\n\nFrom my perspective, most of the website's work will be either content (HTML and text) or the OO design, so, in the end, it wouldn't be too hard to simply rewrite it into another language anyway, though that would be super annoying &amp;mdash; and who knows if I'm gonna accidentally design something that uses a language-specific feature.\n\nThere is also Flutter to take into consideration. Even though I think HTML &amp; CSS are more appropriate for this type of static content, maybe Flutter could be the tipping point of the argument for Dart.\n\nSince a blog website is usually very minimal anyway I could use it as an exercise for evaluating the basic differences between Dart and TS. But I don't know if I have the time or energy for that right now.\n\n\n[fanaro.com.br]: https://fanaro.com.br\n[original]: https://www.reddit.com/r/dartlang/comments/jfckso/blog_website_dart_or_typescript/\n[youtube_kbd_nav]: https://github.com/FanaroEngineering/youtube_kbd_nav", "author_fullname": "t2_qzj0m", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Which language for a blog website: Dart or TypeScript?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_jgmmg0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603486733.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;blockquote&gt;\n&lt;p&gt;I know this is a biased source. But it&amp;#39;s better than not asking...&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/dartlang/comments/jfckso/blog_website_dart_or_typescript/\"&gt;This question was originally posted&lt;/a&gt; on &lt;a href=\"/r/dartlang\"&gt;r/dartlang&lt;/a&gt;.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=\"https://fanaro.com.br\"&gt;My blog&lt;/a&gt; is currently made with WordPress. But I&amp;#39;ve been wanting to revamp it with a more minimal design and pure code in the backend for quite a while now. The 2 reasons I&amp;#39;ve been avoiding this were: (1) my own experience as a developer and (2) the technologies I would use. My level of experience with HTML &amp;amp; CSS is ok, but I have only minimal experience with JS and TS. While, with Dart, I think I&amp;#39;m already pretty advanced &amp;mdash; see &lt;a href=\"https://github.com/FanaroEngineering/youtube_kbd_nav\"&gt;this browser extension&lt;/a&gt; I&amp;#39;ve created in the past month.&lt;/p&gt;\n\n&lt;p&gt;So I come here to ask if anyone would help me deciding if I could/should go with Dart for revamping my blog website. Is it on par with TS for this purpose? Or should I still go for TS?&lt;/p&gt;\n\n&lt;p&gt;From my perspective, most of the website&amp;#39;s work will be either content (HTML and text) or the OO design, so, in the end, it wouldn&amp;#39;t be too hard to simply rewrite it into another language anyway, though that would be super annoying &amp;mdash; and who knows if I&amp;#39;m gonna accidentally design something that uses a language-specific feature.&lt;/p&gt;\n\n&lt;p&gt;There is also Flutter to take into consideration. Even though I think HTML &amp;amp; CSS are more appropriate for this type of static content, maybe Flutter could be the tipping point of the argument for Dart.&lt;/p&gt;\n\n&lt;p&gt;Since a blog website is usually very minimal anyway I could use it as an exercise for evaluating the basic differences between Dart and TS. But I don&amp;#39;t know if I have the time or energy for that right now.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jgmmg0", "is_robot_indexable": true, "report_reasons": null, "author": "Fanaro009", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jgmmg0/which_language_for_a_blog_website_dart_or/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jgmmg0/which_language_for_a_blog_website_dart_or/", "subreddit_subscribers": 50932, "created_utc": 1603457933.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I've made a NodeJS library called Graceful Server months ago.\n\nYou can find it here : [https://github.com/gquittet/graceful-server](https://github.com/gquittet/graceful-server)\n\nand here : [https://www.npmjs.com/package/@gquittet/graceful-server](https://www.npmjs.com/package/@gquittet/graceful-server)\n\n&amp;#x200B;\n\nWhat are its goals?\n\n\\- Accept HTTP connections on your API only when it's ready\n\n\\- Know precisely why your API crashed and shutdown\n\n\\- Close all HTTP connections and disconnect your API from all the data sources on shutdown (to avoid to keep opened ghost connections)\n\n\\- Give you a liveness and readiness endpoints (useful when you're using Kubernetes)\n\n&amp;#x200B;\n\nI want to know if the documentation is good.\n\nCan you share idea on how to improve the documentation and features you want to have in this library?\n\nAre you interested that I publish the roadmap?\n\n&amp;#x200B;\n\nThis post is to thanks my 10k week downloads \ud83d\udcaa\n\n&amp;#x200B;\n\nLet's make it evolve together ! \ud83d\ude80", "author_fullname": "t2_5s7ltdu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I need your advices", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jgkyug", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1603479700.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve made a NodeJS library called Graceful Server months ago.&lt;/p&gt;\n\n&lt;p&gt;You can find it here : &lt;a href=\"https://github.com/gquittet/graceful-server\"&gt;https://github.com/gquittet/graceful-server&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;and here : &lt;a href=\"https://www.npmjs.com/package/@gquittet/graceful-server\"&gt;https://www.npmjs.com/package/@gquittet/graceful-server&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;What are its goals?&lt;/p&gt;\n\n&lt;p&gt;- Accept HTTP connections on your API only when it&amp;#39;s ready&lt;/p&gt;\n\n&lt;p&gt;- Know precisely why your API crashed and shutdown&lt;/p&gt;\n\n&lt;p&gt;- Close all HTTP connections and disconnect your API from all the data sources on shutdown (to avoid to keep opened ghost connections)&lt;/p&gt;\n\n&lt;p&gt;- Give you a liveness and readiness endpoints (useful when you&amp;#39;re using Kubernetes)&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I want to know if the documentation is good.&lt;/p&gt;\n\n&lt;p&gt;Can you share idea on how to improve the documentation and features you want to have in this library?&lt;/p&gt;\n\n&lt;p&gt;Are you interested that I publish the roadmap?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;This post is to thanks my 10k week downloads \ud83d\udcaa&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s make it evolve together ! \ud83d\ude80&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/lGqpc5qlMoYXMbtfU7fo6oQfcU-t_MuK0ybdh-U7U_g.jpg?auto=webp&amp;s=a3a7668a93fe54851679bf2ea11d086a6cc0f38b", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/lGqpc5qlMoYXMbtfU7fo6oQfcU-t_MuK0ybdh-U7U_g.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=28a9b7aa74aff59419b5cd203df7321299d20bdb", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/lGqpc5qlMoYXMbtfU7fo6oQfcU-t_MuK0ybdh-U7U_g.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=a889e1f53c1511f73a655d2e4a2f33674e04ae64", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/lGqpc5qlMoYXMbtfU7fo6oQfcU-t_MuK0ybdh-U7U_g.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=d61c8178bc9bb760df848847af5397e777af699e", "width": 320, "height": 320}], "variants": {}, "id": "CY5sxzXZ2ucOGHVW71uUO4UIRoU4rr-6EcsCKsd9E5Y"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jgkyug", "is_robot_indexable": true, "report_reasons": null, "author": "gquittet", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jgkyug/i_need_your_advices/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jgkyug/i_need_your_advices/", "subreddit_subscribers": 50932, "created_utc": 1603450900.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi.\n\nFrom my Axios request, my [res.data](https://res.data) looks like this: \n\n    {\"count\":1,\"next\":null,\"previous\":null,\"results\":[{\"id\":1,\"name\":\"The Name\",\"url\":\"http://somewhere\"}]}\n\nI'd like represent this response in Typescript, so I've done this:\n\n    import axios, { AxiosResponse } from \"axios\";\n    \n    type Results = {\n      results: Array&lt;{}&gt;;\n    };\n    \n    type AxiosResponseData = {\n      data: Results;\n    };\n    \n    let res = &lt;AxiosResponse&gt; await axios.get(url, config);\n    let data = &lt;type.AxiosResponseData&gt;res.data\n    return data.results;\n\nTypescript doesn't like the very last line, which this warning: `Property 'results' does not exist on type 'AxiosResponseData'`.\n\nI'd really appreciate help figuring this out.  'AxiosResponseData'.", "author_fullname": "t2_13v6nl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Property does not exist on type", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jgk0qu", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603474889.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi.&lt;/p&gt;\n\n&lt;p&gt;From my Axios request, my &lt;a href=\"https://res.data\"&gt;res.data&lt;/a&gt; looks like this: &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{&amp;quot;count&amp;quot;:1,&amp;quot;next&amp;quot;:null,&amp;quot;previous&amp;quot;:null,&amp;quot;results&amp;quot;:[{&amp;quot;id&amp;quot;:1,&amp;quot;name&amp;quot;:&amp;quot;The Name&amp;quot;,&amp;quot;url&amp;quot;:&amp;quot;http://somewhere&amp;quot;}]}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;d like represent this response in Typescript, so I&amp;#39;ve done this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import axios, { AxiosResponse } from &amp;quot;axios&amp;quot;;\n\ntype Results = {\n  results: Array&amp;lt;{}&amp;gt;;\n};\n\ntype AxiosResponseData = {\n  data: Results;\n};\n\nlet res = &amp;lt;AxiosResponse&amp;gt; await axios.get(url, config);\nlet data = &amp;lt;type.AxiosResponseData&amp;gt;res.data\nreturn data.results;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Typescript doesn&amp;#39;t like the very last line, which this warning: &lt;code&gt;Property &amp;#39;results&amp;#39; does not exist on type &amp;#39;AxiosResponseData&amp;#39;&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d really appreciate help figuring this out.  &amp;#39;AxiosResponseData&amp;#39;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jgk0qu", "is_robot_indexable": true, "report_reasons": null, "author": "protoken", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jgk0qu/property_does_not_exist_on_type/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jgk0qu/property_does_not_exist_on_type/", "subreddit_subscribers": 50932, "created_utc": 1603446089.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hi, just getting started with typescript. Should I be using a jsconfig or tsconfig, or does it even matter?", "author_fullname": "t2_btujl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Noob Question: jsconfig or tsconfig?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jg1v1x", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603409650.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi, just getting started with typescript. Should I be using a jsconfig or tsconfig, or does it even matter?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jg1v1x", "is_robot_indexable": true, "report_reasons": null, "author": "livershi", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jg1v1x/noob_question_jsconfig_or_tsconfig/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jg1v1x/noob_question_jsconfig_or_tsconfig/", "subreddit_subscribers": 50932, "created_utc": 1603380850.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "```\nconst entities = new Map&lt;string, []&gt;([\n  [\"hero\", []],\n  [\"zombies\", []],\n  [\"bullets\", []],\n  [\"text\", []],\n]);\n\nconst mapIter = entities.keys();\n\nfor (const keys of mapIter) {\n  console.log(keys); // hero, zombies, bullets text\n}\n```\nI want to generate `type EntityKeys = \"hero\" | \"zombies\" | \"bullets\" | \"text\";` programatically. \n\nI want to use `entities.get(\"hero\")` and have `\"hero\"` type-checked, which won't work with `Map&lt;string, []&gt;`. I can use `new Map&lt;EntityKeys, Entity[]&gt;` using `type EntityKeys =...` but then it is not dynamic and I have to create `type EntityKeys` manually.\n\nCheers!", "author_fullname": "t2_1a4ifotz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How can I get the keys from a Map.keys() iterator as a type?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jfzkor", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603401937.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;```\nconst entities = new Map&amp;lt;string, []&amp;gt;([\n  [&amp;quot;hero&amp;quot;, []],\n  [&amp;quot;zombies&amp;quot;, []],\n  [&amp;quot;bullets&amp;quot;, []],\n  [&amp;quot;text&amp;quot;, []],\n]);&lt;/p&gt;\n\n&lt;p&gt;const mapIter = entities.keys();&lt;/p&gt;\n\n&lt;p&gt;for (const keys of mapIter) {\n  console.log(keys); // hero, zombies, bullets text\n}\n``&lt;code&gt;\nI want to generate&lt;/code&gt;type EntityKeys = &amp;quot;hero&amp;quot; | &amp;quot;zombies&amp;quot; | &amp;quot;bullets&amp;quot; | &amp;quot;text&amp;quot;;` programatically. &lt;/p&gt;\n\n&lt;p&gt;I want to use &lt;code&gt;entities.get(&amp;quot;hero&amp;quot;)&lt;/code&gt; and have &lt;code&gt;&amp;quot;hero&amp;quot;&lt;/code&gt; type-checked, which won&amp;#39;t work with &lt;code&gt;Map&amp;lt;string, []&amp;gt;&lt;/code&gt;. I can use &lt;code&gt;new Map&amp;lt;EntityKeys, Entity[]&amp;gt;&lt;/code&gt; using &lt;code&gt;type EntityKeys =...&lt;/code&gt; but then it is not dynamic and I have to create &lt;code&gt;type EntityKeys&lt;/code&gt; manually.&lt;/p&gt;\n\n&lt;p&gt;Cheers!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jfzkor", "is_robot_indexable": true, "report_reasons": null, "author": "HarmonicAscendant", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jfzkor/how_can_i_get_the_keys_from_a_mapkeys_iterator_as/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jfzkor/how_can_i_get_the_keys_from_a_mapkeys_iterator_as/", "subreddit_subscribers": 50932, "created_utc": 1603373137.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hello!\n\nI'm tring to define some kind of \"redux store\" boilerplate using only ContextAPI\n\nHere's what i have\n\n```\nimport { Dispatch, SetStateAction, ReactNode } from 'react'\n\ndeclare namespace ContextStore {\n\n  export type StateAgent&lt;T&gt; = [T, Dispatch&lt;SetStateAction&lt;T&gt;&gt;]\n\n  export type SetNewState&lt;T&gt; = (newValue: T) =&gt; void\n\n  export type ContextHook&lt;T&gt; = [T, SetNewState&lt;T&gt;]\n\n  export type ContextProviderProps = {\n    children: ReactNode\n  }\n}\n\nexport = ContextStore\nexport as namespace ContextStore\n```\n\nI imagine there is a better way of outputting these 4 different types by passing only 1 generic argument.\n\nThese \"T\"s are actually the same type.\n\nFor example:\nI create a `initialState = { state: true }` and then i use it to create all of the types above instead of having to import each one of them and passing `initialState` as generic, like so:\n\n```\nStateAgent&lt;typeof initialState&gt;\nSetNewState&lt;typeof initialState&gt;\nContextHook&lt;typeof initialState&gt;\n...\n``` \n\nMaybe i can build a function that make these types avaiable with the generic built-in?\n\nThanks in advance", "author_fullname": "t2_emju5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Elegant way of creating multiple types from a single generic", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jg07c8", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603404185.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m tring to define some kind of &amp;quot;redux store&amp;quot; boilerplate using only ContextAPI&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s what i have&lt;/p&gt;\n\n&lt;p&gt;```\nimport { Dispatch, SetStateAction, ReactNode } from &amp;#39;react&amp;#39;&lt;/p&gt;\n\n&lt;p&gt;declare namespace ContextStore {&lt;/p&gt;\n\n&lt;p&gt;export type StateAgent&amp;lt;T&amp;gt; = [T, Dispatch&amp;lt;SetStateAction&amp;lt;T&amp;gt;&amp;gt;]&lt;/p&gt;\n\n&lt;p&gt;export type SetNewState&amp;lt;T&amp;gt; = (newValue: T) =&amp;gt; void&lt;/p&gt;\n\n&lt;p&gt;export type ContextHook&amp;lt;T&amp;gt; = [T, SetNewState&amp;lt;T&amp;gt;]&lt;/p&gt;\n\n&lt;p&gt;export type ContextProviderProps = {\n    children: ReactNode\n  }\n}&lt;/p&gt;\n\n&lt;p&gt;export = ContextStore\nexport as namespace ContextStore\n```&lt;/p&gt;\n\n&lt;p&gt;I imagine there is a better way of outputting these 4 different types by passing only 1 generic argument.&lt;/p&gt;\n\n&lt;p&gt;These &amp;quot;T&amp;quot;s are actually the same type.&lt;/p&gt;\n\n&lt;p&gt;For example:\nI create a &lt;code&gt;initialState = { state: true }&lt;/code&gt; and then i use it to create all of the types above instead of having to import each one of them and passing &lt;code&gt;initialState&lt;/code&gt; as generic, like so:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nStateAgent&amp;lt;typeof initialState&amp;gt;\nSetNewState&amp;lt;typeof initialState&amp;gt;\nContextHook&amp;lt;typeof initialState&amp;gt;\n...\n&lt;/code&gt; &lt;/p&gt;\n\n&lt;p&gt;Maybe i can build a function that make these types avaiable with the generic built-in?&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jg07c8", "is_robot_indexable": true, "report_reasons": null, "author": "fabricio7p", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jg07c8/elegant_way_of_creating_multiple_types_from_a/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jg07c8/elegant_way_of_creating_multiple_types_from_a/", "subreddit_subscribers": 50932, "created_utc": 1603375385.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I'm building a project with both TypeScript and Babel (and React) and I see that both TypeScript and Babel support the same JSX transform step. Either TypeScript can emit transformed JSX in JS code directly, or it can preserve the JSX in JSX files so Babel can handle it.\n\nIt looks like each compiler has their own spec compliant implementation of this transformation. I cannot find any details as to which one is better to use and why. There must be some differences (speed, reliability, spec compliance, support, bug fixes, type checking, etc) but I cannot seem to identify any.\n\nGiven the little information I have, it seems like Babel is the \"canonical\" JSX transformer as React specifically works with Babel to implement the spec. From the TS JSX PR I see that they are just trying to copy what Babel implemented. This leads me to believe that I should use the TS JSX preserve setting and let Babel handle it as it'll likely be more spec complainant and more stable.\n\nDoes anyone have any additional information to add here or know of anything which I should consider in making this decision? Thanks!\n\n----\n\nEdit: Follow up. After tons of very helpful comments I figured I'd share what I decided on. I am now using `babel` for all TypeScript compiling needs. `@babel/preset-env`, `@babel/preset-typescript` and `@babel/preset-react` specifically. To get builds to fail due to type errors and to see errors in the console during development, I'm using [fork-ts-checker-webpack-plugin](https://github.com/TypeStrong/fork-ts-checker-webpack-plugin). I now no longer need `tsc` for production or development at all and am only using it for debugging if I purely want to run a command to quickly see all type errors in the project.", "author_fullname": "t2_swwp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "TypeScript JSX transform vs Babel JSX transform - pros and cons", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jffysy", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 36, "total_awards_received": 3, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 36, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1603337376.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1603325817.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m building a project with both TypeScript and Babel (and React) and I see that both TypeScript and Babel support the same JSX transform step. Either TypeScript can emit transformed JSX in JS code directly, or it can preserve the JSX in JSX files so Babel can handle it.&lt;/p&gt;\n\n&lt;p&gt;It looks like each compiler has their own spec compliant implementation of this transformation. I cannot find any details as to which one is better to use and why. There must be some differences (speed, reliability, spec compliance, support, bug fixes, type checking, etc) but I cannot seem to identify any.&lt;/p&gt;\n\n&lt;p&gt;Given the little information I have, it seems like Babel is the &amp;quot;canonical&amp;quot; JSX transformer as React specifically works with Babel to implement the spec. From the TS JSX PR I see that they are just trying to copy what Babel implemented. This leads me to believe that I should use the TS JSX preserve setting and let Babel handle it as it&amp;#39;ll likely be more spec complainant and more stable.&lt;/p&gt;\n\n&lt;p&gt;Does anyone have any additional information to add here or know of anything which I should consider in making this decision? Thanks!&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;Edit: Follow up. After tons of very helpful comments I figured I&amp;#39;d share what I decided on. I am now using &lt;code&gt;babel&lt;/code&gt; for all TypeScript compiling needs. &lt;code&gt;@babel/preset-env&lt;/code&gt;, &lt;code&gt;@babel/preset-typescript&lt;/code&gt; and &lt;code&gt;@babel/preset-react&lt;/code&gt; specifically. To get builds to fail due to type errors and to see errors in the console during development, I&amp;#39;m using &lt;a href=\"https://github.com/TypeStrong/fork-ts-checker-webpack-plugin\"&gt;fork-ts-checker-webpack-plugin&lt;/a&gt;. I now no longer need &lt;code&gt;tsc&lt;/code&gt; for production or development at all and am only using it for debugging if I purely want to run a command to quickly see all type errors in the project.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?auto=webp&amp;s=17734cd6fa93478bb284fae285130f029d734ea7", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=bb4d0d8072529abc0d6cb4af16ac0271906cf7bd", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d80a1812bf60a021606ad898b32ea2f1f7c99b8c", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/Z3oJStiWMqMf1zYm635HsZYR6Vv_Wpv3oGZsOMZgENE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2b73bb7cc8ef7386f1cfadd440ccf8ff4280b17a", "width": 320, "height": 320}], "variants": {}, "id": "SfX3HjxvFlAXfWHGyMzTDTsWmdDCxtfJp3oo1BMvj0Q"}], "enabled": false}, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 150, "id": "award_f44611f1-b89e-46dc-97fe-892280b13b82", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Thank you stranger. Shows the award.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Helpful", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png"}, {"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "award_74fe5152-7906-4991-9016-bc2d8e261200", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=16&amp;height=16&amp;auto=webp&amp;s=094da86916604f4fc9f7f63c827e31c976f00928", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=32&amp;height=32&amp;auto=webp&amp;s=52886a42b9871ec69a4465609472a864dbab27b1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=48&amp;height=48&amp;auto=webp&amp;s=63a8f5eff627778a221c58daffbfbbb87b7fe350", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=64&amp;height=64&amp;auto=webp&amp;s=da0d9de08517646db45b766dbb0e7b94d2e97312", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=128&amp;height=128&amp;auto=webp&amp;s=58d3501a4314be9d47349a1f7925e18f30a832e5", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "I don't know what to do with my hands!", "end_date": null, "subreddit_coin_reward": 0, "count": 2, "static_icon_height": 2048, "name": "Excited", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=16&amp;height=16&amp;auto=webp&amp;s=094da86916604f4fc9f7f63c827e31c976f00928", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=32&amp;height=32&amp;auto=webp&amp;s=52886a42b9871ec69a4465609472a864dbab27b1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=48&amp;height=48&amp;auto=webp&amp;s=63a8f5eff627778a221c58daffbfbbb87b7fe350", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=64&amp;height=64&amp;auto=webp&amp;s=da0d9de08517646db45b766dbb0e7b94d2e97312", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=128&amp;height=128&amp;auto=webp&amp;s=58d3501a4314be9d47349a1f7925e18f30a832e5", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jffysy", "is_robot_indexable": true, "report_reasons": null, "author": "CreativeTechGuyGames", "discussion_type": null, "num_comments": 20, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jffysy/typescript_jsx_transform_vs_babel_jsx_transform/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jffysy/typescript_jsx_transform_vs_babel_jsx_transform/", "subreddit_subscribers": 50932, "created_utc": 1603297017.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I've been using typescript for a little while but haven't had the real need to dive into anything past simple typing until now. Basically, I have a function that takes in an obj map of promises and want the typing to understand it returns a new map of the resolved types.\n\nThe closest I've come is getting it to return the relevant keys where each is a union of the resolved promise types.\n\n    type Unpromised&lt;T&gt; = T extends Promise&lt;infer R&gt; ? R : T;\n    type ValueOf&lt;T&gt; = T[keyof T];\n    type PromiseObjRet&lt;T&gt; = { [field: string]: Unpromised&lt;ValueOf&lt;T&gt;&gt;; // how can we make this respective?\n\n    async function handlePromiseObj&lt;T&gt;(obj: T): Promise&lt;PromiseObjRet&lt;T&gt;&gt; {\n        ... // resolves promises as a batch and maps them back to an obj by the original obj key\n    }\n\nI'm looking for:\n\n    const { a, b } = handlePromiseObj({ a: Promise.resolve('hi'), b: Promise.resolve(6) });\n\nto have a: string, b: number. \n\nRight now I'm getting a: string | number, b: | number.\n\nIn short, I'm looking to have types setup to be able to transform via typing \n    {\n        a: Promise&lt;string&gt;,\n        b: Promise&lt;number&gt;\n    }\n\nto\n\n    {\n        a: string,\n        b: number\n    }", "author_fullname": "t2_f44bl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Matching a destructured type based on transformation of argument type", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jfpy8t", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603357943.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been using typescript for a little while but haven&amp;#39;t had the real need to dive into anything past simple typing until now. Basically, I have a function that takes in an obj map of promises and want the typing to understand it returns a new map of the resolved types.&lt;/p&gt;\n\n&lt;p&gt;The closest I&amp;#39;ve come is getting it to return the relevant keys where each is a union of the resolved promise types.&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;type Unpromised&amp;lt;T&amp;gt; = T extends Promise&amp;lt;infer R&amp;gt; ? R : T;\ntype ValueOf&amp;lt;T&amp;gt; = T[keyof T];\ntype PromiseObjRet&amp;lt;T&amp;gt; = { [field: string]: Unpromised&amp;lt;ValueOf&amp;lt;T&amp;gt;&amp;gt;; // how can we make this respective?\n\nasync function handlePromiseObj&amp;lt;T&amp;gt;(obj: T): Promise&amp;lt;PromiseObjRet&amp;lt;T&amp;gt;&amp;gt; {\n    ... // resolves promises as a batch and maps them back to an obj by the original obj key\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;m looking for:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;const { a, b } = handlePromiseObj({ a: Promise.resolve(&amp;#39;hi&amp;#39;), b: Promise.resolve(6) });\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;to have a: string, b: number. &lt;/p&gt;\n\n&lt;p&gt;Right now I&amp;#39;m getting a: string | number, b: | number.&lt;/p&gt;\n\n&lt;p&gt;In short, I&amp;#39;m looking to have types setup to be able to transform via typing \n    {\n        a: Promise&amp;lt;string&amp;gt;,\n        b: Promise&amp;lt;number&amp;gt;\n    }&lt;/p&gt;\n\n&lt;p&gt;to&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;{\n    a: string,\n    b: number\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jfpy8t", "is_robot_indexable": true, "report_reasons": null, "author": "rykou", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jfpy8t/matching_a_destructured_type_based_on/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jfpy8t/matching_a_destructured_type_based_on/", "subreddit_subscribers": 50932, "created_utc": 1603329143.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I am writing a simple de/serializer that works for any type of \\`State\\`. Is there any way to get the concrete types of a generic type parameter T? Code sample is shown below.\n\n[https://pastebin.com/84YabPtS](https://pastebin.com/84YabPtS)\n\nps: The code does not render in reddit, so have to post it somewhere else.", "author_fullname": "t2_ig30p", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Possible to get typeof generic type parameter?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jfq79i", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1603330573.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1603358889.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am writing a simple de/serializer that works for any type of `State`. Is there any way to get the concrete types of a generic type parameter T? Code sample is shown below.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pastebin.com/84YabPtS\"&gt;https://pastebin.com/84YabPtS&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;ps: The code does not render in reddit, so have to post it somewhere else.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/-WiKXADWH5lgU4gQv5fcDAQ9QKNBZTJ-D83BykIL2HA.jpg?auto=webp&amp;s=07c121a0180003f7373863af66192b6ff6a937da", "width": 150, "height": 150}, "resolutions": [{"url": "https://external-preview.redd.it/-WiKXADWH5lgU4gQv5fcDAQ9QKNBZTJ-D83BykIL2HA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=df9c6a296446d05d873c629a30253398c4d29c1b", "width": 108, "height": 108}], "variants": {}, "id": "OgFzGCIRw1ZxjMOSkfV1OiH-_nQiZl8rzSonmOAuhGs"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jfq79i", "is_robot_indexable": true, "report_reasons": null, "author": "sinoTrinity", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/jfq79i/possible_to_get_typeof_generic_type_parameter/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/jfq79i/possible_to_get_typeof_generic_type_parameter/", "subreddit_subscribers": 50932, "created_utc": 1603330089.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_jfq79i", "before": null}}