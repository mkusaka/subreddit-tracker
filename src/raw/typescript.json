{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "The monthly thread for people to post openings at their companies.\n\n* Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.\n\n* Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards **Please report recruiters or job boards**. \n\n* Only one post per company. \n\n* If it isn't a household name, explain what your company does. Sell it.\n\n* Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).\n\n\nCommenters: please don't reply to job posts to complain about something. It's off topic here.\n\nReaders: please only email if you are personally interested in the job. \n\n[Previous Hiring Threads](https://www.reddit.com/r/typescript/search?sort=new&amp;restrict_sr=on&amp;q=flair%3AMonthly%2BHiring%2BThread)", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Who's hiring Typescript developers - January", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": "monthly-hiring", "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_eib2jh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 31, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Monthly Hiring Thread", "can_mod_post": false, "score": 31, "approved_by": null, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1577865929.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The monthly thread for people to post openings at their companies.&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Please state the job location and include the keywords REMOTE, INTERNS and/or VISA when the corresponding sort of candidate is welcome. When remote work is not an option, include ONSITE.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please only post if you personally are part of the hiring company\u2014no recruiting firms or job boards &lt;strong&gt;Please report recruiters or job boards&lt;/strong&gt;. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Only one post per company. &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;If it isn&amp;#39;t a household name, explain what your company does. Sell it.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Please add the company email that applications should be sent to, or the companies application web form/job posting (needless to say this should be on the company website, not a third party site).&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Commenters: please don&amp;#39;t reply to job posts to complain about something. It&amp;#39;s off topic here.&lt;/p&gt;\n\n&lt;p&gt;Readers: please only email if you are personally interested in the job. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/typescript/search?sort=new&amp;amp;restrict_sr=on&amp;amp;q=flair%3AMonthly%2BHiring%2BThread\"&gt;Previous Hiring Threads&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "908dba50-143b-11ea-8541-0e435e5ea9e1", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "eib2jh", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 9, "send_replies": false, "whitelist_status": null, "contest_mode": true, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/eib2jh/whos_hiring_typescript_developers_january/", "parent_whitelist_status": null, "stickied": true, "url": "https://www.reddit.com/r/typescript/comments/eib2jh/whos_hiring_typescript_developers_january/", "subreddit_subscribers": 31702, "created_utc": 1577837129.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_oeoo6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Typescript I love you but this documentation is ironic", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 111, "hide_score": false, "name": "t3_ewjhiy", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 59, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 59, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/YqwOSsuwnYkJMjhbpe5JBWA89xG46EzNmhobAznvpj8.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "image", "content_categories": null, "is_self": false, "mod_note": null, "created": 1580477081.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://preview.redd.it/0xaegxrcu1e41.jpg?auto=webp&amp;s=9ba71e9c486c81ec7539f4b271ce292428a7cc06", "width": 720, "height": 573}, "resolutions": [{"url": "https://preview.redd.it/0xaegxrcu1e41.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=ebcbfd6ca88ed763eb25d89fc24a57529b2f5367", "width": 108, "height": 85}, {"url": "https://preview.redd.it/0xaegxrcu1e41.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d260e4e3c88f60694f9227bda6a87640fa5db35b", "width": 216, "height": 171}, {"url": "https://preview.redd.it/0xaegxrcu1e41.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=7b1863c7f55b344de2c473e4908ca59fc357dcc4", "width": 320, "height": 254}, {"url": "https://preview.redd.it/0xaegxrcu1e41.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=8f50dce7c59d14815eed916bc5cfa2d7653a24e9", "width": 640, "height": 509}], "variants": {}, "id": "oVDBmjuGuCgMw-_HdZICX7F6Dx-tzv9Dy0DGHLhR6Dk"}], "enabled": true}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ewjhiy", "is_robot_indexable": true, "report_reasons": null, "author": "qqqyqnz", "discussion_type": null, "num_comments": 14, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ewjhiy/typescript_i_love_you_but_this_documentation_is/", "parent_whitelist_status": null, "stickied": false, "url": "https://i.redd.it/0xaegxrcu1e41.jpg", "subreddit_subscribers": 31702, "created_utc": 1580448281.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_61d2lpe", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Adding type safety to a HTTP API client both compile-time and runtime", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 78, "hide_score": false, "name": "t3_ewbx66", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/SN5CxzvoIInYERpAb-uwG8_dpYFssytQ1yECMV4_ujI.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1580445778.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/UI7kJHLww2f13hKEx5HlflRDeqwl4-Wg_tY-GnMbxAk.jpg?auto=webp&amp;s=30f6c7b3f16a986df1f9f802c3b07216908136bc", "width": 1200, "height": 675}, "resolutions": [{"url": "https://external-preview.redd.it/UI7kJHLww2f13hKEx5HlflRDeqwl4-Wg_tY-GnMbxAk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=198c7f336ffb7b3adf5d1a446aac968f0a2e5215", "width": 108, "height": 60}, {"url": "https://external-preview.redd.it/UI7kJHLww2f13hKEx5HlflRDeqwl4-Wg_tY-GnMbxAk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=595ba74f0debf906f075c93a520cd4ddcee8ab9a", "width": 216, "height": 121}, {"url": "https://external-preview.redd.it/UI7kJHLww2f13hKEx5HlflRDeqwl4-Wg_tY-GnMbxAk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=e98eb7258a420095b278f67a648584bd5cc255e1", "width": 320, "height": 180}, {"url": "https://external-preview.redd.it/UI7kJHLww2f13hKEx5HlflRDeqwl4-Wg_tY-GnMbxAk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=b25090234c31ca7d58191396def73b52d5956fa5", "width": 640, "height": 360}, {"url": "https://external-preview.redd.it/UI7kJHLww2f13hKEx5HlflRDeqwl4-Wg_tY-GnMbxAk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=f662ed9289895ea27d62ee2024c4e44948736c6e", "width": 960, "height": 540}, {"url": "https://external-preview.redd.it/UI7kJHLww2f13hKEx5HlflRDeqwl4-Wg_tY-GnMbxAk.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=c423def634a5e79164a12db28f15104e6281ed1d", "width": 1080, "height": 607}], "variants": {}, "id": "Lj25mcpZTey-WhQh2Y76IGL_oqAgpHr3iPwmUoz-zWk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ewbx66", "is_robot_indexable": true, "report_reasons": null, "author": "tooshilt", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ewbx66/adding_type_safety_to_a_http_api_client_both/", "parent_whitelist_status": null, "stickied": false, "url": "https://medium.com/smartly-io/oats-how-we-learned-to-stop-worrying-and-love-types-aa0041aaa9cc", "subreddit_subscribers": 31702, "created_utc": 1580416978.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "    let port: number = 8080;\n    \n    // TS1005: ';' expected.\n    process.env.PORT &amp;&amp; port = parseInt(process.env.PORT!);\n\nTypescript couldn't detect that it only runs if POST is defined, so the ! was needed. But the error above still lints on the assignment ( = ) operator. What is the issue exactly and how should I fix this?", "author_fullname": "t2_3dgvi4uq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "TS1005 error on unary assignment, what is the error here?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ew9p6b", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580436923.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;let port: number = 8080;\n\n// TS1005: &amp;#39;;&amp;#39; expected.\nprocess.env.PORT &amp;amp;&amp;amp; port = parseInt(process.env.PORT!);\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Typescript couldn&amp;#39;t detect that it only runs if POST is defined, so the ! was needed. But the error above still lints on the assignment ( = ) operator. What is the issue exactly and how should I fix this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ew9p6b", "is_robot_indexable": true, "report_reasons": null, "author": "javascript_dev", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ew9p6b/ts1005_error_on_unary_assignment_what_is_the/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ew9p6b/ts1005_error_on_unary_assignment_what_is_the/", "subreddit_subscribers": 31702, "created_utc": 1580408123.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "    // I need to access the value in: new Nouns().getNouns()[0];\n    export class Nouns {\n        constructor(){\n        }\n    \n       getNouns():string[] {\n          return this.nouns;\n        }\n    \n        public nouns:string[] = [\n        \"Armour\",\n        \"Barrymore\",\n        \"Cabot\",\n        \"Catholicism\",\n        \"Chihuahua\",\n        ........\n        ]\n\nHere is my attempt :   \n\n\n    import { Nouns } from \"./nouns\";\n    import { Adjectives } from \"./adjectives\";\n    \n     constructor() { \n        this.myName = this.generateName();\n        console.log(`A new Turtle ${this.myName} was born !`); \n        console.log(Nouns);\n      } // The result : A new Turtle undefined undefined was born !\n    \n    \n      generateName(): string {\n        let nameArray:string[] = new Nouns().getNouns();\n        let adjectiveArray:string[] = new Adjectives().getAdjectives();\n        let randomSeed:number = Math.random()*adjectiveArray.length;\n        let randomSeed2:number = Math.random()*nameArray.length;\n    \n        return `${adjectiveArray[randomSeed]} ${nameArray[randomSeed2]}`;\n      }\n    \n    \n\nWhat am I doing wrong here ?", "author_fullname": "t2_lp03i0j", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Access values in a string array class property through an import", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_ewceyp", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580447633.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;pre&gt;&lt;code&gt;// I need to access the value in: new Nouns().getNouns()[0];\nexport class Nouns {\n    constructor(){\n    }\n\n   getNouns():string[] {\n      return this.nouns;\n    }\n\n    public nouns:string[] = [\n    &amp;quot;Armour&amp;quot;,\n    &amp;quot;Barrymore&amp;quot;,\n    &amp;quot;Cabot&amp;quot;,\n    &amp;quot;Catholicism&amp;quot;,\n    &amp;quot;Chihuahua&amp;quot;,\n    ........\n    ]\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Here is my attempt :   &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import { Nouns } from &amp;quot;./nouns&amp;quot;;\nimport { Adjectives } from &amp;quot;./adjectives&amp;quot;;\n\n constructor() { \n    this.myName = this.generateName();\n    console.log(`A new Turtle ${this.myName} was born !`); \n    console.log(Nouns);\n  } // The result : A new Turtle undefined undefined was born !\n\n\n  generateName(): string {\n    let nameArray:string[] = new Nouns().getNouns();\n    let adjectiveArray:string[] = new Adjectives().getAdjectives();\n    let randomSeed:number = Math.random()*adjectiveArray.length;\n    let randomSeed2:number = Math.random()*nameArray.length;\n\n    return `${adjectiveArray[randomSeed]} ${nameArray[randomSeed2]}`;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;What am I doing wrong here ?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ewceyp", "is_robot_indexable": true, "report_reasons": null, "author": "Psy_kinetic", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ewceyp/access_values_in_a_string_array_class_property/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/ewceyp/access_values_in_a_string_array_class_property/", "subreddit_subscribers": 31702, "created_utc": 1580418833.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_3o82l", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A fully typed CLI library with GUI support", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "hide_score": false, "name": "t3_evswnd", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 40, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 40, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/CWkj-4GYQdIS2pFoOxyK_75cC7TaOfksMIRCtIzKBNA.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1580359357.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/ybFCzgs8vCEsN_4FMntO2VvTUmmHfkajasD12EV_dqo.jpg?auto=webp&amp;s=fc8e3f39d22343902023b3839e4237012b35ba75", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/ybFCzgs8vCEsN_4FMntO2VvTUmmHfkajasD12EV_dqo.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=19013414b696e6f64add6439cdefa9f2226fd30a", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/ybFCzgs8vCEsN_4FMntO2VvTUmmHfkajasD12EV_dqo.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6418f74c56bc6db941d4c483dbf673b9861836cb", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/ybFCzgs8vCEsN_4FMntO2VvTUmmHfkajasD12EV_dqo.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=15da58584af47a4ef46429bf3e327147bf9a9035", "width": 320, "height": 320}], "variants": {}, "id": "erqP92H5pF32-pNsSnQwBNQ1U_J5_IUQZfRF6AjN9is"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "evswnd", "is_robot_indexable": true, "report_reasons": null, "author": "tehdog", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/evswnd/a_fully_typed_cli_library_with_gui_support/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/hediet/ts-cli/blob/master/cli/README.md", "subreddit_subscribers": 31702, "created_utc": 1580330557.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Namespaces in C# are tied to folder structure, for example ``using Project.Game.Models`` can import all classes from models.\n\n```\n/game\n-- /foo.tsx\n-- /bar.tsx\n-- /models\n----- /tree.tsx\n----- /car.tsx\n/app.tsx\n```\n\nIs there a way to do this in TypeScript by exporting/importing/declaring namespaces rather than modeules?\n\nApp.tsx\n```\nimport {Game} from './game'; &lt;-- This does not work?\nimport {Game} from './game/models/tree.tsx'; &lt;-- This works but you can't import multiple classes?\n\nconst App: React.FC = () =&gt; {\n    return (\n       &lt;Game.FooClass.FooComponent fun={true} /&gt;\n       &lt;Game.Models.TreeClass.TreeComponent visible={true} /&gt;\n    )\n```\n\nTree.tsx\n```\nexport namespace Game.Models {\n    export class Tree { ... }\n}\n```", "author_fullname": "t2_51cl9nl2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C# like Namespaces for folders?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_evzjww", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580386532.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Namespaces in C# are tied to folder structure, for example &lt;code&gt;using Project.Game.Models&lt;/code&gt; can import all classes from models.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\n/game\n-- /foo.tsx\n-- /bar.tsx\n-- /models\n----- /tree.tsx\n----- /car.tsx\n/app.tsx\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;Is there a way to do this in TypeScript by exporting/importing/declaring namespaces rather than modeules?&lt;/p&gt;\n\n&lt;p&gt;App.tsx\n```\nimport {Game} from &amp;#39;./game&amp;#39;; &amp;lt;-- This does not work?\nimport {Game} from &amp;#39;./game/models/tree.tsx&amp;#39;; &amp;lt;-- This works but you can&amp;#39;t import multiple classes?&lt;/p&gt;\n\n&lt;p&gt;const App: React.FC = () =&amp;gt; {\n    return (\n       &amp;lt;Game.FooClass.FooComponent fun={true} /&amp;gt;\n       &amp;lt;Game.Models.TreeClass.TreeComponent visible={true} /&amp;gt;\n    )\n```&lt;/p&gt;\n\n&lt;p&gt;Tree.tsx\n&lt;code&gt;\nexport namespace Game.Models {\n    export class Tree { ... }\n}\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "evzjww", "is_robot_indexable": true, "report_reasons": null, "author": "GavinBoldson", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/evzjww/c_like_namespaces_for_folders/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/evzjww/c_like_namespaces_for_folders/", "subreddit_subscribers": 31702, "created_utc": 1580357732.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "", "author_fullname": "t2_2d7fo5sw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "An Angular Based Web App with two forms maintains its state between steps and validates the user's input", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 107, "hide_score": false, "name": "t3_ew2mvj", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/nL95lhRL3Vd24iCCxp87J5LZpEF0yo35EofPEA9Sgng.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1580404054.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?auto=webp&amp;s=10d5a739f2a3393add9cd70effa6358d9abf6ce3", "width": 1338, "height": 1026}, "resolutions": [{"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=4b3fd6233d4c2ef1df35f2456831267710e18e14", "width": 108, "height": 82}, {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=8260a71281bbe5d165e39ce1a20aa4cc0483a843", "width": 216, "height": 165}, {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=43b9cb08c8d0bf6a58a9778afa7731df7078d946", "width": 320, "height": 245}, {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=504bd2c958a830224a9be8148cf3070383e3e582", "width": 640, "height": 490}, {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=f7d2e717b3e08704dc7932ac2c77925b24caffd3", "width": 960, "height": 736}, {"url": "https://external-preview.redd.it/K4xnlD-tlvEDNui8Bc936bRZ_0he7W-QmXJ_g7G-YUE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=05cf3be5df99d7ec12a940db8d8b1a48a67e5316", "width": 1080, "height": 828}], "variants": {}, "id": "By7jHITvdE7rrOKClNBuv6-8xUPkPa34M9zHi3FVs78"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ew2mvj", "is_robot_indexable": true, "report_reasons": null, "author": "in_theSea", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/ew2mvj/an_angular_based_web_app_with_two_forms_maintains/", "parent_whitelist_status": null, "stickied": false, "url": "https://github.com/shpotainna/passengers", "subreddit_subscribers": 31702, "created_utc": 1580375254.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "Hello, I'm trying to check the API response in my angular service(array of objects) against Enum, so If the API returns items matching to the values in the enum, I want to filter matching ones.\n\nhere's my API call:\n\n     return this.angularService.getRoles().pipe(map(resp =&gt; {\n          let x = Object.keys(myEnum); // makes enum array\n          console.log('resp',resp.filter(test =&gt; test['name'] === x )); // matching items are not filtered\n          return (some values);\n        }))\n\nand my enum:\n\n    export enum myEnum {\n        User = 'User',\n        Admin = 'Admin',\n        Reporter = 'Reporter'\n      }", "author_fullname": "t2_26as5yey", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to check an Array of objects contains matching values with enum", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_evrcei", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580353336.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I&amp;#39;m trying to check the API response in my angular service(array of objects) against Enum, so If the API returns items matching to the values in the enum, I want to filter matching ones.&lt;/p&gt;\n\n&lt;p&gt;here&amp;#39;s my API call:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; return this.angularService.getRoles().pipe(map(resp =&amp;gt; {\n      let x = Object.keys(myEnum); // makes enum array\n      console.log(&amp;#39;resp&amp;#39;,resp.filter(test =&amp;gt; test[&amp;#39;name&amp;#39;] === x )); // matching items are not filtered\n      return (some values);\n    }))\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;and my enum:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;export enum myEnum {\n    User = &amp;#39;User&amp;#39;,\n    Admin = &amp;#39;Admin&amp;#39;,\n    Reporter = &amp;#39;Reporter&amp;#39;\n  }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "evrcei", "is_robot_indexable": true, "report_reasons": null, "author": "rudvanrooy", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/evrcei/how_to_check_an_array_of_objects_contains/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/evrcei/how_to_check_an_array_of_objects_contains/", "subreddit_subscribers": 31702, "created_utc": 1580324536.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I prefer to use `import` only to include actual functionality in a file, and to use my `tsconfig` to include all necessary types.\n\nHere's an example reducer within my app:\n\n    import { createReducer } from '@ngrx/store';\n    \n    const initialState: State = ['a', 'b', 'c', 'd'];\n    \n    const reducer = createReducer(\n      initialState,\n    );\n    \n    export function appReducer(state: State, action: Action): State {\n      return reducer(state, action);\n    }\n    \nI've declared `State` in `custom_types/typings.d.ts`, and have included `custom_types` within `tsconfig.compileOptions.typeRoots`. This works fine.\n\n`Action` is undefined. I could include `Action` in the `import` statement, but since it's only used for typing and not for functionality, I would prefer to include it through my `tsconfig`.\n\nI've tried to globally include `@ngrx` typings in several ways:\n\n- Adding `@ngrx/store` to `typeRoots`\n- Adding `@ngrx/store/index.d.ts` to `typeRoots`\n- Adding `import '@ngrx/store'` to `custom_types/typings.d.ts`\n\nBut the compiler continues to say that `Action` is undefined.\n\nHow can I globally include all `@ngrx` typings in my project?", "author_fullname": "t2_4sg1q", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to globally load types from a package that typically isn't globally-loaded?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_evpy5n", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580347585.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I prefer to use &lt;code&gt;import&lt;/code&gt; only to include actual functionality in a file, and to use my &lt;code&gt;tsconfig&lt;/code&gt; to include all necessary types.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s an example reducer within my app:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import { createReducer } from &amp;#39;@ngrx/store&amp;#39;;\n\nconst initialState: State = [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;, &amp;#39;d&amp;#39;];\n\nconst reducer = createReducer(\n  initialState,\n);\n\nexport function appReducer(state: State, action: Action): State {\n  return reducer(state, action);\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I&amp;#39;ve declared &lt;code&gt;State&lt;/code&gt; in &lt;code&gt;custom_types/typings.d.ts&lt;/code&gt;, and have included &lt;code&gt;custom_types&lt;/code&gt; within &lt;code&gt;tsconfig.compileOptions.typeRoots&lt;/code&gt;. This works fine.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;Action&lt;/code&gt; is undefined. I could include &lt;code&gt;Action&lt;/code&gt; in the &lt;code&gt;import&lt;/code&gt; statement, but since it&amp;#39;s only used for typing and not for functionality, I would prefer to include it through my &lt;code&gt;tsconfig&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve tried to globally include &lt;code&gt;@ngrx&lt;/code&gt; typings in several ways:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Adding &lt;code&gt;@ngrx/store&lt;/code&gt; to &lt;code&gt;typeRoots&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Adding &lt;code&gt;@ngrx/store/index.d.ts&lt;/code&gt; to &lt;code&gt;typeRoots&lt;/code&gt;&lt;/li&gt;\n&lt;li&gt;Adding &lt;code&gt;import &amp;#39;@ngrx/store&amp;#39;&lt;/code&gt; to &lt;code&gt;custom_types/typings.d.ts&lt;/code&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;But the compiler continues to say that &lt;code&gt;Action&lt;/code&gt; is undefined.&lt;/p&gt;\n\n&lt;p&gt;How can I globally include all &lt;code&gt;@ngrx&lt;/code&gt; typings in my project?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "evpy5n", "is_robot_indexable": true, "report_reasons": null, "author": "robertgfthomas", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/evpy5n/how_to_globally_load_types_from_a_package_that/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/evpy5n/how_to_globally_load_types_from_a_package_that/", "subreddit_subscribers": 31702, "created_utc": 1580318785.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "typescript", "selftext": "I've been using `redux-thunk` for quite a while on a project of mine, but I've recently outgrown it and have turned to other libraries to handle async actions (mostly network requests). Of the options out there, I've found `redux-saga` and `redux-observable` to be the most promising options. After some research, I found that `redux-saga` seemed the best for my use-case. \n\nI then installed saga and the accompanying types, but I quickly found that saga's integration with TypeScript was less than ideal. For example, using a selector returns an `any` type as opposed to the proper type which corresponds to the output of the selector.\n\nI did some follow-up research on this topic, and from what I can see, saga doesn't support this kind of type safety -- something that `redux-observables` does support. Is there some kind of work-around or alternate `@types` library which allows saga to support real type safety with TypeScript? \n\nI was excited to use saga, but if proper type checks do not properly work, I will be forced to use `redux-observable`.", "author_fullname": "t2_7ge3p", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Using redux-saga with Typescipt", "link_flair_richtext": [], "subreddit_name_prefixed": "r/typescript", "hidden": false, "pwls": null, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "hide_score": false, "name": "t3_evg6rd", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1580293195.0, "link_flair_type": "text", "wls": null, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.typescript", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve been using &lt;code&gt;redux-thunk&lt;/code&gt; for quite a while on a project of mine, but I&amp;#39;ve recently outgrown it and have turned to other libraries to handle async actions (mostly network requests). Of the options out there, I&amp;#39;ve found &lt;code&gt;redux-saga&lt;/code&gt; and &lt;code&gt;redux-observable&lt;/code&gt; to be the most promising options. After some research, I found that &lt;code&gt;redux-saga&lt;/code&gt; seemed the best for my use-case. &lt;/p&gt;\n\n&lt;p&gt;I then installed saga and the accompanying types, but I quickly found that saga&amp;#39;s integration with TypeScript was less than ideal. For example, using a selector returns an &lt;code&gt;any&lt;/code&gt; type as opposed to the proper type which corresponds to the output of the selector.&lt;/p&gt;\n\n&lt;p&gt;I did some follow-up research on this topic, and from what I can see, saga doesn&amp;#39;t support this kind of type safety -- something that &lt;code&gt;redux-observables&lt;/code&gt; does support. Is there some kind of work-around or alternate &lt;code&gt;@types&lt;/code&gt; library which allows saga to support real type safety with TypeScript? &lt;/p&gt;\n\n&lt;p&gt;I was excited to use saga, but if proper type checks do not properly work, I will be forced to use &lt;code&gt;redux-observable&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2v6gg", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "evg6rd", "is_robot_indexable": true, "report_reasons": null, "author": "fooby420", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": null, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/typescript/comments/evg6rd/using_reduxsaga_with_typescipt/", "parent_whitelist_status": null, "stickied": false, "url": "https://www.reddit.com/r/typescript/comments/evg6rd/using_reduxsaga_with_typescipt/", "subreddit_subscribers": 31702, "created_utc": 1580264395.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_evg6rd", "before": null}}