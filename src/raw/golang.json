{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_6asjkigb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A load testing tool with a real-time analyzer, written in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iwdx5v", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": null, "subreddit_type": "public", "ups": 430, "total_awards_received": 3, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": true, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 430, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1600637579.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "i.redd.it", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://i.redd.it/bf5f5nb42bo51.gif", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 150, "id": "award_f44611f1-b89e-46dc-97fe-892280b13b82", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Thank you stranger. Shows the award.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Helpful", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=16&amp;height=16&amp;auto=webp&amp;s=a5662dfbdb402bf67866c050aa76c31c147c2f45", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=32&amp;height=32&amp;auto=webp&amp;s=a6882eb3f380e8e88009789f4d0072e17b8c59f1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=48&amp;height=48&amp;auto=webp&amp;s=e50064b090879e8a0b55e433f6ee61d5cb5fbe1d", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=64&amp;height=64&amp;auto=webp&amp;s=8e5bb2e76683cb6b161830bcdd9642049d6adc11", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png?width=128&amp;height=128&amp;auto=webp&amp;s=eda4a9246f95f42ee6940cc0ec65306fd20de878", "width": 128, "height": 128}], "icon_format": null, "icon_height": 2048, "penny_price": null, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/klvxk1wggfd41_Helpful.png"}, {"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "award_74fe5152-7906-4991-9016-bc2d8e261200", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=16&amp;height=16&amp;auto=webp&amp;s=094da86916604f4fc9f7f63c827e31c976f00928", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=32&amp;height=32&amp;auto=webp&amp;s=52886a42b9871ec69a4465609472a864dbab27b1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=48&amp;height=48&amp;auto=webp&amp;s=63a8f5eff627778a221c58daffbfbbb87b7fe350", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=64&amp;height=64&amp;auto=webp&amp;s=da0d9de08517646db45b766dbb0e7b94d2e97312", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=128&amp;height=128&amp;auto=webp&amp;s=58d3501a4314be9d47349a1f7925e18f30a832e5", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "I don't know what to do with my hands!", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Excited", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=16&amp;height=16&amp;auto=webp&amp;s=094da86916604f4fc9f7f63c827e31c976f00928", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=32&amp;height=32&amp;auto=webp&amp;s=52886a42b9871ec69a4465609472a864dbab27b1", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=48&amp;height=48&amp;auto=webp&amp;s=63a8f5eff627778a221c58daffbfbbb87b7fe350", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=64&amp;height=64&amp;auto=webp&amp;s=da0d9de08517646db45b766dbb0e7b94d2e97312", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png?width=128&amp;height=128&amp;auto=webp&amp;s=58d3501a4314be9d47349a1f7925e18f30a832e5", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/x069ow7ewnf51_Excited.png"}, {"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 30, "id": "award_d33fddd7-a58a-4472-b1a2-3157d8c8b76f", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 16, "height": 16}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 32, "height": 32}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 48, "height": 48}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 64, "height": 64}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 128, "height": 128}], "icon_width": 512, "static_icon_width": 512, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Looking like you're working is hard work.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 512, "name": "Looking Busy", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=16&amp;height=16&amp;auto=webp&amp;s=db9e29688c05aeb51dafbcd54ec1dcfab3bb47dc", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=32&amp;height=32&amp;auto=webp&amp;s=46adbd135d36ba32a7709877e99ff7a126af367b", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=48&amp;height=48&amp;auto=webp&amp;s=f3118b3d29ca5d2a3c6e941a0b874c9b66dd7f7b", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=64&amp;height=64&amp;auto=webp&amp;s=50f2d89d742aa628382b07bea320a4673821cbca", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=128&amp;height=128&amp;auto=webp&amp;s=ebbcf8563d42edc4fd85e52933dafaecb6a849b7", "width": 128, "height": 128}], "icon_format": "APNG", "icon_height": 512, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iwdx5v", "is_robot_indexable": true, "report_reasons": null, "author": "nakabonne", "discussion_type": null, "num_comments": 46, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iwdx5v/a_load_testing_tool_with_a_realtime_analyzer/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://i.redd.it/bf5f5nb42bo51.gif", "subreddit_subscribers": 125674, "created_utc": 1600608779.0, "num_crossposts": 3, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "We are happy to announce that k6 v0.28.0 is released with new features and improvements. k6 is a modern open-source performance and load-testing tool, written in Go and scriptable in JavaScript. \ud83c\udf8a\ud83c\udf89\ud83e\udd73\n\n- k6 Cloud execution logs\n- Pushing logs to Loki\n- Optional port to host mappings\n- Support for specifying data types to InfluxDB fields\n- Support for automatic gzip-ing of the CSV output result\n- UX improvements\n- Lots of bugfixes\n\nYou can read more about it in the [release notes](https://github.com/loadimpact/k6/releases/tag/v0.28.0). We'd be happy to hear your feedback about it.", "author_fullname": "t2_14z58l", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "k6 v0.28.0 is out!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_iwzy8u", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600722036.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;We are happy to announce that k6 v0.28.0 is released with new features and improvements. k6 is a modern open-source performance and load-testing tool, written in Go and scriptable in JavaScript. \ud83c\udf8a\ud83c\udf89\ud83e\udd73&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;k6 Cloud execution logs&lt;/li&gt;\n&lt;li&gt;Pushing logs to Loki&lt;/li&gt;\n&lt;li&gt;Optional port to host mappings&lt;/li&gt;\n&lt;li&gt;Support for specifying data types to InfluxDB fields&lt;/li&gt;\n&lt;li&gt;Support for automatic gzip-ing of the CSV output result&lt;/li&gt;\n&lt;li&gt;UX improvements&lt;/li&gt;\n&lt;li&gt;Lots of bugfixes&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;You can read more about it in the &lt;a href=\"https://github.com/loadimpact/k6/releases/tag/v0.28.0\"&gt;release notes&lt;/a&gt;. We&amp;#39;d be happy to hear your feedback about it.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iwzy8u", "is_robot_indexable": true, "report_reasons": null, "author": "mostafamoradian", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iwzy8u/k6_v0280_is_out/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/iwzy8u/k6_v0280_is_out/", "subreddit_subscribers": 125674, "created_utc": 1600693236.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I've read no less than 5 different articles this evening about using Contexts in Go, as I think that's what I need to solve my issue, but I'd appreciate some review of what I'm trying to do.\n\nConsider the pseudocode below. The app is a pretty simple, producer-consumer. The main has a go func (A) that just does a fetch-compare-sleep-loop: Fetch data from a source, compare to previous fetch, if different data put on channel, sleep, repeat. If same data as before, sleep, repeat. (ie: polling)\n\nThe other part of main (B) simply waits for new data on the channel and processes it using myFunc(). This is not a go func, so it waits for the func to finish before starting the wait-loop over.\n\nLet's say that while myFunc is processing data, new data comes in to the channel. I need to cancel/abort the current processing run and start myFunc over with the new data.\n\nI believe this is where a Context comes in use. Here's what I'm thinking: Create a Context.WithCancel() at (B), change myFunc to be 'go myFunc', passing the ctx and data to myFunc, and hold the .Cancel() variable inside B's for-loop. If I get new data on the channel, call .Cancel, create a new ctx.WithCancel and call myFunc again.\n\nIf that's sounds good (baring any minor tweaks), inside myFunc, do I just have periodic checks to determine if the ctx has been canceled by the for-select (B)? Worded differently, how do I determine inside myFunc() if it's been canceled?\n\n    func main() {\n     myChan := make(chan string, 1)\n     // A\n     go func(c chan&lt;- string) {\n      for {\n        // fetch data\n        // compare previous; if same, continue/sleep/loop\n        // if different, put on channel\n      }\n     }\n    \n     // B\n     for {\n      select &lt;-chan:\n        myFunc(data)\n     }\n    }\n    \n    // C\n    func myFunc(data) {\n      // process data\n    }", "author_fullname": "t2_hduuf", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Code Help: Go idomatic way of stopping a go routine", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iwt1ih", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600689286.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve read no less than 5 different articles this evening about using Contexts in Go, as I think that&amp;#39;s what I need to solve my issue, but I&amp;#39;d appreciate some review of what I&amp;#39;m trying to do.&lt;/p&gt;\n\n&lt;p&gt;Consider the pseudocode below. The app is a pretty simple, producer-consumer. The main has a go func (A) that just does a fetch-compare-sleep-loop: Fetch data from a source, compare to previous fetch, if different data put on channel, sleep, repeat. If same data as before, sleep, repeat. (ie: polling)&lt;/p&gt;\n\n&lt;p&gt;The other part of main (B) simply waits for new data on the channel and processes it using myFunc(). This is not a go func, so it waits for the func to finish before starting the wait-loop over.&lt;/p&gt;\n\n&lt;p&gt;Let&amp;#39;s say that while myFunc is processing data, new data comes in to the channel. I need to cancel/abort the current processing run and start myFunc over with the new data.&lt;/p&gt;\n\n&lt;p&gt;I believe this is where a Context comes in use. Here&amp;#39;s what I&amp;#39;m thinking: Create a Context.WithCancel() at (B), change myFunc to be &amp;#39;go myFunc&amp;#39;, passing the ctx and data to myFunc, and hold the .Cancel() variable inside B&amp;#39;s for-loop. If I get new data on the channel, call .Cancel, create a new ctx.WithCancel and call myFunc again.&lt;/p&gt;\n\n&lt;p&gt;If that&amp;#39;s sounds good (baring any minor tweaks), inside myFunc, do I just have periodic checks to determine if the ctx has been canceled by the for-select (B)? Worded differently, how do I determine inside myFunc() if it&amp;#39;s been canceled?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;func main() {\n myChan := make(chan string, 1)\n // A\n go func(c chan&amp;lt;- string) {\n  for {\n    // fetch data\n    // compare previous; if same, continue/sleep/loop\n    // if different, put on channel\n  }\n }\n\n // B\n for {\n  select &amp;lt;-chan:\n    myFunc(data)\n }\n}\n\n// C\nfunc myFunc(data) {\n  // process data\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iwt1ih", "is_robot_indexable": true, "report_reasons": null, "author": "utdrmac", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iwt1ih/code_help_go_idomatic_way_of_stopping_a_go_routine/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/iwt1ih/code_help_go_idomatic_way_of_stopping_a_go_routine/", "subreddit_subscribers": 125674, "created_utc": 1600660486.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Took some time over the weekend to write a command line client for privnote.com and decided to use cobra/viper for configuration management. Most people know about it I'm sure but it pays to show your appreciation to open source projects sometimes.", "author_fullname": "t2_dc0ej", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Appreciation post for spf13's Cobra and Viper packages, that was possibly the best experience I've had writing a CLI in a loooong time.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iwjmub", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 27, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 27, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600656545.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Took some time over the weekend to write a command line client for privnote.com and decided to use cobra/viper for configuration management. Most people know about it I&amp;#39;m sure but it pays to show your appreciation to open source projects sometimes.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iwjmub", "is_robot_indexable": true, "report_reasons": null, "author": "Dombot9000", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iwjmub/appreciation_post_for_spf13s_cobra_and_viper/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/iwjmub/appreciation_post_for_spf13s_cobra_and_viper/", "subreddit_subscribers": 125674, "created_utc": 1600627745.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "[https://github.com/kevinglasson/goss](https://github.com/kevinglasson/goss)\n\nI developed a tool to help managing config for various environments in AWS SSM Parameter Store. I thought some people here might be interested as there seems to be a few golang tools in the devops / cloud space.\n\nI've used a few 'major' go packages i.e. cobra to create the tool. Looking for any general coding / go advice and any other thought about the tool / it's usefulness and ideas to extend it!\n\nCheck out the repo for a little demo and some explanation of the commands!", "author_fullname": "t2_z1qb848", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Tool for managing parameters in AWS SSM Parameter Store - Written in Go!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_iwyp03", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600717028.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://github.com/kevinglasson/goss\"&gt;https://github.com/kevinglasson/goss&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I developed a tool to help managing config for various environments in AWS SSM Parameter Store. I thought some people here might be interested as there seems to be a few golang tools in the devops / cloud space.&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve used a few &amp;#39;major&amp;#39; go packages i.e. cobra to create the tool. Looking for any general coding / go advice and any other thought about the tool / it&amp;#39;s usefulness and ideas to extend it!&lt;/p&gt;\n\n&lt;p&gt;Check out the repo for a little demo and some explanation of the commands!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iwyp03", "is_robot_indexable": true, "report_reasons": null, "author": "kevinglasson", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iwyp03/tool_for_managing_parameters_in_aws_ssm_parameter/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/iwyp03/tool_for_managing_parameters_in_aws_ssm_parameter/", "subreddit_subscribers": 125674, "created_utc": 1600688228.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_81yj9s9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "This is a JavaScript bundler and minifier. It packages up JavaScript and TypeScript code for distribution on the web.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iw9kfv", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 86, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 86, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1600616783.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/evanw/esbuild", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iw9kfv", "is_robot_indexable": true, "report_reasons": null, "author": "donutloop", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iw9kfv/this_is_a_javascript_bundler_and_minifier_it/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/evanw/esbuild", "subreddit_subscribers": 125674, "created_utc": 1600587983.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "As the topic asks.. I just heard of NATS.. and little pissed I hadn't heard of it before. I guess I didn't do enough due diligence to discover what this was. I have a microservices setup using RabbitMQ, and using MQTT for the messages. It works very well.. very fast.. but just read about NATS and was starting to wonder.. if that may be a better way to go. Largely my \"pub/sub\" could be swapped easily enough.. I didn't quite build it generic enough but it wouldn't take much work as I use a common send() and pub/sub functions in all my services. I am using the Eclipse Pahao library.\n\nHas anyone experience with both and found that NATS is easier/faster/better for basic simple messaging between services than using MQTT and a typical message bus like RabbitMQ? \n\nI'll be reading a bit more into it now, but thought I would ask the community what their experience/thoughts are on the two approaches.\n\nThank you.", "author_fullname": "t2_5rkthjpv", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Is NATS on par/better than say MQTT over RabbitMQ?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iwjjzk", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600656286.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;As the topic asks.. I just heard of NATS.. and little pissed I hadn&amp;#39;t heard of it before. I guess I didn&amp;#39;t do enough due diligence to discover what this was. I have a microservices setup using RabbitMQ, and using MQTT for the messages. It works very well.. very fast.. but just read about NATS and was starting to wonder.. if that may be a better way to go. Largely my &amp;quot;pub/sub&amp;quot; could be swapped easily enough.. I didn&amp;#39;t quite build it generic enough but it wouldn&amp;#39;t take much work as I use a common send() and pub/sub functions in all my services. I am using the Eclipse Pahao library.&lt;/p&gt;\n\n&lt;p&gt;Has anyone experience with both and found that NATS is easier/faster/better for basic simple messaging between services than using MQTT and a typical message bus like RabbitMQ? &lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ll be reading a bit more into it now, but thought I would ask the community what their experience/thoughts are on the two approaches.&lt;/p&gt;\n\n&lt;p&gt;Thank you.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iwjjzk", "is_robot_indexable": true, "report_reasons": null, "author": "golangorgohome", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iwjjzk/is_nats_on_parbetter_than_say_mqtt_over_rabbitmq/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/iwjjzk/is_nats_on_parbetter_than_say_mqtt_over_rabbitmq/", "subreddit_subscribers": 125674, "created_utc": 1600627486.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Howdy Y'all,\n\nI've made a mux, then realized what I want might already exist.\nIn NodeJS, there's express.  You can do stuff like this:\n`    app.get('/myroute/', (req, res)=&gt;{...});`\n\nI like this style of writing, where I can just think in terms of the route and the handler, but I wanted to be able to use it in more secure contexts.\n\nSo, I kind of made an explicit route handling mux like so:\n\n\n    myRoute := webserver.ServerMux{\n        Options: webserver.MuxOptions{RequireAuthorization: false, AllowedFailuresPerIP: 3},\n        Method:  \"PUT\",\n        Route:   \"/v1/Login/\",\n        RouteHandler: func(res http.ResponseWriter, req *http.Request) bool {...return SUCCESS}}\n\n\nThat route gives an unauthenticated user 3 tries to login, or it'll begin an escalating block on them.\nYou then put these routes into a slice, you then can serve the slice of routes with options on the entire slice ( for example, which user groups are allowed ).  \n\nIt handles a lot of things auto-magically:\n\n1. Routes can return a boolean indicating if they \"worked\".  Success and failures are recorded to a postgres db, and it supports SIEMs by emitting syslog style events over TCP.  \n\n2. It inherently supports both Authorization ( aka Authorization headers --&gt; hash verification ) and RBAC ( aka, you can mark certain routes as allowed by certain users )\n\nBefore I keep developing this thing, does it already exist?  I already checked Gorilla, and it has far fewer security features ( though it's a great MUX. )\n\nIf it doesn't exist, would anyone join me as a maintainer ( I'm thinking of open sourcing it -- but only if there's at least 1 other active collaborator who will actually work on it, too.  )\n\nThanks!", "author_fullname": "t2_65riq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A security-focused MUX?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iwr0wc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1600652806.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1600681162.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Howdy Y&amp;#39;all,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve made a mux, then realized what I want might already exist.\nIn NodeJS, there&amp;#39;s express.  You can do stuff like this:\n&lt;code&gt;app.get(&amp;#39;/myroute/&amp;#39;, (req, res)=&amp;gt;{...});&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;I like this style of writing, where I can just think in terms of the route and the handler, but I wanted to be able to use it in more secure contexts.&lt;/p&gt;\n\n&lt;p&gt;So, I kind of made an explicit route handling mux like so:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;myRoute := webserver.ServerMux{\n    Options: webserver.MuxOptions{RequireAuthorization: false, AllowedFailuresPerIP: 3},\n    Method:  &amp;quot;PUT&amp;quot;,\n    Route:   &amp;quot;/v1/Login/&amp;quot;,\n    RouteHandler: func(res http.ResponseWriter, req *http.Request) bool {...return SUCCESS}}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That route gives an unauthenticated user 3 tries to login, or it&amp;#39;ll begin an escalating block on them.\nYou then put these routes into a slice, you then can serve the slice of routes with options on the entire slice ( for example, which user groups are allowed ).  &lt;/p&gt;\n\n&lt;p&gt;It handles a lot of things auto-magically:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;p&gt;Routes can return a boolean indicating if they &amp;quot;worked&amp;quot;.  Success and failures are recorded to a postgres db, and it supports SIEMs by emitting syslog style events over TCP.  &lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;It inherently supports both Authorization ( aka Authorization headers --&amp;gt; hash verification ) and RBAC ( aka, you can mark certain routes as allowed by certain users )&lt;/p&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Before I keep developing this thing, does it already exist?  I already checked Gorilla, and it has far fewer security features ( though it&amp;#39;s a great MUX. )&lt;/p&gt;\n\n&lt;p&gt;If it doesn&amp;#39;t exist, would anyone join me as a maintainer ( I&amp;#39;m thinking of open sourcing it -- but only if there&amp;#39;s at least 1 other active collaborator who will actually work on it, too.  )&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iwr0wc", "is_robot_indexable": true, "report_reasons": null, "author": "ipeerbhai", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iwr0wc/a_securityfocused_mux/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/iwr0wc/a_securityfocused_mux/", "subreddit_subscribers": 125674, "created_utc": 1600652362.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_o66hd", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Typesafe database access for Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iw02hp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 70, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 70, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1600575801.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/prisma/prisma-client-go", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 30, "id": "award_7149a401-1223-4543-bfd6-4127cb4246da", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=16&amp;height=16&amp;auto=webp&amp;s=3488f7c5a6f97f206132ef925d5a7cf1139085b1", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=32&amp;height=32&amp;auto=webp&amp;s=8a0670a9461db50dea6e41835e2ffe6fe60d9b5e", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=48&amp;height=48&amp;auto=webp&amp;s=776256c47db66ef974dd2f054cdee57b7ff0bcb0", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=64&amp;height=64&amp;auto=webp&amp;s=cd087e8240a311dea69233cdd54cac2b75db391a", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=128&amp;height=128&amp;auto=webp&amp;s=a9cbe69d62e0110174dc99d801fcb0e32674687c", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "The key is to keep your cool this summer.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Cool Summer", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=16&amp;height=16&amp;auto=webp&amp;s=3488f7c5a6f97f206132ef925d5a7cf1139085b1", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=32&amp;height=32&amp;auto=webp&amp;s=8a0670a9461db50dea6e41835e2ffe6fe60d9b5e", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=48&amp;height=48&amp;auto=webp&amp;s=776256c47db66ef974dd2f054cdee57b7ff0bcb0", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=64&amp;height=64&amp;auto=webp&amp;s=cd087e8240a311dea69233cdd54cac2b75db391a", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png?width=128&amp;height=128&amp;auto=webp&amp;s=a9cbe69d62e0110174dc99d801fcb0e32674687c", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/1m9abin81nc51_CoolSummer.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iw02hp", "is_robot_indexable": true, "report_reasons": null, "author": "BitPhinix", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iw02hp/typesafe_database_access_for_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/prisma/prisma-client-go", "subreddit_subscribers": 125674, "created_utc": 1600547001.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_6l0zmb5r", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "YoMo is an open-source project for building your own IoT edge computing applications. With YoMo, you can speed up the development of microservices-based applications, and your industrial IoT platform will take full advantage of the low latency and high bandwidth brought by 5G.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_iw1b3z", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 49, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 49, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1600580269.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/yomorun/yomo", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 30, "id": "award_d33fddd7-a58a-4472-b1a2-3157d8c8b76f", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 16, "height": 16}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 32, "height": 32}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 48, "height": 48}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 64, "height": 64}, {"url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png", "width": 128, "height": 128}], "icon_width": 512, "static_icon_width": 512, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Looking like you're working is hard work.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 512, "name": "Looking Busy", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=16&amp;height=16&amp;auto=webp&amp;s=db9e29688c05aeb51dafbcd54ec1dcfab3bb47dc", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=32&amp;height=32&amp;auto=webp&amp;s=46adbd135d36ba32a7709877e99ff7a126af367b", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=48&amp;height=48&amp;auto=webp&amp;s=f3118b3d29ca5d2a3c6e941a0b874c9b66dd7f7b", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=64&amp;height=64&amp;auto=webp&amp;s=50f2d89d742aa628382b07bea320a4673821cbca", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png?width=128&amp;height=128&amp;auto=webp&amp;s=ebbcf8563d42edc4fd85e52933dafaecb6a849b7", "width": 128, "height": 128}], "icon_format": "APNG", "icon_height": 512, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/k0qzautvyyk51_LookingBusy.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "iw1b3z", "is_robot_indexable": true, "report_reasons": null, "author": "jiayounokim", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/iw1b3z/yomo_is_an_opensource_project_for_building_your/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/yomorun/yomo", "subreddit_subscribers": 125674, "created_utc": 1600551469.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_iw1b3z", "before": null}}