{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "**Don't talk about the coronavirus. r/cpp is not the place to discuss or debate the coronavirus.**\n\n# Purpose\n\nMany C++ conferences, meetups, and even the next committee meeting have been affected by the ongoing public health crisis caused by the coronavirus.\n\nI think it will be helpful to everyone to collect information about C++ events that have been or may be affected by the coronavirus. That includes not only cancellations/postponements, but also events that are planning to move forward but may be impacted in the future\n\n**This is intended to be a living document. Please help by suggesting changes or additions.**\n\n**Last Updated: 2020-05-11 - Email, Tweet or Slack Bryce to request updates.**\n\n# Lexicon\n\nTerm | Meaning\n-|-\n**Cancelled** | The event will not happen on the planned dates and will not be rescheduled in 2020.\n**Postponed** | The event will not happen on the planned dates but may happen later in 2020.\n**Virtual** | The event is now virtual.\n**No Date Changes Yet** | The event has not announced any changes to the planned dates.\n\n# 2020 Conferences\n\nEvent | Location | Original Dates | Status | Current Dates\n-|-|-|-|-\n[emBO++](https://www.embo.io) | Bochum, Germany | 03-13 to 03-15 | No Date Changes Yet | 03-13 to 03-15\n[ACCU](https://conference.accu.org) | Bristol, UK | 03-25 to 03-28 | [Cancelled](https://conference.accu.org/news/2020/202003121205_accu2020cancelled.html) | 03-25 to 03-28\n[Pure Virtual C++](https://visualstudio.microsoft.com/pure-virtual-cpp-event) | Virtual | 04-30 | [Virtual](https://visualstudio.microsoft.com/pure-virtual-cpp-event)\n[C++Now](https://cppnow.org) | Aspen, CO, US | 05-03 to 05-08 | [Cancelled](http://cppnow.org/announcements/2020/03/Canceled) | 05-03 to 05-08\n[Total Chaos](https://www.chaosgroup.com/total-chaos) | Sofia, Bulgaria | 05-29 to 05-31 | [Cancelled](https://www.chaosgroup.com/total-chaos) | 05-29 to 05-31\n[Italian C++ Conference](https://www.italiancpp.org/event/itcppcon20) | Rome, Italy | 06-13 | [Virtual](https://www.italiancpp.org/event/itcppcon20/) | 06-13\n[CPPP](https://cppp.fr) | Paris, France | 06-22 to 06-23 | [Cancelled](https://cppp.fr/blog/canceled) | 06-22 to 06-23\n[C++ Russia Moscow](https://cppconf-moscow.ru/en) | Moscow, Russia | 04-27 to 04-28 | [Virtual](https://cppconf-moscow.ru/en/) | 06-29 to 07-02\n[Cpp On Sea](https://cpponsea.uk) | Folkestone, UK | 06-07 to 06-10 | [Virtual](https://cpponsea.uk/news/cpp-on-sea-online.html) | 07-15 to 07-17\n[CppCon](https://cppcon.org) | Aurora, CO, US | 09-13 to 09-18 | [No Date Changes Yet](https://cppcon.org/cppcon-2020-call-for-submissions/) | 09-13 to 09-17\n[ADC++](https://adcpp.de/20) | Regensburg, Germany | 05-04 to 05-06 | [Postponed](https://adcpp.de/20) | 10-13 to 10-14\n[Qt World Summit](https://www.qt.io/qtws20) | Palm Springs, California, US | 05-12 to 05-14 | [Postponed](https://www.qt.io/blog/qt-world-summit-20-postponed-to-october) | 10-20 to 10-22\n[C++ CoreHard](https://conference.corehard.by) | Minsk, Belarus | 04-10 to 04-11 | [Postponed](https://conference.corehard.by) | 10-30 to 10-31\n[using std::cpp](https://usingstdcpp.org) | Madrid, Spain | 04-16 | [Postponed](https://eventos.uc3m.es/40350/detail/using-std_cpp-2020.html) | 10\n[Core C++](https://corecpp.org) | Tel Aviv, Israel | 05-25 to 05-27 | [Postponed](https://twitter.com/corecpp/status/1238373483501010944) | Autumn\n[ConanDays](https://conandays.conan.io) | Madrid, Spain | 03-19 to 03-20 | [Postponed](https://conandays.conan.io) | Autumn\n[Meeting C++](https://meetingcpp.com) | Berlin, Germany | 11-12 to 11-14 | No Date Changes Yet | 11-12 to 11-14\n[code::dive](https://codedive.pl/) | Wroc\u0142aw, Poland | 11-18 | No Date Changes Yet | 11-18\n[QtDay](https://www.qtday.it) | Florence, Italy | 03-13 to 03-14 | [Postponed](https://www.qtday.it) | 11-20 to 11-21\n\n# 2020 ISO C++ Committee Meetings\n\nLocation | Original Dates | Status | New Dates\n-|-|-|-\n[Varna, Bulgaria](https://wg21.link/N4837) | 06-01 to 06-06 | [Cancelled](https://herbsutter.com/2020/03/13/the-varna-iso-c-meeting-is-postponed) | \n[JFK Airport, New York](https://wg21.link/N4848) |  11-09 to 11-14 | [Cancelled](https://herbsutter.com/2020/05/20/the-new-york-iso-c-meeting-is-postponed) |\n\n# 2020 C++ User Groups\n\nGroup | Location | Status | Until\n-|-|-|-\n[ACCU Bay Area](https://meetup.com/ACCU-Bay-Area) | San Francisco Bay Area, California, US | [Virtual](https://meetup.com/ACCU-Bay-Area) | Indefinitely\n[PDXCPP](https://www.meetup.com/pdxcpp) | Portland, Oregon, US | [Postponed](https://www.meetup.com/pdxcpp/events/xgjlqrybcfbwb/) | Indefinitely\n[Denver Metro C++ Meetup](https://www.meetup.com/North-Denver-Metro-C-Meetup) | Denver, Colorado, US | [Postponed](https://www.meetup.com/North-Denver-Metro-C-Meetup/) | Indefinitely\n[C++TO](https://www.meetup.com/CPPTORONTO/) | Toronto, Ontario, Canada | [Postponed](https://www.meetup.com/CPPTORONTO/) | Indefinitely\n[C++ Montr\u00e9al](https://www.meetup.com/CppMtl/) | Montr\u00e9al, Qu\u00e9bec, Canada | [Virtual](https://www.meetup.com/CppMtl/events/269770766/) | Indefinitely\n[Bulgaria C++ Meetup](https://dev.bg/groups/c-c-plus-plus/) | Sofia, Bulgaria | [Virtual](https://dev.bg/groups/c-c-plus-plus/) | Indefinitely\n[C++ London](https://www.meetup.com/CppLondon) | London, UK | [Virtual](https://www.meetup.com/CppLondon) | Indefinitely\n[Core C++](https://www.meetup.com/CoreCpp/) | Israel | [Virtual](https://www.meetup.com/CoreCpp/) | Indefinitely", "author_fullname": "t2_f77gj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++ Events Affected By Coronavirus", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_fidita", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 143, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 143, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1590045331.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1584191872.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Don&amp;#39;t talk about the coronavirus. &lt;a href=\"/r/cpp\"&gt;r/cpp&lt;/a&gt; is not the place to discuss or debate the coronavirus.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;h1&gt;Purpose&lt;/h1&gt;\n\n&lt;p&gt;Many C++ conferences, meetups, and even the next committee meeting have been affected by the ongoing public health crisis caused by the coronavirus.&lt;/p&gt;\n\n&lt;p&gt;I think it will be helpful to everyone to collect information about C++ events that have been or may be affected by the coronavirus. That includes not only cancellations/postponements, but also events that are planning to move forward but may be impacted in the future&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;This is intended to be a living document. Please help by suggesting changes or additions.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Last Updated: 2020-05-11 - Email, Tweet or Slack Bryce to request updates.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;h1&gt;Lexicon&lt;/h1&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Term&lt;/th&gt;\n&lt;th&gt;Meaning&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;strong&gt;Cancelled&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;The event will not happen on the planned dates and will not be rescheduled in 2020.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;strong&gt;Postponed&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;The event will not happen on the planned dates but may happen later in 2020.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;strong&gt;Virtual&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;The event is now virtual.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;strong&gt;No Date Changes Yet&lt;/strong&gt;&lt;/td&gt;\n&lt;td&gt;The event has not announced any changes to the planned dates.&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;h1&gt;2020 Conferences&lt;/h1&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Event&lt;/th&gt;\n&lt;th&gt;Location&lt;/th&gt;\n&lt;th&gt;Original Dates&lt;/th&gt;\n&lt;th&gt;Status&lt;/th&gt;\n&lt;th&gt;Current Dates&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.embo.io\"&gt;emBO++&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Bochum, Germany&lt;/td&gt;\n&lt;td&gt;03-13 to 03-15&lt;/td&gt;\n&lt;td&gt;No Date Changes Yet&lt;/td&gt;\n&lt;td&gt;03-13 to 03-15&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://conference.accu.org\"&gt;ACCU&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Bristol, UK&lt;/td&gt;\n&lt;td&gt;03-25 to 03-28&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://conference.accu.org/news/2020/202003121205_accu2020cancelled.html\"&gt;Cancelled&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;03-25 to 03-28&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://visualstudio.microsoft.com/pure-virtual-cpp-event\"&gt;Pure Virtual C++&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Virtual&lt;/td&gt;\n&lt;td&gt;04-30&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://visualstudio.microsoft.com/pure-virtual-cpp-event\"&gt;Virtual&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://cppnow.org\"&gt;C++Now&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Aspen, CO, US&lt;/td&gt;\n&lt;td&gt;05-03 to 05-08&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"http://cppnow.org/announcements/2020/03/Canceled\"&gt;Cancelled&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;05-03 to 05-08&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.chaosgroup.com/total-chaos\"&gt;Total Chaos&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Sofia, Bulgaria&lt;/td&gt;\n&lt;td&gt;05-29 to 05-31&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://www.chaosgroup.com/total-chaos\"&gt;Cancelled&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;05-29 to 05-31&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.italiancpp.org/event/itcppcon20\"&gt;Italian C++ Conference&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Rome, Italy&lt;/td&gt;\n&lt;td&gt;06-13&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://www.italiancpp.org/event/itcppcon20/\"&gt;Virtual&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;06-13&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://cppp.fr\"&gt;CPPP&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Paris, France&lt;/td&gt;\n&lt;td&gt;06-22 to 06-23&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://cppp.fr/blog/canceled\"&gt;Cancelled&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;06-22 to 06-23&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://cppconf-moscow.ru/en\"&gt;C++ Russia Moscow&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Moscow, Russia&lt;/td&gt;\n&lt;td&gt;04-27 to 04-28&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://cppconf-moscow.ru/en/\"&gt;Virtual&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;06-29 to 07-02&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://cpponsea.uk\"&gt;Cpp On Sea&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Folkestone, UK&lt;/td&gt;\n&lt;td&gt;06-07 to 06-10&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://cpponsea.uk/news/cpp-on-sea-online.html\"&gt;Virtual&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;07-15 to 07-17&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://cppcon.org\"&gt;CppCon&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Aurora, CO, US&lt;/td&gt;\n&lt;td&gt;09-13 to 09-18&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://cppcon.org/cppcon-2020-call-for-submissions/\"&gt;No Date Changes Yet&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;09-13 to 09-17&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://adcpp.de/20\"&gt;ADC++&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Regensburg, Germany&lt;/td&gt;\n&lt;td&gt;05-04 to 05-06&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://adcpp.de/20\"&gt;Postponed&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;10-13 to 10-14&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.qt.io/qtws20\"&gt;Qt World Summit&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Palm Springs, California, US&lt;/td&gt;\n&lt;td&gt;05-12 to 05-14&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://www.qt.io/blog/qt-world-summit-20-postponed-to-october\"&gt;Postponed&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;10-20 to 10-22&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://conference.corehard.by\"&gt;C++ CoreHard&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Minsk, Belarus&lt;/td&gt;\n&lt;td&gt;04-10 to 04-11&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://conference.corehard.by\"&gt;Postponed&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;10-30 to 10-31&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://usingstdcpp.org\"&gt;using std::cpp&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Madrid, Spain&lt;/td&gt;\n&lt;td&gt;04-16&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://eventos.uc3m.es/40350/detail/using-std_cpp-2020.html\"&gt;Postponed&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;10&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://corecpp.org\"&gt;Core C++&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Tel Aviv, Israel&lt;/td&gt;\n&lt;td&gt;05-25 to 05-27&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://twitter.com/corecpp/status/1238373483501010944\"&gt;Postponed&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Autumn&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://conandays.conan.io\"&gt;ConanDays&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Madrid, Spain&lt;/td&gt;\n&lt;td&gt;03-19 to 03-20&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://conandays.conan.io\"&gt;Postponed&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Autumn&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://meetingcpp.com\"&gt;Meeting C++&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Berlin, Germany&lt;/td&gt;\n&lt;td&gt;11-12 to 11-14&lt;/td&gt;\n&lt;td&gt;No Date Changes Yet&lt;/td&gt;\n&lt;td&gt;11-12 to 11-14&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://codedive.pl/\"&gt;code::dive&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Wroc\u0142aw, Poland&lt;/td&gt;\n&lt;td&gt;11-18&lt;/td&gt;\n&lt;td&gt;No Date Changes Yet&lt;/td&gt;\n&lt;td&gt;11-18&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.qtday.it\"&gt;QtDay&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Florence, Italy&lt;/td&gt;\n&lt;td&gt;03-13 to 03-14&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://www.qtday.it\"&gt;Postponed&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;11-20 to 11-21&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;h1&gt;2020 ISO C++ Committee Meetings&lt;/h1&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Location&lt;/th&gt;\n&lt;th&gt;Original Dates&lt;/th&gt;\n&lt;th&gt;Status&lt;/th&gt;\n&lt;th&gt;New Dates&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://wg21.link/N4837\"&gt;Varna, Bulgaria&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;06-01 to 06-06&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://herbsutter.com/2020/03/13/the-varna-iso-c-meeting-is-postponed\"&gt;Cancelled&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://wg21.link/N4848\"&gt;JFK Airport, New York&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;11-09 to 11-14&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://herbsutter.com/2020/05/20/the-new-york-iso-c-meeting-is-postponed\"&gt;Cancelled&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n\n&lt;h1&gt;2020 C++ User Groups&lt;/h1&gt;\n\n&lt;table&gt;&lt;thead&gt;\n&lt;tr&gt;\n&lt;th&gt;Group&lt;/th&gt;\n&lt;th&gt;Location&lt;/th&gt;\n&lt;th&gt;Status&lt;/th&gt;\n&lt;th&gt;Until&lt;/th&gt;\n&lt;/tr&gt;\n&lt;/thead&gt;&lt;tbody&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://meetup.com/ACCU-Bay-Area\"&gt;ACCU Bay Area&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;San Francisco Bay Area, California, US&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://meetup.com/ACCU-Bay-Area\"&gt;Virtual&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Indefinitely&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/pdxcpp\"&gt;PDXCPP&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Portland, Oregon, US&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/pdxcpp/events/xgjlqrybcfbwb/\"&gt;Postponed&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Indefinitely&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/North-Denver-Metro-C-Meetup\"&gt;Denver Metro C++ Meetup&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Denver, Colorado, US&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/North-Denver-Metro-C-Meetup/\"&gt;Postponed&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Indefinitely&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/CPPTORONTO/\"&gt;C++TO&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Toronto, Ontario, Canada&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/CPPTORONTO/\"&gt;Postponed&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Indefinitely&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/CppMtl/\"&gt;C++ Montr\u00e9al&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Montr\u00e9al, Qu\u00e9bec, Canada&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/CppMtl/events/269770766/\"&gt;Virtual&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Indefinitely&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://dev.bg/groups/c-c-plus-plus/\"&gt;Bulgaria C++ Meetup&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Sofia, Bulgaria&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://dev.bg/groups/c-c-plus-plus/\"&gt;Virtual&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Indefinitely&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/CppLondon\"&gt;C++ London&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;London, UK&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/CppLondon\"&gt;Virtual&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Indefinitely&lt;/td&gt;\n&lt;/tr&gt;\n&lt;tr&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/CoreCpp/\"&gt;Core C++&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Israel&lt;/td&gt;\n&lt;td&gt;&lt;a href=\"https://www.meetup.com/CoreCpp/\"&gt;Virtual&lt;/a&gt;&lt;/td&gt;\n&lt;td&gt;Indefinitely&lt;/td&gt;\n&lt;/tr&gt;\n&lt;/tbody&gt;&lt;/table&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fidita", "is_robot_indexable": true, "report_reasons": null, "author": "blelbach", "discussion_type": null, "num_comments": 57, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/fidita/c_events_affected_by_coronavirus/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/cpp/comments/fidita/c_events_affected_by_coronavirus/", "subreddit_subscribers": 145044, "created_utc": 1584163072.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Rules For Individuals\n---------------------\n\n* **Don't** create top-level comments - those are for employers.\n* Feel free to reply to top-level comments with **on-topic** questions.\n* I will create top-level comments for **meta** discussion and **individuals looking for work**.\n\nRules For Employers\n---------------------\n\n* You must be hiring **directly**. No third-party recruiters.\n* **One** top-level comment per employer. If you have multiple job openings, that's great, but please consolidate their descriptions or mention them in replies to your own top-level comment.\n* **Don't** use URL shorteners. [reddiquette](https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette) forbids them because they're opaque to the spam filter.\n* Templates are awesome. Please **use** the following template. As the \"formatting help\" says, use \\*\\*two stars\\*\\* to **bold text**. Use empty lines to separate sections.\n* **Proofread** your comment after posting it, and edit any formatting mistakes.\n\n---\n\n\\*\\*Company:\\*\\* [Company name; also, use the \"formatting help\" to make it a link to your company's website, or a specific careers page if you have one.]\n\n&amp;nbsp;\n\n\\*\\*Type:\\*\\* [Full time, part time, internship, contract, etc.]\n\n&amp;nbsp;\n\n\\*\\*Description:\\*\\* [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]\n\n&amp;nbsp;\n\n\\*\\*Location:\\*\\* [Where's your office - or if you're hiring at multiple offices, list them. If your workplace language isn't English, please specify it.]\n\n&amp;nbsp;\n\n\\*\\*Remote:\\*\\* [Do you offer the option of working remotely (permanently, or for the duration of the pandemic)? If so, do you require employees to live in certain areas or time zones?]\n\n&amp;nbsp;\n\n\\*\\*Visa Sponsorship:\\*\\* [Does your company sponsor visas?]\n\n&amp;nbsp;\n\n\\*\\*Technologies:\\*\\* [Required: do you mainly use C++98/03, C++11, C++14, C++17, or C++20? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]\n\n&amp;nbsp;\n\n\\*\\*Contact:\\*\\* [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]\n\n---\n\nPrevious Post\n--------------\n\n* [C++ Jobs - Q2 2020](https://www.reddit.com/r/cpp/comments/ft77lv/c_jobs_q2_2020/)", "author_fullname": "t2_21c1y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "C++ Jobs - Q3 2020", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hjnaf2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": "", "subreddit_type": "public", "ups": 36, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 36, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": "", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593680441.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;Rules For Individuals&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; create top-level comments - those are for employers.&lt;/li&gt;\n&lt;li&gt;Feel free to reply to top-level comments with &lt;strong&gt;on-topic&lt;/strong&gt; questions.&lt;/li&gt;\n&lt;li&gt;I will create top-level comments for &lt;strong&gt;meta&lt;/strong&gt; discussion and &lt;strong&gt;individuals looking for work&lt;/strong&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Rules For Employers&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;You must be hiring &lt;strong&gt;directly&lt;/strong&gt;. No third-party recruiters.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;One&lt;/strong&gt; top-level comment per employer. If you have multiple job openings, that&amp;#39;s great, but please consolidate their descriptions or mention them in replies to your own top-level comment.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Don&amp;#39;t&lt;/strong&gt; use URL shorteners. &lt;a href=\"https://www.reddithelp.com/en/categories/reddit-101/reddit-basics/reddiquette\"&gt;reddiquette&lt;/a&gt; forbids them because they&amp;#39;re opaque to the spam filter.&lt;/li&gt;\n&lt;li&gt;Templates are awesome. Please &lt;strong&gt;use&lt;/strong&gt; the following template. As the &amp;quot;formatting help&amp;quot; says, use **two stars** to &lt;strong&gt;bold text&lt;/strong&gt;. Use empty lines to separate sections.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Proofread&lt;/strong&gt; your comment after posting it, and edit any formatting mistakes.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;hr/&gt;\n\n&lt;p&gt;**Company:** [Company name; also, use the &amp;quot;formatting help&amp;quot; to make it a link to your company&amp;#39;s website, or a specific careers page if you have one.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Type:** [Full time, part time, internship, contract, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Description:** [What does your company do, and what are you hiring C++ devs for? How much experience are you looking for, and what seniority levels are you hiring for? The more details you provide, the better.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Location:** [Where&amp;#39;s your office - or if you&amp;#39;re hiring at multiple offices, list them. If your workplace language isn&amp;#39;t English, please specify it.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Remote:** [Do you offer the option of working remotely (permanently, or for the duration of the pandemic)? If so, do you require employees to live in certain areas or time zones?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Visa Sponsorship:** [Does your company sponsor visas?]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Technologies:** [Required: do you mainly use C++98/03, C++11, C++14, C++17, or C++20? Optional: do you use Linux/Mac/Windows, are there languages you use in addition to C++, are there technologies like OpenGL or libraries like Boost that you need/want/like experience with, etc.]&lt;/p&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n&lt;p&gt;**Contact:** [How do you want to be contacted? Email, reddit PM, telepathy, gravitational waves?]&lt;/p&gt;\n\n&lt;hr/&gt;\n\n&lt;h2&gt;Previous Post&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://www.reddit.com/r/cpp/comments/ft77lv/c_jobs_q2_2020/\"&gt;C++ Jobs - Q2 2020&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "MSVC STL Dev", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hjnaf2", "is_robot_indexable": true, "report_reasons": null, "author": "STL", "discussion_type": null, "num_comments": 24, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/hjnaf2/c_jobs_q3_2020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/cpp/comments/hjnaf2/c_jobs_q3_2020/", "subreddit_subscribers": 145044, "created_utc": 1593651641.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_6gkbb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Ask Me Anything with Bjarne Stroustrup, hosted by John Regehr (PLDI 2020)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hqdnx5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 17, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/Bycec3UQxOc?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"oembed": {"provider_url": "https://www.youtube.com/", "title": "Ask Me Anything with Bjarne Stroustrup, hosted by John Regehr", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/Bycec3UQxOc?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "height": 338, "width": 600, "version": "1.0", "author_name": "ACM SIGPLAN", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/Bycec3UQxOc/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCwG9512Wm7jSS6Iqshz4Dpg"}, "type": "youtube.com"}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/Bycec3UQxOc?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/hqdnx5", "height": 338}, "link_flair_text": null, "can_mod_post": false, "score": 17, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1594668852.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=Bycec3UQxOc", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hqdnx5", "is_robot_indexable": true, "report_reasons": null, "author": "mttd", "discussion_type": null, "num_comments": 0, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/hqdnx5/ask_me_anything_with_bjarne_stroustrup_hosted_by/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=Bycec3UQxOc", "subreddit_subscribers": 145044, "created_utc": 1594640052.0, "num_crossposts": 0, "media": {"oembed": {"provider_url": "https://www.youtube.com/", "title": "Ask Me Anything with Bjarne Stroustrup, hosted by John Regehr", "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/Bycec3UQxOc?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "thumbnail_width": 480, "height": 338, "width": 600, "version": "1.0", "author_name": "ACM SIGPLAN", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/Bycec3UQxOc/hqdefault.jpg", "type": "video", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCwG9512Wm7jSS6Iqshz4Dpg"}, "type": "youtube.com"}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "P0222: [https://github.com/mwoehlke/cpp-proposals/blob/master/p0222r0-anonymous-struct-return.rst](https://github.com/mwoehlke/cpp-proposals/blob/master/p0222r0-anonymous-struct-return.rst)\n\nGCC: [https://gcc.gnu.org/git.html](https://gcc.gnu.org/git.html)\n\nThis patch lifts the restriction described in P0222 + it is possible to define types in function arguments, so it's possible to write code like this:\n\n    struct { int x; }\n    g(const struct { int y; } &amp;args) {\n    \treturn { .x = args.y };\n    }\n    \n    int main() {\n    \treturn g({ .y = 11 }).x;\n    }\n\nThis code generates the following assembly with `-O3`:\n\n    movl    $11, %eax\n    ret\n\nPatch:\n\n    diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c\n    index 45ad2c05288..b1e0b871777 100644\n    --- a/gcc/cp/parser.c\n    +++ b/gcc/cp/parser.c\n    @@ -3115,6 +3115,7 @@ cp_parser_check_for_definition_in_return_type (cp_declarator *declarator,\n       /* [dcl.fct] forbids type definitions in return types.\n          Unfortunately, it's not easy to know whether or not we are\n          processing a return type until after the fact.  */\n    +  /*\n       while (declarator\n             &amp;&amp; (declarator-&gt;kind == cdk_pointer\n                 || declarator-&gt;kind == cdk_reference\n    @@ -3129,6 +3130,7 @@ cp_parser_check_for_definition_in_return_type (cp_declarator *declarator,\n                  \"(perhaps a semicolon is missing after the definition of %qT)\",\n                  type);\n         }\n    +    */\n     }\n     \n     /* A type-specifier (TYPE) has been parsed which cannot be followed by\n    @@ -22764,8 +22766,10 @@ cp_parser_parameter_declaration (cp_parser *parser,\n     \n       /* Type definitions may not appear in parameter types.  */\n       saved_message = parser-&gt;type_definition_forbidden_message;\n    +  /*\n       parser-&gt;type_definition_forbidden_message\n         = G_(\"types may not be defined in parameter types\");\n    +  */\n     \n       int template_parm_idx = (function_being_declared_is_template_p (parser) ?\n                               TREE_VEC_LENGTH (INNERMOST_TEMPLATE_PARMS\n\nPatch is trivial and even if it does not apply, it should be possible to replicate it on other versions of GCC.\n\nIMO it is a bit of overkill because it allows to write code like this:\n\n    struct {\n    \tint x = 0;\n    \n    \toperator int () const {\n    \t\t// this executes when struct is converted to int but not before that\n    \t\tstd::cout &lt;&lt; x &lt;&lt; std::endl;\n    \t\treturn 0;\n    \t}\n    \n    \tstruct tors {\n    \t\ttors() { std::cout &lt;&lt; \"got ctor\" &lt;&lt; std::endl; }\n    \t\t~tors() { std::cout &lt;&lt; \"got dtor?\" &lt;&lt; std::endl; }\n    \t} tors = {};\n    }\n    f(const struct { int y; } &amp;args) {\n    \treturn { .x = args.y };\n    }\n\nThis isn't exactly footgun, more like a tactical nuke, looks funny, but probably under export restrictions. But this is very powerful and could be a solid basis for more refined language features i think. However if you think about it, this is nothing that can not be implemented with non anonymous structures. For designated initializers `-std=c++2a` is need to be set of course.\n\nAny ideas?", "author_fullname": "t2_oi9nh", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Patch for GCC 10 to implement P0222", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hqbqjd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 21, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 21, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594658568.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;P0222: &lt;a href=\"https://github.com/mwoehlke/cpp-proposals/blob/master/p0222r0-anonymous-struct-return.rst\"&gt;https://github.com/mwoehlke/cpp-proposals/blob/master/p0222r0-anonymous-struct-return.rst&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;GCC: &lt;a href=\"https://gcc.gnu.org/git.html\"&gt;https://gcc.gnu.org/git.html&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This patch lifts the restriction described in P0222 + it is possible to define types in function arguments, so it&amp;#39;s possible to write code like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;struct { int x; }\ng(const struct { int y; } &amp;amp;args) {\n    return { .x = args.y };\n}\n\nint main() {\n    return g({ .y = 11 }).x;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This code generates the following assembly with &lt;code&gt;-O3&lt;/code&gt;:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;movl    $11, %eax\nret\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Patch:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;diff --git a/gcc/cp/parser.c b/gcc/cp/parser.c\nindex 45ad2c05288..b1e0b871777 100644\n--- a/gcc/cp/parser.c\n+++ b/gcc/cp/parser.c\n@@ -3115,6 +3115,7 @@ cp_parser_check_for_definition_in_return_type (cp_declarator *declarator,\n   /* [dcl.fct] forbids type definitions in return types.\n      Unfortunately, it&amp;#39;s not easy to know whether or not we are\n      processing a return type until after the fact.  */\n+  /*\n   while (declarator\n         &amp;amp;&amp;amp; (declarator-&amp;gt;kind == cdk_pointer\n             || declarator-&amp;gt;kind == cdk_reference\n@@ -3129,6 +3130,7 @@ cp_parser_check_for_definition_in_return_type (cp_declarator *declarator,\n              &amp;quot;(perhaps a semicolon is missing after the definition of %qT)&amp;quot;,\n              type);\n     }\n+    */\n }\n\n /* A type-specifier (TYPE) has been parsed which cannot be followed by\n@@ -22764,8 +22766,10 @@ cp_parser_parameter_declaration (cp_parser *parser,\n\n   /* Type definitions may not appear in parameter types.  */\n   saved_message = parser-&amp;gt;type_definition_forbidden_message;\n+  /*\n   parser-&amp;gt;type_definition_forbidden_message\n     = G_(&amp;quot;types may not be defined in parameter types&amp;quot;);\n+  */\n\n   int template_parm_idx = (function_being_declared_is_template_p (parser) ?\n                           TREE_VEC_LENGTH (INNERMOST_TEMPLATE_PARMS\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Patch is trivial and even if it does not apply, it should be possible to replicate it on other versions of GCC.&lt;/p&gt;\n\n&lt;p&gt;IMO it is a bit of overkill because it allows to write code like this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;struct {\n    int x = 0;\n\n    operator int () const {\n        // this executes when struct is converted to int but not before that\n        std::cout &amp;lt;&amp;lt; x &amp;lt;&amp;lt; std::endl;\n        return 0;\n    }\n\n    struct tors {\n        tors() { std::cout &amp;lt;&amp;lt; &amp;quot;got ctor&amp;quot; &amp;lt;&amp;lt; std::endl; }\n        ~tors() { std::cout &amp;lt;&amp;lt; &amp;quot;got dtor?&amp;quot; &amp;lt;&amp;lt; std::endl; }\n    } tors = {};\n}\nf(const struct { int y; } &amp;amp;args) {\n    return { .x = args.y };\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This isn&amp;#39;t exactly footgun, more like a tactical nuke, looks funny, but probably under export restrictions. But this is very powerful and could be a solid basis for more refined language features i think. However if you think about it, this is nothing that can not be implemented with non anonymous structures. For designated initializers &lt;code&gt;-std=c++2a&lt;/code&gt; is need to be set of course.&lt;/p&gt;\n\n&lt;p&gt;Any ideas?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hqbqjd", "is_robot_indexable": true, "report_reasons": null, "author": "neuroblaster", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/hqbqjd/patch_for_gcc_10_to_implement_p0222/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/hqbqjd/patch_for_gcc_10_to_implement_p0222/", "subreddit_subscribers": 145044, "created_utc": 1594629768.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Hi all,\n\nLong time C programmer here, primarily working in the embedded industry (particularly involving safety-critical code). I've been a lurker on this sub for a while but I'm hoping to ask some questions regarding best practices. I've been trying to start using c++ on a lot of my work - particularly taking advantage of some of the code-reuse and power of C++ (particularly constexpr, some loose template programming, stronger type checking, RAII etc).\n\nI would consider myself maybe an 8/10 C programmer but I would conservatively maybe rate myself as 3/10 in C++ (with 1/10 meaning the absolute minmum ability to write, google syntax errata, diagnose, and debug a program). Perhaps I should preface the post that I am more than aware that C is by no means a subset of C++ and there are many language constructs permitted in one that are not in the other.\n\nIn any case, I was hoping to get a few answers regarding best practices for c++. Keep in mind that the typical target device I work with does not have a heap of any sort and so a lot of the features that constitute \"modern\" C++ (non-initialization use of dynamic memory, STL meta-programming, hash-maps, lambdas (as I currently understand them) are a big no-no in terms of passing safety review.\n\n### **When do I overload operators inside a class as opposed to outisde?** ###\n\n... And what are the arguments for/against each paradigm? See below:\n\n    /* Overload example 1 (overloaded inside class) */\n    class myclass\n    {\n    private:\n        unsigned int a;\n        unsigned int b;\n\n    public:\n        myclass(void);\n\n        unsigned int get_a(void) const;\n\n        bool operator==(const myclass &amp;rhs);\n    };\n\n    bool myclass::operator==(const myclass &amp;rhs)\n    {\n        if (this == &amp;rhs)\n        {\n            return true;\n        }\n        else\n        {\n            if (this-&gt;a == rhs.a &amp;&amp; this-&gt;b == rhs.b)\n            {\n                return true;\n            }\n        }\n        return false;\n    }\n\nAs opposed to this:\n    \n    /* Overload example 2 (overloaded outside of class) */\n    class CD\n    {\n        private:\n            unsigned int c;\n            unsigned int d;\n        public:\n            CD(unsigned int _c, unsigned int _d) : d(_d), c(_c) {}; /* CTOR */\n            unsigned int get_c(void) const; /* trival getters */\n            unsigned int get_d(void) const; /* trival getters */\n    };\n\n\n    /* In this implementation, If I don't make the getters (get_c, get_d) constant, \n     * it won't  compile despite their access specifiers being public. \n     * \n     * It seems like the const keyword in C++ really should be interpretted as \n     * \"read-only AND no side effects\" rather than just read only as in C. \n     * But my current understanding may just be flawed...\n     * \n     * My confusion is as follows: The function args are constant references \n     * so why do I have to promise that the function methods have no side-effects on\n     * the private object members? Is this something specific to the == operator?\n     */\n    bool operator==(const CD &amp; lhs, const CD &amp; rhs)\n    {   \n        if(&amp;lhs == &amp;rhs)\n            return true;\n        else if((lhs.get_c() == rhs.get_c()) &amp;&amp; (lhs.get_d() == rhs.get_d()))\n            return true;\n        return false;\n    }\n\n\nWhen should I use the example 1 style over the example 2 style? What are the pros and cons of 1 vs 2? \n\n### **What's the deal with const member functions?** ###\n\nThis is more of a subtle confusion but it seems like in C++ the const keyword means different things base on the context in which it is used. I'm trying to develop a relatively nuanced understanding of what's happening under the hood and I most certainly have misunderstood many language features, especially because C++ has likely changed greatly in the last ~6-8 years.\n\n### **When should I use enum classes versus plain old enum?** ###\n\nTo be honest I'm not entirely certain I fully understand the implications of using enum versus enum class in C++. \n\nThis is made more confusing by the fact that there are subtle differences between the way C and C++ treat or permit various language constructs (const, enum, typedef, struct, void\\*, pointer aliasing, type puning, tentative declarations). \n\nIn C, enums decay to integer values at compile time. But in C++, the way I currently understand it, enums are their own type. Thus, in C, the following code would be valid, but a C++ compiler would generate a warning (or an error, haven't actually tested it)\n    \n\n    /* Example 3: (enums : Valid in C, invalid in C++ ) */\n    enum COLOR\n    {\n        RED,\n        BLUE,\n        GREY\n    };\n\n    enum PET\n    {\n        CAT,\n        DOG,\n        FROG\n    };\n\n    /* This is compatible with a C-style enum conception but not C++ */\n    enum SHAPE\n    {\n        BALL = RED, /* In C, these work because int = int is valid */\n        CUBE = DOG, \n    };\n\nIf my understanding is indeed the case, do enums have an implicit namespace (language construct, not the C++ keyword) as in C? As an add-on to that, in C++, you can also declare enums as a sort of inherited type (below). What am I supposed to make of this? Should I just be using it to reduce code size when possible (similar to gcc option -fuse-packed-enums)? Since most processors are word based, would it be more performant to use the processor's word type than the syntax specified above?\n    \n    /* Example 4: (Purely C++ style enums, use of enum class/ enum struct) */\n    /* C++ permits forward enum declaration with type specified */\n    enum FRUIT : int;\n    enum VEGGIE : short;\n\n    enum FRUIT /* As I understand it, these are ints */\n    {\n        APPLE,\n        ORANGE,\n    };\n\n    enum VEGGIE /* As I understand it, these are shorts */\n    {\n        CARROT,\n        TURNIP,\n    };\n\nComplicating things even further, I've also seen the following syntax:\n\n    /* What the heck is an enum class anyway? When should I use them */\n    enum class THING\n    {\n        THING1,\n        THING2,\n        THING3\n    };\n\n    /* And if classes and structs are interchangable (minus assumptions\n     * about default access specifiers), what does that mean for\n     * the following definition?\n     */\n    enum struct FOO /* Is this even valid syntax? */\n    {\n        FOO1,\n        FOO2,\n        FOO3\n    };\n\n\nGiven that enumerated types greatly improve code readability, I've been trying to wrap my head around all this. When should I be using the various language constructs? Are there any pitfalls in a given method?\n\n### **When to use POD structs (a-la C style) versus a class implementation?** ###\n\nIf I had to take a stab at answering this question, my intuition would be to use POD structs for passing aggregate types (as in function arguments) and using classes for interface abstractions / object abstractions as in the example below:\n\n    struct aggregate\n    {\n        unsigned int related_stuff1;\n        unsigned int related_stuff2;\n        char         name_of_the_related_stuff[20];\n    };\n\n\n    class abstraction\n    {\n    private:\n        unsigned int private_member1;\n        unsigned int private_member2;\n\n    protected:\n        unsigned int stuff_for_child_classes;\n\n    public:\n        /* big 3 */\n        abstraction(void);\n        abstraction(const abstraction &amp;other);\n        ~abstraction(void);\n\n        /* COPY semantic ( I have a better grasp on this abstraction than MOVE) */\n        abstraction &amp;operator=(const abstraction &amp;rhs);\n\n        /* MOVE semantic (subtle semantics of which I don't full grasp yet) */\n        abstraction &amp;operator=(abstraction &amp;&amp;rhs);\n\n        /*\n         * I've seen implentations of this that use a copy + swap design pattern\n         * but that relies on std::move and I realllllly don't get what is\n         * happening under the hood in std::move\n         */\n        abstraction &amp;operator=(abstraction rhs);\n\n        void do_some_stuff(void); /* member function */\n    };\n\n\nIs there an accepted best practice for thsi or is it entirely preference? Are there arguments for only using classes? What about vtables (where byte-wise alignment such as device register overlays and I have to guarantee placement of precise members)\n\n### **Is there a best practice for integrating C code?** ###\n\nTypically (and up to this point), I've just done the following:\n     \n    /* Example 5 : Linking a C library */\n    /* Disable name-mangling, and then give the C++ linker / \n     * toolchain the compiled\n     * binaries \n     */\n    #ifdef __cplusplus\n    extern \"C\" {\n    #endif /* C linkage */\n\n    #include \"device_driver_header_or_a_c_library.h\" \n\n    #ifdef __cplusplus\n    }\n    #endif /* C linkage */\n\n    /* C++ code goes here */\n\nAs far as I know, this is the only way to prevent the C++ compiler from generating different object symbols than those in the C header file. Again, this may just be ignorance of C++ standards on my part.\n\n### **What is the proper way to selectively incorporate RTTI without code size bloat?** ###\n\nIs there even a way? I'm relatively fluent in CMake but I guess the underlying question is if binaries that incorporate RTTI are compatible with those that dont (and the pitfalls that may ensue when mixing the two).\n\n### **What about compile time string formatting?** ###\n\nOne of my biggest gripes about C (particularly regarding string manipulation) frequently (especially on embedded targets) variadic arguments get handled at runtime. This makes string manipulation via the C standard library (printf-style format strings) uncomputable at compile time in C.\n\nThis is sadly the case even when the ranges and values of paramers and formatting outputs is entirely known beforehand. C++ template programming seems to be a big thing in \"modern\" C++ and I've seen a few projects on this sub that use the turing-completeness of the template system to do some crazy things at compile time. Is there a way to bypass this ABI limitation using C++ features like constexpr, templates, and lambdas? My (somewhat pessimistic) suspicion is that since the generated assembly must be ABI-compliant this isn't possible. Is there a way around this? What about the std::format stuff I've been seeing on this sub periodically?\n\n### **Is there a standard practice for namespaces and when to start incorporating them?** ###\n\nIs it from the start? Is it when the boundaries of a module become clearly defined? Or is it just personal preference / based on project scale and modularity?\n\nIf I had to make a guess it would be at the point that you get a \"build group\" for a project (group of source files that should be compiled together) as that would loosely define the boundaries of a series of abstractions APIs you may provide to other parts of a project.\n\n--EDIT-- markdown formatting", "author_fullname": "t2_6dv3qrpt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best Practices for A C Programmer", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hpz198", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 138, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 138, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1594578536.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594606501.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi all,&lt;/p&gt;\n\n&lt;p&gt;Long time C programmer here, primarily working in the embedded industry (particularly involving safety-critical code). I&amp;#39;ve been a lurker on this sub for a while but I&amp;#39;m hoping to ask some questions regarding best practices. I&amp;#39;ve been trying to start using c++ on a lot of my work - particularly taking advantage of some of the code-reuse and power of C++ (particularly constexpr, some loose template programming, stronger type checking, RAII etc).&lt;/p&gt;\n\n&lt;p&gt;I would consider myself maybe an 8/10 C programmer but I would conservatively maybe rate myself as 3/10 in C++ (with 1/10 meaning the absolute minmum ability to write, google syntax errata, diagnose, and debug a program). Perhaps I should preface the post that I am more than aware that C is by no means a subset of C++ and there are many language constructs permitted in one that are not in the other.&lt;/p&gt;\n\n&lt;p&gt;In any case, I was hoping to get a few answers regarding best practices for c++. Keep in mind that the typical target device I work with does not have a heap of any sort and so a lot of the features that constitute &amp;quot;modern&amp;quot; C++ (non-initialization use of dynamic memory, STL meta-programming, hash-maps, lambdas (as I currently understand them) are a big no-no in terms of passing safety review.&lt;/p&gt;\n\n&lt;h3&gt;&lt;strong&gt;When do I overload operators inside a class as opposed to outisde?&lt;/strong&gt;&lt;/h3&gt;\n\n&lt;p&gt;... And what are the arguments for/against each paradigm? See below:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/* Overload example 1 (overloaded inside class) */\nclass myclass\n{\nprivate:\n    unsigned int a;\n    unsigned int b;\n\npublic:\n    myclass(void);\n\n    unsigned int get_a(void) const;\n\n    bool operator==(const myclass &amp;amp;rhs);\n};\n\nbool myclass::operator==(const myclass &amp;amp;rhs)\n{\n    if (this == &amp;amp;rhs)\n    {\n        return true;\n    }\n    else\n    {\n        if (this-&amp;gt;a == rhs.a &amp;amp;&amp;amp; this-&amp;gt;b == rhs.b)\n        {\n            return true;\n        }\n    }\n    return false;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As opposed to this:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/* Overload example 2 (overloaded outside of class) */\nclass CD\n{\n    private:\n        unsigned int c;\n        unsigned int d;\n    public:\n        CD(unsigned int _c, unsigned int _d) : d(_d), c(_c) {}; /* CTOR */\n        unsigned int get_c(void) const; /* trival getters */\n        unsigned int get_d(void) const; /* trival getters */\n};\n\n\n/* In this implementation, If I don&amp;#39;t make the getters (get_c, get_d) constant, \n * it won&amp;#39;t  compile despite their access specifiers being public. \n * \n * It seems like the const keyword in C++ really should be interpretted as \n * &amp;quot;read-only AND no side effects&amp;quot; rather than just read only as in C. \n * But my current understanding may just be flawed...\n * \n * My confusion is as follows: The function args are constant references \n * so why do I have to promise that the function methods have no side-effects on\n * the private object members? Is this something specific to the == operator?\n */\nbool operator==(const CD &amp;amp; lhs, const CD &amp;amp; rhs)\n{   \n    if(&amp;amp;lhs == &amp;amp;rhs)\n        return true;\n    else if((lhs.get_c() == rhs.get_c()) &amp;amp;&amp;amp; (lhs.get_d() == rhs.get_d()))\n        return true;\n    return false;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;When should I use the example 1 style over the example 2 style? What are the pros and cons of 1 vs 2? &lt;/p&gt;\n\n&lt;h3&gt;&lt;strong&gt;What&amp;#39;s the deal with const member functions?&lt;/strong&gt;&lt;/h3&gt;\n\n&lt;p&gt;This is more of a subtle confusion but it seems like in C++ the const keyword means different things base on the context in which it is used. I&amp;#39;m trying to develop a relatively nuanced understanding of what&amp;#39;s happening under the hood and I most certainly have misunderstood many language features, especially because C++ has likely changed greatly in the last ~6-8 years.&lt;/p&gt;\n\n&lt;h3&gt;&lt;strong&gt;When should I use enum classes versus plain old enum?&lt;/strong&gt;&lt;/h3&gt;\n\n&lt;p&gt;To be honest I&amp;#39;m not entirely certain I fully understand the implications of using enum versus enum class in C++. &lt;/p&gt;\n\n&lt;p&gt;This is made more confusing by the fact that there are subtle differences between the way C and C++ treat or permit various language constructs (const, enum, typedef, struct, void*, pointer aliasing, type puning, tentative declarations). &lt;/p&gt;\n\n&lt;p&gt;In C, enums decay to integer values at compile time. But in C++, the way I currently understand it, enums are their own type. Thus, in C, the following code would be valid, but a C++ compiler would generate a warning (or an error, haven&amp;#39;t actually tested it)&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/* Example 3: (enums : Valid in C, invalid in C++ ) */\nenum COLOR\n{\n    RED,\n    BLUE,\n    GREY\n};\n\nenum PET\n{\n    CAT,\n    DOG,\n    FROG\n};\n\n/* This is compatible with a C-style enum conception but not C++ */\nenum SHAPE\n{\n    BALL = RED, /* In C, these work because int = int is valid */\n    CUBE = DOG, \n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;If my understanding is indeed the case, do enums have an implicit namespace (language construct, not the C++ keyword) as in C? As an add-on to that, in C++, you can also declare enums as a sort of inherited type (below). What am I supposed to make of this? Should I just be using it to reduce code size when possible (similar to gcc option -fuse-packed-enums)? Since most processors are word based, would it be more performant to use the processor&amp;#39;s word type than the syntax specified above?&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/* Example 4: (Purely C++ style enums, use of enum class/ enum struct) */\n/* C++ permits forward enum declaration with type specified */\nenum FRUIT : int;\nenum VEGGIE : short;\n\nenum FRUIT /* As I understand it, these are ints */\n{\n    APPLE,\n    ORANGE,\n};\n\nenum VEGGIE /* As I understand it, these are shorts */\n{\n    CARROT,\n    TURNIP,\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Complicating things even further, I&amp;#39;ve also seen the following syntax:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/* What the heck is an enum class anyway? When should I use them */\nenum class THING\n{\n    THING1,\n    THING2,\n    THING3\n};\n\n/* And if classes and structs are interchangable (minus assumptions\n * about default access specifiers), what does that mean for\n * the following definition?\n */\nenum struct FOO /* Is this even valid syntax? */\n{\n    FOO1,\n    FOO2,\n    FOO3\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Given that enumerated types greatly improve code readability, I&amp;#39;ve been trying to wrap my head around all this. When should I be using the various language constructs? Are there any pitfalls in a given method?&lt;/p&gt;\n\n&lt;h3&gt;&lt;strong&gt;When to use POD structs (a-la C style) versus a class implementation?&lt;/strong&gt;&lt;/h3&gt;\n\n&lt;p&gt;If I had to take a stab at answering this question, my intuition would be to use POD structs for passing aggregate types (as in function arguments) and using classes for interface abstractions / object abstractions as in the example below:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;struct aggregate\n{\n    unsigned int related_stuff1;\n    unsigned int related_stuff2;\n    char         name_of_the_related_stuff[20];\n};\n\n\nclass abstraction\n{\nprivate:\n    unsigned int private_member1;\n    unsigned int private_member2;\n\nprotected:\n    unsigned int stuff_for_child_classes;\n\npublic:\n    /* big 3 */\n    abstraction(void);\n    abstraction(const abstraction &amp;amp;other);\n    ~abstraction(void);\n\n    /* COPY semantic ( I have a better grasp on this abstraction than MOVE) */\n    abstraction &amp;amp;operator=(const abstraction &amp;amp;rhs);\n\n    /* MOVE semantic (subtle semantics of which I don&amp;#39;t full grasp yet) */\n    abstraction &amp;amp;operator=(abstraction &amp;amp;&amp;amp;rhs);\n\n    /*\n     * I&amp;#39;ve seen implentations of this that use a copy + swap design pattern\n     * but that relies on std::move and I realllllly don&amp;#39;t get what is\n     * happening under the hood in std::move\n     */\n    abstraction &amp;amp;operator=(abstraction rhs);\n\n    void do_some_stuff(void); /* member function */\n};\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Is there an accepted best practice for thsi or is it entirely preference? Are there arguments for only using classes? What about vtables (where byte-wise alignment such as device register overlays and I have to guarantee placement of precise members)&lt;/p&gt;\n\n&lt;h3&gt;&lt;strong&gt;Is there a best practice for integrating C code?&lt;/strong&gt;&lt;/h3&gt;\n\n&lt;p&gt;Typically (and up to this point), I&amp;#39;ve just done the following:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;/* Example 5 : Linking a C library */\n/* Disable name-mangling, and then give the C++ linker / \n * toolchain the compiled\n * binaries \n */\n#ifdef __cplusplus\nextern &amp;quot;C&amp;quot; {\n#endif /* C linkage */\n\n#include &amp;quot;device_driver_header_or_a_c_library.h&amp;quot; \n\n#ifdef __cplusplus\n}\n#endif /* C linkage */\n\n/* C++ code goes here */\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;As far as I know, this is the only way to prevent the C++ compiler from generating different object symbols than those in the C header file. Again, this may just be ignorance of C++ standards on my part.&lt;/p&gt;\n\n&lt;h3&gt;&lt;strong&gt;What is the proper way to selectively incorporate RTTI without code size bloat?&lt;/strong&gt;&lt;/h3&gt;\n\n&lt;p&gt;Is there even a way? I&amp;#39;m relatively fluent in CMake but I guess the underlying question is if binaries that incorporate RTTI are compatible with those that dont (and the pitfalls that may ensue when mixing the two).&lt;/p&gt;\n\n&lt;h3&gt;&lt;strong&gt;What about compile time string formatting?&lt;/strong&gt;&lt;/h3&gt;\n\n&lt;p&gt;One of my biggest gripes about C (particularly regarding string manipulation) frequently (especially on embedded targets) variadic arguments get handled at runtime. This makes string manipulation via the C standard library (printf-style format strings) uncomputable at compile time in C.&lt;/p&gt;\n\n&lt;p&gt;This is sadly the case even when the ranges and values of paramers and formatting outputs is entirely known beforehand. C++ template programming seems to be a big thing in &amp;quot;modern&amp;quot; C++ and I&amp;#39;ve seen a few projects on this sub that use the turing-completeness of the template system to do some crazy things at compile time. Is there a way to bypass this ABI limitation using C++ features like constexpr, templates, and lambdas? My (somewhat pessimistic) suspicion is that since the generated assembly must be ABI-compliant this isn&amp;#39;t possible. Is there a way around this? What about the std::format stuff I&amp;#39;ve been seeing on this sub periodically?&lt;/p&gt;\n\n&lt;h3&gt;&lt;strong&gt;Is there a standard practice for namespaces and when to start incorporating them?&lt;/strong&gt;&lt;/h3&gt;\n\n&lt;p&gt;Is it from the start? Is it when the boundaries of a module become clearly defined? Or is it just personal preference / based on project scale and modularity?&lt;/p&gt;\n\n&lt;p&gt;If I had to make a guess it would be at the point that you get a &amp;quot;build group&amp;quot; for a project (group of source files that should be compiled together) as that would loosely define the boundaries of a series of abstractions APIs you may provide to other parts of a project.&lt;/p&gt;\n\n&lt;p&gt;--EDIT-- markdown formatting&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hpz198", "is_robot_indexable": true, "report_reasons": null, "author": "aWildElectron", "discussion_type": null, "num_comments": 87, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/hpz198/best_practices_for_a_c_programmer/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/hpz198/best_practices_for_a_c_programmer/", "subreddit_subscribers": 145044, "created_utc": 1594577701.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_3vxx7k5b", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "CppCon 2020 will be held entirely online :(", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": "cppcon", "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hqf0tc", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "CppCon", "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1594674806.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "cppcon.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://cppcon.org/going-virtual/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hqf0tc", "is_robot_indexable": true, "report_reasons": null, "author": "andre_friend", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/hqf0tc/cppcon_2020_will_be_held_entirely_online/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://cppcon.org/going-virtual/", "subreddit_subscribers": 145044, "created_utc": 1594646006.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_hoaut", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "5 Curious C++ Lambda Examples: Recursion, constexpr, Containers and More", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hqc1a4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.77, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 7, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1594660267.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "bfilipek.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.bfilipek.com/2020/07/lambdas5ex.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hqc1a4", "is_robot_indexable": true, "report_reasons": null, "author": "drodri", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/hqc1a4/5_curious_c_lambda_examples_recursion_constexpr/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.bfilipek.com/2020/07/lambdas5ex.html", "subreddit_subscribers": 145044, "created_utc": 1594631467.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_x45tu", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How Cheerp supports 64-bit integers in both JavaScript and WebAssembly", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hqf9fp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1594675717.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/leaningtech/how-cheerp-supports-64-bit-integers-in-both-javascript-and-webassembly-79485761615a", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hqf9fp", "is_robot_indexable": true, "report_reasons": null, "author": "vilgefortz91", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/hqf9fp/how_cheerp_supports_64bit_integers_in_both/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/leaningtech/how-cheerp-supports-64-bit-integers-in-both-javascript-and-webassembly-79485761615a", "subreddit_subscribers": 145044, "created_utc": 1594646917.0, "num_crossposts": 2, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Hello cpp!\n\n(This is related to but does not assume [Is any optimizer able to cache same calls?](https://www.reddit.com/r/cpp/comments/horbq2/is_any_optimizer_able_to_cache_same_calls/))\n\nI have following code:\n\n    [[gnu::pure]] bool compute(const uint64_t n) noexcept;\n    \n    int f(const bool flag1, const bool flag2, const uint64_t n)\n    {\n        const auto c = compute(n);\n        if (flag1 &amp;&amp; c)\n            return 1;\n        return flag2 || c ? 3 : 2;\n    }\n\nIt's clear that when `flag1=false` and `flag2=true` value of `c` is unused.\n\nSo, I am wondering how to make compiler to unroll if-statements for me, to compute `c` only when required? e.g. to have asm equivalent to the following code:\n\n    int f(const bool flag1, const bool flag2, const uint64_t n)\n    {\n        if (flag1)\n        {\n            if (compute(n))\n                return 1;\n            return flag2 ? 3 : 2;\n        }\n        else\n        {\n            return flag2 || compute(n) ? 3 : 2;\n        }\n    }\n\nCode of `compute` doesn't matter (I just need something to model heavy computation). Here it is for reference. It's *available* to compiler:\n\n    [[gnu::pure]] bool compute(const uint64_t n) noexcept\n    {\n        std::vector&lt;uint64_t&gt; primes;\n        for (uint64_t i = 2; n / i &gt;= i; ++i)\n        {\n            if (std::none_of(std::begin(primes), std::end(primes),\n                             [i](const auto p) { return i % p == 0; }))\n                primes.push_back(i);\n        }\n        return primes.size() % 2 == 0;\n    }", "author_fullname": "t2_cpse8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Optimize function-level computation which is not used in some execution paths", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hqbjkm", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594657508.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello cpp!&lt;/p&gt;\n\n&lt;p&gt;(This is related to but does not assume &lt;a href=\"https://www.reddit.com/r/cpp/comments/horbq2/is_any_optimizer_able_to_cache_same_calls/\"&gt;Is any optimizer able to cache same calls?&lt;/a&gt;)&lt;/p&gt;\n\n&lt;p&gt;I have following code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[[gnu::pure]] bool compute(const uint64_t n) noexcept;\n\nint f(const bool flag1, const bool flag2, const uint64_t n)\n{\n    const auto c = compute(n);\n    if (flag1 &amp;amp;&amp;amp; c)\n        return 1;\n    return flag2 || c ? 3 : 2;\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;It&amp;#39;s clear that when &lt;code&gt;flag1=false&lt;/code&gt; and &lt;code&gt;flag2=true&lt;/code&gt; value of &lt;code&gt;c&lt;/code&gt; is unused.&lt;/p&gt;\n\n&lt;p&gt;So, I am wondering how to make compiler to unroll if-statements for me, to compute &lt;code&gt;c&lt;/code&gt; only when required? e.g. to have asm equivalent to the following code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;int f(const bool flag1, const bool flag2, const uint64_t n)\n{\n    if (flag1)\n    {\n        if (compute(n))\n            return 1;\n        return flag2 ? 3 : 2;\n    }\n    else\n    {\n        return flag2 || compute(n) ? 3 : 2;\n    }\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Code of &lt;code&gt;compute&lt;/code&gt; doesn&amp;#39;t matter (I just need something to model heavy computation). Here it is for reference. It&amp;#39;s &lt;em&gt;available&lt;/em&gt; to compiler:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;[[gnu::pure]] bool compute(const uint64_t n) noexcept\n{\n    std::vector&amp;lt;uint64_t&amp;gt; primes;\n    for (uint64_t i = 2; n / i &amp;gt;= i; ++i)\n    {\n        if (std::none_of(std::begin(primes), std::end(primes),\n                         [i](const auto p) { return i % p == 0; }))\n            primes.push_back(i);\n    }\n    return primes.size() % 2 == 0;\n}\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hqbjkm", "is_robot_indexable": true, "report_reasons": null, "author": "dima_mendeleev", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/hqbjkm/optimize_functionlevel_computation_which_is_not/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/hqbjkm/optimize_functionlevel_computation_which_is_not/", "subreddit_subscribers": 145044, "created_utc": 1594628708.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "Hello everyone! I'm new to programming and have been learning from sololearn. I will list down what i have learned so far. Could you please guide what to learn next? .\nI've learned:\nLoops, \nVectors, \nArrays, \nVariables, \nClass and objects, \nTemplates, function temp, class templates, \nPolymorphism, \nInheritance, \nText files (Write and read files), \nI have created student database, calculator and very basic projects.", "author_fullname": "t2_3z3opyem", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I'm new to c++ and need guidance", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hqdwte", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1594670058.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.cpp", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everyone! I&amp;#39;m new to programming and have been learning from sololearn. I will list down what i have learned so far. Could you please guide what to learn next? .\nI&amp;#39;ve learned:\nLoops, \nVectors, \nArrays, \nVariables, \nClass and objects, \nTemplates, function temp, class templates, \nPolymorphism, \nInheritance, \nText files (Write and read files), \nI have created student database, calculator and very basic projects.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hqdwte", "is_robot_indexable": true, "report_reasons": null, "author": "dudewaleed", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/hqdwte/im_new_to_c_and_need_guidance/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/cpp/comments/hqdwte/im_new_to_c_and_need_guidance/", "subreddit_subscribers": 145044, "created_utc": 1594641258.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_asgdz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Version 0.55.0 of the Meson build system is out, here's what's new", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hpw9xd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.86, "author_flair_background_color": "", "subreddit_type": "public", "ups": 42, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 42, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1594596913.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "mesonbuild.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://mesonbuild.com/Release-notes-for-0-55-0.html", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "Meson dev", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hpw9xd", "is_robot_indexable": true, "report_reasons": null, "author": "jpakkane", "discussion_type": null, "num_comments": 6, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/cpp/comments/hpw9xd/version_0550_of_the_meson_build_system_is_out/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://mesonbuild.com/Release-notes-for-0-55-0.html", "subreddit_subscribers": 145044, "created_utc": 1594568113.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "cpp", "selftext": "", "author_fullname": "t2_11pe86", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What is the std::swap two-step?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/cpp", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hpqbdz", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 126, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 126, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1594567042.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "quuxplusone.github.io", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://quuxplusone.github.io/blog/2020/07/11/the-std-swap-two-step/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qi27", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hpqbdz", "is_robot_indexable": true, "report_reasons": null, "author": "vormestrand", "discussion_type": null, "num_comments": 25, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/cpp/comments/hpqbdz/what_is_the_stdswap_twostep/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://quuxplusone.github.io/blog/2020/07/11/the-std-swap-two-step/", "subreddit_subscribers": 145044, "created_utc": 1594538242.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_hpqbdz", "before": null}}