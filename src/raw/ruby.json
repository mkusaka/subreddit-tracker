{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_zmb2u", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Guide to Reactive Rails", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_jc5k8g", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "public", "ups": 13, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 13, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/0_a-u-7ALoCaH5ZvgmmUxULm20wXX1_mAjfB6kJzJ1E.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1602862415.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/obie/guide-to-reactive-rails", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/gnXbdzTWHBMD3-hSQ5w1bGGWD23NJMaEIzgURMFVKxE.jpg?auto=webp&amp;s=ab569bda371fcf24f8d04b54c372e9e85224c52d", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/gnXbdzTWHBMD3-hSQ5w1bGGWD23NJMaEIzgURMFVKxE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=a41f9ccd2ddf9f55670f341dd5c4a3ae59c0465e", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/gnXbdzTWHBMD3-hSQ5w1bGGWD23NJMaEIzgURMFVKxE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=201b9feb9c8b6c614728986faff57bf0c25e6240", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/gnXbdzTWHBMD3-hSQ5w1bGGWD23NJMaEIzgURMFVKxE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=1f5af7227fb90f344ca313ffe0c6de07ca131da0", "width": 320, "height": 320}], "variants": {}, "id": "6l8K_kDmqli96TViniWMfmvlKRnR4wV-_gGJcqmoCN8"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jc5k8g", "is_robot_indexable": true, "report_reasons": null, "author": "geospeck", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jc5k8g/guide_to_reactive_rails/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/obie/guide-to-reactive-rails", "subreddit_subscribers": 67859, "created_utc": 1602833615.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I am looking for feedback on the design of a new \"gem\" that I have been working on called [`active_snapshot`](https://github.com/westonganger/active_snapshot)\n\n**Gem:** [`active_snapshot`](https://github.com/westonganger/active_snapshot)\n\n**Description:** Simplified snapshots and restoration for ActiveRecord models and associations with a transparent white-box implementation.\n\nI appreciate your feedback and help.", "author_fullname": "t2_qp0dl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Looking for feedback on a gem I have been working on: active_snapshot", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jbzqju", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 11, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 11, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1602837095.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am looking for feedback on the design of a new &amp;quot;gem&amp;quot; that I have been working on called &lt;a href=\"https://github.com/westonganger/active_snapshot\"&gt;&lt;code&gt;active_snapshot&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Gem:&lt;/strong&gt; &lt;a href=\"https://github.com/westonganger/active_snapshot\"&gt;&lt;code&gt;active_snapshot&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Description:&lt;/strong&gt; Simplified snapshots and restoration for ActiveRecord models and associations with a transparent white-box implementation.&lt;/p&gt;\n\n&lt;p&gt;I appreciate your feedback and help.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/bryW8EmQNJ_xWLrsVn6sRAm8YYSTZ2fcLng3eGeDcEQ.jpg?auto=webp&amp;s=b9da93c8796b302e893bcdb3abd51950e03db255", "width": 400, "height": 400}, "resolutions": [{"url": "https://external-preview.redd.it/bryW8EmQNJ_xWLrsVn6sRAm8YYSTZ2fcLng3eGeDcEQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=535920d1d37347d94aea9d068b59650cec77c9df", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/bryW8EmQNJ_xWLrsVn6sRAm8YYSTZ2fcLng3eGeDcEQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6845c395f43842bbbd5a8b4ef8ed807f90ee3137", "width": 216, "height": 216}, {"url": "https://external-preview.redd.it/bryW8EmQNJ_xWLrsVn6sRAm8YYSTZ2fcLng3eGeDcEQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=061270fee9f7c254596f188cb604c92f14c775fb", "width": 320, "height": 320}], "variants": {}, "id": "6I2mxbTZ8B1F1jPNftG-MWIf60k1Lw7NcJZ2dr6gEU0"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jbzqju", "is_robot_indexable": true, "report_reasons": null, "author": "westonganger", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jbzqju/looking_for_feedback_on_a_gem_i_have_been_working/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jbzqju/looking_for_feedback_on_a_gem_i_have_been_working/", "subreddit_subscribers": 67859, "created_utc": 1602808295.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Hi! I'm Billy from Kin Insurance. We're a Chicago-based Series B start-up that is changing home insurance from what it is to what it should be. We've build our platform from the ground-up using Ruby on Rails, and we're growing. If anyone is interested in full-time engineering roles or knows someone on the market, feel free to visit our careers page for more information: [https://www.kin.com/careers](https://www.kin.com/careers).\n\nAlso, feel free to post questions in comments, and I'll do my best to respond promptly.", "author_fullname": "t2_7oilj2ty", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Job Opportunities for Rubyists", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jbrdu3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.82, "author_flair_background_color": null, "subreddit_type": "public", "ups": 31, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 31, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1602809605.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi! I&amp;#39;m Billy from Kin Insurance. We&amp;#39;re a Chicago-based Series B start-up that is changing home insurance from what it is to what it should be. We&amp;#39;ve build our platform from the ground-up using Ruby on Rails, and we&amp;#39;re growing. If anyone is interested in full-time engineering roles or knows someone on the market, feel free to visit our careers page for more information: &lt;a href=\"https://www.kin.com/careers\"&gt;https://www.kin.com/careers&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;Also, feel free to post questions in comments, and I&amp;#39;ll do my best to respond promptly.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/zQ77ICF3ieB9Lm6U3DM3asC4XxT-KxwgUrr5DUsTF-k.jpg?auto=webp&amp;s=7c5334264e0afe2bf8bbb24f06e6c5be2b345502", "width": 3035, "height": 2038}, "resolutions": [{"url": "https://external-preview.redd.it/zQ77ICF3ieB9Lm6U3DM3asC4XxT-KxwgUrr5DUsTF-k.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=2adfa5643e9995282c235b95c4b6e257109aedec", "width": 108, "height": 72}, {"url": "https://external-preview.redd.it/zQ77ICF3ieB9Lm6U3DM3asC4XxT-KxwgUrr5DUsTF-k.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=6ba1781b8a0eb394bc5ebd402a9935225369f45c", "width": 216, "height": 145}, {"url": "https://external-preview.redd.it/zQ77ICF3ieB9Lm6U3DM3asC4XxT-KxwgUrr5DUsTF-k.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=9d88c760602d774a65112a9afe0f9ce0dca03e20", "width": 320, "height": 214}, {"url": "https://external-preview.redd.it/zQ77ICF3ieB9Lm6U3DM3asC4XxT-KxwgUrr5DUsTF-k.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=06f376234727ca5e6acd2c810aeffc76565255ca", "width": 640, "height": 429}, {"url": "https://external-preview.redd.it/zQ77ICF3ieB9Lm6U3DM3asC4XxT-KxwgUrr5DUsTF-k.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=58c4d2ad94045348b943895fc976555d39f627b1", "width": 960, "height": 644}, {"url": "https://external-preview.redd.it/zQ77ICF3ieB9Lm6U3DM3asC4XxT-KxwgUrr5DUsTF-k.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f58f80418276dd7197dae4f85be619f9522acd34", "width": 1080, "height": 725}], "variants": {}, "id": "Sk5L-JffP7CPcIz0jpRgcEA4vgoSdntNL_1T6uvVngA"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jbrdu3", "is_robot_indexable": true, "report_reasons": null, "author": "BillyTheKin", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jbrdu3/job_opportunities_for_rubyists/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jbrdu3/job_opportunities_for_rubyists/", "subreddit_subscribers": 67859, "created_utc": 1602780805.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Hello,  I have split the hubba github analytics gem into two, that is, [hubba](https://github.com/rubycoco/git/tree/master/hubba) and [hubba-reports](https://github.com/rubycoco/git/tree/master/hubba-reports) for easier (re)use and split the data gathering / collecting via github api calls and the report generation. Anyways, I have added a [new language report](https://github.com/rubycoco/git/blob/master/hubba-reports/lib/hubba/reports/reports/languages.rb) that lists all your languages used by char / bytes count and by number of repos. See [LANGUAGES.md](https://github.com/yorobot/backup/blob/master/LANGUAGES.md) as an example. Happy data crunching with ruby. Cheers. Prost. \n\nPS: Know any other alternative github scripts / gems, please tell.", "author_fullname": "t2_bu67h", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "github analytics with the hubba-reports gem - What are your most used languages (in char / bytes count)?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jc7zvy", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1602875824.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello,  I have split the hubba github analytics gem into two, that is, &lt;a href=\"https://github.com/rubycoco/git/tree/master/hubba\"&gt;hubba&lt;/a&gt; and &lt;a href=\"https://github.com/rubycoco/git/tree/master/hubba-reports\"&gt;hubba-reports&lt;/a&gt; for easier (re)use and split the data gathering / collecting via github api calls and the report generation. Anyways, I have added a &lt;a href=\"https://github.com/rubycoco/git/blob/master/hubba-reports/lib/hubba/reports/reports/languages.rb\"&gt;new language report&lt;/a&gt; that lists all your languages used by char / bytes count and by number of repos. See &lt;a href=\"https://github.com/yorobot/backup/blob/master/LANGUAGES.md\"&gt;LANGUAGES.md&lt;/a&gt; as an example. Happy data crunching with ruby. Cheers. Prost. &lt;/p&gt;\n\n&lt;p&gt;PS: Know any other alternative github scripts / gems, please tell.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/NGS6lCTVeozxUkFzDoJpU60rfpBx6ZVsf9Bf5SP4ZUw.jpg?auto=webp&amp;s=953b3678c3e8952f4b564dfa707cfd13dd605be5", "width": 256, "height": 256}, "resolutions": [{"url": "https://external-preview.redd.it/NGS6lCTVeozxUkFzDoJpU60rfpBx6ZVsf9Bf5SP4ZUw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=85a053ea9052d55dbc50a6a8e16943767edae04f", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/NGS6lCTVeozxUkFzDoJpU60rfpBx6ZVsf9Bf5SP4ZUw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=761ab3da112907d6886972777cfa8b49ef8ecd01", "width": 216, "height": 216}], "variants": {}, "id": "37oOMmuQfsRF678Qj5bf0kE0590QT2uVorZ9tjX1tnU"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jc7zvy", "is_robot_indexable": true, "report_reasons": null, "author": "geraldbauer", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jc7zvy/github_analytics_with_the_hubbareports_gem_what/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jc7zvy/github_analytics_with_the_hubbareports_gem_what/", "subreddit_subscribers": 67859, "created_utc": 1602847024.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Sorry if this is not suitable in here, please guide me to the correct sub cause I don't know where to ask.\n\nI have a search method in Post model:\n   \n    def self.search(search, category_id)\n      if search.strip.empty?\n        []\n      elsif category_id.empty?\n        Post.approved.where('lower(title) LIKE ?', \"%#{search.downcase.strip}%\")\n      else\n        @category = Category.find_by('id = ?', category_id.to_i)\n        @category.posts.approved.where('lower(title) LIKE ?', \"%#{search.downcase.strip}%\")\n      end\n    end\nThis is my post_spec.rb file:\n    \n    require 'rails helper'\n    \n    RSpec.describe Post, type: :model do\n      let(:user) { create(:user) }\n      let(:category) { create(:category) }\n      let(:comments) { create(:comment) }\n      let(:likes) { create(:like) }\n\n      describe 'methods' do\n        describe 'search post by keyword or by category' do\n          let(:post_1) { create(:post, title: 'some example title') }\n          let(:post_2) { create(:post, title: 'another title') }\n\n          it 'return post with title like keyword' do\n            expect(described_class.search('example', category.id.to_s)).to contain_exactly(post_1)\n            expect(described_class.search('EXAMPLE', category.id.to_s)).to contain_exactly(post_1)\n            expect(described_class.search('title', category.id.to_s)).to contain_exactly(post_1, post_2)\n            expect(described_class.search('foo', category.id.to_s)).to be_empty\n          end\n        end\n      end\n    end\n\nI don't know why my actual collection is an empty array but not the post\n\n    1) Post methods search post by keyword or by category return post with title like keyword\n      Failure/Error: expect(described_class.search('example', category.id.to_s)).to contain_exactly(post_1)\n      expected collection contained:  [#&lt;Post id: 152, title: \"some example title\"]\n      actual collection contained:    []\n      the missing elements were:      [#&lt;Post id: 152, title: \"some example title\"]    \n\nAny help is appreciated cause this is really give me a headache.", "author_fullname": "t2_j0n0rs1", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "RSpec return contain empty array", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jc2e0z", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.78, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1602833353.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602847787.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Sorry if this is not suitable in here, please guide me to the correct sub cause I don&amp;#39;t know where to ask.&lt;/p&gt;\n\n&lt;p&gt;I have a search method in Post model:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;def self.search(search, category_id)\n  if search.strip.empty?\n    []\n  elsif category_id.empty?\n    Post.approved.where(&amp;#39;lower(title) LIKE ?&amp;#39;, &amp;quot;%#{search.downcase.strip}%&amp;quot;)\n  else\n    @category = Category.find_by(&amp;#39;id = ?&amp;#39;, category_id.to_i)\n    @category.posts.approved.where(&amp;#39;lower(title) LIKE ?&amp;#39;, &amp;quot;%#{search.downcase.strip}%&amp;quot;)\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This is my post_spec.rb file:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;require &amp;#39;rails helper&amp;#39;\n\nRSpec.describe Post, type: :model do\n  let(:user) { create(:user) }\n  let(:category) { create(:category) }\n  let(:comments) { create(:comment) }\n  let(:likes) { create(:like) }\n\n  describe &amp;#39;methods&amp;#39; do\n    describe &amp;#39;search post by keyword or by category&amp;#39; do\n      let(:post_1) { create(:post, title: &amp;#39;some example title&amp;#39;) }\n      let(:post_2) { create(:post, title: &amp;#39;another title&amp;#39;) }\n\n      it &amp;#39;return post with title like keyword&amp;#39; do\n        expect(described_class.search(&amp;#39;example&amp;#39;, category.id.to_s)).to contain_exactly(post_1)\n        expect(described_class.search(&amp;#39;EXAMPLE&amp;#39;, category.id.to_s)).to contain_exactly(post_1)\n        expect(described_class.search(&amp;#39;title&amp;#39;, category.id.to_s)).to contain_exactly(post_1, post_2)\n        expect(described_class.search(&amp;#39;foo&amp;#39;, category.id.to_s)).to be_empty\n      end\n    end\n  end\nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;I don&amp;#39;t know why my actual collection is an empty array but not the post&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;1) Post methods search post by keyword or by category return post with title like keyword\n  Failure/Error: expect(described_class.search(&amp;#39;example&amp;#39;, category.id.to_s)).to contain_exactly(post_1)\n  expected collection contained:  [#&amp;lt;Post id: 152, title: &amp;quot;some example title&amp;quot;]\n  actual collection contained:    []\n  the missing elements were:      [#&amp;lt;Post id: 152, title: &amp;quot;some example title&amp;quot;]    \n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Any help is appreciated cause this is really give me a headache.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jc2e0z", "is_robot_indexable": true, "report_reasons": null, "author": "alariwat", "discussion_type": null, "num_comments": 4, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jc2e0z/rspec_return_contain_empty_array/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jc2e0z/rspec_return_contain_empty_array/", "subreddit_subscribers": 67859, "created_utc": 1602818987.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_4lutb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Unexpected performance characteristics when exploring migrating a Rails app to Heroku", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_jbvdjs", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/Omghcvz7GDRDKtJuzannRdfjjK0uB4An_COfJljRLWg.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1602821785.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "bibwild.wordpress.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://bibwild.wordpress.com/2020/10/15/unexpected-performance-characteristics-when-exploring-migrating-a-rails-app-to-heroku/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/F6AGihc6sjMmnVLm-XWIe0jcP2vPZpBwjOqH2PhZX-c.jpg?auto=webp&amp;s=13353f39561ed11ccd79ec9880d3b36c19dcc81c", "width": 200, "height": 200}, "resolutions": [{"url": "https://external-preview.redd.it/F6AGihc6sjMmnVLm-XWIe0jcP2vPZpBwjOqH2PhZX-c.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0563ade4652d2408b81c0d4fd5f4ad1c26458007", "width": 108, "height": 108}], "variants": {}, "id": "sAYY86zgdT-GUuuQxQ55XhcVr4wy0uMIajd_UOBdg3Y"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jbvdjs", "is_robot_indexable": true, "report_reasons": null, "author": "jrochkind", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jbvdjs/unexpected_performance_characteristics_when/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://bibwild.wordpress.com/2020/10/15/unexpected-performance-characteristics-when-exploring-migrating-a-rails-app-to-heroku/", "subreddit_subscribers": 67859, "created_utc": 1602792985.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I was playing with ractors the other day, and I thought my experiments were cool enough to warrent a post...  \n\n\n```\npi@raspberrypi:~ $ /usr/local/bin/ruby yo.rb \nreminder, benchmark results are \"user, system, total, (real)\"\nwithout ractors\n 37.712969   0.016303  37.729272 ( 38.104503)\nwith ractors\n&lt;internal:ractor&gt;:38: warning: Ractor is experimental, and the behavior may change in future versions of Ruby! Also there are many implementation issues.\n 43.812031   4.104823  47.916854 ( 16.301058)\n```\n```\nrequire 'benchmark'\ndef do_the_work(x)\n  ### Perform meaningless work\n  bob = 0 \n  50_000.times do\n    bob += x\n  end\n  (1..x).map {\"bunny rabbits\"}.uniq \nend\ndef do_it_with_ractors\n  ractors = (1..8).map do\n    Ractor.new do\n      loop do\n        x = Ractor.recv\n        Ractor.yield(do_the_work(x))\n      end\n    end\n  end\n  a = Array.new\n  (1..4_000).each do |x|\n    ractors.sample.send(x)\n  end\n  (1..4_000).each do\n    a.push(Ractor.select(*ractors)[1])\n  end\nend\ndef do_it_without_ractors\n  a = Array.new\n  (1..4_000).each do |x|\n    a.push(do_the_work(x))\n  end\nend\nputs \"reminder, benchmark results are \\\"user, system, total, (real)\\\"\"\nputs \"without ractors\"\nputs(Benchmark.measure do \n  do_it_without_ractors\nend)\nputs \"with ractors\"\nputs(Benchmark.measure do\n  do_it_with_ractors\nend)\n```", "author_fullname": "t2_finks", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "My personal tests with ractors", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jc1loz", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 3, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602844582.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I was playing with ractors the other day, and I thought my experiments were cool enough to warrent a post...  &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\npi@raspberrypi:~ $ /usr/local/bin/ruby yo.rb \nreminder, benchmark results are &amp;quot;user, system, total, (real)&amp;quot;\nwithout ractors\n 37.712969   0.016303  37.729272 ( 38.104503)\nwith ractors\n&amp;lt;internal:ractor&amp;gt;:38: warning: Ractor is experimental, and the behavior may change in future versions of Ruby! Also there are many implementation issues.\n 43.812031   4.104823  47.916854 ( 16.301058)\n&lt;/code&gt;\n&lt;code&gt;\nrequire &amp;#39;benchmark&amp;#39;\ndef do_the_work(x)\n  ### Perform meaningless work\n  bob = 0 \n  50_000.times do\n    bob += x\n  end\n  (1..x).map {&amp;quot;bunny rabbits&amp;quot;}.uniq \nend\ndef do_it_with_ractors\n  ractors = (1..8).map do\n    Ractor.new do\n      loop do\n        x = Ractor.recv\n        Ractor.yield(do_the_work(x))\n      end\n    end\n  end\n  a = Array.new\n  (1..4_000).each do |x|\n    ractors.sample.send(x)\n  end\n  (1..4_000).each do\n    a.push(Ractor.select(*ractors)[1])\n  end\nend\ndef do_it_without_ractors\n  a = Array.new\n  (1..4_000).each do |x|\n    a.push(do_the_work(x))\n  end\nend\nputs &amp;quot;reminder, benchmark results are \\&amp;quot;user, system, total, (real)\\&amp;quot;&amp;quot;\nputs &amp;quot;without ractors&amp;quot;\nputs(Benchmark.measure do \n  do_it_without_ractors\nend)\nputs &amp;quot;with ractors&amp;quot;\nputs(Benchmark.measure do\n  do_it_with_ractors\nend)\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jc1loz", "is_robot_indexable": true, "report_reasons": null, "author": "pfharlockk", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jc1loz/my_personal_tests_with_ractors/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jc1loz/my_personal_tests_with_ractors/", "subreddit_subscribers": 67859, "created_utc": 1602815782.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Let's say there's a library written in C++ for which I want to create an SDK or gem in Ruby.\n\n&amp;#x200B;\n\nA C++ library provides 3 plathorm-specific pre-compiled libraries:\n\n\\* windows, \\*.dll\n\n\\* linux, \\*.so\n\n\\* macOS, \\*.dylib\n\n&amp;#x200B;\n\nI'll use FFI gem and refer to a particular type of a precompiled library, from my Ruby SDK/gem, depending on a plathorm of the end user.\n\n&amp;#x200B;\n\n(1) What's a conventional way to do it? Where, how is it done?\n\nNamely:\n\n     main_precompiled_lib = \n      if plathorm == Windows\n        \"./win-lib.dll\"\n      elseif plathorm == Linux\n        \"./linux-lib.so\"\n      elseif ....\n\n(2) How can I provide a way to the user to choose his plathorm?", "author_fullname": "t2_7xy83mm0", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to create a cross-plathorm SDK library?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jbl93u", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1602761304.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602787679.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Let&amp;#39;s say there&amp;#39;s a library written in C++ for which I want to create an SDK or gem in Ruby.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;A C++ library provides 3 plathorm-specific pre-compiled libraries:&lt;/p&gt;\n\n&lt;p&gt;* windows, *.dll&lt;/p&gt;\n\n&lt;p&gt;* linux, *.so&lt;/p&gt;\n\n&lt;p&gt;* macOS, *.dylib&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ll use FFI gem and refer to a particular type of a precompiled library, from my Ruby SDK/gem, depending on a plathorm of the end user.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;(1) What&amp;#39;s a conventional way to do it? Where, how is it done?&lt;/p&gt;\n\n&lt;p&gt;Namely:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; main_precompiled_lib = \n  if plathorm == Windows\n    &amp;quot;./win-lib.dll&amp;quot;\n  elseif plathorm == Linux\n    &amp;quot;./linux-lib.so&amp;quot;\n  elseif ....\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;(2) How can I provide a way to the user to choose his plathorm?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jbl93u", "is_robot_indexable": true, "report_reasons": null, "author": "zigra0018", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jbl93u/how_to_create_a_crossplathorm_sdk_library/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jbl93u/how_to_create_a_crossplathorm_sdk_library/", "subreddit_subscribers": 67859, "created_utc": 1602758879.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Been using rails and ruby for a while now I'm fairly competent but like to step my game up to the next level with the quality of apps I create. Has anyone found any or have any favourite resources for doing so?", "author_fullname": "t2_6pxvvmi3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Best intermediate - expert training tools and resources?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jbapcq", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Question", "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1602741921.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Been using rails and ruby for a while now I&amp;#39;m fairly competent but like to step my game up to the next level with the quality of apps I create. Has anyone found any or have any favourite resources for doing so?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "d3392e70-873c-11e9-af37-0eea3fce36a6", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jbapcq", "is_robot_indexable": true, "report_reasons": null, "author": "fiddle_licks", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jbapcq/best_intermediate_expert_training_tools_and/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jbapcq/best_intermediate_expert_training_tools_and/", "subreddit_subscribers": 67859, "created_utc": 1602713121.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_lc0kps6", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "OpenStruct in Ruby", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 78, "top_awarded_type": null, "hide_score": false, "name": "t3_jbig5f", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.57, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "https://a.thumbs.redditmedia.com/iBvwqdmqYFDudgVHeVAeN_ms4yz5UPb9ZHPcXDAf5b8.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1602772609.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/rubycademy/openstruct-in-ruby-ab6ba3aff9a4", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/yXP3m6yuaTGb4vz7CRMI72CNpKEvYe3_LcWmHOypiyk.jpg?auto=webp&amp;s=09125e1e3f6670f9455e252038b457d306186524", "width": 1200, "height": 675}, "resolutions": [{"url": "https://external-preview.redd.it/yXP3m6yuaTGb4vz7CRMI72CNpKEvYe3_LcWmHOypiyk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=bbf32b873acc62d411f42f10d848d50b130176d6", "width": 108, "height": 60}, {"url": "https://external-preview.redd.it/yXP3m6yuaTGb4vz7CRMI72CNpKEvYe3_LcWmHOypiyk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b6c63c6b857a92b1a4928841e9f1bf948cefcf72", "width": 216, "height": 121}, {"url": "https://external-preview.redd.it/yXP3m6yuaTGb4vz7CRMI72CNpKEvYe3_LcWmHOypiyk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=68391dcfcbe98b86b79ab0c7250a61b844640a3b", "width": 320, "height": 180}, {"url": "https://external-preview.redd.it/yXP3m6yuaTGb4vz7CRMI72CNpKEvYe3_LcWmHOypiyk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=31ebed481c51ec2b1732142dbe657c52fc5f1638", "width": 640, "height": 360}, {"url": "https://external-preview.redd.it/yXP3m6yuaTGb4vz7CRMI72CNpKEvYe3_LcWmHOypiyk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=41ff414e77c56248826a430c00fbba1c2b7300d6", "width": 960, "height": 540}, {"url": "https://external-preview.redd.it/yXP3m6yuaTGb4vz7CRMI72CNpKEvYe3_LcWmHOypiyk.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=d6919329794b3e625e6d7f75a4ce8f5f3c25f718", "width": 1080, "height": 607}], "variants": {}, "id": "UzWI9ssYefLzpcYGgfzLqwYPuE0zXm4ZixrZZmEpC5o"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jbig5f", "is_robot_indexable": true, "report_reasons": null, "author": "mehdifarsi", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jbig5f/openstruct_in_ruby/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/rubycademy/openstruct-in-ruby-ab6ba3aff9a4", "subreddit_subscribers": 67859, "created_utc": 1602743809.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_jbig5f", "before": null}}