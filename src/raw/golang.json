{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_dejyq", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "gopls 0.3.4 update release notes", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fln72e", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 27, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 27, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584700804.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fln72e", "is_robot_indexable": true, "report_reasons": null, "author": "olambdao", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fln72e/gopls_034_update_release_notes/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/golang/go/issues/33030#issuecomment-601280048", "subreddit_subscribers": 106402, "created_utc": 1584672004.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_dtivp", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go 1.14.1 and Go 1.13.9 are released", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_flhjz4", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 86, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 86, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584679843.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "groups.google.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "flhjz4", "is_robot_indexable": true, "report_reasons": null, "author": "smasher164", "discussion_type": null, "num_comments": 11, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/flhjz4/go_1141_and_go_1139_are_released/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://groups.google.com/d/msg/golang-announce/Ix2U_8WWmXo/a2nJkNW5AAAJ", "subreddit_subscribers": 106402, "created_utc": 1584651043.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi !\n\n  \nI am trying to set up few basic tests on my Buffalo API project, but I can't make it works with Cookies..  \nI have a Middleware checking Cookie content, and I want to make sure it is properly tested\n\n```go\nconst Cookie string  = \"somename=somevalue\"\n\nfunc (as *ActionSuite) Test_APIAuthorizer_Success() {\n\treq := as.JSON(\"/api/v1/foo/bar\")\n\treq.Headers[\"Cookie\"] = Cookie\n\tres := req.Get()\n\tas.Equal(200, res.Code)\n}\n```\n\nAny clue ?", "author_fullname": "t2_3wodalco", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Buffalo Tests with Cookie", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fls9n1", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1584725998.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi !&lt;/p&gt;\n\n&lt;p&gt;I am trying to set up few basic tests on my Buffalo API project, but I can&amp;#39;t make it works with Cookies..&lt;br/&gt;\nI have a Middleware checking Cookie content, and I want to make sure it is properly tested&lt;/p&gt;\n\n&lt;p&gt;```go\nconst Cookie string  = &amp;quot;somename=somevalue&amp;quot;&lt;/p&gt;\n\n&lt;p&gt;func (as *ActionSuite) Test_APIAuthorizer_Success() {\n    req := as.JSON(&amp;quot;/api/v1/foo/bar&amp;quot;)\n    req.Headers[&amp;quot;Cookie&amp;quot;] = Cookie\n    res := req.Get()\n    as.Equal(200, res.Code)\n}\n```&lt;/p&gt;\n\n&lt;p&gt;Any clue ?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fls9n1", "is_robot_indexable": true, "report_reasons": null, "author": "PGFplots", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fls9n1/buffalo_tests_with_cookie/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/fls9n1/buffalo_tests_with_cookie/", "subreddit_subscribers": 106402, "created_utc": 1584697198.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ql7hq8f", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Illustrated Tales of Go Runtime Scheduler.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_flek7p", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 45, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 45, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584669810.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "flek7p", "is_robot_indexable": true, "report_reasons": null, "author": "ankur-anand", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/flek7p/illustrated_tales_of_go_runtime_scheduler/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@ankur_anand/illustrated-tales-of-go-runtime-scheduler-74809ef6d19b", "subreddit_subscribers": 106402, "created_utc": 1584641010.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_3se84uiy", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Building and Testing a REST API in Go with Gorilla Mux", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_flb4bo", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 36, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 36, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584657748.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "semaphoreci.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "flb4bo", "is_robot_indexable": true, "report_reasons": null, "author": "tomasfern", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/flb4bo/building_and_testing_a_rest_api_in_go_with/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://semaphoreci.com/community/tutorials/building-and-testing-a-rest-api-in-go-with-gorilla-mux-and-postgresql", "subreddit_subscribers": 106402, "created_utc": 1584628948.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am looking for a logger similar to logrus but that lets me set/remove fields that persist and pass the logger instance around in my program. Also it needs to be concurrency safe. I tried building [https://github.com/nitishm/logger](https://github.com/nitishm/logger) but I am running into some significant race conditions.", "author_fullname": "t2_8zmudl9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Recommendation] Does golang have any third-party stateful, structured logging packages", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_flhx95", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1584681077.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am looking for a logger similar to logrus but that lets me set/remove fields that persist and pass the logger instance around in my program. Also it needs to be concurrency safe. I tried building &lt;a href=\"https://github.com/nitishm/logger\"&gt;https://github.com/nitishm/logger&lt;/a&gt; but I am running into some significant race conditions.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "flhx95", "is_robot_indexable": true, "report_reasons": null, "author": "go4it_gophet", "discussion_type": null, "num_comments": 20, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/flhx95/recommendation_does_golang_have_any_thirdparty/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/flhx95/recommendation_does_golang_have_any_thirdparty/", "subreddit_subscribers": 106402, "created_utc": 1584652277.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4xaj5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Diago, a visualization tool for profiles and heap snapshots generated with pprof", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fl8gbv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 33, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 33, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584645831.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "remy.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fl8gbv", "is_robot_indexable": true, "report_reasons": null, "author": "remeh", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fl8gbv/diago_a_visualization_tool_for_profiles_and_heap/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://remy.io/blog/how-to-use-diago-to-diagnose-cpu-and-memory-usage-in-go-programs/", "subreddit_subscribers": 106402, "created_utc": 1584617031.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_1410mz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Gophercon 2020 Update", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_flaz8s", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 15, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 15, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1584657199.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.gopheracademy.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "flaz8s", "is_robot_indexable": true, "report_reasons": null, "author": "brianketelsen", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/flaz8s/gophercon_2020_update/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://blog.gopheracademy.com/gophercon-2020-news/", "subreddit_subscribers": 106402, "created_utc": 1584628399.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Has anyone come across any Linux Window managers written in Go?\n\nA tiling window manger written in Go would be cool. Like i3 etc..", "author_fullname": "t2_10fceap3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Linux Window Managers in Go?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_fl9lxg", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 20, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1584651520.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Has anyone come across any Linux Window managers written in Go?&lt;/p&gt;\n\n&lt;p&gt;A tiling window manger written in Go would be cool. Like i3 etc..&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "fl9lxg", "is_robot_indexable": true, "report_reasons": null, "author": "ccsmall", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/fl9lxg/linux_window_managers_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/fl9lxg/linux_window_managers_in_go/", "subreddit_subscribers": 106402, "created_utc": 1584622720.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I've written a library to help initializing heaps from arbitrary slices without having to implement all the methods required by `heap.Interface`.\n\nThe repo on Github: [https://github.com/suzaku/heaptools](https://github.com/suzaku/heaptools)\n\nSince `reflect` is used, it's slower than when you implement `heap.Interface` manually, the benchmark result is pasted below:\n\n```\nBenchmarkNewSliceHeap/init-12            4749110               247 ns/op\nBenchmarkNewSliceHeap/init-12            4773699               246 ns/op\nBenchmarkNewSliceHeap/init-12            4856407               248 ns/op\nBenchmarkNewSliceHeap/init-12            4832068               245 ns/op\nBenchmarkNewSliceHeap/init-12            4827453               248 ns/op\nBenchmarkNewSliceHeap/push-12            8304612               140 ns/op\nBenchmarkNewSliceHeap/push-12            8990208               132 ns/op\nBenchmarkNewSliceHeap/push-12            9116899               133 ns/op\nBenchmarkNewSliceHeap/push-12            8923878               135 ns/op\nBenchmarkNewSliceHeap/push-12            9216303               131 ns/op\nBenchmarkNewSliceHeap/pop-12             3839652               350 ns/op\nBenchmarkNewSliceHeap/pop-12             3912520               339 ns/op\nBenchmarkNewSliceHeap/pop-12             3878684               342 ns/op\nBenchmarkNewSliceHeap/pop-12             3833668               357 ns/op\nBenchmarkNewSliceHeap/pop-12             3407191               350 ns/op\nBenchmarkExplicitImplementation/init-12                 18090414                67.3 ns/op\nBenchmarkExplicitImplementation/init-12                 15764011                70.1 ns/op\nBenchmarkExplicitImplementation/init-12                 17032052                67.0 ns/op\nBenchmarkExplicitImplementation/init-12                 18332876                64.7 ns/op\nBenchmarkExplicitImplementation/init-12                 18457176                63.7 ns/op\nBenchmarkExplicitImplementation/push-12                 41596758                48.5 ns/op\nBenchmarkExplicitImplementation/push-12                 43841671                36.6 ns/op\nBenchmarkExplicitImplementation/push-12                 44319072                35.5 ns/op\nBenchmarkExplicitImplementation/push-12                 45409448                33.1 ns/op\nBenchmarkExplicitImplementation/push-12                 39200691                27.2 ns/op\nBenchmarkExplicitImplementation/pop-12                   6022366               236 ns/op\nBenchmarkExplicitImplementation/pop-12                   5759280               243 ns/op\nBenchmarkExplicitImplementation/pop-12                   5334996               230 ns/op\nBenchmarkExplicitImplementation/pop-12                   6122968               229 ns/op\nBenchmarkExplicitImplementation/pop-12                   6127668               232 ns/op\n```", "author_fullname": "t2_6vyv7", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A library for initializing heaps from arbitrary slices", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_flkiw3", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1584690339.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve written a library to help initializing heaps from arbitrary slices without having to implement all the methods required by &lt;code&gt;heap.Interface&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;The repo on Github: &lt;a href=\"https://github.com/suzaku/heaptools\"&gt;https://github.com/suzaku/heaptools&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Since &lt;code&gt;reflect&lt;/code&gt; is used, it&amp;#39;s slower than when you implement &lt;code&gt;heap.Interface&lt;/code&gt; manually, the benchmark result is pasted below:&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;\nBenchmarkNewSliceHeap/init-12            4749110               247 ns/op\nBenchmarkNewSliceHeap/init-12            4773699               246 ns/op\nBenchmarkNewSliceHeap/init-12            4856407               248 ns/op\nBenchmarkNewSliceHeap/init-12            4832068               245 ns/op\nBenchmarkNewSliceHeap/init-12            4827453               248 ns/op\nBenchmarkNewSliceHeap/push-12            8304612               140 ns/op\nBenchmarkNewSliceHeap/push-12            8990208               132 ns/op\nBenchmarkNewSliceHeap/push-12            9116899               133 ns/op\nBenchmarkNewSliceHeap/push-12            8923878               135 ns/op\nBenchmarkNewSliceHeap/push-12            9216303               131 ns/op\nBenchmarkNewSliceHeap/pop-12             3839652               350 ns/op\nBenchmarkNewSliceHeap/pop-12             3912520               339 ns/op\nBenchmarkNewSliceHeap/pop-12             3878684               342 ns/op\nBenchmarkNewSliceHeap/pop-12             3833668               357 ns/op\nBenchmarkNewSliceHeap/pop-12             3407191               350 ns/op\nBenchmarkExplicitImplementation/init-12                 18090414                67.3 ns/op\nBenchmarkExplicitImplementation/init-12                 15764011                70.1 ns/op\nBenchmarkExplicitImplementation/init-12                 17032052                67.0 ns/op\nBenchmarkExplicitImplementation/init-12                 18332876                64.7 ns/op\nBenchmarkExplicitImplementation/init-12                 18457176                63.7 ns/op\nBenchmarkExplicitImplementation/push-12                 41596758                48.5 ns/op\nBenchmarkExplicitImplementation/push-12                 43841671                36.6 ns/op\nBenchmarkExplicitImplementation/push-12                 44319072                35.5 ns/op\nBenchmarkExplicitImplementation/push-12                 45409448                33.1 ns/op\nBenchmarkExplicitImplementation/push-12                 39200691                27.2 ns/op\nBenchmarkExplicitImplementation/pop-12                   6022366               236 ns/op\nBenchmarkExplicitImplementation/pop-12                   5759280               243 ns/op\nBenchmarkExplicitImplementation/pop-12                   5334996               230 ns/op\nBenchmarkExplicitImplementation/pop-12                   6122968               229 ns/op\nBenchmarkExplicitImplementation/pop-12                   6127668               232 ns/op\n&lt;/code&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "flkiw3", "is_robot_indexable": true, "report_reasons": null, "author": "satorulogic", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/flkiw3/a_library_for_initializing_heaps_from_arbitrary/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/flkiw3/a_library_for_initializing_heaps_from_arbitrary/", "subreddit_subscribers": 106402, "created_utc": 1584661539.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_flkiw3", "before": null}}