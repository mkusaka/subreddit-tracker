{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once. If you want your code reviewed or review other's code, there's a [codereview stackexchange](https://codereview.stackexchange.com/questions/tagged/rust), too. If you need to test your code, maybe [the Rust playground](https://play.rust-lang.org) is for you.\n\nHere are some other venues where help may be found:\n\n[/r/learnrust](https://www.reddit.com/r/learnrust) is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/).\n\nThe official Rust Programming Language Discord: [https://discord.gg/rust-lang](https://discord.gg/rust-lang)\n\nThe unofficial Rust community Discord: [https://bit.ly/rust-community](https://bit.ly/rust-community)\n\nAlso check out [last week's thread](https://reddit.com/r/rust/comments/g9a5sn/hey_rustaceans_got_an_easy_question_ask_here/) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nAlso if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hey Rustaceans! Got an easy question? Ask here (19/2020)!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_gd6g9w", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": "", "subreddit_type": "public", "ups": 25, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 25, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1588603028.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven&amp;#39;t been written yet.&lt;/p&gt;\n\n&lt;p&gt;If you have a &lt;a href=\"http://stackoverflow.com/\"&gt;StackOverflow&lt;/a&gt; account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it &lt;a href=\"http://stackoverflow.com/questions/tagged/rust\"&gt;the &amp;quot;Rust&amp;quot; tag&lt;/a&gt; for maximum visibility). Note that this site is very interested in question quality. I&amp;#39;ve been asked to read a RFC I authored once. If you want your code reviewed or review other&amp;#39;s code, there&amp;#39;s a &lt;a href=\"https://codereview.stackexchange.com/questions/tagged/rust\"&gt;codereview stackexchange&lt;/a&gt;, too. If you need to test your code, maybe &lt;a href=\"https://play.rust-lang.org\"&gt;the Rust playground&lt;/a&gt; is for you.&lt;/p&gt;\n\n&lt;p&gt;Here are some other venues where help may be found:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/learnrust\"&gt;/r/learnrust&lt;/a&gt; is a subreddit to share your questions and epiphanies learning Rust programming.&lt;/p&gt;\n\n&lt;p&gt;The official Rust user forums: &lt;a href=\"https://users.rust-lang.org/\"&gt;https://users.rust-lang.org/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The official Rust Programming Language Discord: &lt;a href=\"https://discord.gg/rust-lang\"&gt;https://discord.gg/rust-lang&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The unofficial Rust community Discord: &lt;a href=\"https://bit.ly/rust-community\"&gt;https://bit.ly/rust-community&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Also check out &lt;a href=\"https://reddit.com/r/rust/comments/g9a5sn/hey_rustaceans_got_an_easy_question_ask_here/\"&gt;last week&amp;#39;s thread&lt;/a&gt; with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.&lt;/p&gt;\n\n&lt;p&gt;Also if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "gd6g9w", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 213, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/gd6g9w/hey_rustaceans_got_an_easy_question_ask_here/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/gd6g9w/hey_rustaceans_got_an_easy_question_ask_here/", "subreddit_subscribers": 99154, "created_utc": 1588574228.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_eki22", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "This Week in Rust 337", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_geagy0", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": "", "subreddit_type": "public", "ups": 172, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 172, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1588756566.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "this-week-in-rust.org", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "twir", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "geagy0", "is_robot_indexable": true, "report_reasons": null, "author": "seino_chan", "discussion_type": null, "num_comments": 40, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/geagy0/this_week_in_rust_337/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://this-week-in-rust.org/blog/2020/05/05/this-week-in-rust-337/", "subreddit_subscribers": 99154, "created_utc": 1588727766.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Rust is on my list of things to try and I have read mostly only good things about it. I want to know about downsides also, before trying. Since I have heard learning curve will be steep.\n\ncompared to other languages like Go, I don't know how much adoption rust has. But apparently languages like go and swift get quite a lot of criticism. in fact there is a [github repo](https://github.com/ksimka/go-is-not-good) to collect criticisms of Go.\n\nAre there well written (read: not emotional rant) criticisms of rust language? Collecting them might be a benefit to rust community as well.", "author_fullname": "t2_42cz2xr8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Criticisms of rust", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggyo51", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 48, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 48, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589133090.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Rust is on my list of things to try and I have read mostly only good things about it. I want to know about downsides also, before trying. Since I have heard learning curve will be steep.&lt;/p&gt;\n\n&lt;p&gt;compared to other languages like Go, I don&amp;#39;t know how much adoption rust has. But apparently languages like go and swift get quite a lot of criticism. in fact there is a &lt;a href=\"https://github.com/ksimka/go-is-not-good\"&gt;github repo&lt;/a&gt; to collect criticisms of Go.&lt;/p&gt;\n\n&lt;p&gt;Are there well written (read: not emotional rant) criticisms of rust language? Collecting them might be a benefit to rust community as well.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggyo51", "is_robot_indexable": true, "report_reasons": null, "author": "linus_stallman", "discussion_type": null, "num_comments": 52, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/ggyo51/criticisms_of_rust/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/ggyo51/criticisms_of_rust/", "subreddit_subscribers": 99154, "created_utc": 1589104290.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_2gc5o5vy", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Clivern/Buzzard - All rust features in one file", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggrwjt", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.93, "author_flair_background_color": null, "subreddit_type": "public", "ups": 80, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 80, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589101828.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggrwjt", "is_robot_indexable": true, "report_reasons": null, "author": "Clivern", "discussion_type": null, "num_comments": 24, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/ggrwjt/clivernbuzzard_all_rust_features_in_one_file/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/Clivern/Buzzard", "subreddit_subscribers": 99154, "created_utc": 1589073028.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "This is valid Rust syntax:\n```rust\nlet x;\nif condition {\n    x = 5;\n} else {\n    x = 1;\n}\n```\n\nHowever, I find that every time I would need to do this, I just bind the `let` to the `if else` directly: \n\n```rust\nlet x = if condition {\n    5\n} else {\n    1\n};\n```\n\nIn my opinion, this is both more succinct and more idiomatic. It also leads me to ask the question: are there other Rust features that are allowed but are not used in favor of something better?", "author_fullname": "t2_bsf7e", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Do you actually use variable declaration without initialization.?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggv2i8", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 38, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 38, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589114781.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;This is valid Rust syntax:\n&lt;code&gt;rust\nlet x;\nif condition {\n    x = 5;\n} else {\n    x = 1;\n}\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;However, I find that every time I would need to do this, I just bind the &lt;code&gt;let&lt;/code&gt; to the &lt;code&gt;if else&lt;/code&gt; directly: &lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;rust\nlet x = if condition {\n    5\n} else {\n    1\n};\n&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;In my opinion, this is both more succinct and more idiomatic. It also leads me to ask the question: are there other Rust features that are allowed but are not used in favor of something better?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggv2i8", "is_robot_indexable": true, "report_reasons": null, "author": "kaikalii", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/ggv2i8/do_you_actually_use_variable_declaration_without/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/ggv2i8/do_you_actually_use_variable_declaration_without/", "subreddit_subscribers": 99154, "created_utc": 1589085981.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "In an effort to use Rayon more effectively I'm switching over some code to a more functional style, and I noticed an weird regression in performance. With some effort I narrowed it down to the unzip function in the standard library. I created the following benchmark to see the severity of the performance difference:  \n    #![feature(test)]\n    \n    extern crate test;\n    use test::{Bencher, black_box};\n    \n    fn run_functional(l: &amp;Vec&lt;(usize, usize)&gt;) -&gt; (Vec&lt;usize&gt;, Vec&lt;usize&gt;) {\n        l.iter().copied().unzip()\n    }\n    \n    fn run_imperative(l: &amp;Vec&lt;(usize, usize)&gt;) -&gt; (Vec&lt;usize&gt;, Vec&lt;usize&gt;) {\n        let len = l.len();\n        let (mut result1, mut result2) = (Vec::with_capacity(len), Vec::with_capacity(len));\n        for item in l.iter().copied() {\n            result1.push(item.0);\n            result2.push(item.1);\n        }\n        (result1, result2)\n    }\n    \n    #[bench]\n    fn bench_functional(b: &amp;mut Bencher) {\n        let list = black_box(vec![(1, 2); 256]);\n        b.iter(|| run_functional(&amp;list));\n    }\n    \n    #[bench]\n    fn bench_imperative(b: &amp;mut Bencher) {\n        let list = black_box(vec![(1, 2); 256]);\n        b.iter(|| run_imperative(&amp;list));\n    }\nThis yields the following results:\n\n    test bench_functional ... bench:       1,440 ns/iter (+/- 66)\n    test bench_imperative ... bench:         443 ns/iter (+/- 43)\n\nSo I dove into the standard library code, and it seems that there are two reasons why the imperative method is so much faster. Firstly, it uses `push` instead of `extend`, which makes a significant difference. The rest of the difference is accounted for by the use of `with_capacity` instead of `new` to create the new vector. This is strange to me, because the `size_hint` function of this iterator returns 256, so Rust knows the size of the resulting vectors it will create. Why is the `with_capacity` function not used and why is `vec.push(a)` so much faster than `vec.extend(Some(a))`?", "author_fullname": "t2_kcqbw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Unzip function slow", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggy0fa", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 12, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 12, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589129625.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;In an effort to use Rayon more effectively I&amp;#39;m switching over some code to a more functional style, and I noticed an weird regression in performance. With some effort I narrowed it down to the unzip function in the standard library. I created the following benchmark to see the severity of the performance difference:&lt;br/&gt;\n    #![feature(test)]&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;extern crate test;\nuse test::{Bencher, black_box};\n\nfn run_functional(l: &amp;amp;Vec&amp;lt;(usize, usize)&amp;gt;) -&amp;gt; (Vec&amp;lt;usize&amp;gt;, Vec&amp;lt;usize&amp;gt;) {\n    l.iter().copied().unzip()\n}\n\nfn run_imperative(l: &amp;amp;Vec&amp;lt;(usize, usize)&amp;gt;) -&amp;gt; (Vec&amp;lt;usize&amp;gt;, Vec&amp;lt;usize&amp;gt;) {\n    let len = l.len();\n    let (mut result1, mut result2) = (Vec::with_capacity(len), Vec::with_capacity(len));\n    for item in l.iter().copied() {\n        result1.push(item.0);\n        result2.push(item.1);\n    }\n    (result1, result2)\n}\n\n#[bench]\nfn bench_functional(b: &amp;amp;mut Bencher) {\n    let list = black_box(vec![(1, 2); 256]);\n    b.iter(|| run_functional(&amp;amp;list));\n}\n\n#[bench]\nfn bench_imperative(b: &amp;amp;mut Bencher) {\n    let list = black_box(vec![(1, 2); 256]);\n    b.iter(|| run_imperative(&amp;amp;list));\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;This yields the following results:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;test bench_functional ... bench:       1,440 ns/iter (+/- 66)\ntest bench_imperative ... bench:         443 ns/iter (+/- 43)\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;So I dove into the standard library code, and it seems that there are two reasons why the imperative method is so much faster. Firstly, it uses &lt;code&gt;push&lt;/code&gt; instead of &lt;code&gt;extend&lt;/code&gt;, which makes a significant difference. The rest of the difference is accounted for by the use of &lt;code&gt;with_capacity&lt;/code&gt; instead of &lt;code&gt;new&lt;/code&gt; to create the new vector. This is strange to me, because the &lt;code&gt;size_hint&lt;/code&gt; function of this iterator returns 256, so Rust knows the size of the resulting vectors it will create. Why is the &lt;code&gt;with_capacity&lt;/code&gt; function not used and why is &lt;code&gt;vec.push(a)&lt;/code&gt; so much faster than &lt;code&gt;vec.extend(Some(a))&lt;/code&gt;?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggy0fa", "is_robot_indexable": true, "report_reasons": null, "author": "ThouCheese", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/ggy0fa/unzip_function_slow/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/ggy0fa/unzip_function_slow/", "subreddit_subscribers": 99154, "created_utc": 1589100825.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hello, I'm excited to share with all of you the [latest Yew release](https://github.com/yewstack/yew/releases/tag/0.16.0) :)\n\n*(If you're not familiar, Yew is a framework for building client web apps with Rust &amp; WebAssembly!)*\n\nIt's been awhile since I've shared an update but I'll try to be brief...\n\n**Changes since v0.13**\n\n* Split off `stdweb` support into a convenient alias crate called `yew-stdweb` which allows the main yew crate to default to using `web-sys`.\n* Keys can be now be assigned to virtual dom nodes to improve render performance for list-type content.\n* Renamed the `mounted(..)` lifecycle callback method to `rendered(..)` which will be called after each time Yew renders your `Component` to the screen.\n* Many documentation and project template improvements and updated instructions on how to boot up the many example projects.\n\nRead more: [https://github.com/yewstack/yew/releases](https://github.com/yewstack/yew/releases)\n\n**Other News**\n\n* We moved from Gitter to [Discord](https://discord.gg/VQck8X4) (yay reliable notifications!)\n* We [summarized](https://github.com/yewstack/yew/wiki/Dev-Survey-%5BSpring-2020%5D) our [recent dev survey](https://www.reddit.com/r/rust/comments/g43ld4/yew_developer_survey/) and used the results to update our [Roadmap](https://yew.rs/docs/more/roadmap). Thank you to the over 100 devs who took the time to share their thoughts and experiences \ud83d\ude47\u200d\u2642\ufe0f\n* We kickstarted a small bounty program for contributions to Yew on [Issuehunt](https://issuehunt.io/r/yewstack/yew/) (expect to see more funded issues soon!)\n* Hooks API / Functional Component development is well under development and is making great progress. Follow along [here](https://github.com/yewstack/yew/projects/3)\n* Server Side Rendering is in the planning phase and progress can be tracked [here](https://github.com/yewstack/yew/projects/5). Looking for help on this, please reach out if interested!\n\nLastly, I want to give a huge thanks to the Yew community which makes this all possible, we had 13 first-time contributors submit bug fixes and features and many others who helped improve docs and maintain examples since the last announcement!", "author_fullname": "t2_4b40zwki", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Announcing the v0.16 release of Yew!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggi6ix", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": null, "subreddit_type": "public", "ups": 219, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": "4c3a495a-89df-11e3-a482-12313d27e9a3", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 219, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589069643.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I&amp;#39;m excited to share with all of you the &lt;a href=\"https://github.com/yewstack/yew/releases/tag/0.16.0\"&gt;latest Yew release&lt;/a&gt; :)&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;(If you&amp;#39;re not familiar, Yew is a framework for building client web apps with Rust &amp;amp; WebAssembly!)&lt;/em&gt;&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s been awhile since I&amp;#39;ve shared an update but I&amp;#39;ll try to be brief...&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Changes since v0.13&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Split off &lt;code&gt;stdweb&lt;/code&gt; support into a convenient alias crate called &lt;code&gt;yew-stdweb&lt;/code&gt; which allows the main yew crate to default to using &lt;code&gt;web-sys&lt;/code&gt;.&lt;/li&gt;\n&lt;li&gt;Keys can be now be assigned to virtual dom nodes to improve render performance for list-type content.&lt;/li&gt;\n&lt;li&gt;Renamed the &lt;code&gt;mounted(..)&lt;/code&gt; lifecycle callback method to &lt;code&gt;rendered(..)&lt;/code&gt; which will be called after each time Yew renders your &lt;code&gt;Component&lt;/code&gt; to the screen.&lt;/li&gt;\n&lt;li&gt;Many documentation and project template improvements and updated instructions on how to boot up the many example projects.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Read more: &lt;a href=\"https://github.com/yewstack/yew/releases\"&gt;https://github.com/yewstack/yew/releases&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Other News&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;We moved from Gitter to &lt;a href=\"https://discord.gg/VQck8X4\"&gt;Discord&lt;/a&gt; (yay reliable notifications!)&lt;/li&gt;\n&lt;li&gt;We &lt;a href=\"https://github.com/yewstack/yew/wiki/Dev-Survey-%5BSpring-2020%5D\"&gt;summarized&lt;/a&gt; our &lt;a href=\"https://www.reddit.com/r/rust/comments/g43ld4/yew_developer_survey/\"&gt;recent dev survey&lt;/a&gt; and used the results to update our &lt;a href=\"https://yew.rs/docs/more/roadmap\"&gt;Roadmap&lt;/a&gt;. Thank you to the over 100 devs who took the time to share their thoughts and experiences \ud83d\ude47\u200d\u2642\ufe0f&lt;/li&gt;\n&lt;li&gt;We kickstarted a small bounty program for contributions to Yew on &lt;a href=\"https://issuehunt.io/r/yewstack/yew/\"&gt;Issuehunt&lt;/a&gt; (expect to see more funded issues soon!)&lt;/li&gt;\n&lt;li&gt;Hooks API / Functional Component development is well under development and is making great progress. Follow along &lt;a href=\"https://github.com/yewstack/yew/projects/3\"&gt;here&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Server Side Rendering is in the planning phase and progress can be tracked &lt;a href=\"https://github.com/yewstack/yew/projects/5\"&gt;here&lt;/a&gt;. Looking for help on this, please reach out if interested!&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Lastly, I want to give a huge thanks to the Yew community which makes this all possible, we had 13 first-time contributors submit bug fixes and features and many others who helped improve docs and maintain examples since the last announcement!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "yew", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggi6ix", "is_robot_indexable": true, "report_reasons": null, "author": "jstrry", "discussion_type": null, "num_comments": 34, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/ggi6ix/announcing_the_v016_release_of_yew/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/ggi6ix/announcing_the_v016_release_of_yew/", "subreddit_subscribers": 99154, "created_utc": 1589040843.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_pm8lw", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Blocking - crate to wrap blocking calls for async IO", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggongd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 60, "total_awards_received": 0, "media_embed": {"content": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;Published a crate for isolating blocking I/O in async programs! There is just one type, simply named Blocking&amp;lt;T&amp;gt;.&lt;br&gt;&lt;br&gt;This type can convert blocking I/O types like File, Stdin, and Stdout into async I/O types.&lt;a href=\"https://t.co/UMO6sPbTRk\"&gt;https://t.co/UMO6sPbTRk&lt;/a&gt; &lt;a href=\"https://t.co/OUHGkIsdRE\"&gt;pic.twitter.com/OUHGkIsdRE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Stjepan Glavina (@stjepang) &lt;a href=\"https://twitter.com/stjepang/status/1259201346642853892?ref_src=twsrc%5Etfw\"&gt;May 9, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "width": 350, "scrolling": false, "height": 408}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "twitter.com", "oembed": {"provider_url": "https://twitter.com", "version": "1.0", "url": "https://twitter.com/stjepang/status/1259201346642853892", "author_name": "Stjepan Glavina", "height": 408, "width": 350, "html": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;Published a crate for isolating blocking I/O in async programs! There is just one type, simply named Blocking&amp;lt;T&amp;gt;.&lt;br&gt;&lt;br&gt;This type can convert blocking I/O types like File, Stdin, and Stdout into async I/O types.&lt;a href=\"https://t.co/UMO6sPbTRk\"&gt;https://t.co/UMO6sPbTRk&lt;/a&gt; &lt;a href=\"https://t.co/OUHGkIsdRE\"&gt;pic.twitter.com/OUHGkIsdRE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Stjepan Glavina (@stjepang) &lt;a href=\"https://twitter.com/stjepang/status/1259201346642853892?ref_src=twsrc%5Etfw\"&gt;May 9, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "author_url": "https://twitter.com/stjepang", "provider_name": "Twitter", "cache_age": 3153600000, "type": "rich"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;Published a crate for isolating blocking I/O in async programs! There is just one type, simply named Blocking&amp;lt;T&amp;gt;.&lt;br&gt;&lt;br&gt;This type can convert blocking I/O types like File, Stdin, and Stdout into async I/O types.&lt;a href=\"https://t.co/UMO6sPbTRk\"&gt;https://t.co/UMO6sPbTRk&lt;/a&gt; &lt;a href=\"https://t.co/OUHGkIsdRE\"&gt;pic.twitter.com/OUHGkIsdRE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Stjepan Glavina (@stjepang) &lt;a href=\"https://twitter.com/stjepang/status/1259201346642853892?ref_src=twsrc%5Etfw\"&gt;May 9, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "width": 350, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/ggongd", "height": 408}, "link_flair_text": null, "can_mod_post": false, "score": 60, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589090320.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "twitter.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggongd", "is_robot_indexable": true, "report_reasons": null, "author": "mbStavola", "discussion_type": null, "num_comments": 7, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/ggongd/blocking_crate_to_wrap_blocking_calls_for_async_io/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://twitter.com/stjepang/status/1259201346642853892", "subreddit_subscribers": 99154, "created_utc": 1589061520.0, "num_crossposts": 0, "media": {"type": "twitter.com", "oembed": {"provider_url": "https://twitter.com", "version": "1.0", "url": "https://twitter.com/stjepang/status/1259201346642853892", "author_name": "Stjepan Glavina", "height": 408, "width": 350, "html": "&lt;blockquote class=\"twitter-video\"&gt;&lt;p lang=\"en\" dir=\"ltr\"&gt;Published a crate for isolating blocking I/O in async programs! There is just one type, simply named Blocking&amp;lt;T&amp;gt;.&lt;br&gt;&lt;br&gt;This type can convert blocking I/O types like File, Stdin, and Stdout into async I/O types.&lt;a href=\"https://t.co/UMO6sPbTRk\"&gt;https://t.co/UMO6sPbTRk&lt;/a&gt; &lt;a href=\"https://t.co/OUHGkIsdRE\"&gt;pic.twitter.com/OUHGkIsdRE&lt;/a&gt;&lt;/p&gt;&amp;mdash; Stjepan Glavina (@stjepang) &lt;a href=\"https://twitter.com/stjepang/status/1259201346642853892?ref_src=twsrc%5Etfw\"&gt;May 9, 2020&lt;/a&gt;&lt;/blockquote&gt;\n&lt;script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"&gt;&lt;/script&gt;\n", "author_url": "https://twitter.com/stjepang", "provider_name": "Twitter", "cache_age": 3153600000, "type": "rich"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_j012c", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Writing Python inside your Rust code \u2014 Part 3", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggqzqr", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 29, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 29, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589098530.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.m-ou.se", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggqzqr", "is_robot_indexable": true, "report_reasons": null, "author": "pnobel", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/ggqzqr/writing_python_inside_your_rust_code_part_3/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://blog.m-ou.se/writing-python-inside-rust-3/", "subreddit_subscribers": 99154, "created_utc": 1589069730.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_ldb39", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A practical introduction to async programming in Rust", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggdw7p", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.99, "author_flair_background_color": null, "subreddit_type": "public", "ups": 224, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 224, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1589052611.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "jamesmcm.github.io", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggdw7p", "is_robot_indexable": true, "report_reasons": null, "author": "nivenkos", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/ggdw7p/a_practical_introduction_to_async_programming_in/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://jamesmcm.github.io/blog/2020/05/06/a-practical-introduction-to-async-programming-in-rust/#en", "subreddit_subscribers": 99154, "created_utc": 1589023811.0, "num_crossposts": 2, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hey Rustaceans,  \nI publish a new version of doh-client. The new big feature is:\n\n* Code was refactored to increase the readability\n* DNS packets are parser by the [dns-message-parser](https://crates.io/crates/dns-message-parser) library to check if the packets are correct\n* If control-cache is not present in the HTTP header then smallest TTL in the answer section is used to cache the DNS packet\n* Socks5 proxy can be used to connect to the server(--socks5)\n\n\n[Here is the Github link](https://github.com/LinkTed/doh-client)  \n\nThank you for your attention.", "author_fullname": "t2_bl1zib9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "New version of doh-client (2.2.0)", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggzqfi", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589138411.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey Rustaceans,&lt;br/&gt;\nI publish a new version of doh-client. The new big feature is:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Code was refactored to increase the readability&lt;/li&gt;\n&lt;li&gt;DNS packets are parser by the &lt;a href=\"https://crates.io/crates/dns-message-parser\"&gt;dns-message-parser&lt;/a&gt; library to check if the packets are correct&lt;/li&gt;\n&lt;li&gt;If control-cache is not present in the HTTP header then smallest TTL in the answer section is used to cache the DNS packet&lt;/li&gt;\n&lt;li&gt;Socks5 proxy can be used to connect to the server(--socks5)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/LinkTed/doh-client\"&gt;Here is the Github link&lt;/a&gt;  &lt;/p&gt;\n\n&lt;p&gt;Thank you for your attention.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggzqfi", "is_robot_indexable": true, "report_reasons": null, "author": "LinkMed", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/ggzqfi/new_version_of_dohclient_220/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/ggzqfi/new_version_of_dohclient_220/", "subreddit_subscribers": 99154, "created_utc": 1589109611.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hi guys!\n\nhttps://github.com/ms-jpq/sad\n\nI made my first project in rust, and I thought it would be cool to share it here.\n\nWhat it does, is basically **ergonomic batch file edits**.\n\n`sad` will take a list of files, a pattern, a replacement, and generate a nice diff of BEFORE / AFTER the edits.\n\nYou can view the changes **before** you apply them.\n\n\n`sad` is inspired by my usage of `sd`, another cool rust project.\n\n\nThe difference as being while `sd` is more optimized for instream edits, such as\n \n\n`command1 | sd '&lt;pattern&gt;' '&lt;replacement&gt;' | command2`\n\n\n`sad` does batch edits like\n\n\n`find \"$FIND_ARGS\" | sad '&lt;pattern&gt;' '&lt;replacement&gt;'`\n\n\nof course, the output of `sad` is much more optimized for its own usecase:\n\nhttps://raw.githubusercontent.com/ms-jpq/sad/master/previews/preview2.gif", "author_fullname": "t2_4w6mbaxa", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "SAD! a rust cli tool that does batch file edits, no need for sed, we have sad.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_ggm067", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.78, "author_flair_background_color": null, "subreddit_type": "public", "ups": 21, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 21, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1589081660.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi guys!&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/ms-jpq/sad\"&gt;https://github.com/ms-jpq/sad&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;I made my first project in rust, and I thought it would be cool to share it here.&lt;/p&gt;\n\n&lt;p&gt;What it does, is basically &lt;strong&gt;ergonomic batch file edits&lt;/strong&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;sad&lt;/code&gt; will take a list of files, a pattern, a replacement, and generate a nice diff of BEFORE / AFTER the edits.&lt;/p&gt;\n\n&lt;p&gt;You can view the changes &lt;strong&gt;before&lt;/strong&gt; you apply them.&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;sad&lt;/code&gt; is inspired by my usage of &lt;code&gt;sd&lt;/code&gt;, another cool rust project.&lt;/p&gt;\n\n&lt;p&gt;The difference as being while &lt;code&gt;sd&lt;/code&gt; is more optimized for instream edits, such as&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;command1 | sd &amp;#39;&amp;lt;pattern&amp;gt;&amp;#39; &amp;#39;&amp;lt;replacement&amp;gt;&amp;#39; | command2&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;sad&lt;/code&gt; does batch edits like&lt;/p&gt;\n\n&lt;p&gt;&lt;code&gt;find &amp;quot;$FIND_ARGS&amp;quot; | sad &amp;#39;&amp;lt;pattern&amp;gt;&amp;#39; &amp;#39;&amp;lt;replacement&amp;gt;&amp;#39;&lt;/code&gt;&lt;/p&gt;\n\n&lt;p&gt;of course, the output of &lt;code&gt;sad&lt;/code&gt; is much more optimized for its own usecase:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://raw.githubusercontent.com/ms-jpq/sad/master/previews/preview2.gif\"&gt;https://raw.githubusercontent.com/ms-jpq/sad/master/previews/preview2.gif&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "ggm067", "is_robot_indexable": true, "report_reasons": null, "author": "wwwuwuwwwwewwe", "discussion_type": null, "num_comments": 15, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/ggm067/sad_a_rust_cli_tool_that_does_batch_file_edits_no/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/ggm067/sad_a_rust_cli_tool_that_does_batch_file_edits_no/", "subreddit_subscribers": 99154, "created_utc": 1589052860.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_ggm067", "before": null}}