{"kind": "Listing", "data": {"modhash": "", "dist": 10, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_h8sck", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "SuperDiff for RSpec: Intelligently Display the Diff of Two Data Structures of Any Type.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_jtsz6u", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 42, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 42, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/_1jXxfJa3EB09E8D10I459K4_RhBYRqU6rXLCJtKxvY.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1605345779.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/mcmire/super_diff", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/3f60LbUbr9nF0IOVdaDTr9AhBF9tU-6gp05vjUqoHnM.jpg?auto=webp&amp;s=b9bd9463aff300e8a3162f33064dbc9a780b2a56", "width": 250, "height": 250}, "resolutions": [{"url": "https://external-preview.redd.it/3f60LbUbr9nF0IOVdaDTr9AhBF9tU-6gp05vjUqoHnM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=b3d9c96220e838de156dfb1e54b54bacab63e0ca", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/3f60LbUbr9nF0IOVdaDTr9AhBF9tU-6gp05vjUqoHnM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=5e0f4fb31cfc71c42338744579a2bc3c47445876", "width": 216, "height": 216}], "variants": {}, "id": "dnyF0UhN901gUpGMaNKegKAjg92-_BHW7dZQrPlxn0A"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jtsz6u", "is_robot_indexable": true, "report_reasons": null, "author": "sshaw_", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jtsz6u/superdiff_for_rspec_intelligently_display_the/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/mcmire/super_diff", "subreddit_subscribers": 68282, "created_utc": 1605316979.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Both of them are great, but I need to pick one. Given a limited budget, which one you'd choose between those two? \n\nI have experience in Ruby/Rails but I'm always keen to learn stuff that is not related to my daily work but scoped to the Ruby/Rails ecosystem.\n\nThanks in advance", "author_fullname": "t2_rw38x", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Drifting Ruby vs GoRails", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jttb9k", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 9, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1605346986.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Both of them are great, but I need to pick one. Given a limited budget, which one you&amp;#39;d choose between those two? &lt;/p&gt;\n\n&lt;p&gt;I have experience in Ruby/Rails but I&amp;#39;m always keen to learn stuff that is not related to my daily work but scoped to the Ruby/Rails ecosystem.&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jttb9k", "is_robot_indexable": true, "report_reasons": null, "author": "amreez", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jttb9k/drifting_ruby_vs_gorails/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jttb9k/drifting_ruby_vs_gorails/", "subreddit_subscribers": 68282, "created_utc": 1605318186.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "I have several Ruby methods that call methods from a library written in C++, via \\`FFI\\` gem. Some of the C++ methods involve spawning new threads inside a native library, others not.\n\n&amp;#x200B;\n\nThe ruby methods look, basically, like this:\n\n&amp;#x200B;\n\n           my_params = create_params_for_method1()\n           MyModule::method1(context, my_params) do |result|\n             puts \"result is: #{result}\"\n           end\n    \n\nAll works fine. \n\n&amp;#x200B;\n\nA difficulty I have is that how to test these asyncronous methods with Rspec? Some methods return value almost immediately and there's no issue with testing them:\n\n        expect { |b| MyModule.method1(my_context, my_params, &amp;b) }.to yield_control\n        MyModule.method1(my_context, my_params) { |r| u/result = r }\n    \n        expect(@result).to eq \"some_result123\" # OK\n    \n\n&amp;#x200B;\n\nBut others incurr a delay or keep sending data in a loop and therefore can't be tested in this way:\n\n    expect { |b| MyModule.method1(my_context, my_params, &amp;b) }.to yield_control # error\n    MyModule.method1(my_context, my_params) { |r| @result = r }                 # error\n    \n    expect(@result).to eq \"some_result123\"        # @result is still nil\n    \n    \n\n&amp;#x200B;\n\n&amp;#x200B;\n\nI could insert **sleep N** in a rspec test, but this be a sensible approach? \n\n        # expect { |b| MyModule.method1(my_context, my_params, &amp;b) }.to yield_control\n        MyModule.method1(my_context, my_params) { |r| @result = r }                \n    \n        sleep 10\n    \n        expect(@result).to eq \"some_result123\"            # not nil, but...\n    \n\nHow long in seconds should I N be so that it'll always pass? The more the better, but how long? How would I guess?\n\n&amp;#x200B;\n\nAlso, it's a hack, isn't it?\n\nAlso, in some cases it'll **keep** sending data from a native library multiple times. How would I make sure that I've received it all, in a test?\n\n&amp;#x200B;\n\nAnd  a test isn't supposed to take a long, undetermenistic time to test a method, is it?\n\n&amp;#x200B;\n\nWhat's the approach in such a case?", "author_fullname": "t2_7osea0u3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to test asyncronous methods, in Rspec?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jtzpk5", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1605376759.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I have several Ruby methods that call methods from a library written in C++, via `FFI` gem. Some of the C++ methods involve spawning new threads inside a native library, others not.&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;The ruby methods look, basically, like this:&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;       my_params = create_params_for_method1()\n       MyModule::method1(context, my_params) do |result|\n         puts &amp;quot;result is: #{result}&amp;quot;\n       end\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;All works fine. &lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;A difficulty I have is that how to test these asyncronous methods with Rspec? Some methods return value almost immediately and there&amp;#39;s no issue with testing them:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    expect { |b| MyModule.method1(my_context, my_params, &amp;amp;b) }.to yield_control\n    MyModule.method1(my_context, my_params) { |r| u/result = r }\n\n    expect(@result).to eq &amp;quot;some_result123&amp;quot; # OK\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;But others incurr a delay or keep sending data in a loop and therefore can&amp;#39;t be tested in this way:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;expect { |b| MyModule.method1(my_context, my_params, &amp;amp;b) }.to yield_control # error\nMyModule.method1(my_context, my_params) { |r| @result = r }                 # error\n\nexpect(@result).to eq &amp;quot;some_result123&amp;quot;        # @result is still nil\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;I could insert &lt;strong&gt;sleep N&lt;/strong&gt; in a rspec test, but this be a sensible approach? &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;    # expect { |b| MyModule.method1(my_context, my_params, &amp;amp;b) }.to yield_control\n    MyModule.method1(my_context, my_params) { |r| @result = r }                \n\n    sleep 10\n\n    expect(@result).to eq &amp;quot;some_result123&amp;quot;            # not nil, but...\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;How long in seconds should I N be so that it&amp;#39;ll always pass? The more the better, but how long? How would I guess?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Also, it&amp;#39;s a hack, isn&amp;#39;t it?&lt;/p&gt;\n\n&lt;p&gt;Also, in some cases it&amp;#39;ll &lt;strong&gt;keep&lt;/strong&gt; sending data from a native library multiple times. How would I make sure that I&amp;#39;ve received it all, in a test?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;And  a test isn&amp;#39;t supposed to take a long, undetermenistic time to test a method, is it?&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;What&amp;#39;s the approach in such a case?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jtzpk5", "is_robot_indexable": true, "report_reasons": null, "author": "normalu_kaj225i", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jtzpk5/how_to_test_asyncronous_methods_in_rspec/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jtzpk5/how_to_test_asyncronous_methods_in_rspec/", "subreddit_subscribers": 68282, "created_utc": 1605347959.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "For instance, I have a class named `base` and it contains all the basic information about superheroes. Now, I want to create subclasses that represent different type of superheroes and what they do. So, I have stored the basic information in `@@class variables` of the base class, so that I can inherit all of that information and create different kinds of superheroes using that info. \n\n  \nRubocop is complaining about using class vars, so how am I supposed to implement the above solution without using class vars? Any help is really appreciated.", "author_fullname": "t2_3iixgge3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What is the best way to inherit the variables of other classes in Ruby? Rubocop complains on using a class var and I am wondering if there is another better way to do it?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jtzab7", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.66, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Question", "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1605374088.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For instance, I have a class named &lt;code&gt;base&lt;/code&gt; and it contains all the basic information about superheroes. Now, I want to create subclasses that represent different type of superheroes and what they do. So, I have stored the basic information in &lt;code&gt;@@class variables&lt;/code&gt; of the base class, so that I can inherit all of that information and create different kinds of superheroes using that info. &lt;/p&gt;\n\n&lt;p&gt;Rubocop is complaining about using class vars, so how am I supposed to implement the above solution without using class vars? Any help is really appreciated.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "d3392e70-873c-11e9-af37-0eea3fce36a6", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jtzab7", "is_robot_indexable": true, "report_reasons": null, "author": "mmddev", "discussion_type": null, "num_comments": 19, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jtzab7/what_is_the_best_way_to_inherit_the_variables_of/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jtzab7/what_is_the_best_way_to_inherit_the_variables_of/", "subreddit_subscribers": 68282, "created_utc": 1605345288.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_zmb2u", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why the Release of Ruby 3 Will Be Monumental", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 75, "top_awarded_type": null, "hide_score": false, "name": "t3_jtfzdp", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.72, "author_flair_background_color": null, "subreddit_type": "public", "ups": 37, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 37, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/l1DQGZI0OsBmZWJgxHpm3t8lorNi_X0icMrtg1XECHY.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1605298635.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "ruby3.dev", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.ruby3.dev/the-art-of-code/2020/11/12/ruby-3-monumental/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/fkNuwfoGzzeR8IUVBwrIL-BfRQUeUtiIIa_KnCEVzm4.jpg?auto=webp&amp;s=18a37e7919265c96f96c1691ee0b3c589ed221dd", "width": 2048, "height": 1107}, "resolutions": [{"url": "https://external-preview.redd.it/fkNuwfoGzzeR8IUVBwrIL-BfRQUeUtiIIa_KnCEVzm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0af1fc8ce8569d772778f326dec27ecb2f8d5b7e", "width": 108, "height": 58}, {"url": "https://external-preview.redd.it/fkNuwfoGzzeR8IUVBwrIL-BfRQUeUtiIIa_KnCEVzm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=b1a5dbac6f6c42dca79308574f2983d8c2d43c65", "width": 216, "height": 116}, {"url": "https://external-preview.redd.it/fkNuwfoGzzeR8IUVBwrIL-BfRQUeUtiIIa_KnCEVzm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=ae678a6ea01c6542a5485fa116ccb1a096db72f7", "width": 320, "height": 172}, {"url": "https://external-preview.redd.it/fkNuwfoGzzeR8IUVBwrIL-BfRQUeUtiIIa_KnCEVzm4.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=e26495d3f2a1a1386dcd6a730a2529762a9a3d9f", "width": 640, "height": 345}, {"url": "https://external-preview.redd.it/fkNuwfoGzzeR8IUVBwrIL-BfRQUeUtiIIa_KnCEVzm4.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=a270ca7f2645e6d3dc01563e6994ddb55aa6fd12", "width": 960, "height": 518}, {"url": "https://external-preview.redd.it/fkNuwfoGzzeR8IUVBwrIL-BfRQUeUtiIIa_KnCEVzm4.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=109f2dbd9bcdef972b49e03d82ce2c401451b62a", "width": 1080, "height": 583}], "variants": {}, "id": "MShzJ-guTgNWv4GDo7lZQy7kO4eIuw73WT4URXwybVU"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jtfzdp", "is_robot_indexable": true, "report_reasons": null, "author": "geospeck", "discussion_type": null, "num_comments": 32, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jtfzdp/why_the_release_of_ruby_3_will_be_monumental/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.ruby3.dev/the-art-of-code/2020/11/12/ruby-3-monumental/", "subreddit_subscribers": 68282, "created_utc": 1605269835.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_xqooz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "24/7 Lofi Hip Hop Midnight Radio - Live Stream beats to study/chill to", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 105, "top_awarded_type": null, "hide_score": false, "name": "t3_jtxzxf", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.33, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/fDZCOvWRxkU?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 459, "scrolling": false, "height": 344}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "24/7 Lofi Hip Hop Midnight Radio - Live Stream beats to study/chill to", "type": "video", "thumbnail_width": 480, "height": 344, "width": 459, "html": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/fDZCOvWRxkU?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "The Midnight Garnet", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/fDZCOvWRxkU/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/TheKahlil93"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/fDZCOvWRxkU?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 459, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/jtxzxf", "height": 344}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/v7hcet72Fej8i0G2RBrwwilCq3lzaoN-WR_YImLjZ3o.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "rich:video", "content_categories": null, "is_self": false, "mod_note": null, "created": 1605367369.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=fDZCOvWRxkU&amp;feature=share", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/l3iEbTs7aLUz8Q5RTQ59xX2EkZ5yWvFdSi77aV__ecw.jpg?auto=webp&amp;s=a49717b7ef6b326ef5bc200ed74b465bad2e70b9", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/l3iEbTs7aLUz8Q5RTQ59xX2EkZ5yWvFdSi77aV__ecw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=512a128b635b79b7ecba2b1514b329cca5028c21", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/l3iEbTs7aLUz8Q5RTQ59xX2EkZ5yWvFdSi77aV__ecw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=9cda45521354d78ee1d4f0abbd8dac1ab7c6f4df", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/l3iEbTs7aLUz8Q5RTQ59xX2EkZ5yWvFdSi77aV__ecw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=73279866ffd0dc6112cc713f1a797bd879770495", "width": 320, "height": 240}], "variants": {}, "id": "hxN078DoSFJqaHQXFrGMQmamNzHjijjNFkZ-7uhabSI"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jtxzxf", "is_robot_indexable": true, "report_reasons": null, "author": "Irakaj93", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jtxzxf/247_lofi_hip_hop_midnight_radio_live_stream_beats/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=fDZCOvWRxkU&amp;feature=share", "subreddit_subscribers": 68282, "created_utc": 1605338569.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "24/7 Lofi Hip Hop Midnight Radio - Live Stream beats to study/chill to", "type": "video", "thumbnail_width": 480, "height": 344, "width": 459, "html": "&lt;iframe width=\"459\" height=\"344\" src=\"https://www.youtube.com/embed/fDZCOvWRxkU?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "The Midnight Garnet", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/fDZCOvWRxkU/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/user/TheKahlil93"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_8gwf6ts", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "6 Things to Do When Inheriting Legacy Rails Apps", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jthvt3", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.75, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "default", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "rails", "selftext": "One of our engineers wrote a guide to help people get off on the right foot when inheriting a Rails app and [I wanted to share it here.](https://nextlinklabs.com/insights/six-tips-for-inheriting-a-legacy-rails-app) Let me know what you think.", "author_fullname": "t2_8gwf6ts", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "6 Things to Do When Inheriting Legacy Rails Apps", "link_flair_richtext": [{"e": "text", "t": "Tutorial"}], "subreddit_name_prefixed": "r/rails", "hidden": false, "pwls": 6, "link_flair_css_class": "tutorial", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jtgjla", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.94, "author_flair_background_color": null, "subreddit_type": "public", "ups": 32, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Tutorial", "can_mod_post": false, "score": 32, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1605302771.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;One of our engineers wrote a guide to help people get off on the right foot when inheriting a Rails app and &lt;a href=\"https://nextlinklabs.com/insights/six-tips-for-inheriting-a-legacy-rails-app\"&gt;I wanted to share it here.&lt;/a&gt; Let me know what you think.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "2a348462-af75-11e4-abe9-22000b3d0989", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qhjn", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jtgjla", "is_robot_indexable": true, "report_reasons": null, "author": "NoCountryForMe2112", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rails/comments/jtgjla/6_things_to_do_when_inheriting_legacy_rails_apps/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rails/comments/jtgjla/6_things_to_do_when_inheriting_legacy_rails_apps/", "subreddit_subscribers": 46590, "created_utc": 1605273971.0, "num_crossposts": 2, "media": null, "is_video": false}], "created": 1605310888.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rails", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "/r/rails/comments/jtgjla/6_things_to_do_when_inheriting_legacy_rails_apps/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jthvt3", "is_robot_indexable": true, "report_reasons": null, "author": "NoCountryForMe2112", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_jtgjla", "author_flair_text_color": null, "permalink": "/r/ruby/comments/jthvt3/6_things_to_do_when_inheriting_legacy_rails_apps/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "/r/rails/comments/jtgjla/6_things_to_do_when_inheriting_legacy_rails_apps/", "subreddit_subscribers": 68282, "created_utc": 1605282088.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_5ms07", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "DragonRuby Game Toolkit Sound Synthesis in Pure Ruby ^_^", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": "", "downs": 0, "thumbnail_height": 105, "top_awarded_type": null, "hide_score": false, "name": "t3_jtbtkb", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.96, "author_flair_background_color": null, "subreddit_type": "public", "ups": 23, "total_awards_received": 0, "media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/zEzovM5jT-k?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "height": 338}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "DragonRuby Game Toolkit Pro - Sound Synthesis", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/zEzovM5jT-k?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Amir Rajan", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/zEzovM5jT-k/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCiohWAjXWS034PnTPsJ37-Q"}}, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {"content": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/zEzovM5jT-k?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "width": 600, "scrolling": false, "media_domain_url": "https://www.redditmedia.com/mediaembed/jtbtkb", "height": 338}, "link_flair_text": "Show /r/ruby", "can_mod_post": false, "score": 23, "approved_by": null, "author_premium": true, "thumbnail": "https://a.thumbs.redditmedia.com/VHOGnWNvAW2Eo2Asd3Vdkg43a-9yultTEM8wJ5xi4I8.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "rich:video", "content_categories": null, "is_self": false, "mod_note": null, "created": 1605275989.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "youtube.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://www.youtube.com/watch?v=zEzovM5jT-k&amp;feature=youtu.be&amp;ab_channel=AmirRajan", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/wEZev0DbWkPiJdWmLh1YkY9HO6PDeczniKC7i3GZ97U.jpg?auto=webp&amp;s=b4f8ce67a65fcf6e62903646eef5f3594305b80b", "width": 480, "height": 360}, "resolutions": [{"url": "https://external-preview.redd.it/wEZev0DbWkPiJdWmLh1YkY9HO6PDeczniKC7i3GZ97U.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=10a1713a5705d36ca044e809e6d6ad3b46077613", "width": 108, "height": 81}, {"url": "https://external-preview.redd.it/wEZev0DbWkPiJdWmLh1YkY9HO6PDeczniKC7i3GZ97U.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=4da28c041c905fc8417cdfc349cd4befbfedcd0d", "width": 216, "height": 162}, {"url": "https://external-preview.redd.it/wEZev0DbWkPiJdWmLh1YkY9HO6PDeczniKC7i3GZ97U.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=b1851ab1da79e96329d213b34d25a038f33bbe41", "width": 320, "height": 240}], "variants": {}, "id": "pEn0M7pGLMhUXCvvHiHUW_L5LVKGd5aNMm57TNNDjHk"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "d57de81a-873c-11e9-9a25-0e18d14df676", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jtbtkb", "is_robot_indexable": true, "report_reasons": null, "author": "amirrajan", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jtbtkb/dragonruby_game_toolkit_sound_synthesis_in_pure/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.youtube.com/watch?v=zEzovM5jT-k&amp;feature=youtu.be&amp;ab_channel=AmirRajan", "subreddit_subscribers": 68282, "created_utc": 1605247189.0, "num_crossposts": 0, "media": {"type": "youtube.com", "oembed": {"provider_url": "https://www.youtube.com/", "version": "1.0", "title": "DragonRuby Game Toolkit Pro - Sound Synthesis", "type": "video", "thumbnail_width": 480, "height": 338, "width": 600, "html": "&lt;iframe width=\"600\" height=\"338\" src=\"https://www.youtube.com/embed/zEzovM5jT-k?feature=oembed&amp;enablejsapi=1\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen&gt;&lt;/iframe&gt;", "author_name": "Amir Rajan", "provider_name": "YouTube", "thumbnail_url": "https://i.ytimg.com/vi/zEzovM5jT-k/hqdefault.jpg", "thumbnail_height": 360, "author_url": "https://www.youtube.com/channel/UCiohWAjXWS034PnTPsJ37-Q"}}, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "Let's say we have a simple Mailer as:\n\n    class PostmanMailer &lt; ApplicationMailer   \n        rescue_from CustomError do |exception|\n        ... do something ...\n        end\n         def invitation(user)\n            mail(to: user.email,subject: user)\n        end \n    end\n\nAnd invoke that mailer with the line:\n\n    PostmanMailer.invitation(user).deliver_later\n\nActionMailer is using delivery jobs and enqueues email delivery as a job through Active Job, so I can't wrap this with being/rescue to insert custom exception.\n\nHow would you handle this? Is there any way for not monkey patching?", "author_fullname": "t2_pfyd408", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Custom exception on mailers deliver_later - question", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_jtebo4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 5, "approved_by": null, "author_premium": false, "thumbnail": "self", "edited": 1605262969.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1605289350.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.ruby", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Let&amp;#39;s say we have a simple Mailer as:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;class PostmanMailer &amp;lt; ApplicationMailer   \n    rescue_from CustomError do |exception|\n    ... do something ...\n    end\n     def invitation(user)\n        mail(to: user.email,subject: user)\n    end \nend\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;And invoke that mailer with the line:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;PostmanMailer.invitation(user).deliver_later\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;ActionMailer is using delivery jobs and enqueues email delivery as a job through Active Job, so I can&amp;#39;t wrap this with being/rescue to insert custom exception.&lt;/p&gt;\n\n&lt;p&gt;How would you handle this? Is there any way for not monkey patching?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jtebo4", "is_robot_indexable": true, "report_reasons": null, "author": "kmetJoza", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jtebo4/custom_exception_on_mailers_deliver_later_question/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/ruby/comments/jtebo4/custom_exception_on_mailers_deliver_later_question/", "subreddit_subscribers": 68282, "created_utc": 1605260550.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "ruby", "selftext": "", "author_fullname": "t2_bu67h", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "footballdata-12xpert gem - download, convert &amp; import 22+ top football leagues from 25 seasons back to 1993/94 from Joseph Buchdahl (12Xpert)'s Football Data website", "link_flair_richtext": [], "subreddit_name_prefixed": "r/ruby", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "thumbnail_height": 140, "top_awarded_type": null, "hide_score": false, "name": "t3_jtee59", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": 140, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "https://b.thumbs.redditmedia.com/adP86WleQlGi7jb1_0ZMugaxOndcpjkOAE3re2A8QCA.jpg", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "link", "content_categories": null, "is_self": false, "mod_note": null, "created": 1605289755.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/sportdb/sport.db.sources/tree/master/footballdata-12xpert", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/9YvjyBapF-h-aEYXj8w94cMKiNXZG6F9Q1skUMHNkHA.jpg?auto=webp&amp;s=fcfeb2c7ed5e8865543dc1e8389788c267751203", "width": 256, "height": 256}, "resolutions": [{"url": "https://external-preview.redd.it/9YvjyBapF-h-aEYXj8w94cMKiNXZG6F9Q1skUMHNkHA.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=a267236eaf74e37372b928904a5056062f51b220", "width": 108, "height": 108}, {"url": "https://external-preview.redd.it/9YvjyBapF-h-aEYXj8w94cMKiNXZG6F9Q1skUMHNkHA.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=fae722694a3d6d2f6053b6d843ac48e65b9b93f8", "width": 216, "height": 216}], "variants": {}, "id": "8ZTcnSVObHBt8VFL60JctEY-J_urvNxJK1UL_K1j7Ig"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh21", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jtee59", "is_robot_indexable": true, "report_reasons": null, "author": "geraldbauer", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/ruby/comments/jtee59/footballdata12xpert_gem_download_convert_import/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/sportdb/sport.db.sources/tree/master/footballdata-12xpert", "subreddit_subscribers": 68282, "created_utc": 1605260955.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_jtee59", "before": null}}