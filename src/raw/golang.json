{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I posted a draft design today for updating the // +build lines to fix some usability problems. \n\nVideo: [https://golang.org/s/go-build-video](https://golang.org/s/go-build-video)\\\nDesign: [https://golang.org/s/go-build-design](https://golang.org/s/go-build-design)\n\nAs an experiment, let's try doing Q&amp;A about the design here in Reddit.\nMy hope is that the threading support will help keep questions and answers matched.\n\n**Please start a new top-level comment for each new question.**", "author_fullname": "t2_2jha", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "[Q&amp;A] //go:build draft design", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hitexe", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 99, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 99, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593571451.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I posted a draft design today for updating the // +build lines to fix some usability problems. &lt;/p&gt;\n\n&lt;p&gt;Video: &lt;a href=\"https://golang.org/s/go-build-video\"&gt;https://golang.org/s/go-build-video&lt;/a&gt;\\\nDesign: &lt;a href=\"https://golang.org/s/go-build-design\"&gt;https://golang.org/s/go-build-design&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;As an experiment, let&amp;#39;s try doing Q&amp;amp;A about the design here in Reddit.\nMy hope is that the threading support will help keep questions and answers matched.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Please start a new top-level comment for each new question.&lt;/strong&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hitexe", "is_robot_indexable": true, "report_reasons": null, "author": "rsc", "discussion_type": null, "num_comments": 57, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hitexe/qa_gobuild_draft_design/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/golang/comments/hitexe/qa_gobuild_draft_design/", "subreddit_subscribers": 117599, "created_utc": 1593542651.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_63db1", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Improved docker Go module dependency cache for faster builds in CI/CD", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hj4n44", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.92, "author_flair_background_color": null, "subreddit_type": "public", "ups": 53, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 53, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593612227.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/montanaflynn/golang-docker-cache", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hj4n44", "is_robot_indexable": true, "report_reasons": null, "author": "anonfunction", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hj4n44/improved_docker_go_module_dependency_cache_for/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/montanaflynn/golang-docker-cache", "subreddit_subscribers": 117599, "created_utc": 1593583427.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_ct6udim", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "When microservices in Go are not enough: introduction to DDD Lite", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hj9cxw", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593635810.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "threedots.tech", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://threedots.tech/post/ddd-lite-in-go-introduction/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hj9cxw", "is_robot_indexable": true, "report_reasons": null, "author": "roblaszczak", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hj9cxw/when_microservices_in_go_are_not_enough/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://threedots.tech/post/ddd-lite-in-go-introduction/", "subreddit_subscribers": 117599, "created_utc": 1593607010.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_4mww", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "The How and Why of Go, Part 1: Tooling", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hin7sn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.97, "author_flair_background_color": null, "subreddit_type": "public", "ups": 83, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 83, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593552013.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "okigiveup.net", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "http://okigiveup.net/the-how-and-why-of-go-part-1-tooling/", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hin7sn", "is_robot_indexable": true, "report_reasons": null, "author": "afroisalreadyinu", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hin7sn/the_how_and_why_of_go_part_1_tooling/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "http://okigiveup.net/the-how-and-why-of-go-part-1-tooling/", "subreddit_subscribers": 117599, "created_utc": 1593523213.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_idxe8", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Setting up CircleCI and Sonarcloud integration with Go projects", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hj9sz2", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593637602.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "akondas.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://akondas.com/Tales-of-Devops-and-Go-Part-III/", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hj9sz2", "is_robot_indexable": true, "report_reasons": null, "author": "devilyoushy", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hj9sz2/setting_up_circleci_and_sonarcloud_integration/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://akondas.com/Tales-of-Devops-and-Go-Part-III/", "subreddit_subscribers": 117599, "created_utc": 1593608802.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi!\n\nI recently started project based on microservices architecture and I have problem with calling from service A service B. I set up docker-compose and traefik, but I have problem with calling it when I use docker. Talk is cheap, so I'll show you code:\n\n    req, err := http.NewRequest(http.MethodPost, http://127.0.0.1/api/v1/user/validate\", bytes.NewBuffer(jsonCreds))\n    if err != nil {\n        log.Errorf(\"Couldn't prepare request: %v\", err)\n        return nil, err\n    }\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Host = \"usersvc\"\n    res, err := s.httpClient.Do(req)\n    if err != nil {\n        log.Errorf(\"Couldn't to execute request: %v\", err)\n        return nil, err\n    }\n\nThat's the part when I'm calling service B. When I run service A and service B separately and call `http://127.0.0.1/api/v1/user/validate` with `Host=usersvc` everything works ok, but when I want to execute the same code when I use \\`docker-compose up\\` I get this error: `{\"level\":\"error\",\"msg\":\"Couldn't to execute request: Post \\\"[``http://127.0.0.1/api/v1/user/validate\\](http://127.0.0.1/api/v1/user/validate)``\": dial tcp` [`127.0.0.1:80`](https://127.0.0.1:80)`: connect: connection refused\",\"time\":\"2020-07-01T14:59:58Z\"}`.\n\nI guess there is problem with networking, but I don't really know how to fix it. How can I call that service using \\`docker\\`?\n\nThanks in advance for the help!", "author_fullname": "t2_1f7u5617", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How to send POST request service when using Traefik and Docker", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hj9rst", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593637477.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi!&lt;/p&gt;\n\n&lt;p&gt;I recently started project based on microservices architecture and I have problem with calling from service A service B. I set up docker-compose and traefik, but I have problem with calling it when I use docker. Talk is cheap, so I&amp;#39;ll show you code:&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;req, err := http.NewRequest(http.MethodPost, http://127.0.0.1/api/v1/user/validate&amp;quot;, bytes.NewBuffer(jsonCreds))\nif err != nil {\n    log.Errorf(&amp;quot;Couldn&amp;#39;t prepare request: %v&amp;quot;, err)\n    return nil, err\n}\nreq.Header.Set(&amp;quot;Content-Type&amp;quot;, &amp;quot;application/json&amp;quot;)\nreq.Host = &amp;quot;usersvc&amp;quot;\nres, err := s.httpClient.Do(req)\nif err != nil {\n    log.Errorf(&amp;quot;Couldn&amp;#39;t to execute request: %v&amp;quot;, err)\n    return nil, err\n}\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;That&amp;#39;s the part when I&amp;#39;m calling service B. When I run service A and service B separately and call &lt;code&gt;http://127.0.0.1/api/v1/user/validate&lt;/code&gt; with &lt;code&gt;Host=usersvc&lt;/code&gt; everything works ok, but when I want to execute the same code when I use `docker-compose up` I get this error: &lt;code&gt;{&amp;quot;level&amp;quot;:&amp;quot;error&amp;quot;,&amp;quot;msg&amp;quot;:&amp;quot;Couldn&amp;#39;t to execute request: Post \\&amp;quot;[&lt;/code&gt;&lt;code&gt;http://127.0.0.1/api/v1/user/validate\\](http://127.0.0.1/api/v1/user/validate)&lt;/code&gt;&lt;code&gt;&amp;quot;: dial tcp&lt;/code&gt; &lt;a href=\"https://127.0.0.1:80\"&gt;&lt;code&gt;127.0.0.1:80&lt;/code&gt;&lt;/a&gt;&lt;code&gt;: connect: connection refused&amp;quot;,&amp;quot;time&amp;quot;:&amp;quot;2020-07-01T14:59:58Z&amp;quot;}&lt;/code&gt;.&lt;/p&gt;\n\n&lt;p&gt;I guess there is problem with networking, but I don&amp;#39;t really know how to fix it. How can I call that service using `docker`?&lt;/p&gt;\n\n&lt;p&gt;Thanks in advance for the help!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hj9rst", "is_robot_indexable": true, "report_reasons": null, "author": "0x113", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hj9rst/how_to_send_post_request_service_when_using/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hj9rst/how_to_send_post_request_service_when_using/", "subreddit_subscribers": 117599, "created_utc": 1593608677.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_5ibor34y", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Rate Limiting in Golang", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hj9ejw", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593635989.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "medium.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://medium.com/@justin.graber/rate-limiting-in-golang-f3ed2c62df36", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hj9ejw", "is_robot_indexable": true, "report_reasons": null, "author": "aman_agrwl", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hj9ejw/rate_limiting_in_golang/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://medium.com/@justin.graber/rate-limiting-in-golang-f3ed2c62df36", "subreddit_subscribers": 117599, "created_utc": 1593607189.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_3rsjrul9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Pointer and value semantics in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hj98n4", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1593635309.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "developer20.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://developer20.com/pointer-and-value-semantics-in-go/", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hj98n4", "is_robot_indexable": true, "report_reasons": null, "author": "bklimczak", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hj98n4/pointer_and_value_semantics_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://developer20.com/pointer-and-value-semantics-in-go/", "subreddit_subscribers": 117599, "created_utc": 1593606509.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hi,\n\nLove the language - but versioning in go.mod is doing my head in.\n\n[**https://github.com/alexellis/blinkt\\_go**](https://github.com/alexellis/blinkt_go) **has a tag of \"v1.0\" but if I specify v1.0 in go.mod:**\n\n    require github.com/alexellis/blinkt_go v1.0\n\n**I get**\n\n     /home/pi/projects/blinkt_test/go.mod:5: invalid module version \"v1.0\": no matching versions for query \"v1.0\"\n\nSubstituting **v1.0.0 for v1.0 works though.**\n\n*If I remove the require line and leave the replace line, go get adds this:*\n\n    require github.com/alexellis/blinkt_go v0.0.0-20180120180744-cc0ca163e0bc\n\n**How does module versioning work?** I don't seem to be able to find a good explanation on the web. cc0ca16 is the commit ID of HEAD. Not sure where the rest is coming from - I see a date maybe.\n\n**Am I better off just omitting require lines from go.mod, but supplying replace lines with versions that match tags I add to my forks\\[1\\]- and letting go get do what it wants?**\n\n\\[1\\] In another Reddit post, I explain why I fork copies of code to my own repos - but in essence as insurance against them going away.\n\nCheers folks", "author_fullname": "t2_1z8xoo", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Learning GO - version numbers in go.mod confusing me...", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hj8z0q", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.67, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593634151.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi,&lt;/p&gt;\n\n&lt;p&gt;Love the language - but versioning in go.mod is doing my head in.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/alexellis/blinkt_go\"&gt;&lt;strong&gt;https://github.com/alexellis/blinkt_go&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;has a tag of &amp;quot;v1.0&amp;quot; but if I specify v1.0 in go.mod:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;require github.com/alexellis/blinkt_go v1.0\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;I get&lt;/strong&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt; /home/pi/projects/blinkt_test/go.mod:5: invalid module version &amp;quot;v1.0&amp;quot;: no matching versions for query &amp;quot;v1.0&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Substituting &lt;strong&gt;v1.0.0 for v1.0 works though.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;If I remove the require line and leave the replace line, go get adds this:&lt;/em&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;require github.com/alexellis/blinkt_go v0.0.0-20180120180744-cc0ca163e0bc\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;How does module versioning work?&lt;/strong&gt; I don&amp;#39;t seem to be able to find a good explanation on the web. cc0ca16 is the commit ID of HEAD. Not sure where the rest is coming from - I see a date maybe.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Am I better off just omitting require lines from go.mod, but supplying replace lines with versions that match tags I add to my forks[1]- and letting go get do what it wants?&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;[1] In another Reddit post, I explain why I fork copies of code to my own repos - but in essence as insurance against them going away.&lt;/p&gt;\n\n&lt;p&gt;Cheers folks&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hj8z0q", "is_robot_indexable": true, "report_reasons": null, "author": "Skwide", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hj8z0q/learning_go_version_numbers_in_gomod_confusing_me/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hj8z0q/learning_go_version_numbers_in_gomod_confusing_me/", "subreddit_subscribers": 117599, "created_utc": 1593605351.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am a paranoid type, so when building code, I don't want to assume a 3rd party repo will always be around. So I clone what I use into my own gitlab repo. eg:\n\n[https://github.com/alexellis/blinkt\\_go](https://github.com/alexellis/blinkt_go) =&gt; \n\n[https://gitlab.com/&lt;me&gt;-grp/ext/go/github.com/alexellis/blinkt\\_go](https://gitlab.com/timjwatts-grp/ext/go/github.com/alexellis/blinkt_go)\n\n(using gitlab groups to keep some symmetry of naming)\n\n&amp;#x200B;\n\n**1) So... if I add a** \n\n***replace*** [***https://github.com/alexellis/blinkt\\_go***](https://github.com/alexellis/blinkt_go) ***=&gt;*** [***https://gitlab.com/&lt;me&gt;-grp/ext/go/github.com/alexellis/blinkt\\_go***](https://gitlab.com/timjwatts-grp/ext/go/github.com/alexellis/blinkt_go) ***&lt;version&gt;***\n\n**into my go.mod, this is the correct approach? (Seems to work)**\n\n&amp;#x200B;\n\n**2) If a library brings in other libraries indirectly - do I just need to add more replace statements to my final go.mod after cloning, or do I need to add go.mod files to my repo clone that is itself bringing in other libraries? It's the internals of the \"go get\" methodology I am struggling with.**\n\n&amp;#x200B;\n\nCheers folks :)", "author_fullname": "t2_1z8xoo", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Replacing GO import repos with my own forked copies - correct approach?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_hj8sum", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593633415.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am a paranoid type, so when building code, I don&amp;#39;t want to assume a 3rd party repo will always be around. So I clone what I use into my own gitlab repo. eg:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/alexellis/blinkt_go\"&gt;https://github.com/alexellis/blinkt_go&lt;/a&gt; =&amp;gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://gitlab.com/timjwatts-grp/ext/go/github.com/alexellis/blinkt_go\"&gt;https://gitlab.com/&amp;lt;me&amp;gt;-grp/ext/go/github.com/alexellis/blinkt_go&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;(using gitlab groups to keep some symmetry of naming)&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;1) So... if I add a&lt;/strong&gt; &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;&lt;em&gt;replace&lt;/em&gt;&lt;/strong&gt; &lt;a href=\"https://github.com/alexellis/blinkt_go\"&gt;&lt;strong&gt;&lt;em&gt;https://github.com/alexellis/blinkt_go&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;&lt;em&gt;=&amp;gt;&lt;/em&gt;&lt;/strong&gt; &lt;a href=\"https://gitlab.com/timjwatts-grp/ext/go/github.com/alexellis/blinkt_go\"&gt;&lt;strong&gt;&lt;em&gt;https://gitlab.com/&amp;lt;me&amp;gt;-grp/ext/go/github.com/alexellis/blinkt_go&lt;/em&gt;&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;&lt;em&gt;&amp;lt;version&amp;gt;&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;into my go.mod, this is the correct approach? (Seems to work)&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;2) If a library brings in other libraries indirectly - do I just need to add more replace statements to my final go.mod after cloning, or do I need to add go.mod files to my repo clone that is itself bringing in other libraries? It&amp;#39;s the internals of the &amp;quot;go get&amp;quot; methodology I am struggling with.&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;Cheers folks :)&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hj8sum", "is_robot_indexable": true, "report_reasons": null, "author": "Skwide", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hj8sum/replacing_go_import_repos_with_my_own_forked/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hj8sum/replacing_go_import_repos_with_my_own_forked/", "subreddit_subscribers": 117599, "created_utc": 1593604615.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I'm getting this error when I try to run go install or go build. Would someone mind helping me out? Thanks.\n\ncan't load package: package .: no Go files in /Users/myname/projectname", "author_fullname": "t2_3y1ceopz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How do I fix this error when running 'go build' or 'go install'", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_hj7t82", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1593628672.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;m getting this error when I try to run go install or go build. Would someone mind helping me out? Thanks.&lt;/p&gt;\n\n&lt;p&gt;can&amp;#39;t load package: package .: no Go files in /Users/myname/projectname&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "hj7t82", "is_robot_indexable": true, "report_reasons": null, "author": "severeclear1", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/hj7t82/how_do_i_fix_this_error_when_running_go_build_or/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/hj7t82/how_do_i_fix_this_error_when_running_go_build_or/", "subreddit_subscribers": 117599, "created_utc": 1593599872.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_hj7t82", "before": null}}