{"kind": "Listing", "data": {"modhash": "", "dist": 12, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven't been written yet.\n\nIf you have a [StackOverflow](http://stackoverflow.com/) account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it [the \"Rust\" tag](http://stackoverflow.com/questions/tagged/rust) for maximum visibility). Note that this site is very interested in question quality. I've been asked to read a RFC I authored once. If you want your code reviewed or review other's code, there's a [codereview stackexchange](https://codereview.stackexchange.com/questions/tagged/rust), too. If you need to test your code, maybe [the Rust playground](https://play.rust-lang.org) is for you.\n\nHere are some other venues where help may be found:\n\n[/r/learnrust](https://www.reddit.com/r/learnrust) is a subreddit to share your questions and epiphanies learning Rust programming.\n\nThe official Rust user forums: [https://users.rust-lang.org/](https://users.rust-lang.org/).\n\nThe official Rust Programming Language Discord: [https://discord.gg/rust-lang](https://discord.gg/rust-lang)\n\nThe unofficial Rust community Discord: [https://bit.ly/rust-community](https://bit.ly/rust-community)\n\nThe Rust-related IRC channels on irc.mozilla.org (click the links to open a web-based IRC client):\n\n - [#rust](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust) (general questions)\n - [#rust-beginners](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-beginners) (beginner questions)\n - [#cargo](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23cargo) (the package manager)\n - [#rust-gamedev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-gamedev) (graphics and video games, and see also [/r/rust_gamedev](https://www.reddit.com/r/rust_gamedev))\n - [#rust-osdev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-osdev) (operating systems and embedded systems)\n - [#rust-webdev](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-webdev) (web development)\n - [#rust-networking](https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;channel=%23rust-networking) (computer networking, and see also [/r/rust_networking](https://www.reddit.com/r/rust_networking))\n\nAlso check out [last week's thread](https://reddit.com/r/rust/comments/ey2wte/hey_rustaceans_got_an_easy_question_ask_here/) with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.\n\nAlso if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Hey Rustaceans! Got an easy question? Ask here (7/2020)!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f1ucwh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 18, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 18, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581387589.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Mystified about strings? Borrow checker have you in a headlock? Seek help here! There are no stupid questions, only docs that haven&amp;#39;t been written yet.&lt;/p&gt;\n\n&lt;p&gt;If you have a &lt;a href=\"http://stackoverflow.com/\"&gt;StackOverflow&lt;/a&gt; account, consider asking it there instead! StackOverflow shows up much higher in search results, so having your question there also helps future Rust users (be sure to give it &lt;a href=\"http://stackoverflow.com/questions/tagged/rust\"&gt;the &amp;quot;Rust&amp;quot; tag&lt;/a&gt; for maximum visibility). Note that this site is very interested in question quality. I&amp;#39;ve been asked to read a RFC I authored once. If you want your code reviewed or review other&amp;#39;s code, there&amp;#39;s a &lt;a href=\"https://codereview.stackexchange.com/questions/tagged/rust\"&gt;codereview stackexchange&lt;/a&gt;, too. If you need to test your code, maybe &lt;a href=\"https://play.rust-lang.org\"&gt;the Rust playground&lt;/a&gt; is for you.&lt;/p&gt;\n\n&lt;p&gt;Here are some other venues where help may be found:&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.reddit.com/r/learnrust\"&gt;/r/learnrust&lt;/a&gt; is a subreddit to share your questions and epiphanies learning Rust programming.&lt;/p&gt;\n\n&lt;p&gt;The official Rust user forums: &lt;a href=\"https://users.rust-lang.org/\"&gt;https://users.rust-lang.org/&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;The official Rust Programming Language Discord: &lt;a href=\"https://discord.gg/rust-lang\"&gt;https://discord.gg/rust-lang&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The unofficial Rust community Discord: &lt;a href=\"https://bit.ly/rust-community\"&gt;https://bit.ly/rust-community&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;The Rust-related IRC channels on irc.mozilla.org (click the links to open a web-based IRC client):&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust\"&gt;#rust&lt;/a&gt; (general questions)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-beginners\"&gt;#rust-beginners&lt;/a&gt; (beginner questions)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23cargo\"&gt;#cargo&lt;/a&gt; (the package manager)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-gamedev\"&gt;#rust-gamedev&lt;/a&gt; (graphics and video games, and see also &lt;a href=\"https://www.reddit.com/r/rust_gamedev\"&gt;/r/rust_gamedev&lt;/a&gt;)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-osdev\"&gt;#rust-osdev&lt;/a&gt; (operating systems and embedded systems)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-webdev\"&gt;#rust-webdev&lt;/a&gt; (web development)&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://chat.mibbit.com/?server=irc.mozilla.org%3A%2B6697&amp;amp;amp;channel=%23rust-networking\"&gt;#rust-networking&lt;/a&gt; (computer networking, and see also &lt;a href=\"https://www.reddit.com/r/rust_networking\"&gt;/r/rust_networking&lt;/a&gt;)&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Also check out &lt;a href=\"https://reddit.com/r/rust/comments/ey2wte/hey_rustaceans_got_an_easy_question_ask_here/\"&gt;last week&amp;#39;s thread&lt;/a&gt; with many good questions and answers. And if you believe your question to be either very complex or worthy of larger dissemination, feel free to create a text post.&lt;/p&gt;\n\n&lt;p&gt;Also if you want to be mentored by experienced Rustaceans, tell us the area of expertise that you seek.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": "new", "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f1ucwh", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 91, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/f1ucwh/hey_rustaceans_got_an_easy_question_ask_here_72020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/f1ucwh/hey_rustaceans_got_an_easy_question_ask_here_72020/", "subreddit_subscribers": 90581, "created_utc": 1581358789.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "New week, new Rust! What are you folks up to? Answer here or over at [rust-users](https://users.rust-lang.org/t/whats-everyone-working-on-this-week-7-2020/38078?u=llogiq)!", "author_fullname": "t2_1kxp4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What's everyone working on this week (7/2020)?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f1uej1", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 22, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 22, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581387764.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;New week, new Rust! What are you folks up to? Answer here or over at &lt;a href=\"https://users.rust-lang.org/t/whats-everyone-working-on-this-week-7-2020/38078?u=llogiq\"&gt;rust-users&lt;/a&gt;!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "clippy \u00b7 twir \u00b7 rust \u00b7 mutagen \u00b7 flamer \u00b7 overflower \u00b7 bytecount", "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f1uej1", "is_robot_indexable": true, "report_reasons": null, "author": "llogiq", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/f1uej1/whats_everyone_working_on_this_week_72020/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://www.reddit.com/r/rust/comments/f1uej1/whats_everyone_working_on_this_week_72020/", "subreddit_subscribers": 90581, "created_utc": 1581358964.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_10li90", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How nnethercote optimized the heck out of LEB128 code", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f36j05", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": "", "subreddit_type": "public", "ups": 89, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 89, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": "contrib", "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1581608573.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "Askama \u00b7 Quinn \u00b7 imap-proto \u00b7 tokio-imap", "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f36j05", "is_robot_indexable": true, "report_reasons": null, "author": "dochtman", "discussion_type": null, "num_comments": 15, "send_replies": false, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/rust/comments/f36j05/how_nnethercote_optimized_the_heck_out_of_leb128/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/rust-lang/rust/pull/69050#issuecomment-585508353", "subreddit_subscribers": 90581, "created_utc": 1581579773.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I just came upon this because I assumed it was a thing.  \n\nWhy is it that \n\n    impl&lt;T,U&gt; From&lt;Option&lt;T&gt;&gt; for Option&lt;U&gt; where U: From&lt;T&gt;\n\nis not implemented.  It seems like a fairly obvious use case to me.  Is there a particular reason they couldn't?\n\nA similar question goes for Result", "author_fullname": "t2_b4s1s", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Why can't I convert Option&lt;T&gt; to Option&lt;U&gt; if U implements From&lt;T&gt;", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f32jcv", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 45, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 45, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581588558.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I just came upon this because I assumed it was a thing.  &lt;/p&gt;\n\n&lt;p&gt;Why is it that &lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;impl&amp;lt;T,U&amp;gt; From&amp;lt;Option&amp;lt;T&amp;gt;&amp;gt; for Option&amp;lt;U&amp;gt; where U: From&amp;lt;T&amp;gt;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;is not implemented.  It seems like a fairly obvious use case to me.  Is there a particular reason they couldn&amp;#39;t?&lt;/p&gt;\n\n&lt;p&gt;A similar question goes for Result&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f32jcv", "is_robot_indexable": true, "report_reasons": null, "author": "qazwsxedc813", "discussion_type": null, "num_comments": 16, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f32jcv/why_cant_i_convert_optiont_to_optionu_if_u/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f32jcv/why_cant_i_convert_optiont_to_optionu_if_u/", "subreddit_subscribers": 90581, "created_utc": 1581559758.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "[https://twitter.com/en\\_JS/status/1227773312346075136](https://twitter.com/en_JS/status/1227773312346075136)\n\n&gt;I\u2019m excited to  share that we\u2019re experimenting w porting Relay Compiler into [rustlang](https://twitter.com/hashtag/rustlang?src=hash&amp;ref_src=twsrc%5Etfw\"&gt;#rustlang).  Our early results are promising: w a bit of structure it\u2019s easy to pick  up, and we can move fast and ship high quality, efficient  code.\n\n[https://github.com/facebook/relay/tree/master/compiler](https://github.com/facebook/relay/tree/master/compiler)", "author_fullname": "t2_izicm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Relay Compiler being ported into Rust", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f36rcq", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 14, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 14, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581609996.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://twitter.com/en_JS/status/1227773312346075136\"&gt;https://twitter.com/en_JS/status/1227773312346075136&lt;/a&gt;&lt;/p&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;I\u2019m excited to  share that we\u2019re experimenting w porting Relay Compiler into &lt;a href=\"https://twitter.com/hashtag/rustlang?src=hash&amp;amp;ref_src=twsrc%5Etfw%22%3E#rustlang\"&gt;rustlang&lt;/a&gt;.  Our early results are promising: w a bit of structure it\u2019s easy to pick  up, and we can move fast and ship high quality, efficient  code.&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/facebook/relay/tree/master/compiler\"&gt;https://github.com/facebook/relay/tree/master/compiler&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f36rcq", "is_robot_indexable": true, "report_reasons": null, "author": "d0d0lab", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f36rcq/relay_compiler_being_ported_into_rust/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f36rcq/relay_compiler_being_ported_into_rust/", "subreddit_subscribers": 90581, "created_utc": 1581581196.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "[`crow`](https://crates.io/crates/crow) is a 2D rendering engine based on OpenGL.\nI want this crate to be easy to use while still\nallowing for nearly everything one might want while using pixel art.\n\nA WIP showcase game can be found on https://github.com/lcnr/akari\n\nPlease tell me if there is anything you would want in a 2D game and don't know\nhow you could implement it using `crow`.", "author_fullname": "t2_p430ksz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I just published crow 0.3, a pixel perfect 2D rendering engine.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f2wuwc", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 67, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 67, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581565634.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;a href=\"https://crates.io/crates/crow\"&gt;&lt;code&gt;crow&lt;/code&gt;&lt;/a&gt; is a 2D rendering engine based on OpenGL.\nI want this crate to be easy to use while still\nallowing for nearly everything one might want while using pixel art.&lt;/p&gt;\n\n&lt;p&gt;A WIP showcase game can be found on &lt;a href=\"https://github.com/lcnr/akari\"&gt;https://github.com/lcnr/akari&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Please tell me if there is anything you would want in a 2D game and don&amp;#39;t know\nhow you could implement it using &lt;code&gt;crow&lt;/code&gt;.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2wuwc", "is_robot_indexable": true, "report_reasons": null, "author": "olemni7", "discussion_type": null, "num_comments": 8, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f2wuwc/i_just_published_crow_03_a_pixel_perfect_2d/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f2wuwc/i_just_published_crow_03_a_pixel_perfect_2d/", "subreddit_subscribers": 90581, "created_utc": 1581536834.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I've got a wrapper whose sole purpose is to run another arbitrary program, delegate the original stdio to it and wait for it to finish. All's good and easy but Child.wait() specifically closes the inherited stdin. Is there a way not to close stdin, yet wait for the child to exit? The child should exit on stdin EOF or a stdin command.", "author_fullname": "t2_cu8b5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Wait on spawned child with inherited stdin", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f38hnh", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581621391.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I&amp;#39;ve got a wrapper whose sole purpose is to run another arbitrary program, delegate the original stdio to it and wait for it to finish. All&amp;#39;s good and easy but Child.wait() specifically closes the inherited stdin. Is there a way not to close stdin, yet wait for the child to exit? The child should exit on stdin EOF or a stdin command.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f38hnh", "is_robot_indexable": true, "report_reasons": null, "author": "Wilem82", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f38hnh/wait_on_spawned_child_with_inherited_stdin/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f38hnh/wait_on_spawned_child_with_inherited_stdin/", "subreddit_subscribers": 90581, "created_utc": 1581592591.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "", "author_fullname": "t2_hpsva", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "A handwired unsplitted ergo keyboard with a firmware written in Rust", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f2o9y8", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 479, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 479, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "crosspost_parent_list": [{"approved_at_utc": null, "subreddit": "MechanicalKeyboards", "selftext": "", "author_fullname": "t2_hpsva", "saved": false, "mod_reason_title": null, "gilded": 1, "clicked": false, "title": "A handwired unsplitted ergo keyboard with a firmware written in Rust", "link_flair_richtext": [], "subreddit_name_prefixed": "r/MechanicalKeyboards", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f2o7vu", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 683, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 683, "approved_by": null, "author_premium": true, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_2": 1}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1581525347.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "raw.githubusercontent.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"count": 1, "is_enabled": true, "subreddit_id": null, "description": "Gives the author a week of Reddit Premium, %{coin_symbol}100 Coins to do with as they please, and shows a Gold Award.", "end_date": null, "coin_reward": 100, "icon_url": "https://www.redditstatic.com/gold/awards/icon/gold_512.png", "days_of_premium": 7, "coin_price": 500, "is_new": false, "icon_format": null, "award_sub_type": "GLOBAL", "resized_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/gold_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/gold_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/gold_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/gold_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/gold_128.png", "width": 128, "height": 128}], "icon_height": 512, "award_type": "global", "start_date": null, "days_of_drip_extension": 0, "id": "gid_2", "icon_width": 512, "subreddit_coin_reward": 0, "name": "Gold"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2ugo7", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2o7vu", "is_robot_indexable": true, "report_reasons": null, "author": "TeXitoi", "discussion_type": null, "num_comments": 59, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/MechanicalKeyboards/comments/f2o7vu/a_handwired_unsplitted_ergo_keyboard_with_a/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://raw.githubusercontent.com/TeXitoi/keyberon-f4/master/images/keyberon-56.jpg", "subreddit_subscribers": 509250, "created_utc": 1581496547.0, "num_crossposts": 3, "media": null, "is_video": false}], "created": 1581525724.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "raw.githubusercontent.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"count": 1, "is_enabled": true, "subreddit_id": null, "description": "To pay respects.", "end_date": null, "coin_reward": 0, "icon_url": "https://i.redd.it/award_images/t5_22cerq/tcofsbf92md41_PressF.png", "days_of_premium": 0, "coin_price": 150, "is_new": false, "icon_format": null, "award_sub_type": "GLOBAL", "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/tcofsbf92md41_PressF.png?width=16&amp;height=16&amp;auto=webp&amp;s=3481c2a89c2ebe653aae1b8d627c20c10abfc79e", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/tcofsbf92md41_PressF.png?width=32&amp;height=32&amp;auto=webp&amp;s=2bd2b8a9417e7cc18752927c11f98b242c133f2f", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/tcofsbf92md41_PressF.png?width=48&amp;height=48&amp;auto=webp&amp;s=a34e3d83c5dd9f6c731b1375500e4de8d4fee652", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/tcofsbf92md41_PressF.png?width=64&amp;height=64&amp;auto=webp&amp;s=6525899b9a01d5b0c4deea6c34cd8436ee1ff0c7", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/tcofsbf92md41_PressF.png?width=128&amp;height=128&amp;auto=webp&amp;s=c9e094023649693de991fff551a0c9561d11163a", "width": 128, "height": 128}], "icon_height": 2048, "award_type": "global", "start_date": null, "days_of_drip_extension": 0, "id": "award_88fdcafc-57a0-48db-99cc-76276bfaf28b", "icon_width": 2048, "subreddit_coin_reward": 0, "name": "Press F"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2o9y8", "is_robot_indexable": true, "report_reasons": null, "author": "TeXitoi", "discussion_type": null, "num_comments": 39, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "crosspost_parent": "t3_f2o7vu", "author_flair_text_color": null, "permalink": "/r/rust/comments/f2o9y8/a_handwired_unsplitted_ergo_keyboard_with_a/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://raw.githubusercontent.com/TeXitoi/keyberon-f4/master/images/keyberon-56.jpg", "subreddit_subscribers": 90581, "created_utc": 1581496924.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "hi,\n\n&amp;#x200B;\n\nis there any way to use reqwest without async, i cant simply figure out how this thing works at all.", "author_fullname": "t2_13a6s2fb", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "how to use reqwest without async?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": true, "name": "t3_f39ueb", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581628693.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;hi,&lt;/p&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;is there any way to use reqwest without async, i cant simply figure out how this thing works at all.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f39ueb", "is_robot_indexable": true, "report_reasons": null, "author": "a45ed6cs7s", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f39ueb/how_to_use_reqwest_without_async/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f39ueb/how_to_use_reqwest_without_async/", "subreddit_subscribers": 90581, "created_utc": 1581599893.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "Hey Rustaceans \ud83d\udc4b,\n\nI'd like to share and get feedback on a small crate called hotpot-db! It is essentially an API around SQLite's JSON extension, which allows you to store data in a NoSQL dare I say, DynamoDB like way. \n\nAny struct that can be Serialized to JSON can be stored and efficiently queried. \n\n## Flavor Palette\n\n1. schemaless\n2. reliable (uses SQLite3)\n3. embeddable\n4. fast (&lt;200ms to search through +500K objects)\n5. JSON store\n6. queryable JSON schemas \n\n## Full Example\n```rust\nuse hotpot_db::*;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Debug, Serialize, Deserialize)]\nstruct Person {\n    name: String,\n    age: u8,\n}\n\nfn main() -&gt; Result&lt;(), hotpot_db::Error&gt; {\n    let mut pot = HotPot::new();\n\n    // lets make a new collection\n    pot.create_collection(\"address_book\")?;\n\n    // well make a new item we want to store\n    let person = Person {\n        name: String::from(\"david holtz\"),\n        age: 26,\n    };\n\n    // we insert the object into the collection!\n    pot.insert::&lt;Person&gt;(\"address_book\", &amp;person)?;\n\n    // finally we can query\n    let query = QueryBuilder::new()\n        .collection(\"address_book\")\n        .kind(QueryKind::Object)\n        .key(\"name\")\n        .comparison(\"=\")\n        .string(\"david holtz\")\n        .finish();\n\n    let results = pot.execute(query);\n    println!(\"{:#?}\", results);\n\n    Ok(())\n}\n```\n\n[https://github.com/drbh/hotpot-db](https://github.com/drbh/hotpot-db)\n\nThis was my first attempt at using the Builder pattern (for queries) and generics (for insert). hotpot-db has already been super helpful for me in the development process where my DB schema is in flux. hotpot-db lets me deal with schemas later and still have solid query performance.\n\n\nAny feedback on the project/code and idea is greatly appreciated! \ud83d\ude0a", "author_fullname": "t2_pa9t7e4", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "GitHub - drbh/hotpot-db: \ud83c\udf36 hottest way to store data on the web. If you like JSON, and dealing with things later.", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f2vbji", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 61, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 61, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1581531194.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581559685.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey Rustaceans \ud83d\udc4b,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;d like to share and get feedback on a small crate called hotpot-db! It is essentially an API around SQLite&amp;#39;s JSON extension, which allows you to store data in a NoSQL dare I say, DynamoDB like way. &lt;/p&gt;\n\n&lt;p&gt;Any struct that can be Serialized to JSON can be stored and efficiently queried. &lt;/p&gt;\n\n&lt;h2&gt;Flavor Palette&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;schemaless&lt;/li&gt;\n&lt;li&gt;reliable (uses SQLite3)&lt;/li&gt;\n&lt;li&gt;embeddable&lt;/li&gt;\n&lt;li&gt;fast (&amp;lt;200ms to search through +500K objects)&lt;/li&gt;\n&lt;li&gt;JSON store&lt;/li&gt;\n&lt;li&gt;queryable JSON schemas &lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Full Example&lt;/h2&gt;\n\n&lt;p&gt;```rust\nuse hotpot_db::*;\nuse serde::{Deserialize, Serialize};&lt;/p&gt;\n\n&lt;h1&gt;[derive(Debug, Serialize, Deserialize)]&lt;/h1&gt;\n\n&lt;p&gt;struct Person {\n    name: String,\n    age: u8,\n}&lt;/p&gt;\n\n&lt;p&gt;fn main() -&amp;gt; Result&amp;lt;(), hotpot_db::Error&amp;gt; {\n    let mut pot = HotPot::new();&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;// lets make a new collection\npot.create_collection(&amp;quot;address_book&amp;quot;)?;\n\n// well make a new item we want to store\nlet person = Person {\n    name: String::from(&amp;quot;david holtz&amp;quot;),\n    age: 26,\n};\n\n// we insert the object into the collection!\npot.insert::&amp;lt;Person&amp;gt;(&amp;quot;address_book&amp;quot;, &amp;amp;person)?;\n\n// finally we can query\nlet query = QueryBuilder::new()\n    .collection(&amp;quot;address_book&amp;quot;)\n    .kind(QueryKind::Object)\n    .key(&amp;quot;name&amp;quot;)\n    .comparison(&amp;quot;=&amp;quot;)\n    .string(&amp;quot;david holtz&amp;quot;)\n    .finish();\n\nlet results = pot.execute(query);\nprintln!(&amp;quot;{:#?}&amp;quot;, results);\n\nOk(())\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;}\n```&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/drbh/hotpot-db\"&gt;https://github.com/drbh/hotpot-db&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;This was my first attempt at using the Builder pattern (for queries) and generics (for insert). hotpot-db has already been super helpful for me in the development process where my DB schema is in flux. hotpot-db lets me deal with schemas later and still have solid query performance.&lt;/p&gt;\n\n&lt;p&gt;Any feedback on the project/code and idea is greatly appreciated! \ud83d\ude0a&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2vbji", "is_robot_indexable": true, "report_reasons": null, "author": "drbh_", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f2vbji/github_drbhhotpotdb_hottest_way_to_store_data_on/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f2vbji/github_drbhhotpotdb_hottest_way_to_store_data_on/", "subreddit_subscribers": 90581, "created_utc": 1581530885.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "I\u2019m considering Rust for a new project, which requires processing media streams for a wide array of formats. My alternative is C or C++, using FFmpeg. \n\nIs there an effective/up to date Rust binding for FFmpeg or other crate that people are using for this purpose? Would be great to get a quick overview of the Rust media ecosystem for a Rust noob.", "author_fullname": "t2_3gm6jf9l", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Media Processing", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f37ymd", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 2, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581617957.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I\u2019m considering Rust for a new project, which requires processing media streams for a wide array of formats. My alternative is C or C++, using FFmpeg. &lt;/p&gt;\n\n&lt;p&gt;Is there an effective/up to date Rust binding for FFmpeg or other crate that people are using for this purpose? Would be great to get a quick overview of the Rust media ecosystem for a Rust noob.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f37ymd", "is_robot_indexable": true, "report_reasons": null, "author": "Mihikle", "discussion_type": null, "num_comments": 2, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f37ymd/media_processing/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f37ymd/media_processing/", "subreddit_subscribers": 90581, "created_utc": 1581589157.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "rust", "selftext": "The Rust [mimalloc wrapper](https://github.com/purpleprotocol/mimalloc_rust) crate has just had a new version released!\n\n### Changes\n\n* Updated [mimalloc source](https://github.com/microsoft/mimalloc) to version 1.6.0.\n\n* Removes [libc](https://crates.io/crates/libc) from dependencies, adding support for targets targets which do not depend on it such as wasm.", "author_fullname": "t2_xyb6qz", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Mimalloc Rust version 0.1.14 has just been released!", "link_flair_richtext": [], "subreddit_name_prefixed": "r/rust", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "hide_score": false, "name": "t3_f2vb4z", "quarantine": false, "link_flair_text_color": "dark", "author_flair_background_color": null, "subreddit_type": "public", "ups": 38, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 38, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1581559642.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.rust", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;The Rust &lt;a href=\"https://github.com/purpleprotocol/mimalloc_rust\"&gt;mimalloc wrapper&lt;/a&gt; crate has just had a new version released!&lt;/p&gt;\n\n&lt;h3&gt;Changes&lt;/h3&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;p&gt;Updated &lt;a href=\"https://github.com/microsoft/mimalloc\"&gt;mimalloc source&lt;/a&gt; to version 1.6.0.&lt;/p&gt;&lt;/li&gt;\n&lt;li&gt;&lt;p&gt;Removes &lt;a href=\"https://crates.io/crates/libc\"&gt;libc&lt;/a&gt; from dependencies, adding support for targets targets which do not depend on it such as wasm.&lt;/p&gt;&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2s7lj", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "f2vb4z", "is_robot_indexable": true, "report_reasons": null, "author": "octavonce", "discussion_type": null, "num_comments": 6, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/rust/comments/f2vb4z/mimalloc_rust_version_0114_has_just_been_released/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/rust/comments/f2vb4z/mimalloc_rust_version_0114_has_just_been_released/", "subreddit_subscribers": 90581, "created_utc": 1581530842.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_f2vb4z", "before": null}}