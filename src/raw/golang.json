{"kind": "Listing", "data": {"modhash": "", "dist": 11, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_57uz3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Announcing the 2020 Go Developer Survey", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jeuosg", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 191, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 191, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603245041.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "blog.golang.org", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://blog.golang.org/survey2020", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jeuosg", "is_robot_indexable": true, "report_reasons": null, "author": "spf13", "discussion_type": null, "num_comments": 12, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jeuosg/announcing_the_2020_go_developer_survey/", "parent_whitelist_status": "all_ads", "stickied": true, "url": "https://blog.golang.org/survey2020", "subreddit_subscribers": 128608, "created_utc": 1603216241.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_12hsl", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "imgcat - a tool to output images as RGB ANSI graphics on the terminal", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jhms24", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.95, "author_flair_background_color": null, "subreddit_type": "public", "ups": 71, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 71, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603626087.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/trashhalo/imgcat", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jhms24", "is_robot_indexable": true, "report_reasons": null, "author": "muesli", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jhms24/imgcat_a_tool_to_output_images_as_rgb_ansi/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/trashhalo/imgcat", "subreddit_subscribers": 128608, "created_utc": 1603597287.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I am building very simple UI app to run on Raspberry Pi Zero.  The UI showcases static infographics operable(zoom, scroll) through IR remote.\n\nWhich Golang UI library will you recommend?\n\n* [Fyne](https://fyne.io/) 11k\n* [Qt](https://therecipe.github.io/qt/) 7.9k\n* [webview](https://github.com/webview/webview) 7k\n* [Gio](https://gioui.org/) \n* [Lorca](https://github.com/zserge/lorca) 5.9k\n* [go-astilectron](https://github.com/asticode/go-astilectron) 3.5k\n* [wails](https://github.com/wailsapp/wails) 2.6k\n* [gotk3](https://github.com/gotk3/gotk3) 1.3k", "author_fullname": "t2_771ccpos", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Lightweight UI library recommendation", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jhr4ft", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603649662.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am building very simple UI app to run on Raspberry Pi Zero.  The UI showcases static infographics operable(zoom, scroll) through IR remote.&lt;/p&gt;\n\n&lt;p&gt;Which Golang UI library will you recommend?&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://fyne.io/\"&gt;Fyne&lt;/a&gt; 11k&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://therecipe.github.io/qt/\"&gt;Qt&lt;/a&gt; 7.9k&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/webview/webview\"&gt;webview&lt;/a&gt; 7k&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://gioui.org/\"&gt;Gio&lt;/a&gt; &lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/zserge/lorca\"&gt;Lorca&lt;/a&gt; 5.9k&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/asticode/go-astilectron\"&gt;go-astilectron&lt;/a&gt; 3.5k&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/wailsapp/wails\"&gt;wails&lt;/a&gt; 2.6k&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gotk3/gotk3\"&gt;gotk3&lt;/a&gt; 1.3k&lt;/li&gt;\n&lt;/ul&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jhr4ft", "is_robot_indexable": true, "report_reasons": null, "author": "the-nil", "discussion_type": null, "num_comments": 5, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jhr4ft/lightweight_ui_library_recommendation/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jhr4ft/lightweight_ui_library_recommendation/", "subreddit_subscribers": 128608, "created_utc": 1603620862.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Godoc: [https://godoc.org/github.com/autom8ter/dagger](https://godoc.org/github.com/autom8ter/dagger)\n\nGithub: [https://github.com/autom8ter/dagger](https://github.com/autom8ter/dagger)\n\n    import \"github.com/autom8ter/dagger\"\n\n&amp;#x200B;\n\n[Directed Graph](https://preview.redd.it/4fle7kx835v51.png?width=128&amp;format=png&amp;auto=webp&amp;s=cc83217afbfab3f805c259f4c4a6dc2d8ef1cd0b)\n\n[What is a directed Graph?](https://en.wikipedia.org/wiki/Directed_graph)\n\n## Design:\n\n* flexibility\n* global state\n   * see [primitive](https://godoc.org/github.com/autom8ter/dagger/primitive) to manage graph state manually\n* concurrency safe\n* high performance\n* simple api\n\n## Features\n\n* \\[x\\] native graph objects(nodes/edges)\n* \\[x\\] typed graph objects(ex: user/pet)\n* \\[x\\] labelled nodes &amp; edges\n* \\[x\\] depth first search\n* \\[x\\] breadth first search\n* \\[x\\] concurrency safe\n* \\[ \\] import graph from JSON blob\n* \\[ \\] export graph to JSON blob\n\n## Example\n\n       coleman = dagger.NewNode(\"user\", fmt.Sprintf(\"cword_%v\", time.Now().UnixNano()), map[string]interface{}{\n       \t\t\"name\": \"coleman\",\n       \t})\n       \ttyler = dagger.NewNode(\"user\", fmt.Sprintf(\"twash_%v\", time.Now().UnixNano()), map[string]interface{}{\n       \t\t\"name\": \"tyler\",\n       \t})\n       \tsarah = dagger.NewNode(\"user\", fmt.Sprintf(\"swash_%v\", time.Now().UnixNano()), map[string]interface{}{\n       \t\t\"name\": \"sarah\",\n       \t})\n       \tlacee = dagger.NewNode(\"user\", fmt.Sprintf(\"ljans_%v\", time.Now().UnixNano()), map[string]interface{}{\n       \t\t\"name\": \"lacee\",\n       \t})\n       \t// random id will be generated if one isn't provided\n       \tcharlie = dagger.NewNode(\"dog\", \"\", map[string]interface{}{\n       \t\t\"name\":   \"charlie\",\n       \t\t\"weight\": 25,\n       \t})\n       \n       \tif err := coleman.Connect(tyler, \"friend\", true); err != nil {\n       \t\texitErr(err)\n       \t}\n       \tif err := sarah.Connect(lacee, \"friend\", true); err != nil {\n       \t\texitErr(err)\n       \t}\n       \tif err := coleman.Connect(lacee, \"fiance\", true); err != nil {\n       \t\texitErr(err)\n       \t}\n       \tif err := tyler.Connect(sarah, \"wife\", true); err != nil {\n       \t\texitErr(err)\n       \t}\n       \tif err := coleman.Connect(charlie, \"pet\", false); err != nil {\n       \t\texitErr(err)\n       \t}\n       \tif err := lacee.Connect(charlie, \"pet\", false); err != nil {\n       \t\texitErr(err)\n       \t}\n       \tif err := charlie.Connect(lacee, \"owner\", false); err != nil {\n       \t\texitErr(err)\n       \t}\n       \tif err := charlie.Connect(coleman, \"owner\", false); err != nil {\n       \t\texitErr(err)\n       \t}\n       \tcharlie.Patch(map[string]interface{}{\n       \t\t\"weight\": 19,\n       \t})\n       \tif charlie.GetInt(\"weight\") != 19 {\n       \t\texit(\"expected charlie's weight to be 19!\")\n       \t}\n       \t// check to make sure edge is patched\n       \tcoleman.EdgesFrom(func(e *dagger.Edge) bool {\n       \t\tif e.Type() == \"pet\" &amp;&amp; e.GetString(\"name\") == \"charlie\" {\n       \t\t\tif e.To().GetInt(\"weight\") != 19 {\n       \t\t\t\texit(\"failed to patch charlie's weight\")\n       \t\t\t}\n       \t\t}\n       \t\treturn true\n       \t})\n       \tif coleman.GetString(\"name\") != \"coleman\" {\n       \t\texit(\"expected name to be coleman\")\n       \t}\n       \t// remove from graph\n       \tcharlie.Remove()\n       \t// no longer in graph\n       \tif dagger.HasNode(charlie) {\n       \t\texit(\"failed to delete node - (charlie)\")\n       \t}\n       \t// check to make sure edge no longer exists(cascade)\n       \tcoleman.EdgesFrom(func(e *dagger.Edge) bool {\n       \t\tif e.Type() == \"pet\" &amp;&amp; e.GetString(\"name\") == \"charlie\" {\n       \t\t\texit(\"failed to delete node - (charlie)\")\n       \t\t}\n       \t\treturn true\n       \t})\n       \t// check to make sure edge no longer exists(cascade)\n       \tlacee.EdgesFrom(func(e *dagger.Edge) bool {\n       \t\tif e.Type() == \"pet\" &amp;&amp; e.GetString(\"name\") == \"charlie\" {\n       \t\t\texit(\"failed to delete node - (charlie)\")\n       \t\t}\n       \t\treturn true\n       \t})\n       \tfmt.Printf(\"registered node types = %v\", dagger.NodeTypes())\n       \tfmt.Printf(\"registered edge types = %v\", dagger.EdgeTypes())\n       \tdagger.RangeNodes(func(n *dagger.Node) bool {\n       \t\tbits, err := n.JSON()\n       \t\tif err != nil {\n       \t\t\texitErr(err)\n       \t\t}\n       \t\tfmt.Printf(\"\\nfound node = %v\\n\", string(bits))\n       \t\tn.EdgesFrom(func(e *dagger.Edge) bool {\n       \t\t\tbits, err := e.JSON()\n       \t\t\tif err != nil {\n       \t\t\t\texitErr(err)\n       \t\t\t}\n       \t\t\tfmt.Println(string(bits))\n       \t\t\treturn true\n       \t\t})\n       \t\tn.EdgesTo(func(e *dagger.Edge) bool {\n       \t\t\tbits, err := e.JSON()\n       \t\t\tif err != nil {\n       \t\t\t\texitErr(err)\n       \t\t\t}\n       \t\t\tfmt.Println(string(bits))\n       \t\t\treturn true\n       \t\t})\n       \t\treturn true\n       \t}", "author_fullname": "t2_1fdwxo4n", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Dagger - A zero dependency, concurrency safe, in-memory directed graph database", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "media_metadata": {"4fle7kx835v51": {"status": "valid", "e": "Image", "m": "image/png", "p": [{"y": 97, "x": 108, "u": "https://preview.redd.it/4fle7kx835v51.png?width=108&amp;crop=smart&amp;auto=webp&amp;s=4f5d846ba4bc613770324342c84b960412d77419"}], "s": {"y": 115, "x": 128, "u": "https://preview.redd.it/4fle7kx835v51.png?width=128&amp;format=png&amp;auto=webp&amp;s=cc83217afbfab3f805c259f4c4a6dc2d8ef1cd0b"}, "id": "4fle7kx835v51"}}, "name": "t3_jhk1ti", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.91, "author_flair_background_color": null, "subreddit_type": "public", "ups": 26, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 26, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": 1603589195.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603614540.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Godoc: &lt;a href=\"https://godoc.org/github.com/autom8ter/dagger\"&gt;https://godoc.org/github.com/autom8ter/dagger&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Github: &lt;a href=\"https://github.com/autom8ter/dagger\"&gt;https://github.com/autom8ter/dagger&lt;/a&gt;&lt;/p&gt;\n\n&lt;pre&gt;&lt;code&gt;import &amp;quot;github.com/autom8ter/dagger&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&amp;#x200B;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://preview.redd.it/4fle7kx835v51.png?width=128&amp;amp;format=png&amp;amp;auto=webp&amp;amp;s=cc83217afbfab3f805c259f4c4a6dc2d8ef1cd0b\"&gt;Directed Graph&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://en.wikipedia.org/wiki/Directed_graph\"&gt;What is a directed Graph?&lt;/a&gt;&lt;/p&gt;\n\n&lt;h2&gt;Design:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;flexibility&lt;/li&gt;\n&lt;li&gt;global state\n\n&lt;ul&gt;\n&lt;li&gt;see &lt;a href=\"https://godoc.org/github.com/autom8ter/dagger/primitive\"&gt;primitive&lt;/a&gt; to manage graph state manually&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;concurrency safe&lt;/li&gt;\n&lt;li&gt;high performance&lt;/li&gt;\n&lt;li&gt;simple api&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Features&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;[x] native graph objects(nodes/edges)&lt;/li&gt;\n&lt;li&gt;[x] typed graph objects(ex: user/pet)&lt;/li&gt;\n&lt;li&gt;[x] labelled nodes &amp;amp; edges&lt;/li&gt;\n&lt;li&gt;[x] depth first search&lt;/li&gt;\n&lt;li&gt;[x] breadth first search&lt;/li&gt;\n&lt;li&gt;[x] concurrency safe&lt;/li&gt;\n&lt;li&gt;[ ] import graph from JSON blob&lt;/li&gt;\n&lt;li&gt;[ ] export graph to JSON blob&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example&lt;/h2&gt;\n\n&lt;pre&gt;&lt;code&gt;   coleman = dagger.NewNode(&amp;quot;user&amp;quot;, fmt.Sprintf(&amp;quot;cword_%v&amp;quot;, time.Now().UnixNano()), map[string]interface{}{\n        &amp;quot;name&amp;quot;: &amp;quot;coleman&amp;quot;,\n    })\n    tyler = dagger.NewNode(&amp;quot;user&amp;quot;, fmt.Sprintf(&amp;quot;twash_%v&amp;quot;, time.Now().UnixNano()), map[string]interface{}{\n        &amp;quot;name&amp;quot;: &amp;quot;tyler&amp;quot;,\n    })\n    sarah = dagger.NewNode(&amp;quot;user&amp;quot;, fmt.Sprintf(&amp;quot;swash_%v&amp;quot;, time.Now().UnixNano()), map[string]interface{}{\n        &amp;quot;name&amp;quot;: &amp;quot;sarah&amp;quot;,\n    })\n    lacee = dagger.NewNode(&amp;quot;user&amp;quot;, fmt.Sprintf(&amp;quot;ljans_%v&amp;quot;, time.Now().UnixNano()), map[string]interface{}{\n        &amp;quot;name&amp;quot;: &amp;quot;lacee&amp;quot;,\n    })\n    // random id will be generated if one isn&amp;#39;t provided\n    charlie = dagger.NewNode(&amp;quot;dog&amp;quot;, &amp;quot;&amp;quot;, map[string]interface{}{\n        &amp;quot;name&amp;quot;:   &amp;quot;charlie&amp;quot;,\n        &amp;quot;weight&amp;quot;: 25,\n    })\n\n    if err := coleman.Connect(tyler, &amp;quot;friend&amp;quot;, true); err != nil {\n        exitErr(err)\n    }\n    if err := sarah.Connect(lacee, &amp;quot;friend&amp;quot;, true); err != nil {\n        exitErr(err)\n    }\n    if err := coleman.Connect(lacee, &amp;quot;fiance&amp;quot;, true); err != nil {\n        exitErr(err)\n    }\n    if err := tyler.Connect(sarah, &amp;quot;wife&amp;quot;, true); err != nil {\n        exitErr(err)\n    }\n    if err := coleman.Connect(charlie, &amp;quot;pet&amp;quot;, false); err != nil {\n        exitErr(err)\n    }\n    if err := lacee.Connect(charlie, &amp;quot;pet&amp;quot;, false); err != nil {\n        exitErr(err)\n    }\n    if err := charlie.Connect(lacee, &amp;quot;owner&amp;quot;, false); err != nil {\n        exitErr(err)\n    }\n    if err := charlie.Connect(coleman, &amp;quot;owner&amp;quot;, false); err != nil {\n        exitErr(err)\n    }\n    charlie.Patch(map[string]interface{}{\n        &amp;quot;weight&amp;quot;: 19,\n    })\n    if charlie.GetInt(&amp;quot;weight&amp;quot;) != 19 {\n        exit(&amp;quot;expected charlie&amp;#39;s weight to be 19!&amp;quot;)\n    }\n    // check to make sure edge is patched\n    coleman.EdgesFrom(func(e *dagger.Edge) bool {\n        if e.Type() == &amp;quot;pet&amp;quot; &amp;amp;&amp;amp; e.GetString(&amp;quot;name&amp;quot;) == &amp;quot;charlie&amp;quot; {\n            if e.To().GetInt(&amp;quot;weight&amp;quot;) != 19 {\n                exit(&amp;quot;failed to patch charlie&amp;#39;s weight&amp;quot;)\n            }\n        }\n        return true\n    })\n    if coleman.GetString(&amp;quot;name&amp;quot;) != &amp;quot;coleman&amp;quot; {\n        exit(&amp;quot;expected name to be coleman&amp;quot;)\n    }\n    // remove from graph\n    charlie.Remove()\n    // no longer in graph\n    if dagger.HasNode(charlie) {\n        exit(&amp;quot;failed to delete node - (charlie)&amp;quot;)\n    }\n    // check to make sure edge no longer exists(cascade)\n    coleman.EdgesFrom(func(e *dagger.Edge) bool {\n        if e.Type() == &amp;quot;pet&amp;quot; &amp;amp;&amp;amp; e.GetString(&amp;quot;name&amp;quot;) == &amp;quot;charlie&amp;quot; {\n            exit(&amp;quot;failed to delete node - (charlie)&amp;quot;)\n        }\n        return true\n    })\n    // check to make sure edge no longer exists(cascade)\n    lacee.EdgesFrom(func(e *dagger.Edge) bool {\n        if e.Type() == &amp;quot;pet&amp;quot; &amp;amp;&amp;amp; e.GetString(&amp;quot;name&amp;quot;) == &amp;quot;charlie&amp;quot; {\n            exit(&amp;quot;failed to delete node - (charlie)&amp;quot;)\n        }\n        return true\n    })\n    fmt.Printf(&amp;quot;registered node types = %v&amp;quot;, dagger.NodeTypes())\n    fmt.Printf(&amp;quot;registered edge types = %v&amp;quot;, dagger.EdgeTypes())\n    dagger.RangeNodes(func(n *dagger.Node) bool {\n        bits, err := n.JSON()\n        if err != nil {\n            exitErr(err)\n        }\n        fmt.Printf(&amp;quot;\\nfound node = %v\\n&amp;quot;, string(bits))\n        n.EdgesFrom(func(e *dagger.Edge) bool {\n            bits, err := e.JSON()\n            if err != nil {\n                exitErr(err)\n            }\n            fmt.Println(string(bits))\n            return true\n        })\n        n.EdgesTo(func(e *dagger.Edge) bool {\n            bits, err := e.JSON()\n            if err != nil {\n                exitErr(err)\n            }\n            fmt.Println(string(bits))\n            return true\n        })\n        return true\n    }\n&lt;/code&gt;&lt;/pre&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": 0, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 1000, "id": "award_35c78e6e-507b-4f1d-b3d8-ed43840909a8", "penny_donate": 0, "award_sub_type": "GLOBAL", "coin_reward": 800, "icon_url": "https://i.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=16&amp;height=16&amp;auto=webp&amp;s=b526df7459c0ef19b3ce55c151630ddb0a05aec2", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=32&amp;height=32&amp;auto=webp&amp;s=0c72d02304e16f4dd21e2c5aaf3ae61c3722b55b", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=48&amp;height=48&amp;auto=webp&amp;s=f8c095e695a7aed5181912f5485c822d16c6fe69", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=64&amp;height=64&amp;auto=webp&amp;s=2f7cdb5c16a5641797137e4fba0825d4e34b78cb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=128&amp;height=128&amp;auto=webp&amp;s=3c4d7aa4f4987e610f27556d43e2d011c9a4d5b0", "width": 128, "height": 128}], "icon_width": 2048, "static_icon_width": 2048, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "The treasure at the end of the rainbow. Gives the author 800 Coins to do with as they please.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 2048, "name": "Pot o' Coins", "resized_static_icons": [{"url": "https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=16&amp;height=16&amp;auto=webp&amp;s=b526df7459c0ef19b3ce55c151630ddb0a05aec2", "width": 16, "height": 16}, {"url": "https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=32&amp;height=32&amp;auto=webp&amp;s=0c72d02304e16f4dd21e2c5aaf3ae61c3722b55b", "width": 32, "height": 32}, {"url": "https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=48&amp;height=48&amp;auto=webp&amp;s=f8c095e695a7aed5181912f5485c822d16c6fe69", "width": 48, "height": 48}, {"url": "https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=64&amp;height=64&amp;auto=webp&amp;s=2f7cdb5c16a5641797137e4fba0825d4e34b78cb", "width": 64, "height": 64}, {"url": "https://preview.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png?width=128&amp;height=128&amp;auto=webp&amp;s=3c4d7aa4f4987e610f27556d43e2d011c9a4d5b0", "width": 128, "height": 128}], "icon_format": "PNG", "icon_height": 2048, "penny_price": 0, "award_type": "global", "static_icon_url": "https://i.redd.it/award_images/t5_22cerq/wg3lzllyg9n41_PotoCoins.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jhk1ti", "is_robot_indexable": true, "report_reasons": null, "author": "303cloudnative", "discussion_type": null, "num_comments": 9, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jhk1ti/dagger_a_zero_dependency_concurrency_safe/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jhk1ti/dagger_a_zero_dependency_concurrency_safe/", "subreddit_subscribers": 128608, "created_utc": 1603585740.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Would anyone be willing to help me test out a Go Proxy? I built it using Cloudflare Workers so it should be fast. The domain also uses Argo, which should help with cache hits. \n\nhttps://goproxy.dev/\n\nhttps://workers.cloudflare.com/\n\nhttps://www.cloudflare.com/network/\n\nThanks!", "author_fullname": "t2_bjh9u", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Go Proxy built with Cloudflare Workers", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jhixs6", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 25, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 25, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603610250.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": true, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Would anyone be willing to help me test out a Go Proxy? I built it using Cloudflare Workers so it should be fast. The domain also uses Argo, which should help with cache hits. &lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://goproxy.dev/\"&gt;https://goproxy.dev/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://workers.cloudflare.com/\"&gt;https://workers.cloudflare.com/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://www.cloudflare.com/network/\"&gt;https://www.cloudflare.com/network/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Thanks!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jhixs6", "is_robot_indexable": true, "report_reasons": null, "author": "levidurfee", "discussion_type": null, "num_comments": 13, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jhixs6/go_proxy_built_with_cloudflare_workers/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jhixs6/go_proxy_built_with_cloudflare_workers/", "subreddit_subscribers": 128608, "created_utc": 1603581450.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "There currently is an open discussion on browser compatibility for Go-based WASM that I believe could use a wider audience: [https://github.com/golang/go/issues/28360](https://github.com/golang/go/issues/28360). It could have a big impact on the usefulness of Go for targeting the future web (such as supporting the Safari web browser, or not). So please feel free to write down your thoughts and ideas!", "author_fullname": "t2_niw8p", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Discussing the browser compatibility of WASM produced by the official Go compiler", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jhqltd", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 4, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603646643.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;There currently is an open discussion on browser compatibility for Go-based WASM that I believe could use a wider audience: &lt;a href=\"https://github.com/golang/go/issues/28360\"&gt;https://github.com/golang/go/issues/28360&lt;/a&gt;. It could have a big impact on the usefulness of Go for targeting the future web (such as supporting the Safari web browser, or not). So please feel free to write down your thoughts and ideas!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jhqltd", "is_robot_indexable": true, "report_reasons": null, "author": "advanderveer", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jhqltd/discussing_the_browser_compatibility_of_wasm/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jhqltd/discussing_the_browser_compatibility_of_wasm/", "subreddit_subscribers": 128608, "created_utc": 1603617843.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_7vu8p2ba", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Wide Go Snippets Extension for VS Code \ud83d\ude0b based vim-go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jhl7ot", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 8, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603619325.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "marketplace.visualstudio.com", "allow_live_comments": true, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://marketplace.visualstudio.com/items?itemName=umutbasal.go-snippets-vscode", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jhl7ot", "is_robot_indexable": true, "report_reasons": null, "author": "_luci4_", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jhl7ot/wide_go_snippets_extension_for_vs_code_based_vimgo/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://marketplace.visualstudio.com/items?itemName=umutbasal.go-snippets-vscode", "subreddit_subscribers": 128608, "created_utc": 1603590525.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_594u5w88", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "taskflow - Create your build pipeline in Go", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": true, "name": "t3_jhsksy", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603657799.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/pellared/taskflow", "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jhsksy", "is_robot_indexable": true, "report_reasons": null, "author": "pellared", "discussion_type": null, "num_comments": 1, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jhsksy/taskflow_create_your_build_pipeline_in_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/pellared/taskflow", "subreddit_subscribers": 128608, "created_utc": 1603628999.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "Hey,\n\nI started working on a persistent key-value store named [keyver](https://github.com/j0holo/keyver). Just as a hobby project.\n\nCurrently I'm working on implementing a b-tree for indexing, but I have trouble implementing it. [As you can see in the code](https://github.com/j0holo/keyver/blob/master/cmd/server/b_tree.go) I tried to be clever (too clever?) by creating an interface which is implemented by nodes that contains the pointers and the nodes that hold the actual values.\n\nHow [Wikipedia](https://en.wikipedia.org/wiki/B-tree#Performance) describes the implementation is somewhat clear but at the same time I don't understand how I can \"easily\" translate this to code.\n\nbtw, I know about [https://github.com/google/btree](https://github.com/google/btree) but they use a lot of reflection, I only need to store strings for both the key and value.\n\nAm I being too clever? How should I approach this?", "author_fullname": "t2_hodrk", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Implementing a b-tree and being to clever", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jhrtjn", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 1, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603653740.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey,&lt;/p&gt;\n\n&lt;p&gt;I started working on a persistent key-value store named &lt;a href=\"https://github.com/j0holo/keyver\"&gt;keyver&lt;/a&gt;. Just as a hobby project.&lt;/p&gt;\n\n&lt;p&gt;Currently I&amp;#39;m working on implementing a b-tree for indexing, but I have trouble implementing it. &lt;a href=\"https://github.com/j0holo/keyver/blob/master/cmd/server/b_tree.go\"&gt;As you can see in the code&lt;/a&gt; I tried to be clever (too clever?) by creating an interface which is implemented by nodes that contains the pointers and the nodes that hold the actual values.&lt;/p&gt;\n\n&lt;p&gt;How &lt;a href=\"https://en.wikipedia.org/wiki/B-tree#Performance\"&gt;Wikipedia&lt;/a&gt; describes the implementation is somewhat clear but at the same time I don&amp;#39;t understand how I can &amp;quot;easily&amp;quot; translate this to code.&lt;/p&gt;\n\n&lt;p&gt;btw, I know about &lt;a href=\"https://github.com/google/btree\"&gt;https://github.com/google/btree&lt;/a&gt; but they use a lot of reflection, I only need to store strings for both the key and value.&lt;/p&gt;\n\n&lt;p&gt;Am I being too clever? How should I approach this?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jhrtjn", "is_robot_indexable": true, "report_reasons": null, "author": "j0holo", "discussion_type": null, "num_comments": 0, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jhrtjn/implementing_a_btree_and_being_to_clever/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jhrtjn/implementing_a_btree_and_being_to_clever/", "subreddit_subscribers": 128608, "created_utc": 1603624940.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "I\u2019ve finished my final college semester and I\u2019ve got some some spare time that I\u2019m looking to invest in learning Go\n\nWhat\u2019s the best resoucres or projects you found useful when developing your go knowledge ? \n\nAnything you wish you could\u2019ve told your yourself when you were learning ?", "author_fullname": "t2_5v092xic", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "What\u2019s the best way to learn Go?", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jhrska", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.44, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 0, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1603653590.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.golang", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I\u2019ve finished my final college semester and I\u2019ve got some some spare time that I\u2019m looking to invest in learning Go&lt;/p&gt;\n\n&lt;p&gt;What\u2019s the best resoucres or projects you found useful when developing your go knowledge ? &lt;/p&gt;\n\n&lt;p&gt;Anything you wish you could\u2019ve told your yourself when you were learning ?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jhrska", "is_robot_indexable": true, "report_reasons": null, "author": "2006maplestory", "discussion_type": null, "num_comments": 7, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jhrska/whats_the_best_way_to_learn_go/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://www.reddit.com/r/golang/comments/jhrska/whats_the_best_way_to_learn_go/", "subreddit_subscribers": 128608, "created_utc": 1603624790.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "golang", "selftext": "", "author_fullname": "t2_3cowx496", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "ion-sfu: simple, scalable webrtc sessions", "link_flair_richtext": [], "subreddit_name_prefixed": "r/golang", "hidden": false, "pwls": 6, "link_flair_css_class": null, "downs": 0, "top_awarded_type": null, "hide_score": false, "name": "t3_jh9d0s", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 49, "total_awards_received": 1, "media_embed": {}, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": null, "can_mod_post": false, "score": 49, "approved_by": null, "author_premium": false, "thumbnail": "", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {"gid_1": 1}, "content_categories": null, "is_self": false, "mod_note": null, "created": 1603576701.0, "link_flair_type": "text", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "github.com", "allow_live_comments": false, "selftext_html": null, "likes": null, "suggested_sort": null, "banned_at_utc": null, "url_overridden_by_dest": "https://github.com/pion/ion-sfu", "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": false, "pinned": false, "over_18": false, "all_awardings": [{"giver_coin_reward": null, "subreddit_id": null, "is_new": false, "days_of_drip_extension": 0, "coin_price": 100, "id": "gid_1", "penny_donate": null, "award_sub_type": "GLOBAL", "coin_reward": 0, "icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png", "days_of_premium": 0, "tiers_by_required_awardings": null, "resized_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_width": 512, "static_icon_width": 512, "start_date": null, "is_enabled": true, "awardings_required_to_grant_benefits": null, "description": "Shows the Silver Award... and that's it.", "end_date": null, "subreddit_coin_reward": 0, "count": 1, "static_icon_height": 512, "name": "Silver", "resized_static_icons": [{"url": "https://www.redditstatic.com/gold/awards/icon/silver_16.png", "width": 16, "height": 16}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_32.png", "width": 32, "height": 32}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_48.png", "width": 48, "height": 48}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_64.png", "width": 64, "height": 64}, {"url": "https://www.redditstatic.com/gold/awards/icon/silver_128.png", "width": 128, "height": 128}], "icon_format": null, "icon_height": 512, "penny_price": null, "award_type": "global", "static_icon_url": "https://www.redditstatic.com/gold/awards/icon/silver_512.png"}], "awarders": [], "media_only": false, "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2rc7j", "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "", "id": "jh9d0s", "is_robot_indexable": true, "report_reasons": null, "author": "tartartartartartart", "discussion_type": null, "num_comments": 3, "send_replies": true, "whitelist_status": "all_ads", "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/golang/comments/jh9d0s/ionsfu_simple_scalable_webrtc_sessions/", "parent_whitelist_status": "all_ads", "stickied": false, "url": "https://github.com/pion/ion-sfu", "subreddit_subscribers": 128608, "created_utc": 1603547901.0, "num_crossposts": 0, "media": null, "is_video": false}}], "after": "t3_jh9d0s", "before": null}}